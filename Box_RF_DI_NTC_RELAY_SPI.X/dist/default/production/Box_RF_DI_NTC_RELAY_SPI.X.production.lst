

Microchip MPLAB XC8 Assembler V2.32 build 20210201212658 
                                                                                               Thu Dec 09 14:11:08 2021

Microchip MPLAB XC8 C Compiler v2.32 (Free license) build 20210201212658 Og9 
     1                           	processor	16F76
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	idataCOMMON,global,class=CODE,delta=2,noexec
     5                           	psect	idataBANK3,global,class=CODE,delta=2,noexec
     6                           	psect	stringtext,global,reloc=256,class=STRCODE,delta=2,noexec
     7                           	psect	cinit,global,class=CODE,merge=1,delta=2
     8                           	psect	bitbssCOMMON,global,bit,class=COMMON,space=1,delta=1,noexec
     9                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1,noexec
    10                           	psect	dataCOMMON,global,class=COMMON,space=1,delta=1,noexec
    11                           	psect	bitbssBANK1,global,bit,class=BANK1,space=1,delta=1,noexec
    12                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,noexec
    13                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1,noexec
    14                           	psect	dataBANK3,global,class=BANK3,space=1,delta=1,noexec
    15                           	psect	inittext,global,class=CODE,delta=2
    16                           	psect	clrtext,global,class=CODE,delta=2
    17                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
    18                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
    19                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    20                           	psect	maintext,global,class=CODE,split=1,delta=2
    21                           	psect	text1,local,class=CODE,merge=1,delta=2
    22                           	psect	text2,local,class=CODE,merge=1,delta=2
    23                           	psect	text3,local,class=CODE,merge=1,delta=2,group=2
    24                           	psect	text4,local,class=CODE,merge=1,delta=2,group=2
    25                           	psect	text5,local,class=CODE,merge=1,delta=2,group=2
    26                           	psect	text6,local,class=CODE,merge=1,delta=2,group=3
    27                           	psect	text7,local,class=CODE,merge=1,delta=2,group=3
    28                           	psect	text8,local,class=CODE,merge=1,delta=2,group=3
    29                           	psect	text9,local,class=CODE,merge=1,delta=2,group=2
    30                           	psect	text10,local,class=CODE,merge=1,delta=2,group=2
    31                           	psect	text11,local,class=CODE,merge=1,delta=2,group=2
    32                           	psect	text12,local,class=CODE,merge=1,delta=2,group=2
    33                           	psect	text13,local,class=CODE,merge=1,delta=2,group=2
    34                           	psect	text14,local,class=CODE,merge=1,delta=2
    35                           	psect	text15,local,class=CODE,merge=1,delta=2
    36                           	psect	text16,local,class=CODE,merge=1,delta=2,group=3
    37                           	psect	text17,local,class=CODE,merge=1,delta=2,group=1
    38                           	psect	text18,local,class=CODE,merge=1,delta=2,group=3
    39                           	psect	text19,local,class=CODE,merge=1,delta=2,group=2
    40                           	psect	text20,local,class=CODE,merge=1,delta=2,group=2
    41                           	psect	text21,local,class=CODE,merge=1,delta=2,group=2
    42                           	psect	text22,local,class=CODE,merge=1,delta=2
    43                           	psect	text23,local,class=CODE,merge=1,delta=2,group=2
    44                           	psect	text24,local,class=CODE,merge=1,delta=2,group=2
    45                           	psect	text25,local,class=CODE,merge=1,delta=2,group=2
    46                           	psect	text26,local,class=CODE,merge=1,delta=2
    47                           	psect	text27,local,class=CODE,merge=1,delta=2
    48                           	psect	text28,local,class=CODE,merge=1,delta=2
    49                           	psect	text29,local,class=CODE,merge=1,delta=2
    50                           	psect	text30,local,class=CODE,merge=1,delta=2
    51                           	psect	text31,local,class=CODE,merge=1,delta=2
    52                           	psect	text32,local,class=CODE,merge=1,delta=2
    53                           	psect	text33,local,class=CODE,merge=1,delta=2
    54                           	psect	text34,local,class=CODE,merge=1,delta=2
    55                           	psect	text35,local,class=CODE,merge=1,delta=2
    56                           	psect	text36,local,class=CODE,merge=1,delta=2
    57                           	psect	text37,local,class=CODE,merge=1,delta=2
    58                           	psect	text38,local,class=CODE,merge=1,delta=2
    59                           	psect	text39,local,class=CODE,merge=1,delta=2
    60                           	psect	text40,local,class=CODE,merge=1,delta=2
    61                           	psect	text41,local,class=CODE,merge=1,delta=2
    62                           	psect	text42,local,class=CODE,merge=1,delta=2
    63                           	psect	intentry,global,class=CODE,delta=2
    64                           	psect	text43,local,class=CODE,merge=1,delta=2
    65                           	psect	text44,local,class=CODE,merge=1,delta=2
    66                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    67                           	psect	text15_split_1,local,class=CODE,merge=1,delta=2
    68                           	dabs	1,0x7E,2
    69  0000                     
    70                           ; Version 2.20
    71                           ; Generated 12/02/2020 GMT
    72                           ; 
    73                           ; Copyright Â© 2020, Microchip Technology Inc. and its subsidiaries ("Microchip")
    74                           ; All rights reserved.
    75                           ; 
    76                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    77                           ; 
    78                           ; Redistribution and use in source and binary forms, with or without modification, are
    79                           ; permitted provided that the following conditions are met:
    80                           ; 
    81                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    82                           ;        conditions and the following disclaimer.
    83                           ; 
    84                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    85                           ;        of conditions and the following disclaimer in the documentation and/or other
    86                           ;        materials provided with the distribution.
    87                           ; 
    88                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    89                           ;        software without specific prior written permission.
    90                           ; 
    91                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    92                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    93                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    94                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    95                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    96                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    97                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    98                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    99                           ; 
   100                           ; 
   101                           ; Code-generator required, PIC16F76 Definitions
   102                           ; 
   103                           ; SFR Addresses
   104  0000                     	;# 
   105  0001                     	;# 
   106  0002                     	;# 
   107  0003                     	;# 
   108  0004                     	;# 
   109  0005                     	;# 
   110  0006                     	;# 
   111  0007                     	;# 
   112  000A                     	;# 
   113  000B                     	;# 
   114  000C                     	;# 
   115  000D                     	;# 
   116  000E                     	;# 
   117  000E                     	;# 
   118  000F                     	;# 
   119  0010                     	;# 
   120  0011                     	;# 
   121  0012                     	;# 
   122  0013                     	;# 
   123  0014                     	;# 
   124  0015                     	;# 
   125  0015                     	;# 
   126  0016                     	;# 
   127  0017                     	;# 
   128  0018                     	;# 
   129  0019                     	;# 
   130  001A                     	;# 
   131  001B                     	;# 
   132  001B                     	;# 
   133  001C                     	;# 
   134  001D                     	;# 
   135  001E                     	;# 
   136  001F                     	;# 
   137  0081                     	;# 
   138  0085                     	;# 
   139  0086                     	;# 
   140  0087                     	;# 
   141  008C                     	;# 
   142  008D                     	;# 
   143  008E                     	;# 
   144  0092                     	;# 
   145  0093                     	;# 
   146  0094                     	;# 
   147  0098                     	;# 
   148  0099                     	;# 
   149  009F                     	;# 
   150  010C                     	;# 
   151  010D                     	;# 
   152  010E                     	;# 
   153  010F                     	;# 
   154  018C                     	;# 
   155  0000                     	;# 
   156  0001                     	;# 
   157  0002                     	;# 
   158  0003                     	;# 
   159  0004                     	;# 
   160  0005                     	;# 
   161  0006                     	;# 
   162  0007                     	;# 
   163  000A                     	;# 
   164  000B                     	;# 
   165  000C                     	;# 
   166  000D                     	;# 
   167  000E                     	;# 
   168  000E                     	;# 
   169  000F                     	;# 
   170  0010                     	;# 
   171  0011                     	;# 
   172  0012                     	;# 
   173  0013                     	;# 
   174  0014                     	;# 
   175  0015                     	;# 
   176  0015                     	;# 
   177  0016                     	;# 
   178  0017                     	;# 
   179  0018                     	;# 
   180  0019                     	;# 
   181  001A                     	;# 
   182  001B                     	;# 
   183  001B                     	;# 
   184  001C                     	;# 
   185  001D                     	;# 
   186  001E                     	;# 
   187  001F                     	;# 
   188  0081                     	;# 
   189  0085                     	;# 
   190  0086                     	;# 
   191  0087                     	;# 
   192  008C                     	;# 
   193  008D                     	;# 
   194  008E                     	;# 
   195  0092                     	;# 
   196  0093                     	;# 
   197  0094                     	;# 
   198  0098                     	;# 
   199  0099                     	;# 
   200  009F                     	;# 
   201  010C                     	;# 
   202  010D                     	;# 
   203  010E                     	;# 
   204  010F                     	;# 
   205  018C                     	;# 
   206  0000                     	;# 
   207  0001                     	;# 
   208  0002                     	;# 
   209  0003                     	;# 
   210  0004                     	;# 
   211  0005                     	;# 
   212  0006                     	;# 
   213  0007                     	;# 
   214  000A                     	;# 
   215  000B                     	;# 
   216  000C                     	;# 
   217  000D                     	;# 
   218  000E                     	;# 
   219  000E                     	;# 
   220  000F                     	;# 
   221  0010                     	;# 
   222  0011                     	;# 
   223  0012                     	;# 
   224  0013                     	;# 
   225  0014                     	;# 
   226  0015                     	;# 
   227  0015                     	;# 
   228  0016                     	;# 
   229  0017                     	;# 
   230  0018                     	;# 
   231  0019                     	;# 
   232  001A                     	;# 
   233  001B                     	;# 
   234  001B                     	;# 
   235  001C                     	;# 
   236  001D                     	;# 
   237  001E                     	;# 
   238  001F                     	;# 
   239  0081                     	;# 
   240  0085                     	;# 
   241  0086                     	;# 
   242  0087                     	;# 
   243  008C                     	;# 
   244  008D                     	;# 
   245  008E                     	;# 
   246  0092                     	;# 
   247  0093                     	;# 
   248  0094                     	;# 
   249  0098                     	;# 
   250  0099                     	;# 
   251  009F                     	;# 
   252  010C                     	;# 
   253  010D                     	;# 
   254  010E                     	;# 
   255  010F                     	;# 
   256  018C                     	;# 
   257  0000                     	;# 
   258  0001                     	;# 
   259  0002                     	;# 
   260  0003                     	;# 
   261  0004                     	;# 
   262  0005                     	;# 
   263  0006                     	;# 
   264  0007                     	;# 
   265  000A                     	;# 
   266  000B                     	;# 
   267  000C                     	;# 
   268  000D                     	;# 
   269  000E                     	;# 
   270  000E                     	;# 
   271  000F                     	;# 
   272  0010                     	;# 
   273  0011                     	;# 
   274  0012                     	;# 
   275  0013                     	;# 
   276  0014                     	;# 
   277  0015                     	;# 
   278  0015                     	;# 
   279  0016                     	;# 
   280  0017                     	;# 
   281  0018                     	;# 
   282  0019                     	;# 
   283  001A                     	;# 
   284  001B                     	;# 
   285  001B                     	;# 
   286  001C                     	;# 
   287  001D                     	;# 
   288  001E                     	;# 
   289  001F                     	;# 
   290  0081                     	;# 
   291  0085                     	;# 
   292  0086                     	;# 
   293  0087                     	;# 
   294  008C                     	;# 
   295  008D                     	;# 
   296  008E                     	;# 
   297  0092                     	;# 
   298  0093                     	;# 
   299  0094                     	;# 
   300  0098                     	;# 
   301  0099                     	;# 
   302  009F                     	;# 
   303  010C                     	;# 
   304  010D                     	;# 
   305  010E                     	;# 
   306  010F                     	;# 
   307  018C                     	;# 
   308  0000                     	;# 
   309  0001                     	;# 
   310  0002                     	;# 
   311  0003                     	;# 
   312  0004                     	;# 
   313  0005                     	;# 
   314  0006                     	;# 
   315  0007                     	;# 
   316  000A                     	;# 
   317  000B                     	;# 
   318  000C                     	;# 
   319  000D                     	;# 
   320  000E                     	;# 
   321  000E                     	;# 
   322  000F                     	;# 
   323  0010                     	;# 
   324  0011                     	;# 
   325  0012                     	;# 
   326  0013                     	;# 
   327  0014                     	;# 
   328  0015                     	;# 
   329  0015                     	;# 
   330  0016                     	;# 
   331  0017                     	;# 
   332  0018                     	;# 
   333  0019                     	;# 
   334  001A                     	;# 
   335  001B                     	;# 
   336  001B                     	;# 
   337  001C                     	;# 
   338  001D                     	;# 
   339  001E                     	;# 
   340  001F                     	;# 
   341  0081                     	;# 
   342  0085                     	;# 
   343  0086                     	;# 
   344  0087                     	;# 
   345  008C                     	;# 
   346  008D                     	;# 
   347  008E                     	;# 
   348  0092                     	;# 
   349  0093                     	;# 
   350  0094                     	;# 
   351  0098                     	;# 
   352  0099                     	;# 
   353  009F                     	;# 
   354  010C                     	;# 
   355  010D                     	;# 
   356  010E                     	;# 
   357  010F                     	;# 
   358  018C                     	;# 
   359  0000                     	;# 
   360  0001                     	;# 
   361  0002                     	;# 
   362  0003                     	;# 
   363  0004                     	;# 
   364  0005                     	;# 
   365  0006                     	;# 
   366  0007                     	;# 
   367  000A                     	;# 
   368  000B                     	;# 
   369  000C                     	;# 
   370  000D                     	;# 
   371  000E                     	;# 
   372  000E                     	;# 
   373  000F                     	;# 
   374  0010                     	;# 
   375  0011                     	;# 
   376  0012                     	;# 
   377  0013                     	;# 
   378  0014                     	;# 
   379  0015                     	;# 
   380  0015                     	;# 
   381  0016                     	;# 
   382  0017                     	;# 
   383  0018                     	;# 
   384  0019                     	;# 
   385  001A                     	;# 
   386  001B                     	;# 
   387  001B                     	;# 
   388  001C                     	;# 
   389  001D                     	;# 
   390  001E                     	;# 
   391  001F                     	;# 
   392  0081                     	;# 
   393  0085                     	;# 
   394  0086                     	;# 
   395  0087                     	;# 
   396  008C                     	;# 
   397  008D                     	;# 
   398  008E                     	;# 
   399  0092                     	;# 
   400  0093                     	;# 
   401  0094                     	;# 
   402  0098                     	;# 
   403  0099                     	;# 
   404  009F                     	;# 
   405  010C                     	;# 
   406  010D                     	;# 
   407  010E                     	;# 
   408  010F                     	;# 
   409  018C                     	;# 
   410  0000                     	;# 
   411  0001                     	;# 
   412  0002                     	;# 
   413  0003                     	;# 
   414  0004                     	;# 
   415  0005                     	;# 
   416  0006                     	;# 
   417  0007                     	;# 
   418  000A                     	;# 
   419  000B                     	;# 
   420  000C                     	;# 
   421  000D                     	;# 
   422  000E                     	;# 
   423  000E                     	;# 
   424  000F                     	;# 
   425  0010                     	;# 
   426  0011                     	;# 
   427  0012                     	;# 
   428  0013                     	;# 
   429  0014                     	;# 
   430  0015                     	;# 
   431  0015                     	;# 
   432  0016                     	;# 
   433  0017                     	;# 
   434  0018                     	;# 
   435  0019                     	;# 
   436  001A                     	;# 
   437  001B                     	;# 
   438  001B                     	;# 
   439  001C                     	;# 
   440  001D                     	;# 
   441  001E                     	;# 
   442  001F                     	;# 
   443  0081                     	;# 
   444  0085                     	;# 
   445  0086                     	;# 
   446  0087                     	;# 
   447  008C                     	;# 
   448  008D                     	;# 
   449  008E                     	;# 
   450  0092                     	;# 
   451  0093                     	;# 
   452  0094                     	;# 
   453  0098                     	;# 
   454  0099                     	;# 
   455  009F                     	;# 
   456  010C                     	;# 
   457  010D                     	;# 
   458  010E                     	;# 
   459  010F                     	;# 
   460  018C                     	;# 
   461  0000                     	;# 
   462  0001                     	;# 
   463  0002                     	;# 
   464  0003                     	;# 
   465  0004                     	;# 
   466  0005                     	;# 
   467  0006                     	;# 
   468  0007                     	;# 
   469  000A                     	;# 
   470  000B                     	;# 
   471  000C                     	;# 
   472  000D                     	;# 
   473  000E                     	;# 
   474  000E                     	;# 
   475  000F                     	;# 
   476  0010                     	;# 
   477  0011                     	;# 
   478  0012                     	;# 
   479  0013                     	;# 
   480  0014                     	;# 
   481  0015                     	;# 
   482  0015                     	;# 
   483  0016                     	;# 
   484  0017                     	;# 
   485  0018                     	;# 
   486  0019                     	;# 
   487  001A                     	;# 
   488  001B                     	;# 
   489  001B                     	;# 
   490  001C                     	;# 
   491  001D                     	;# 
   492  001E                     	;# 
   493  001F                     	;# 
   494  0081                     	;# 
   495  0085                     	;# 
   496  0086                     	;# 
   497  0087                     	;# 
   498  008C                     	;# 
   499  008D                     	;# 
   500  008E                     	;# 
   501  0092                     	;# 
   502  0093                     	;# 
   503  0094                     	;# 
   504  0098                     	;# 
   505  0099                     	;# 
   506  009F                     	;# 
   507  010C                     	;# 
   508  010D                     	;# 
   509  010E                     	;# 
   510  010F                     	;# 
   511  018C                     	;# 
   512                           
   513                           	psect	idataCOMMON
   514  0800                     __pidataCOMMON:
   515                           
   516                           ;initializer for __MenuNav
   517  0800  3401               	retlw	1
   518  0801  3400               	retlw	0
   519                           
   520                           	psect	idataBANK3
   521  1D25                     __pidataBANK3:
   522                           
   523                           ;initializer for __SubMenuArr
   524  1D25  3402               	retlw	2
   525  1D26  3401               	retlw	1
   526  1D27  3402               	retlw	2
   527  1D28  3401               	retlw	1
   528  1D29  3401               	retlw	1
   529  1D2A  3402               	retlw	2
   530  1D2B  3401               	retlw	1
   531  1D2C  3401               	retlw	1
   532  1D2D  3401               	retlw	1
   533  1D2E  3400               	retlw	0
   534  1D2F  3400               	retlw	0
   535  1D30  3400               	retlw	0
   536  1D31  3401               	retlw	1
   537  1D32  3401               	retlw	1
   538  1D33  3401               	retlw	1
   539  1D34  3400               	retlw	0
   540  1D35  3400               	retlw	0
   541  1D36  3400               	retlw	0
   542  1D37  3400               	retlw	0
   543  1D38  3400               	retlw	0
   544  1D39  3400               	retlw	0
   545  1D3A  3400               	retlw	0
   546  1D3B  3400               	retlw	0
   547  1D3C  3400               	retlw	0
   548                           
   549                           ;initializer for __MenuArr
   550  1D3D  3404               	retlw	4
   551  1D3E  3406               	retlw	6
   552  1D3F  3403               	retlw	3
   553  1D40  3403               	retlw	3
   554  1D41  3400               	retlw	0
   555  1D42  3400               	retlw	0
   556  1D43  3400               	retlw	0
   557  1D44  3400               	retlw	0
   558  1D45  3400               	retlw	0
   559  1D46  3400               	retlw	0
   560                           
   561                           	psect	stringtext
   562  1000                     __pstringtext:
   563  1000                     stringtab:
   564  1000                     __stringtab:
   565                           
   566                           ;	String table - string pointers are 2 bytes each
   567  1000  1BFF               	btfsc	btemp+1,7
   568  1001  280A               	ljmp	stringcode
   569  1002  1383               	bcf	3,7
   570  1003  187F               	btfsc	btemp+1,0
   571  1004  1783               	bsf	3,7
   572  1005  0800               	movf	0,w
   573  1006  0A84               	incf	4,f
   574  1007  1903               	skipnz
   575  1008  0AFF               	incf	btemp+1,f
   576  1009  0008               	return
   577  100A                     stringcode:
   578  100A  087F               	movf	btemp+1,w
   579  100B  397F               	andlw	127
   580  100C  008A               	movwf	10
   581  100D  0804               	movf	4,w
   582  100E  0A84               	incf	4,f
   583  100F  1903               	skipnz
   584  1010  0AFF               	incf	btemp+1,f
   585  1011  0082               	movwf	2
   586  1012                     __stringbase:
   587  1012                     __end_of__stringtab:
   588  1012                     _SHRIFT:
   589  1012  3441               	retlw	65
   590  1013  34A0               	retlw	160
   591  1014  3442               	retlw	66
   592  1015  34A1               	retlw	161
   593  1016  34E0               	retlw	224
   594  1017  3445               	retlw	69
   595  1018  34A3               	retlw	163
   596  1019  34A4               	retlw	164
   597  101A  34A5               	retlw	165
   598  101B  34A6               	retlw	166
   599  101C  344B               	retlw	75
   600  101D  34A7               	retlw	167
   601  101E  344D               	retlw	77
   602  101F  3448               	retlw	72
   603  1020  344F               	retlw	79
   604  1021  34A8               	retlw	168
   605  1022  3450               	retlw	80
   606  1023  3443               	retlw	67
   607  1024  3454               	retlw	84
   608  1025  34A9               	retlw	169
   609  1026  34AA               	retlw	170
   610  1027  3458               	retlw	88
   611  1028  34E1               	retlw	225
   612  1029  34AB               	retlw	171
   613  102A  34AC               	retlw	172
   614  102B  34E2               	retlw	226
   615  102C  34AD               	retlw	173
   616  102D  34AE               	retlw	174
   617  102E  3462               	retlw	98
   618  102F  34AF               	retlw	175
   619  1030  34B0               	retlw	176
   620  1031  34B1               	retlw	177
   621  1032  3461               	retlw	97
   622  1033  34B2               	retlw	178
   623  1034  34B3               	retlw	179
   624  1035  34B4               	retlw	180
   625  1036  34E3               	retlw	227
   626  1037  3465               	retlw	101
   627  1038  34B6               	retlw	182
   628  1039  34B7               	retlw	183
   629  103A  34B8               	retlw	184
   630  103B  34B9               	retlw	185
   631  103C  34BA               	retlw	186
   632  103D  34BB               	retlw	187
   633  103E  34BC               	retlw	188
   634  103F  34BD               	retlw	189
   635  1040  346F               	retlw	111
   636  1041  34BE               	retlw	190
   637  1042  3470               	retlw	112
   638  1043  3463               	retlw	99
   639  1044  34BF               	retlw	191
   640  1045  3479               	retlw	121
   641  1046  34E4               	retlw	228
   642  1047  3478               	retlw	120
   643  1048  34E5               	retlw	229
   644  1049  34C0               	retlw	192
   645  104A  34C1               	retlw	193
   646  104B  34E6               	retlw	230
   647  104C  34C2               	retlw	194
   648  104D  34C3               	retlw	195
   649  104E  34C4               	retlw	196
   650  104F  34C5               	retlw	197
   651  1050  34C6               	retlw	198
   652  1051  34C7               	retlw	199
   653  1052                     __end_of_SHRIFT:
   654  1052                     _dpowers:
   655  1052  3401               	retlw	1
   656  1053  3400               	retlw	0
   657  1054  340A               	retlw	10
   658  1055  3400               	retlw	0
   659  1056  3464               	retlw	100
   660  1057  3400               	retlw	0
   661  1058  34E8               	retlw	232
   662  1059  3403               	retlw	3
   663  105A  3410               	retlw	16
   664  105B  3427               	retlw	39
   665  105C                     __end_of_dpowers:
   666  105C                     log@coeff:
   667  105C  3400               	retlw	0
   668  105D  3400               	retlw	0
   669  105E  3400               	retlw	0
   670  105F  3400               	retlw	0
   671  1060  3480               	retlw	128
   672  1061  343F               	retlw	63
   673  1062  34F0               	retlw	240
   674  1063  34FF               	retlw	255
   675  1064  34BE               	retlw	190
   676  1065  34E2               	retlw	226
   677  1066  34A9               	retlw	169
   678  1067  343E               	retlw	62
   679  1068  3483               	retlw	131
   680  1069  3476               	retlw	118
   681  106A  34BE               	retlw	190
   682  106B  34AE               	retlw	174
   683  106C  342B               	retlw	43
   684  106D  343E               	retlw	62
   685  106E  343C               	retlw	60
   686  106F  34C3               	retlw	195
   687  1070  34BD               	retlw	189
   688  1071  34D2               	retlw	210
   689  1072  3413               	retlw	19
   690  1073  343D               	retlw	61
   691  1074  3478               	retlw	120
   692  1075  34D3               	retlw	211
   693  1076  34BB               	retlw	187
   694  1077                     __end_oflog@coeff:
   695  0013                     _SSPBUF	set	19
   696  0005                     _PORTAbits	set	5
   697  000E                     _TMR1L	set	14
   698  000F                     _TMR1H	set	15
   699  0006                     _PORTBbits	set	6
   700  0018                     _RCSTAbits	set	24
   701  0014                     _SSPCONbits	set	20
   702  0011                     _TMR2	set	17
   703  0012                     _T2CONbits	set	18
   704  0007                     _PORTC	set	7
   705  0006                     _PORTB	set	6
   706  0005                     _PORTA	set	5
   707  001E                     _ADRES	set	30
   708  001F                     _ADCON0bits	set	31
   709  000C                     _PIR1bits	set	12
   710  0010                     _T1CONbits	set	16
   711  0001                     _TMR0	set	1
   712  000B                     _INTCONbits	set	11
   713  0036                     _RB6	set	54
   714  0035                     _RB5	set	53
   715  0034                     _RB4	set	52
   716  0033                     _RB3	set	51
   717  00FA                     _GO_DONE	set	250
   718  009F                     _ADCON1bits	set	159
   719  0099                     _SPBRG	set	153
   720  0098                     _TXSTAbits	set	152
   721  0094                     _SSPSTATbits	set	148
   722  008D                     _PIE2bits	set	141
   723  0081                     _OPTION_REGbits	set	129
   724  0087                     _TRISCbits	set	135
   725  0086                     _TRISBbits	set	134
   726  0085                     _TRISAbits	set	133
   727  008C                     _PIE1bits	set	140
   728  1077                     STR_55:
   729  1077  34D1               	retlw	-47
   730  1078  34E1               	retlw	-31
   731  1079  34F0               	retlw	-16
   732  107A  34EE               	retlw	-18
   733  107B  34F1               	retlw	-15
   734  107C  3420               	retlw	32	;' '
   735  107D  34ED               	retlw	-19
   736  107E  34E0               	retlw	-32
   737  107F  34F1               	retlw	-15
   738  1080  34F2               	retlw	-14
   739  1081  34F0               	retlw	-16
   740  1082  342E               	retlw	46	;'.'
   741  1083  3420               	retlw	32	;' '
   742  1084  34CE               	retlw	-50
   743  1085  34C7               	retlw	-57
   744  1086  34D3               	retlw	-45
   745  1087  3400               	retlw	0
   746  1088                     STR_59:
   747  1088  34D1               	retlw	-47
   748  1089  34E1               	retlw	-31
   749  108A  34F0               	retlw	-16
   750  108B  34EE               	retlw	-18
   751  108C  34F1               	retlw	-15
   752  108D  3420               	retlw	32	;' '
   753  108E  34ED               	retlw	-19
   754  108F  34E0               	retlw	-32
   755  1090  34F1               	retlw	-15
   756  1091  34F2               	retlw	-14
   757  1092  34F0               	retlw	-16
   758  1093  342E               	retlw	46	;'.'
   759  1094  3420               	retlw	32	;' '
   760  1095  34CF               	retlw	-49
   761  1096  34C7               	retlw	-57
   762  1097  34D3               	retlw	-45
   763  1098  3400               	retlw	0
   764  1099                     STR_25:
   765  1099  34C4               	retlw	-60
   766  109A  34CE               	retlw	-50
   767  109B  3432               	retlw	50	;'2'
   768  109C  342D               	retlw	45	;'-'
   769  109D  34D2               	retlw	-46
   770  109E  34E0               	retlw	-32
   771  109F  34E9               	retlw	-23
   772  10A0  34EC               	retlw	-20
   773  10A1  34E5               	retlw	-27
   774  10A2  34F0               	retlw	-16
   775  10A3  3420               	retlw	32	;' '
   776  10A4  34E2               	retlw	-30
   777  10A5  34FB               	retlw	-5
   778  10A6  34EA               	retlw	-22
   779  10A7  34EB               	retlw	-21
   780  10A8  3400               	retlw	0
   781  10A9                     STR_28:
   782  10A9  34C4               	retlw	-60
   783  10AA  34CE               	retlw	-50
   784  10AB  3432               	retlw	50	;'2'
   785  10AC  342D               	retlw	45	;'-'
   786  10AD  34C2               	retlw	-62
   787  10AE  34EA               	retlw	-22
   788  10AF  34EB               	retlw	-21
   789  10B0  3420               	retlw	32	;' '
   790  10B1  34EF               	retlw	-17
   791  10B2  34EE               	retlw	-18
   792  10B3  3420               	retlw	32	;' '
   793  10B4  34F2               	retlw	-14
   794  10B5  34E5               	retlw	-27
   795  10B6  34EC               	retlw	-20
   796  10B7  34EF               	retlw	-17
   797  10B8  3400               	retlw	0
   798  10B9                     STR_51:
   799  10B9  34D1               	retlw	-47
   800  10BA  34EE               	retlw	-18
   801  10BB  34F5               	retlw	-11
   802  10BC  34F0               	retlw	-16
   803  10BD  342E               	retlw	46	;'.'
   804  10BE  34F2               	retlw	-14
   805  10BF  34E5               	retlw	-27
   806  10C0  34EA               	retlw	-22
   807  10C1  342E               	retlw	46	;'.'
   808  10C2  34ED               	retlw	-19
   809  10C3  34E0               	retlw	-32
   810  10C4  34F1               	retlw	-15
   811  10C5  34F2               	retlw	-14
   812  10C6  34F0               	retlw	-16
   813  10C7  342E               	retlw	46	;'.'
   814  10C8  3400               	retlw	0
   815  10C9                     STR_22:
   816  10C9  34C4               	retlw	-60
   817  10CA  34CE               	retlw	-50
   818  10CB  3432               	retlw	50	;'2'
   819  10CC  342D               	retlw	45	;'-'
   820  10CD  34D2               	retlw	-46
   821  10CE  34E0               	retlw	-32
   822  10CF  34E9               	retlw	-23
   823  10D0  34EC               	retlw	-20
   824  10D1  34E5               	retlw	-27
   825  10D2  34F0               	retlw	-16
   826  10D3  3420               	retlw	32	;' '
   827  10D4  34E2               	retlw	-30
   828  10D5  34EA               	retlw	-22
   829  10D6  34EB               	retlw	-21
   830  10D7  3400               	retlw	0
   831  10D8                     STR_16:
   832  10D8  34C4               	retlw	-60
   833  10D9  34CE               	retlw	-50
   834  10DA  3432               	retlw	50	;'2'
   835  10DB  342D               	retlw	45	;'-'
   836  10DC  34C2               	retlw	-62
   837  10DD  34EA               	retlw	-22
   838  10DE  34EB               	retlw	-21
   839  10DF  3420               	retlw	32	;' '
   840  10E0  34F2               	retlw	-14
   841  10E1  34E0               	retlw	-32
   842  10E2  34E9               	retlw	-23
   843  10E3  34EC               	retlw	-20
   844  10E4  34E5               	retlw	-27
   845  10E5  34F0               	retlw	-16
   846  10E6  3400               	retlw	0
   847  10E7                     STR_37:
   848  10E7  3425               	retlw	37	;'%'
   849  10E8  3433               	retlw	51	;'3'
   850  10E9  3473               	retlw	115	;'s'
   851  10EA  3425               	retlw	37	;'%'
   852  10EB  3433               	retlw	51	;'3'
   853  10EC  3475               	retlw	117	;'u'
   854  10ED  3420               	retlw	32	;' '
   855  10EE  3420               	retlw	32	;' '
   856  10EF  3425               	retlw	37	;'%'
   857  10F0  3433               	retlw	51	;'3'
   858  10F1  3473               	retlw	115	;'s'
   859  10F2  3425               	retlw	37	;'%'
   860  10F3  3433               	retlw	51	;'3'
   861  10F4  3475               	retlw	117	;'u'
   862  10F5  3400               	retlw	0
   863  10F6                     STR_13:
   864  10F6  34C4               	retlw	-60
   865  10F7  34CE               	retlw	-50
   866  10F8  3431               	retlw	49	;'1'
   867  10F9  342D               	retlw	45	;'-'
   868  10FA  34C2               	retlw	-62
   869  10FB  34F0               	retlw	-16
   870  10FC  34E5               	retlw	-27
   871  10FD  34EC               	retlw	-20
   872  10FE  34FF               	retlw	-1
   873  10FF  3420               	retlw	32	;' '
   874  1100  34E8               	retlw	-24
   875  1101  34EC               	retlw	-20
   876  1102  34EF               	retlw	-17
   877  1103  3400               	retlw	0
   878  1104                     STR_62:
   879  1104  3425               	retlw	37	;'%'
   880  1105  3434               	retlw	52	;'4'
   881  1106  3473               	retlw	115	;'s'
   882  1107  3425               	retlw	37	;'%'
   883  1108  3433               	retlw	51	;'3'
   884  1109  3464               	retlw	100	;'d'
   885  110A  3420               	retlw	32	;' '
   886  110B  3425               	retlw	37	;'%'
   887  110C  3435               	retlw	53	;'5'
   888  110D  3473               	retlw	115	;'s'
   889  110E  3425               	retlw	37	;'%'
   890  110F  3433               	retlw	51	;'3'
   891  1110  3464               	retlw	100	;'d'
   892  1111  3400               	retlw	0
   893  1112                     STR_36:
   894  1112  34C0               	retlw	-64
   895  1113  34ED               	retlw	-19
   896  1114  34E0               	retlw	-32
   897  1115  34EB               	retlw	-21
   898  1116  34EE               	retlw	-18
   899  1117  34E3               	retlw	-29
   900  1118  342E               	retlw	46	;'.'
   901  1119  3420               	retlw	32	;' '
   902  111A  34E2               	retlw	-30
   903  111B  34E2               	retlw	-30
   904  111C  34EE               	retlw	-18
   905  111D  34E4               	retlw	-28
   906  111E  3400               	retlw	0
   907  111F                     STR_7:
   908  111F  34C4               	retlw	-60
   909  1120  34CE               	retlw	-50
   910  1121  3431               	retlw	49	;'1'
   911  1122  342D               	retlw	45	;'-'
   912  1123  34C8               	retlw	-56
   913  1124  34EC               	retlw	-20
   914  1125  34EF               	retlw	-17
   915  1126  342F               	retlw	47	;'/'
   916  1127  34EF               	retlw	-17
   917  1128  34EE               	retlw	-18
   918  1129  34F1               	retlw	-15
   919  112A  34F2               	retlw	-14
   920  112B  3400               	retlw	0
   921  112C                     STR_42:
   922  112C  3425               	retlw	37	;'%'
   923  112D  3431               	retlw	49	;'1'
   924  112E  3432               	retlw	50	;'2'
   925  112F  3473               	retlw	115	;'s'
   926  1130  3425               	retlw	37	;'%'
   927  1131  3464               	retlw	100	;'d'
   928  1132  3425               	retlw	37	;'%'
   929  1133  3464               	retlw	100	;'d'
   930  1134  3425               	retlw	37	;'%'
   931  1135  3464               	retlw	100	;'d'
   932  1136  3425               	retlw	37	;'%'
   933  1137  3464               	retlw	100	;'d'
   934  1138  3400               	retlw	0
   935  1139                     STR_65:
   936  1139  3425               	retlw	37	;'%'
   937  113A  3433               	retlw	51	;'3'
   938  113B  3473               	retlw	115	;'s'
   939  113C  3425               	retlw	37	;'%'
   940  113D  3434               	retlw	52	;'4'
   941  113E  3473               	retlw	115	;'s'
   942  113F  3425               	retlw	37	;'%'
   943  1140  3435               	retlw	53	;'5'
   944  1141  3473               	retlw	115	;'s'
   945  1142  3425               	retlw	37	;'%'
   946  1143  3434               	retlw	52	;'4'
   947  1144  3473               	retlw	115	;'s'
   948  1145  3400               	retlw	0
   949  1146                     STR_1:
   950  1146  34C7               	retlw	-57
   951  1147  34E0               	retlw	-32
   952  1148  34E3               	retlw	-29
   953  1149  34F0               	retlw	-16
   954  114A  34F3               	retlw	-13
   955  114B  34E7               	retlw	-25
   956  114C  34EA               	retlw	-22
   957  114D  34E0               	retlw	-32
   958  114E  342E               	retlw	46	;'.'
   959  114F  342E               	retlw	46	;'.'
   960  1150  342E               	retlw	46	;'.'
   961  1151  342E               	retlw	46	;'.'
   962  1152  3400               	retlw	0
   963  1153                     STR_45:
   964  1153  34D6               	retlw	-42
   965  1154  34E8               	retlw	-24
   966  1155  34F4               	retlw	-12
   967  1156  34F0               	retlw	-16
   968  1157  342E               	retlw	46	;'.'
   969  1158  3420               	retlw	32	;' '
   970  1159  34E2               	retlw	-30
   971  115A  34FB               	retlw	-5
   972  115B  34E2               	retlw	-30
   973  115C  34EE               	retlw	-18
   974  115D  34E4               	retlw	-28
   975  115E  3400               	retlw	0
   976  115F                     STR_41:
   977  115F  34D6               	retlw	-42
   978  1160  34E8               	retlw	-24
   979  1161  34F4               	retlw	-12
   980  1162  34F0               	retlw	-16
   981  1163  342E               	retlw	46	;'.'
   982  1164  3420               	retlw	32	;' '
   983  1165  34E2               	retlw	-30
   984  1166  34E2               	retlw	-30
   985  1167  34EE               	retlw	-18
   986  1168  34E4               	retlw	-28
   987  1169  3400               	retlw	0
   988  116A                     STR_11:
   989  116A  34CF               	retlw	-49
   990  116B  34EE               	retlw	-18
   991  116C  34F1               	retlw	-15
   992  116D  34F2               	retlw	-14
   993  116E  34EE               	retlw	-18
   994  116F  34FF               	retlw	-1
   995  1170  34ED               	retlw	-19
   996  1171  34ED               	retlw	-19
   997  1172  34FB               	retlw	-5
   998  1173  34E9               	retlw	-23
   999  1174  3400               	retlw	0
  1000  1175                     STR_5:
  1001  1175  34CD               	retlw	-51
  1002  1176  34E0               	retlw	-32
  1003  1177  34F1               	retlw	-15
  1004  1178  34F2               	retlw	-14
  1005  1179  34F0               	retlw	-16
  1006  117A  34EE               	retlw	-18
  1007  117B  34E9               	retlw	-23
  1008  117C  34EA               	retlw	-22
  1009  117D  34E8               	retlw	-24
  1010  117E  3400               	retlw	0
  1011  117F                     STR_34:
  1012  117F  34CF               	retlw	-49
  1013  1180  34EE               	retlw	-18
  1014  1181  34EA               	retlw	-22
  1015  1182  34E0               	retlw	-32
  1016  1183  34E7               	retlw	-25
  1017  1184  34E0               	retlw	-32
  1018  1185  34ED               	retlw	-19
  1019  1186  34E8               	retlw	-24
  1020  1187  34FF               	retlw	-1
  1021  1188  3400               	retlw	0
  1022  1189                     STR_47:
  1023  1189  34C4               	retlw	-60
  1024  118A  342E               	retlw	46	;'.'
  1025  118B  34E2               	retlw	-30
  1026  118C  34FB               	retlw	-5
  1027  118D  34F5               	retlw	-11
  1028  118E  34EE               	retlw	-18
  1029  118F  34E4               	retlw	-28
  1030  1190  34FB               	retlw	-5
  1031  1191  343A               	retlw	58	;':'
  1032  1192  3400               	retlw	0
  1033  1193                     STR_14:
  1034  1193  3425               	retlw	37	;'%'
  1035  1194  3434               	retlw	52	;'4'
  1036  1195  3464               	retlw	100	;'d'
  1037  1196  3420               	retlw	32	;' '
  1038  1197  34F1               	retlw	-15
  1039  1198  34E5               	retlw	-27
  1040  1199  34EA               	retlw	-22
  1041  119A  342E               	retlw	46	;'.'
  1042  119B  3400               	retlw	0
  1043  119C                     STR_23:
  1044  119C  3425               	retlw	37	;'%'
  1045  119D  3434               	retlw	52	;'4'
  1046  119E  3464               	retlw	100	;'d'
  1047  119F  3420               	retlw	32	;' '
  1048  11A0  34EC               	retlw	-20
  1049  11A1  34E8               	retlw	-24
  1050  11A2  34ED               	retlw	-19
  1051  11A3  342E               	retlw	46	;'.'
  1052  11A4  3400               	retlw	0
  1053  11A5                     STR_43:
  1054  11A5  34C4               	retlw	-60
  1055  11A6  342E               	retlw	46	;'.'
  1056  11A7  34E2               	retlw	-30
  1057  11A8  34F5               	retlw	-11
  1058  11A9  34EE               	retlw	-18
  1059  11AA  34E4               	retlw	-28
  1060  11AB  34FB               	retlw	-5
  1061  11AC  343A               	retlw	58	;':'
  1062  11AD  3400               	retlw	0
  1063  11AE                     STR_9:
  1064  11AE  34C8               	retlw	-56
  1065  11AF  34EC               	retlw	-20
  1066  11B0  34EF               	retlw	-17
  1067  11B1  34F3               	retlw	-13
  1068  11B2  34EB               	retlw	-21
  1069  11B3  34FC               	retlw	-4
  1070  11B4  34F1               	retlw	-15
  1071  11B5  3400               	retlw	0
  1072  11B6                     STR_68:
  1073  11B6  3428               	retlw	40	;'('
  1074  11B7  346E               	retlw	110	;'n'
  1075  11B8  3475               	retlw	117	;'u'
  1076  11B9  346C               	retlw	108	;'l'
  1077  11BA  346C               	retlw	108	;'l'
  1078  11BB  3429               	retlw	41	;')'
  1079  11BC  3400               	retlw	0
  1080  11BD                     STR_49:
  1081  11BD  34CF               	retlw	-49
  1082  11BE  34E0               	retlw	-32
  1083  11BF  34EC               	retlw	-20
  1084  11C0  34FF               	retlw	-1
  1085  11C1  34F2               	retlw	-14
  1086  11C2  34FC               	retlw	-4
  1087  11C3  3400               	retlw	0
  1088  11C4                     STR_67:
  1089  11C4  34CD               	retlw	-51
  1090  11C5  34C0               	retlw	-64
  1091  11C6  34C3               	retlw	-61
  1092  11C7  34D0               	retlw	-48
  1093  11C8  343A               	retlw	58	;':'
  1094  11C9  3400               	retlw	0
  1095  11CA                     STR_64:
  1096  11CA  34D2               	retlw	-46
  1097  11CB  34ED               	retlw	-19
  1098  11CC  34E0               	retlw	-32
  1099  11CD  34F0               	retlw	-16
  1100  11CE  343A               	retlw	58	;':'
  1101  11CF  3400               	retlw	0
  1102  11D0                     STR_63:
  1103  11D0  34D2               	retlw	-46
  1104  11D1  34E2               	retlw	-30
  1105  11D2  34ED               	retlw	-19
  1106  11D3  343A               	retlw	58	;':'
  1107  11D4  3400               	retlw	0
  1108  11D5                     STR_38:
  1109  11D5  34C0               	retlw	-64
  1110  11D6  34ED               	retlw	-19
  1111  11D7  3431               	retlw	49	;'1'
  1112  11D8  343A               	retlw	58	;':'
  1113  11D9  3400               	retlw	0
  1114  11DA                     STR_39:
  1115  11DA  3441               	retlw	65	;'A'
  1116  11DB  34ED               	retlw	-19
  1117  11DC  3432               	retlw	50	;'2'
  1118  11DD  343A               	retlw	58	;':'
  1119  11DE  3400               	retlw	0
  1120  11DF                     STR_4:
  1121  11DF  3425               	retlw	37	;'%'
  1122  11E0  3431               	retlw	49	;'1'
  1123  11E1  3436               	retlw	54	;'6'
  1124  11E2  3473               	retlw	115	;'s'
  1125  11E3  3400               	retlw	0
  1126  11E4                     STR_3:
  1127  11E4  34C2               	retlw	-62
  1128  11E5  34FB               	retlw	-5
  1129  11E6  34EA               	retlw	-22
  1130  11E7  34EB               	retlw	-21
  1131  11E8  3400               	retlw	0
  1132  11E9                     STR_20:
  1133  11E9  34CD               	retlw	-51
  1134  11EA  34E5               	retlw	-27
  1135  11EB  34F2               	retlw	-14
  1136  11EC  3400               	retlw	0
  1137  11ED                     STR_66:
  1138  11ED  34C4               	retlw	-60
  1139  11EE  34D3               	retlw	-45
  1140  11EF  343A               	retlw	58	;':'
  1141  11F0  3400               	retlw	0
  1142  11F1                     STR_2:
  1143  11F1  34C2               	retlw	-62
  1144  11F2  34EA               	retlw	-22
  1145  11F3  34EB               	retlw	-21
  1146  11F4  3400               	retlw	0
  1147  11F5                     STR_18:
  1148  11F5  34C4               	retlw	-60
  1149  11F6  34E0               	retlw	-32
  1150  11F7  3400               	retlw	0
  1151  11F8                     STR_8:
  1152  11F8  3425               	retlw	37	;'%'
  1153  11F9  3473               	retlw	115	;'s'
  1154  11FA  3400               	retlw	0
  1155  11F5                     
  1156                           	psect	cinit
  1157  0011                     start_initialization:	
  1158                           ; #config settings
  1159                           
  1160  0011                     __initialization:
  1161                           
  1162                           ; Initialize objects allocated to BANK3
  1163  0011  1783               	bsf	3,7	;select IRP bank2
  1164  0012  30B2               	movlw	low (__pdataBANK3+34)
  1165  0013  00FD               	movwf	btemp+-1
  1166  0014  301D               	movlw	high __pidataBANK3
  1167  0015  00FE               	movwf	btemp
  1168  0016  3025               	movlw	low __pidataBANK3
  1169  0017  00FF               	movwf	btemp+1
  1170  0018  3090               	movlw	low __pdataBANK3
  1171  0019  0084               	movwf	4
  1172  001A  160A  158A  246C  120A  118A  	fcall	init_ram0
  1173                           
  1174                           ; Initialize objects allocated to COMMON
  1175  001F  120A  158A  2000  120A  118A  	fcall	__pidataCOMMON	;fetch initializer
  1176  0024  00FB               	movwf	__pdataCOMMON& (0+127)
  1177  0025  120A  158A  2001  120A  118A  	fcall	__pidataCOMMON+1	;fetch initializer
  1178  002A  00FC               	movwf	(__pdataCOMMON+1)& (0+127)
  1179                           
  1180                           ; Clear objects allocated to BANK3
  1181  002B  30B2               	movlw	low __pbssBANK3
  1182  002C  0084               	movwf	4
  1183  002D  30D2               	movlw	low (__pbssBANK3+32)
  1184  002E  160A  158A  242F  120A  118A  	fcall	clear_ram0
  1185                           
  1186                           ; Clear objects allocated to BANK1
  1187  0033  1383               	bcf	3,7	;select IRP bank0
  1188  0034  30A0               	movlw	low __pbssBANK1
  1189  0035  0084               	movwf	4
  1190  0036  30C8               	movlw	low (__pbssBANK1+40)
  1191  0037  160A  158A  242F   	fcall	clear_ram0
  1192                           
  1193                           ; Clear objects allocated to BITBANK1
  1194  003A  1683               	bsf	3,5	;RP0=1, select bank1
  1195  003B  01EA               	clrf	(__pbitbssBANK1/(0+8))& (0+127)
  1196                           
  1197                           ; Clear objects allocated to COMMON
  1198  003C  01FD               	clrf	__pbssCOMMON& (0+127)
  1199                           
  1200                           ; Clear objects allocated to BITCOMMON
  1201  003D  01FA               	clrf	(__pbitbssCOMMON/(0+8))& (0+127)
  1202  003E                     end_of_initialization:	
  1203                           ;End of C runtime variable initialization code
  1204                           
  1205  003E                     __end_of__initialization:
  1206  003E  0183               	clrf	3
  1207  003F  120A  118A  2A45   	ljmp	_main	;jump to C main() function
  1208                           
  1209                           	psect	bitbssCOMMON
  1210  03D0                     __pbitbssCOMMON:
  1211  03D0                     _flSwitchButton:
  1212  03D0                     	ds	1
  1213  03D1                     _flClearLCD:
  1214  03D1                     	ds	1
  1215  03D2                     _flUpdate:
  1216  03D2                     	ds	1
  1217  03D3                     _flStopBitRecieve:
  1218  03D3                     	ds	1
  1219  03D4                     _flStartBitRecieve:
  1220  03D4                     	ds	1
  1221  03D5                     _flDO1:
  1222  03D5                     	ds	1
  1223  03D6                     __minute:
  1224  03D6                     	ds	1
  1225  03D7                     __second:
  1226  03D7                     	ds	1
  1227                           
  1228                           	psect	bssCOMMON
  1229  007D                     __pbssCOMMON:
  1230  007D                     _flModeStep:
  1231  007D                     	ds	1
  1232                           
  1233                           	psect	dataCOMMON
  1234  007B                     __pdataCOMMON:
  1235  007B                     __MenuNav:
  1236  007B                     	ds	2
  1237                           
  1238                           	psect	bitbssBANK1
  1239  0750                     __pbitbssBANK1:
  1240  0750                     __hour:
  1241  0750                     	ds	1
  1242  0751                     __flashSecond:
  1243  0751                     	ds	1
  1244  0752                     __500ms:
  1245  0752                     	ds	1
  1246  0753                     __250ms:
  1247  0753                     	ds	1
  1248  0754                     __100ms:
  1249  0754                     	ds	1
  1250                           
  1251                           	psect	bssBANK1
  1252  00A0                     __pbssBANK1:
  1253  00A0                     _arrCmd:
  1254  00A0                     	ds	4
  1255  00A4                     _Analog:
  1256  00A4                     	ds	4
  1257  00A8                     _errno:
  1258  00A8                     	ds	2
  1259  00AA                     __tempDigit:
  1260  00AA                     	ds	2
  1261  00AC                     __timerDO2:
  1262  00AC                     	ds	2
  1263  00AE                     __timerDO1:
  1264  00AE                     	ds	2
  1265  00B0                     __settingTimerOffDO2:
  1266  00B0                     	ds	2
  1267  00B2                     __settingTimerOnDO2:
  1268  00B2                     	ds	2
  1269  00B4                     __settingTimeImpDO1:
  1270  00B4                     	ds	2
  1271  00B6                     __countSecond:
  1272  00B6                     	ds	2
  1273  00B8                     _temperatureAI2:
  1274  00B8                     	ds	1
  1275  00B9                     _temperatureAI1:
  1276  00B9                     	ds	1
  1277  00BA                     __tempTwoDigit:
  1278  00BA                     	ds	1
  1279  00BB                     __cellTwoDigit:
  1280  00BB                     	ds	1
  1281  00BC                     __secondCell:
  1282  00BC                     	ds	1
  1283  00BD                     __firstCell:
  1284  00BD                     	ds	1
  1285  00BE                     _flMenuStrip:
  1286  00BE                     	ds	1
  1287  00BF                     _carrCmd:
  1288  00BF                     	ds	1
  1289  00C0                     _cQuantity:
  1290  00C0                     	ds	1
  1291  00C1                     _cTMR0:
  1292  00C1                     	ds	1
  1293  00C2                     _TMR0_Value:
  1294  00C2                     	ds	1
  1295  00C3                     __tempPinDO:
  1296  00C3                     	ds	1
  1297  00C4                     __settingsBit:
  1298  00C4                     	ds	1
  1299  00C5                     __countTMR2trigger:
  1300  00C5                     	ds	1
  1301  00C6                     _counter:
  1302  00C6                     	ds	1
  1303  00C7                     _cACP:
  1304  00C7                     	ds	1
  1305                           
  1306                           	psect	bssBANK3
  1307  01B2                     __pbssBANK3:
  1308  01B2                     _str2:
  1309  01B2                     	ds	16
  1310  01C2                     _str:
  1311  01C2                     	ds	16
  1312                           
  1313                           	psect	dataBANK3
  1314  0190                     __pdataBANK3:
  1315  0190                     __SubMenuArr:
  1316  0190                     	ds	24
  1317  01A8                     __MenuArr:
  1318  01A8                     	ds	10
  1319                           
  1320                           	psect	inittext
  1321  1C68                     init_fetch0:	
  1322                           ;	Called with low address in FSR and high address in W
  1323                           
  1324  1C68  087E               	movf	126,w
  1325  1C69  008A               	movwf	10
  1326  1C6A  087F               	movf	127,w
  1327  1C6B  0082               	movwf	2
  1328  1C6C                     init_ram0:	
  1329                           ;Called with:
  1330                           ;	high address of idata address in btemp 
  1331                           ;	low address of idata address in btemp+1 
  1332                           ;	low address of data in FSR
  1333                           ;	high address + 1 of data in btemp-1
  1334                           
  1335  1C6C  2468  160A  158A   	fcall	init_fetch0
  1336  1C6F  0080               	movwf	0
  1337  1C70  0A84               	incf	4,f
  1338  1C71  0804               	movf	4,w
  1339  1C72  067D               	xorwf	125,w
  1340  1C73  1903               	btfsc	3,2
  1341  1C74  3400               	retlw	0
  1342  1C75  0AFF               	incf	127,f
  1343  1C76  1903               	btfsc	3,2
  1344  1C77  0AFE               	incf	126,f
  1345  1C78  2C6C               	goto	init_ram0
  1346                           
  1347                           	psect	clrtext
  1348  1C2F                     clear_ram0:	
  1349                           ;	Called with FSR containing the base address, and
  1350                           ;	W with the last address+1
  1351                           
  1352  1C2F  0064               	clrwdt	;clear the watchdog before getting into this loop
  1353  1C30                     clrloop0:
  1354  1C30  0180               	clrf	0	;clear RAM location pointed to by FSR
  1355  1C31  0A84               	incf	4,f	;increment pointer
  1356  1C32  0604               	xorwf	4,w	;XOR with final address
  1357  1C33  1903               	btfsc	3,2	;have we reached the end yet?
  1358  1C34  3400               	retlw	0	;all done for this memory range, return
  1359  1C35  0604               	xorwf	4,w	;XOR again to restore value
  1360  1C36  2C30               	goto	clrloop0	;do the next byte
  1361                           
  1362                           	psect	cstackBANK1
  1363  00C8                     __pcstackBANK1:
  1364  00C8                     ___fttol@sign1:
  1365                           
  1366                           ; 1 bytes @ 0x0
  1367  00C8                     	ds	1
  1368  00C9                     ___fttol@lval:
  1369                           
  1370                           ; 4 bytes @ 0x1
  1371  00C9                     	ds	4
  1372  00CD                     ___fttol@exp1:
  1373                           
  1374                           ; 1 bytes @ 0x5
  1375  00CD                     	ds	1
  1376  00CE                     rThermistor@A:
  1377                           
  1378                           ; 3 bytes @ 0x6
  1379  00CE                     	ds	3
  1380  00D1                     rThermistor@analogAI:
  1381                           
  1382                           ; 1 bytes @ 0x9
  1383  00D1                     	ds	1
  1384  00D2                     ?___awtoft:
  1385  00D2                     ___awtoft@c:	
  1386                           ; 3 bytes @ 0xA
  1387                           
  1388                           
  1389                           ; 2 bytes @ 0xA
  1390  00D2                     	ds	3
  1391  00D5                     ___awtoft@sign:
  1392                           
  1393                           ; 1 bytes @ 0xD
  1394  00D5                     	ds	1
  1395  00D6                     ?_log:
  1396  00D6                     log@x:	
  1397                           ; 3 bytes @ 0xE
  1398                           
  1399                           
  1400                           ; 3 bytes @ 0xE
  1401  00D6                     	ds	3
  1402  00D9                     ??_log:
  1403                           
  1404                           ; 1 bytes @ 0x11
  1405  00D9                     	ds	1
  1406  00DA                     log@exponent:
  1407                           
  1408                           ; 2 bytes @ 0x12
  1409  00DA                     	ds	2
  1410  00DC                     _rTemperature$1769:
  1411                           
  1412                           ; 3 bytes @ 0x14
  1413  00DC                     	ds	3
  1414  00DF                     _rTemperature$1770:
  1415                           
  1416                           ; 3 bytes @ 0x17
  1417  00DF                     	ds	3
  1418  00E2                     _rTemperature$1771:
  1419                           
  1420                           ; 3 bytes @ 0x1A
  1421  00E2                     	ds	3
  1422  00E5                     rTemperature@analogAI:
  1423                           
  1424                           ; 1 bytes @ 0x1D
  1425  00E5                     	ds	1
  1426  00E6                     ??_main:
  1427                           
  1428                           ; 1 bytes @ 0x1E
  1429  00E6                     	ds	3
  1430  00E9                     main@SPI_i:
  1431                           
  1432                           ; 1 bytes @ 0x21
  1433  00E9                     	ds	1
  1434                           
  1435                           	psect	cstackCOMMON
  1436  0070                     __pcstackCOMMON:
  1437  0070                     ?_isdigit:
  1438  0070                     ?_fInterruptRecieveDevice:	
  1439                           ; 1 bit 
  1440                           
  1441  0070                     ??_fInterruptRecieveDevice:	
  1442                           ; 1 bytes @ 0x0
  1443                           
  1444  0070                     ?_init:	
  1445                           ; 1 bytes @ 0x0
  1446                           
  1447  0070                     ?_SPI_init:	
  1448                           ; 1 bytes @ 0x0
  1449                           
  1450  0070                     ?_LCD_init:	
  1451                           ; 1 bytes @ 0x0
  1452                           
  1453  0070                     ?_fShiftData:	
  1454                           ; 1 bytes @ 0x0
  1455                           
  1456  0070                     ?_rTemperature:	
  1457                           ; 1 bytes @ 0x0
  1458                           
  1459  0070                     ?_fMenuStrip:	
  1460                           ; 1 bytes @ 0x0
  1461                           
  1462  0070                     ?_sendhalfbyte:	
  1463                           ; 1 bytes @ 0x0
  1464                           
  1465  0070                     ?_LCD_clear:	
  1466                           ; 1 bytes @ 0x0
  1467                           
  1468  0070                     ?_SPI_notRDY:	
  1469                           ; 1 bytes @ 0x0
  1470                           
  1471  0070                     ?_linkup:	
  1472                           ; 1 bytes @ 0x0
  1473                           
  1474  0070                     ?_fACP:	
  1475                           ; 1 bytes @ 0x0
  1476                           
  1477  0070                     ?_main:	
  1478                           ; 1 bytes @ 0x0
  1479                           
  1480  0070                     ?_fEraseString:	
  1481                           ; 1 bytes @ 0x0
  1482                           
  1483  0070                     ?_SPI_WriteByte:	
  1484                           ; 1 bytes @ 0x0
  1485                           
  1486  0070                     ?_SPI_ReadByte:	
  1487                           ; 1 bytes @ 0x0
  1488                           
  1489  0070                     ?_SPI_ReadStatus:	
  1490                           ; 1 bytes @ 0x0
  1491                           
  1492  0070                     ?i1___lwmod:	
  1493                           ; 1 bytes @ 0x0
  1494                           
  1495  0070                     i1___lwmod@divisor:	
  1496                           ; 2 bytes @ 0x0
  1497                           
  1498                           
  1499                           ; 2 bytes @ 0x0
  1500  0070                     	ds	2
  1501  0072                     i1___lwmod@dividend:
  1502                           
  1503                           ; 2 bytes @ 0x2
  1504  0072                     	ds	2
  1505  0074                     ??i1___lwmod:
  1506                           
  1507                           ; 1 bytes @ 0x4
  1508  0074                     	ds	1
  1509  0075                     i1___lwmod@counter:
  1510                           
  1511                           ; 1 bytes @ 0x5
  1512  0075                     	ds	1
  1513  0076                     ??_linkup:
  1514                           
  1515                           ; 1 bytes @ 0x6
  1516  0076                     	ds	4
  1517                           
  1518                           	psect	cstackBANK0
  1519  0020                     __pcstackBANK0:
  1520  0020                     ?___ftge:
  1521  0020                     ??_init:	
  1522                           ; 1 bit 
  1523                           
  1524  0020                     ??_SPI_init:	
  1525                           ; 1 bytes @ 0x0
  1526                           
  1527  0020                     ??_fShiftData:	
  1528                           ; 1 bytes @ 0x0
  1529                           
  1530  0020                     ?_strcat:	
  1531                           ; 1 bytes @ 0x0
  1532                           
  1533  0020                     ??_isdigit:	
  1534                           ; 1 bytes @ 0x0
  1535                           
  1536  0020                     ??_fACP:	
  1537                           ; 1 bytes @ 0x0
  1538                           
  1539  0020                     ??_fEraseString:	
  1540                           ; 1 bytes @ 0x0
  1541                           
  1542  0020                     ??_SPI_WriteByte:	
  1543                           ; 1 bytes @ 0x0
  1544                           
  1545  0020                     ?_LCD_StringOnOff:	
  1546                           ; 1 bytes @ 0x0
  1547                           
  1548  0020                     ?___wmul:	
  1549                           ; 2 bytes @ 0x0
  1550                           
  1551  0020                     ?___awdiv:	
  1552                           ; 2 bytes @ 0x0
  1553                           
  1554  0020                     ?___lwdiv:	
  1555                           ; 2 bytes @ 0x0
  1556                           
  1557  0020                     ?___ftpack:	
  1558                           ; 2 bytes @ 0x0
  1559                           
  1560  0020                     ?_frexp:	
  1561                           ; 3 bytes @ 0x0
  1562                           
  1563  0020                     fEraseString@string:	
  1564                           ; 3 bytes @ 0x0
  1565                           
  1566  0020                     LCD_StringOnOff@numb:	
  1567                           ; 1 bytes @ 0x0
  1568                           
  1569  0020                     SPI_WriteByte@data:	
  1570                           ; 1 bytes @ 0x0
  1571                           
  1572  0020                     _isdigit$1558:	
  1573                           ; 1 bytes @ 0x0
  1574                           
  1575  0020                     ___wmul@multiplier:	
  1576                           ; 1 bytes @ 0x0
  1577                           
  1578  0020                     ___awdiv@divisor:	
  1579                           ; 2 bytes @ 0x0
  1580                           
  1581  0020                     ___lwdiv@divisor:	
  1582                           ; 2 bytes @ 0x0
  1583                           
  1584  0020                     strcat@from:	
  1585                           ; 2 bytes @ 0x0
  1586                           
  1587  0020                     ___ftpack@arg:	
  1588                           ; 2 bytes @ 0x0
  1589                           
  1590  0020                     ___ftge@ff1:	
  1591                           ; 3 bytes @ 0x0
  1592                           
  1593  0020                     frexp@value:	
  1594                           ; 3 bytes @ 0x0
  1595                           
  1596                           
  1597                           ; 3 bytes @ 0x0
  1598  0020                     	ds	1
  1599  0021                     ??_LCD_StringOnOff:
  1600  0021                     ??_SPI_ReadByte:	
  1601                           ; 1 bytes @ 0x1
  1602                           
  1603  0021                     SPI_ReadByte@data:	
  1604                           ; 1 bytes @ 0x1
  1605                           
  1606  0021                     isdigit@c:	
  1607                           ; 1 bytes @ 0x1
  1608                           
  1609                           
  1610                           ; 1 bytes @ 0x1
  1611  0021                     	ds	1
  1612  0022                     ??_strcat:
  1613  0022                     ??_SPI_ReadStatus:	
  1614                           ; 1 bytes @ 0x2
  1615                           
  1616  0022                     LCD_StringOnOff@st:	
  1617                           ; 1 bytes @ 0x2
  1618                           
  1619  0022                     fShiftData@shiftVar:	
  1620                           ; 1 bytes @ 0x2
  1621                           
  1622  0022                     ___wmul@multiplicand:	
  1623                           ; 1 bytes @ 0x2
  1624                           
  1625  0022                     ___awdiv@dividend:	
  1626                           ; 2 bytes @ 0x2
  1627                           
  1628  0022                     ___lwdiv@dividend:	
  1629                           ; 2 bytes @ 0x2
  1630                           
  1631                           
  1632                           ; 2 bytes @ 0x2
  1633  0022                     	ds	1
  1634  0023                     SPI_ReadStatus@status:
  1635  0023                     ___ftpack@exp:	
  1636                           ; 1 bytes @ 0x3
  1637                           
  1638  0023                     frexp@eptr:	
  1639                           ; 1 bytes @ 0x3
  1640                           
  1641  0023                     strcat@cp:	
  1642                           ; 1 bytes @ 0x3
  1643                           
  1644  0023                     fShiftData@shiftVariable:	
  1645                           ; 1 bytes @ 0x3
  1646                           
  1647  0023                     ___ftge@ff2:	
  1648                           ; 2 bytes @ 0x3
  1649                           
  1650                           
  1651                           ; 3 bytes @ 0x3
  1652  0023                     	ds	1
  1653  0024                     ??_SPI_notRDY:
  1654  0024                     ??_frexp:	
  1655                           ; 1 bytes @ 0x4
  1656                           
  1657  0024                     ??___wmul:	
  1658                           ; 1 bytes @ 0x4
  1659                           
  1660  0024                     ??___awdiv:	
  1661                           ; 1 bytes @ 0x4
  1662                           
  1663  0024                     ??___lwdiv:	
  1664                           ; 1 bytes @ 0x4
  1665                           
  1666  0024                     ___ftpack@sign:	
  1667                           ; 1 bytes @ 0x4
  1668                           
  1669  0024                     strcat@to:	
  1670                           ; 1 bytes @ 0x4
  1671                           
  1672  0024                     ___wmul@product:	
  1673                           ; 1 bytes @ 0x4
  1674                           
  1675                           
  1676                           ; 2 bytes @ 0x4
  1677  0024                     	ds	1
  1678  0025                     ??___ftpack:
  1679  0025                     fShiftData@i:	
  1680                           ; 1 bytes @ 0x5
  1681                           
  1682  0025                     SPI_notRDY@notRDY:	
  1683                           ; 1 bytes @ 0x5
  1684                           
  1685  0025                     ___awdiv@counter:	
  1686                           ; 1 bytes @ 0x5
  1687                           
  1688  0025                     ___lwdiv@quotient:	
  1689                           ; 1 bytes @ 0x5
  1690                           
  1691                           
  1692                           ; 2 bytes @ 0x5
  1693  0025                     	ds	1
  1694  0026                     ?_SPI_Read:
  1695  0026                     ?_SPI_Write:	
  1696                           ; 1 bytes @ 0x6
  1697                           
  1698  0026                     ??_sendhalfbyte:	
  1699                           ; 1 bytes @ 0x6
  1700                           
  1701  0026                     ??___ftge:	
  1702                           ; 1 bytes @ 0x6
  1703                           
  1704  0026                     ___awdiv@sign:	
  1705                           ; 1 bytes @ 0x6
  1706                           
  1707  0026                     SPI_Write@address:	
  1708                           ; 1 bytes @ 0x6
  1709                           
  1710  0026                     SPI_Read@address:	
  1711                           ; 2 bytes @ 0x6
  1712                           
  1713                           
  1714                           ; 2 bytes @ 0x6
  1715  0026                     	ds	1
  1716  0027                     sendhalfbyte@c:
  1717  0027                     ___lwdiv@counter:	
  1718                           ; 1 bytes @ 0x7
  1719                           
  1720  0027                     ___awdiv@quotient:	
  1721                           ; 1 bytes @ 0x7
  1722                           
  1723                           
  1724                           ; 2 bytes @ 0x7
  1725  0027                     	ds	1
  1726  0028                     ??_SPI_Read:
  1727  0028                     ?_sendbyte:	
  1728                           ; 1 bytes @ 0x8
  1729                           
  1730  0028                     ?___lwmod:	
  1731                           ; 1 bytes @ 0x8
  1732                           
  1733  0028                     ?___ftmul:	
  1734                           ; 2 bytes @ 0x8
  1735                           
  1736  0028                     ?___lbtoft:	
  1737                           ; 3 bytes @ 0x8
  1738                           
  1739  0028                     sendbyte@mode:	
  1740                           ; 3 bytes @ 0x8
  1741                           
  1742  0028                     SPI_Write@data:	
  1743                           ; 1 bytes @ 0x8
  1744                           
  1745  0028                     ___lwmod@divisor:	
  1746                           ; 1 bytes @ 0x8
  1747                           
  1748  0028                     ___ftmul@f1:	
  1749                           ; 2 bytes @ 0x8
  1750                           
  1751                           
  1752                           ; 3 bytes @ 0x8
  1753  0028                     	ds	1
  1754  0029                     ??_SPI_Write:
  1755  0029                     ??_sendbyte:	
  1756                           ; 1 bytes @ 0x9
  1757                           
  1758  0029                     ?___bmul:	
  1759                           ; 1 bytes @ 0x9
  1760                           
  1761  0029                     ?___awmod:	
  1762                           ; 1 bytes @ 0x9
  1763                           
  1764  0029                     ___bmul@multiplicand:	
  1765                           ; 2 bytes @ 0x9
  1766                           
  1767  0029                     _SPI_Write$1300:	
  1768                           ; 1 bytes @ 0x9
  1769                           
  1770  0029                     _SPI_Read$1303:	
  1771                           ; 2 bytes @ 0x9
  1772                           
  1773  0029                     ___awmod@divisor:	
  1774                           ; 2 bytes @ 0x9
  1775                           
  1776                           
  1777                           ; 2 bytes @ 0x9
  1778  0029                     	ds	1
  1779  002A                     ??___bmul:
  1780  002A                     sendbyte@hb:	
  1781                           ; 1 bytes @ 0xA
  1782                           
  1783  002A                     ___lwmod@dividend:	
  1784                           ; 1 bytes @ 0xA
  1785                           
  1786                           
  1787                           ; 2 bytes @ 0xA
  1788  002A                     	ds	1
  1789  002B                     ??___lbtoft:
  1790  002B                     sendbyte@c:	
  1791                           ; 1 bytes @ 0xB
  1792                           
  1793  002B                     SPI_Read@data:	
  1794                           ; 1 bytes @ 0xB
  1795                           
  1796  002B                     ___bmul@product:	
  1797                           ; 1 bytes @ 0xB
  1798                           
  1799  002B                     ___awmod@dividend:	
  1800                           ; 1 bytes @ 0xB
  1801                           
  1802  002B                     ___ftmul@f2:	
  1803                           ; 2 bytes @ 0xB
  1804                           
  1805                           
  1806                           ; 3 bytes @ 0xB
  1807  002B                     	ds	1
  1808  002C                     ?_LCD_SetPos:
  1809  002C                     ??_LCD_clear:	
  1810                           ; 1 bytes @ 0xC
  1811                           
  1812  002C                     ??___lwmod:	
  1813                           ; 1 bytes @ 0xC
  1814                           
  1815  002C                     LCD_SetPos@y:	
  1816                           ; 1 bytes @ 0xC
  1817                           
  1818  002C                     ___bmul@multiplier:	
  1819                           ; 1 bytes @ 0xC
  1820                           
  1821                           
  1822                           ; 1 bytes @ 0xC
  1823  002C                     	ds	1
  1824  002D                     ??_LCD_SetPos:
  1825  002D                     ??___awmod:	
  1826                           ; 1 bytes @ 0xD
  1827                           
  1828  002D                     LCD_SetPos@x:	
  1829                           ; 1 bytes @ 0xD
  1830                           
  1831  002D                     ___lwmod@counter:	
  1832                           ; 1 bytes @ 0xD
  1833                           
  1834                           
  1835                           ; 1 bytes @ 0xD
  1836  002D                     	ds	1
  1837  002E                     ??_LCD_init:
  1838  002E                     ?_LCD_string:	
  1839                           ; 1 bytes @ 0xE
  1840                           
  1841  002E                     ??___ftmul:	
  1842                           ; 1 bytes @ 0xE
  1843                           
  1844  002E                     ?_sprintf:	
  1845                           ; 1 bytes @ 0xE
  1846                           
  1847  002E                     ___awmod@counter:	
  1848                           ; 2 bytes @ 0xE
  1849                           
  1850  002E                     LCD_string@st:	
  1851                           ; 1 bytes @ 0xE
  1852                           
  1853  002E                     sprintf@f:	
  1854                           ; 2 bytes @ 0xE
  1855                           
  1856                           
  1857                           ; 2 bytes @ 0xE
  1858  002E                     	ds	1
  1859  002F                     ___awmod@sign:
  1860  002F                     ___lbtoft@c:	
  1861                           ; 1 bytes @ 0xF
  1862                           
  1863                           
  1864                           ; 1 bytes @ 0xF
  1865  002F                     	ds	1
  1866  0030                     ??_LCD_string:
  1867                           
  1868                           ; 1 bytes @ 0x10
  1869  0030                     	ds	1
  1870  0031                     LCD_string@symbol:
  1871                           
  1872                           ; 1 bytes @ 0x11
  1873  0031                     	ds	1
  1874  0032                     LCD_string@i:
  1875  0032                     ___ftmul@exp:	
  1876                           ; 1 bytes @ 0x12
  1877                           
  1878                           
  1879                           ; 1 bytes @ 0x12
  1880  0032                     	ds	1
  1881  0033                     ___ftmul@f3_as_product:
  1882                           
  1883                           ; 3 bytes @ 0x13
  1884  0033                     	ds	3
  1885  0036                     ___ftmul@cntr:
  1886                           
  1887                           ; 1 bytes @ 0x16
  1888  0036                     	ds	1
  1889  0037                     ___ftmul@sign:
  1890                           
  1891                           ; 1 bytes @ 0x17
  1892  0037                     	ds	1
  1893  0038                     ?___ftadd:
  1894  0038                     ___ftadd@f1:	
  1895                           ; 3 bytes @ 0x18
  1896                           
  1897                           
  1898                           ; 3 bytes @ 0x18
  1899  0038                     	ds	2
  1900  003A                     ??_sprintf:
  1901                           
  1902                           ; 1 bytes @ 0x1A
  1903  003A                     	ds	1
  1904  003B                     ___ftadd@f2:
  1905                           
  1906                           ; 3 bytes @ 0x1B
  1907  003B                     	ds	2
  1908  003D                     sprintf@prec:
  1909                           
  1910                           ; 1 bytes @ 0x1D
  1911  003D                     	ds	1
  1912  003E                     ??___ftadd:
  1913  003E                     sprintf@cp:	
  1914                           ; 1 bytes @ 0x1E
  1915                           
  1916                           
  1917                           ; 2 bytes @ 0x1E
  1918  003E                     	ds	2
  1919  0040                     sprintf@flag:
  1920                           
  1921                           ; 1 bytes @ 0x20
  1922  0040                     	ds	1
  1923  0041                     sprintf@ap:
  1924                           
  1925                           ; 1 bytes @ 0x21
  1926  0041                     	ds	1
  1927  0042                     ___ftadd@sign:
  1928  0042                     sprintf@len:	
  1929                           ; 1 bytes @ 0x22
  1930                           
  1931                           
  1932                           ; 2 bytes @ 0x22
  1933  0042                     	ds	1
  1934  0043                     ___ftadd@exp2:
  1935                           
  1936                           ; 1 bytes @ 0x23
  1937  0043                     	ds	1
  1938  0044                     ___ftadd@exp1:
  1939  0044                     sprintf@val:	
  1940                           ; 1 bytes @ 0x24
  1941                           
  1942                           
  1943                           ; 2 bytes @ 0x24
  1944  0044                     	ds	1
  1945  0045                     ?_eval_poly:
  1946  0045                     eval_poly@x:	
  1947                           ; 3 bytes @ 0x25
  1948                           
  1949                           
  1950                           ; 3 bytes @ 0x25
  1951  0045                     	ds	1
  1952  0046                     sprintf@width:
  1953                           
  1954                           ; 2 bytes @ 0x26
  1955  0046                     	ds	2
  1956  0048                     sprintf@c:
  1957  0048                     eval_poly@d:	
  1958                           ; 1 bytes @ 0x28
  1959                           
  1960                           
  1961                           ; 2 bytes @ 0x28
  1962  0048                     	ds	1
  1963  0049                     sprintf@sp:
  1964                           
  1965                           ; 1 bytes @ 0x29
  1966  0049                     	ds	1
  1967  004A                     ??_fMenuStrip:
  1968  004A                     eval_poly@n:	
  1969                           ; 1 bytes @ 0x2A
  1970                           
  1971                           
  1972                           ; 2 bytes @ 0x2A
  1973  004A                     	ds	2
  1974  004C                     ??_eval_poly:
  1975                           
  1976                           ; 1 bytes @ 0x2C
  1977  004C                     	ds	5
  1978  0051                     eval_poly@res:
  1979                           
  1980                           ; 3 bytes @ 0x31
  1981  0051                     	ds	3
  1982  0054                     ?___ftdiv:
  1983  0054                     ___ftdiv@f2:	
  1984                           ; 3 bytes @ 0x34
  1985                           
  1986                           
  1987                           ; 3 bytes @ 0x34
  1988  0054                     	ds	3
  1989  0057                     ___ftdiv@f1:
  1990                           
  1991                           ; 3 bytes @ 0x37
  1992  0057                     	ds	3
  1993  005A                     ??___ftdiv:
  1994                           
  1995                           ; 1 bytes @ 0x3A
  1996  005A                     	ds	4
  1997  005E                     ___ftdiv@cntr:
  1998                           
  1999                           ; 1 bytes @ 0x3E
  2000  005E                     	ds	1
  2001  005F                     ___ftdiv@f3:
  2002                           
  2003                           ; 3 bytes @ 0x3F
  2004  005F                     	ds	3
  2005  0062                     ___ftdiv@exp:
  2006                           
  2007                           ; 1 bytes @ 0x42
  2008  0062                     	ds	1
  2009  0063                     ___ftdiv@sign:
  2010                           
  2011                           ; 1 bytes @ 0x43
  2012  0063                     	ds	1
  2013  0064                     ?___fttol:
  2014  0064                     ___fttol@f1:	
  2015                           ; 4 bytes @ 0x44
  2016                           
  2017                           
  2018                           ; 3 bytes @ 0x44
  2019  0064                     	ds	4
  2020  0068                     ??___fttol:
  2021                           
  2022                           ; 1 bytes @ 0x48
  2023  0068                     	ds	4
  2024  006C                     ?_rThermistor:
  2025                           
  2026                           ; 2 bytes @ 0x4C
  2027  006C                     	ds	2
  2028  006E                     ??_rThermistor:
  2029  006E                     ??___awtoft:	
  2030                           ; 1 bytes @ 0x4E
  2031                           
  2032                           
  2033                           ; 1 bytes @ 0x4E
  2034  006E                     	ds	2
  2035  0070                     ??_rTemperature:
  2036                           
  2037                           	psect	maintext
  2038  0245                     __pmaintext:	
  2039                           ; 1 bytes @ 0x50
  2040 ;;
  2041 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
  2042 ;;
  2043 ;; *************** function _main *****************
  2044 ;; Defined at:
  2045 ;;		line 94 in file "newmain.c"
  2046 ;; Parameters:    Size  Location     Type
  2047 ;;		None
  2048 ;; Auto vars:     Size  Location     Type
  2049 ;;  SPI_i           1   33[BANK1 ] unsigned char 
  2050 ;; Return value:  Size  Location     Type
  2051 ;;                  1    wreg      void 
  2052 ;; Registers used:
  2053 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2054 ;; Tracked objects:
  2055 ;;		On entry : B00/0
  2056 ;;		On exit  : 300/100
  2057 ;;		Unchanged: 0/0
  2058 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2059 ;;      Params:         0       0       0       0       0
  2060 ;;      Locals:         0       0       1       0       0
  2061 ;;      Temps:          0       0       3       0       0
  2062 ;;      Totals:         0       0       4       0       0
  2063 ;;Total ram usage:        4 bytes
  2064 ;; Hardware stack levels required when called: 8
  2065 ;; This function calls:
  2066 ;;		_LCD_SetPos
  2067 ;;		_LCD_init
  2068 ;;		_LCD_string
  2069 ;;		_SPI_Read
  2070 ;;		_SPI_Write
  2071 ;;		_SPI_init
  2072 ;;		_fACP
  2073 ;;		_fMenuStrip
  2074 ;;		_fShiftData
  2075 ;;		_init
  2076 ;;		_rTemperature
  2077 ;; This function is called by:
  2078 ;;		Startup code after reset
  2079 ;; This function uses a non-reentrant model
  2080 ;;
  2081                           
  2082                           
  2083                           ;psect for function _main
  2084  0245                     _main:
  2085                           
  2086                           ;newmain.c: 95: init();
  2087                           
  2088                           ;incstack = 0
  2089                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2090  0245  160A  118A  23B6  120A  118A  	fcall	_init
  2091                           
  2092                           ;newmain.c: 96: SPI_init();
  2093  024A  160A  158A  24A0  120A  118A  	fcall	_SPI_init
  2094                           
  2095                           ;newmain.c: 97: LCD_init();
  2096  024F  160A  118A  2339  120A  118A  	fcall	_LCD_init
  2097                           
  2098                           ;newmain.c: 98: fShiftData(0x00);
  2099  0254  3000               	movlw	0
  2100  0255  160A  158A  26D4  120A  118A  	fcall	_fShiftData
  2101                           
  2102                           ;newmain.c: 99: LCD_SetPos(0,0);
  2103  025A  01AC               	clrf	LCD_SetPos@y
  2104  025B  3000               	movlw	0
  2105  025C  160A  158A  24CF  120A  118A  	fcall	_LCD_SetPos
  2106                           
  2107                           ;newmain.c: 100: LCD_string((char*)"Çàãðóçêà....");
  2108  0261  3046               	movlw	low (STR_1| (0+32768))
  2109  0262  1283               	bcf	3,5	;RP0=0, select bank0
  2110  0263  1303               	bcf	3,6	;RP1=0, select bank0
  2111  0264  00AE               	movwf	LCD_string@st
  2112  0265  3091               	movlw	high (STR_1| (0+32768))
  2113  0266  00AF               	movwf	LCD_string@st+1
  2114  0267  160A  158A  27B1  120A  118A  	fcall	_LCD_string
  2115                           
  2116                           ;newmain.c: 102: if(SPI_Read(100) == 0xFF)
  2117  026C  3064               	movlw	100
  2118  026D  00A6               	movwf	SPI_Read@address
  2119  026E  3000               	movlw	0
  2120  026F  00A7               	movwf	SPI_Read@address+1
  2121  0270  160A  158A  259E  120A  118A  	fcall	_SPI_Read
  2122  0275  3AFF               	xorlw	255
  2123  0276  1D03               	skipz
  2124  0277  2AA0               	goto	l5013
  2125                           
  2126                           ;newmain.c: 103: {;newmain.c: 104: for(unsigned char SPI_i = 0; SPI_i < 100; SPI_i++)
  2127  0278  1683               	bsf	3,5	;RP0=1, select bank1
  2128  0279  01E9               	clrf	main@SPI_i^(0+128)
  2129  027A                     l5005:
  2130                           
  2131                           ;newmain.c: 105: SPI_Write(SPI_i,0x00);
  2132  027A  0869               	movf	main@SPI_i^(0+128),w
  2133  027B  00E6               	movwf	??_main^(0+128)
  2134  027C  01E7               	clrf	(??_main^(0+128)+1)
  2135  027D  0866               	movf	??_main^(0+128),w
  2136  027E  1283               	bcf	3,5	;RP0=0, select bank0
  2137  027F  00A6               	movwf	SPI_Write@address
  2138  0280  1683               	bsf	3,5	;RP0=1, select bank1
  2139  0281  0867               	movf	(??_main+1)^(0+128),w
  2140  0282  1283               	bcf	3,5	;RP0=0, select bank0
  2141  0283  00A7               	movwf	SPI_Write@address+1
  2142  0284  01A8               	clrf	SPI_Write@data
  2143  0285  120A  118A  27CB  120A  118A  	fcall	_SPI_Write
  2144  028A  3001               	movlw	1
  2145  028B  1683               	bsf	3,5	;RP0=1, select bank1
  2146  028C  00E6               	movwf	??_main^(0+128)
  2147  028D  0866               	movf	??_main^(0+128),w
  2148  028E  07E9               	addwf	main@SPI_i^(0+128),f
  2149  028F  3064               	movlw	100
  2150  0290  0269               	subwf	main@SPI_i^(0+128),w
  2151  0291  1C03               	skipc
  2152  0292  2A7A               	goto	l5005
  2153                           
  2154                           ;newmain.c: 106: SPI_Write(100,0x01);
  2155  0293  3064               	movlw	100
  2156  0294  1283               	bcf	3,5	;RP0=0, select bank0
  2157  0295  00A6               	movwf	SPI_Write@address
  2158  0296  3000               	movlw	0
  2159  0297  00A7               	movwf	SPI_Write@address+1
  2160  0298  01A8               	clrf	SPI_Write@data
  2161  0299  0AA8               	incf	SPI_Write@data,f
  2162  029A  120A  118A  27CB  120A  118A  	fcall	_SPI_Write
  2163                           
  2164                           ;newmain.c: 107: }
  2165  029F  2B33               	goto	l181
  2166  02A0                     l5013:
  2167                           
  2168                           ;newmain.c: 108: else if(SPI_Read(100) == 0x01)
  2169  02A0  3064               	movlw	100
  2170  02A1  00A6               	movwf	SPI_Read@address
  2171  02A2  3000               	movlw	0
  2172  02A3  00A7               	movwf	SPI_Read@address+1
  2173  02A4  160A  158A  259E  120A  118A  	fcall	_SPI_Read
  2174  02A9  3A01               	xorlw	1
  2175  02AA  1D03               	skipz
  2176  02AB  2B33               	goto	l181
  2177                           
  2178                           ;newmain.c: 109: {;newmain.c: 110: _settingsBit = SPI_Read(0);
  2179  02AC  3000               	movlw	0
  2180  02AD  00A6               	movwf	SPI_Read@address
  2181  02AE  00A7               	movwf	SPI_Read@address+1
  2182  02AF  160A  158A  259E  120A  118A  	fcall	_SPI_Read
  2183  02B4  1683               	bsf	3,5	;RP0=1, select bank1
  2184  02B5  00E6               	movwf	??_main^(0+128)
  2185  02B6  0866               	movf	??_main^(0+128),w
  2186  02B7  00C4               	movwf	__settingsBit^(0+128)
  2187                           
  2188                           ;newmain.c: 112: _settingTimeImpDO1 = SPI_Read(1);
  2189  02B8  3001               	movlw	1
  2190  02B9  1283               	bcf	3,5	;RP0=0, select bank0
  2191  02BA  00A6               	movwf	SPI_Read@address
  2192  02BB  3000               	movlw	0
  2193  02BC  00A7               	movwf	SPI_Read@address+1
  2194  02BD  160A  158A  259E  120A  118A  	fcall	_SPI_Read
  2195  02C2  1683               	bsf	3,5	;RP0=1, select bank1
  2196  02C3  00E6               	movwf	??_main^(0+128)
  2197  02C4  01E7               	clrf	(??_main^(0+128)+1)
  2198  02C5  0866               	movf	??_main^(0+128),w
  2199  02C6  00B4               	movwf	__settingTimeImpDO1^(0+128)
  2200  02C7  0867               	movf	(??_main+1)^(0+128),w
  2201  02C8  00B5               	movwf	(__settingTimeImpDO1+1)^(0+128)
  2202                           
  2203                           ;newmain.c: 113: _settingTimeImpDO1 <<=8;
  2204  02C9  3008               	movlw	8
  2205  02CA                     u6035:
  2206  02CA  1003               	clrc
  2207  02CB  0DB4               	rlf	__settingTimeImpDO1^(0+128),f
  2208  02CC  0DB5               	rlf	(__settingTimeImpDO1+1)^(0+128),f
  2209  02CD  3EFF               	addlw	-1
  2210  02CE  1D03               	skipz
  2211  02CF  2ACA               	goto	u6035
  2212                           
  2213                           ;newmain.c: 114: _settingTimeImpDO1 |= SPI_Read(2);
  2214  02D0  3002               	movlw	2
  2215  02D1  1283               	bcf	3,5	;RP0=0, select bank0
  2216  02D2  00A6               	movwf	SPI_Read@address
  2217  02D3  3000               	movlw	0
  2218  02D4  00A7               	movwf	SPI_Read@address+1
  2219  02D5  160A  158A  259E  120A  118A  	fcall	_SPI_Read
  2220  02DA  1683               	bsf	3,5	;RP0=1, select bank1
  2221  02DB  00E6               	movwf	??_main^(0+128)
  2222  02DC  01E7               	clrf	(??_main^(0+128)+1)
  2223  02DD  0866               	movf	??_main^(0+128),w
  2224  02DE  04B4               	iorwf	__settingTimeImpDO1^(0+128),f
  2225  02DF  0867               	movf	(??_main+1)^(0+128),w
  2226  02E0  04B5               	iorwf	(__settingTimeImpDO1+1)^(0+128),f
  2227                           
  2228                           ;newmain.c: 116: _settingTimerOnDO2 = SPI_Read(3);
  2229  02E1  3003               	movlw	3
  2230  02E2  1283               	bcf	3,5	;RP0=0, select bank0
  2231  02E3  00A6               	movwf	SPI_Read@address
  2232  02E4  3000               	movlw	0
  2233  02E5  00A7               	movwf	SPI_Read@address+1
  2234  02E6  160A  158A  259E  120A  118A  	fcall	_SPI_Read
  2235  02EB  1683               	bsf	3,5	;RP0=1, select bank1
  2236  02EC  00E6               	movwf	??_main^(0+128)
  2237  02ED  01E7               	clrf	(??_main^(0+128)+1)
  2238  02EE  0866               	movf	??_main^(0+128),w
  2239  02EF  00B2               	movwf	__settingTimerOnDO2^(0+128)
  2240  02F0  0867               	movf	(??_main+1)^(0+128),w
  2241  02F1  00B3               	movwf	(__settingTimerOnDO2+1)^(0+128)
  2242                           
  2243                           ;newmain.c: 117: _settingTimerOnDO2 <<=8;
  2244  02F2  3008               	movlw	8
  2245  02F3                     u6045:
  2246  02F3  1003               	clrc
  2247  02F4  0DB2               	rlf	__settingTimerOnDO2^(0+128),f
  2248  02F5  0DB3               	rlf	(__settingTimerOnDO2+1)^(0+128),f
  2249  02F6  3EFF               	addlw	-1
  2250  02F7  1D03               	skipz
  2251  02F8  2AF3               	goto	u6045
  2252                           
  2253                           ;newmain.c: 118: _settingTimerOnDO2 |= SPI_Read(4);
  2254  02F9  3004               	movlw	4
  2255  02FA  1283               	bcf	3,5	;RP0=0, select bank0
  2256  02FB  00A6               	movwf	SPI_Read@address
  2257  02FC  3000               	movlw	0
  2258  02FD  00A7               	movwf	SPI_Read@address+1
  2259  02FE  160A  158A  259E  120A  118A  	fcall	_SPI_Read
  2260  0303  1683               	bsf	3,5	;RP0=1, select bank1
  2261  0304  00E6               	movwf	??_main^(0+128)
  2262  0305  01E7               	clrf	(??_main^(0+128)+1)
  2263  0306  0866               	movf	??_main^(0+128),w
  2264  0307  04B2               	iorwf	__settingTimerOnDO2^(0+128),f
  2265  0308  0867               	movf	(??_main+1)^(0+128),w
  2266  0309  04B3               	iorwf	(__settingTimerOnDO2+1)^(0+128),f
  2267                           
  2268                           ;newmain.c: 120: _settingTimerOffDO2 = SPI_Read(5);
  2269  030A  3005               	movlw	5
  2270  030B  1283               	bcf	3,5	;RP0=0, select bank0
  2271  030C  00A6               	movwf	SPI_Read@address
  2272  030D  3000               	movlw	0
  2273  030E  00A7               	movwf	SPI_Read@address+1
  2274  030F  160A  158A  259E  120A  118A  	fcall	_SPI_Read
  2275  0314  1683               	bsf	3,5	;RP0=1, select bank1
  2276  0315  00E6               	movwf	??_main^(0+128)
  2277  0316  01E7               	clrf	(??_main^(0+128)+1)
  2278  0317  0866               	movf	??_main^(0+128),w
  2279  0318  00B0               	movwf	__settingTimerOffDO2^(0+128)
  2280  0319  0867               	movf	(??_main+1)^(0+128),w
  2281  031A  00B1               	movwf	(__settingTimerOffDO2+1)^(0+128)
  2282                           
  2283                           ;newmain.c: 121: _settingTimerOffDO2 <<=8;
  2284  031B  3008               	movlw	8
  2285  031C                     u6055:
  2286  031C  1003               	clrc
  2287  031D  0DB0               	rlf	__settingTimerOffDO2^(0+128),f
  2288  031E  0DB1               	rlf	(__settingTimerOffDO2+1)^(0+128),f
  2289  031F  3EFF               	addlw	-1
  2290  0320  1D03               	skipz
  2291  0321  2B1C               	goto	u6055
  2292                           
  2293                           ;newmain.c: 122: _settingTimerOffDO2 |= SPI_Read(6);
  2294  0322  3006               	movlw	6
  2295  0323  1283               	bcf	3,5	;RP0=0, select bank0
  2296  0324  00A6               	movwf	SPI_Read@address
  2297  0325  3000               	movlw	0
  2298  0326  00A7               	movwf	SPI_Read@address+1
  2299  0327  160A  158A  259E  120A  118A  	fcall	_SPI_Read
  2300  032C  1683               	bsf	3,5	;RP0=1, select bank1
  2301  032D  00E6               	movwf	??_main^(0+128)
  2302  032E  01E7               	clrf	(??_main^(0+128)+1)
  2303  032F  0866               	movf	??_main^(0+128),w
  2304  0330  04B0               	iorwf	__settingTimerOffDO2^(0+128),f
  2305  0331  0867               	movf	(??_main+1)^(0+128),w
  2306  0332  04B1               	iorwf	(__settingTimerOffDO2+1)^(0+128),f
  2307  0333                     l181:
  2308                           
  2309                           ;newmain.c: 123: };newmain.c: 124: _delay((unsigned long)((500)*(8000000/4000.0)));
  2310  0333  3006               	movlw	6
  2311  0334  1683               	bsf	3,5	;RP0=1, select bank1
  2312  0335  1303               	bcf	3,6	;RP1=0, select bank1
  2313  0336  00E8               	movwf	(??_main^(0+128)+2)
  2314  0337  3013               	movlw	19
  2315  0338  00E7               	movwf	(??_main^(0+128)+1)
  2316  0339  30AD               	movlw	173
  2317  033A  00E6               	movwf	??_main^(0+128)
  2318  033B                     u6417:
  2319  033B  0BE6               	decfsz	??_main^(0+128),f
  2320  033C  2B3B               	goto	u6417
  2321  033D  0BE7               	decfsz	(??_main^(0+128)+1),f
  2322  033E  2B3B               	goto	u6417
  2323  033F  0BE8               	decfsz	(??_main^(0+128)+2),f
  2324  0340  2B3B               	goto	u6417
  2325  0341                     l5029:
  2326                           
  2327                           ;newmain.c: 128: _second = 0;
  2328  0341  13FA               	bcf	__second/(0+8),__second& (0+7)
  2329                           
  2330                           ;newmain.c: 129: _100ms = 0;
  2331  0342  1683               	bsf	3,5	;RP0=1, select bank1
  2332  0343  1303               	bcf	3,6	;RP1=0, select bank1
  2333  0344  126A               	bcf	(__100ms/(0+8))^(0+128),__100ms& (0+7)
  2334                           
  2335                           ;newmain.c: 130: _minute = 0;
  2336  0345  137A               	bcf	__minute/(0+8),__minute& (0+7)
  2337                           
  2338                           ;newmain.c: 131: _hour = 0;
  2339  0346  106A               	bcf	(__hour/(0+8))^(0+128),__hour& (0+7)
  2340                           
  2341                           ;newmain.c: 134: fACP();
  2342  0347  160A  158A  2762  120A  118A  	fcall	_fACP
  2343                           
  2344                           ;newmain.c: 135: temperatureAI1 = rTemperature(Analog.AI1);
  2345  034C  0825               	movf	(_Analog^(0+128)+1),w
  2346  034D  160A  118A  274E  120A  118A  	fcall	_rTemperature
  2347  0352  1683               	bsf	3,5	;RP0=1, select bank1
  2348  0353  00E6               	movwf	??_main^(0+128)
  2349  0354  0866               	movf	??_main^(0+128),w
  2350  0355  00B9               	movwf	_temperatureAI1^(0+128)
  2351                           
  2352                           ;newmain.c: 136: temperatureAI2 = rTemperature(Analog.AI2);
  2353  0356  0826               	movf	(_Analog^(0+128)+2),w
  2354  0357  160A  118A  274E  120A  118A  	fcall	_rTemperature
  2355  035C  1683               	bsf	3,5	;RP0=1, select bank1
  2356  035D  00E6               	movwf	??_main^(0+128)
  2357  035E  0866               	movf	??_main^(0+128),w
  2358  035F  00B8               	movwf	_temperatureAI2^(0+128)
  2359                           
  2360                           ;newmain.c: 137: fMenuStrip();
  2361  0360  120A  118A  241B  120A  118A  	fcall	_fMenuStrip
  2362                           
  2363                           ;newmain.c: 138: if(flStopBitRecieve)
  2364  0365  1DFA               	btfss	_flStopBitRecieve/(0+8),_flStopBitRecieve& (0+7)
  2365  0366  2B83               	goto	l5063
  2366                           
  2367                           ;newmain.c: 139: {;newmain.c: 140: if(arrCmd[0] == 0xF0 && arrCmd[1] == 0x00 && arrCmd[3
      +                          ] == 0x0F)
  2368  0367  30F0               	movlw	240
  2369  0368  1683               	bsf	3,5	;RP0=1, select bank1
  2370  0369  0620               	xorwf	_arrCmd^(0+128),w
  2371  036A  1D03               	btfss	3,2
  2372  036B  2B83               	goto	l5063
  2373  036C  0821               	movf	(_arrCmd^(0+128)+1),w
  2374  036D  1D03               	btfss	3,2
  2375  036E  2B83               	goto	l5063
  2376  036F  300F               	movlw	15
  2377  0370  0623               	xorwf	(_arrCmd^(0+128)+3),w
  2378  0371  1D03               	btfss	3,2
  2379  0372  2B83               	goto	l5063
  2380                           
  2381                           ;newmain.c: 141: {;newmain.c: 142: if(arrCmd[2] == 0x11 && flDO1 == 0)
  2382  0373  3011               	movlw	17
  2383  0374  0622               	xorwf	(_arrCmd^(0+128)+2),w
  2384  0375  1903               	btfsc	3,2
  2385  0376  1AFA               	btfsc	_flDO1/(0+8),_flDO1& (0+7)
  2386  0377  2B7B               	goto	l5059
  2387                           
  2388                           ;newmain.c: 143: {;newmain.c: 144: ((_tempPinDO) |= 1UL << (3));
  2389  0378  15C3               	bsf	__tempPinDO^(0+128),3
  2390                           
  2391                           ;newmain.c: 145: flDO1 = 1;
  2392  0379  16FA               	bsf	_flDO1/(0+8),_flDO1& (0+7)
  2393                           
  2394                           ;newmain.c: 146: }
  2395  037A  2B83               	goto	l5063
  2396  037B                     l5059:
  2397                           
  2398                           ;newmain.c: 147: else if(arrCmd[2] == 0x22)
  2399  037B  3022               	movlw	34
  2400  037C  0622               	xorwf	(_arrCmd^(0+128)+2),w
  2401  037D  1D03               	btfss	3,2
  2402  037E  2B83               	goto	l5063
  2403                           
  2404                           ;newmain.c: 148: {;newmain.c: 149: ((_tempPinDO) &= ~(1UL << (3)));
  2405  037F  30F7               	movlw	247
  2406  0380  00E6               	movwf	??_main^(0+128)
  2407  0381  0866               	movf	??_main^(0+128),w
  2408  0382  05C3               	andwf	__tempPinDO^(0+128),f
  2409  0383                     l5063:
  2410                           
  2411                           ;newmain.c: 150: };newmain.c: 151: };newmain.c: 152: };newmain.c: 154: if((_settingsBit 
      +                          & (1 << 1)) && (_tempPinDO & (1 << 3)))
  2412  0383  1683               	bsf	3,5	;RP0=1, select bank1
  2413  0384  18C4               	btfsc	__settingsBit^(0+128),1
  2414  0385  1DC3               	btfss	__tempPinDO^(0+128),3
  2415  0386  2BA4               	goto	l189
  2416                           
  2417                           ;newmain.c: 155: {;newmain.c: 156: if(_second) _timerDO1++;
  2418  0387  1FFA               	btfss	__second/(0+8),__second& (0+7)
  2419  0388  2B8F               	goto	l190
  2420  0389  3001               	movlw	1
  2421  038A  07AE               	addwf	__timerDO1^(0+128),f
  2422  038B  1803               	skipnc
  2423  038C  0AAF               	incf	(__timerDO1+1)^(0+128),f
  2424  038D  3000               	movlw	0
  2425  038E  07AF               	addwf	(__timerDO1+1)^(0+128),f
  2426  038F                     l190:
  2427                           
  2428                           ;newmain.c: 157: if(_timerDO1 > (short int)(_settingTimeImpDO1))
  2429  038F  0835               	movf	(__settingTimeImpDO1+1)^(0+128),w
  2430  0390  3A80               	xorlw	128
  2431  0391  00E6               	movwf	??_main^(0+128)
  2432  0392  082F               	movf	(__timerDO1+1)^(0+128),w
  2433  0393  3A80               	xorlw	128
  2434  0394  0266               	subwf	??_main^(0+128),w
  2435  0395  1D03               	skipz
  2436  0396  2B99               	goto	u6165
  2437  0397  082E               	movf	__timerDO1^(0+128),w
  2438  0398  0234               	subwf	__settingTimeImpDO1^(0+128),w
  2439  0399                     u6165:
  2440  0399  1803               	skipnc
  2441  039A  2BB0               	goto	l5081
  2442                           
  2443                           ;newmain.c: 158: {;newmain.c: 159: ((_tempPinDO) &= ~(1UL << (3)));
  2444  039B  30F7               	movlw	247
  2445  039C  1683               	bsf	3,5	;RP0=1, select bank1
  2446  039D  1303               	bcf	3,6	;RP1=0, select bank1
  2447  039E  00E6               	movwf	??_main^(0+128)
  2448  039F  0866               	movf	??_main^(0+128),w
  2449  03A0  05C3               	andwf	__tempPinDO^(0+128),f
  2450                           
  2451                           ;newmain.c: 160: _timerDO1 = 0;
  2452  03A1  01AE               	clrf	__timerDO1^(0+128)
  2453  03A2  01AF               	clrf	(__timerDO1+1)^(0+128)
  2454  03A3  2BB0               	goto	l5081
  2455  03A4                     l189:
  2456                           
  2457                           ;newmain.c: 163: else if(!(_settingsBit & (1 << 1)))
  2458  03A4  18C4               	btfsc	__settingsBit^(0+128),1
  2459  03A5  2BB0               	goto	l5081
  2460                           
  2461                           ;newmain.c: 164: {;newmain.c: 165: if(_tempPinDO & (1 << 3))
  2462  03A6  1DC3               	btfss	__tempPinDO^(0+128),3
  2463  03A7  2BAA               	goto	l194
  2464                           
  2465                           ;newmain.c: 166: ((_tempPinDO) |= 1UL << (3));
  2466  03A8  15C3               	bsf	__tempPinDO^(0+128),3
  2467  03A9  2BB0               	goto	l5081
  2468  03AA                     l194:
  2469                           
  2470                           ;newmain.c: 167: else if (!(_tempPinDO & (1 << 3)))
  2471  03AA  19C3               	btfsc	__tempPinDO^(0+128),3
  2472  03AB  2BB0               	goto	l5081
  2473                           
  2474                           ;newmain.c: 168: ((_tempPinDO) &= ~(1UL << (3)));
  2475  03AC  30F7               	movlw	247
  2476  03AD  00E6               	movwf	??_main^(0+128)
  2477  03AE  0866               	movf	??_main^(0+128),w
  2478  03AF  05C3               	andwf	__tempPinDO^(0+128),f
  2479  03B0                     l5081:
  2480                           
  2481                           ;newmain.c: 169: };newmain.c: 171: if(_settingsBit & (1 << 3))
  2482  03B0  1683               	bsf	3,5	;RP0=1, select bank1
  2483  03B1  1303               	bcf	3,6	;RP1=0, select bank1
  2484  03B2  1DC4               	btfss	__settingsBit^(0+128),3
  2485  03B3  2BEF               	goto	l5111
  2486                           
  2487                           ;newmain.c: 172: {;newmain.c: 173: if(_minute) _timerDO2++;
  2488  03B4  1F7A               	btfss	__minute/(0+8),__minute& (0+7)
  2489  03B5  2BBC               	goto	l5087
  2490  03B6  3001               	movlw	1
  2491  03B7  07AC               	addwf	__timerDO2^(0+128),f
  2492  03B8  1803               	skipnc
  2493  03B9  0AAD               	incf	(__timerDO2+1)^(0+128),f
  2494  03BA  3000               	movlw	0
  2495  03BB  07AD               	addwf	(__timerDO2+1)^(0+128),f
  2496  03BC                     l5087:
  2497                           
  2498                           ;newmain.c: 174: if((_settingsBit & (1 << 4)) && temperatureAI2 <= 20 && !(_tempPinDO & 
      +                          (1 << 4))){
  2499  03BC  1E44               	btfss	__settingsBit^(0+128),4
  2500  03BD  2BC7               	goto	l5097
  2501  03BE  0838               	movf	_temperatureAI2^(0+128),w
  2502  03BF  3A80               	xorlw	128
  2503  03C0  3E6B               	addlw	-149
  2504  03C1  1C03               	btfss	3,0
  2505  03C2  1A43               	btfsc	__tempPinDO^(0+128),4
  2506  03C3  2BC7               	goto	l5097
  2507                           
  2508                           ;newmain.c: 175: ((_tempPinDO) |= 1UL << (4));
  2509  03C4  1643               	bsf	__tempPinDO^(0+128),4
  2510                           
  2511                           ;newmain.c: 176: _timerDO2 = 0;
  2512  03C5  01AC               	clrf	__timerDO2^(0+128)
  2513  03C6  01AD               	clrf	(__timerDO2+1)^(0+128)
  2514  03C7                     l5097:
  2515                           
  2516                           ;newmain.c: 177: };newmain.c: 178: if(!(_tempPinDO & (1 << 4)))
  2517  03C7  1A43               	btfsc	__tempPinDO^(0+128),4
  2518  03C8  2BD9               	goto	l200
  2519                           
  2520                           ;newmain.c: 179: {;newmain.c: 180: if(_timerDO2 >= (short int)(_settingTimerOnDO2))
  2521  03C9  082D               	movf	(__timerDO2+1)^(0+128),w
  2522  03CA  3A80               	xorlw	128
  2523  03CB  00E6               	movwf	??_main^(0+128)
  2524  03CC  0833               	movf	(__settingTimerOnDO2+1)^(0+128),w
  2525  03CD  3A80               	xorlw	128
  2526  03CE  0266               	subwf	??_main^(0+128),w
  2527  03CF  1D03               	skipz
  2528  03D0  2BD3               	goto	u6265
  2529  03D1  0832               	movf	__settingTimerOnDO2^(0+128),w
  2530  03D2  022C               	subwf	__timerDO2^(0+128),w
  2531  03D3                     u6265:
  2532  03D3  1C03               	skipc
  2533  03D4  2BEF               	goto	l5111
  2534                           
  2535                           ;newmain.c: 181: {;newmain.c: 182: ((_tempPinDO) |= 1UL << (4));
  2536  03D5  1683               	bsf	3,5	;RP0=1, select bank1
  2537  03D6  1303               	bcf	3,6	;RP1=0, select bank1
  2538  03D7  1643               	bsf	__tempPinDO^(0+128),4
  2539  03D8  2BED               	goto	l5103
  2540  03D9                     l200:
  2541                           
  2542                           ;newmain.c: 186: else if(_tempPinDO & (1 << 4))
  2543  03D9  1E43               	btfss	__tempPinDO^(0+128),4
  2544  03DA  2BEF               	goto	l5111
  2545                           
  2546                           ;newmain.c: 187: {;newmain.c: 188: if(_timerDO2 >= (short int)(_settingTimerOffDO2))
  2547  03DB  082D               	movf	(__timerDO2+1)^(0+128),w
  2548  03DC  3A80               	xorlw	128
  2549  03DD  00E6               	movwf	??_main^(0+128)
  2550  03DE  0831               	movf	(__settingTimerOffDO2+1)^(0+128),w
  2551  03DF  3A80               	xorlw	128
  2552  03E0  0266               	subwf	??_main^(0+128),w
  2553  03E1  1D03               	skipz
  2554  03E2  2BE5               	goto	u6285
  2555  03E3  0830               	movf	__settingTimerOffDO2^(0+128),w
  2556  03E4  022C               	subwf	__timerDO2^(0+128),w
  2557  03E5                     u6285:
  2558  03E5  1C03               	skipc
  2559  03E6  2BEF               	goto	l5111
  2560                           
  2561                           ;newmain.c: 189: {;newmain.c: 190: ((_tempPinDO) &= ~(1UL << (4)));
  2562  03E7  30EF               	movlw	239
  2563  03E8  1683               	bsf	3,5	;RP0=1, select bank1
  2564  03E9  1303               	bcf	3,6	;RP1=0, select bank1
  2565  03EA  00E6               	movwf	??_main^(0+128)
  2566  03EB  0866               	movf	??_main^(0+128),w
  2567  03EC  05C3               	andwf	__tempPinDO^(0+128),f
  2568  03ED                     l5103:
  2569                           
  2570                           ;newmain.c: 183: _timerDO2 = 0;
  2571  03ED  01AC               	clrf	__timerDO2^(0+128)
  2572  03EE  01AD               	clrf	(__timerDO2+1)^(0+128)
  2573  03EF                     l5111:
  2574                           
  2575                           ;newmain.c: 192: };newmain.c: 193: };newmain.c: 194: };newmain.c: 197: if((RB3 && RB4) &
      +                          & (!(_tempPinDO & (1 << 5))))
  2576  03EF  1283               	bcf	3,5	;RP0=0, select bank0
  2577  03F0  1303               	bcf	3,6	;RP1=0, select bank0
  2578  03F1  1986               	btfsc	6,3	;volatile
  2579  03F2  1E06               	btfss	6,4	;volatile
  2580  03F3  2BF9               	goto	l205
  2581  03F4  1683               	bsf	3,5	;RP0=1, select bank1
  2582  03F5  1AC3               	btfsc	__tempPinDO^(0+128),5
  2583  03F6  2BF9               	goto	l205
  2584                           
  2585                           ;newmain.c: 198: ((_tempPinDO) |= 1UL << (5));
  2586  03F7  16C3               	bsf	__tempPinDO^(0+128),5
  2587  03F8  2C05               	goto	l5123
  2588  03F9                     l205:
  2589                           
  2590                           ;newmain.c: 199: else if (!(RB3 && RB4) && (_tempPinDO & (1 << 5)))
  2591  03F9  1283               	bcf	3,5	;RP0=0, select bank0
  2592  03FA  1D86               	btfss	6,3	;volatile
  2593  03FB  2BFE               	goto	l209
  2594  03FC  1A06               	btfsc	6,4	;volatile
  2595  03FD  2C05               	goto	l5123
  2596  03FE                     l209:
  2597  03FE  1683               	bsf	3,5	;RP0=1, select bank1
  2598  03FF  1EC3               	btfss	__tempPinDO^(0+128),5
  2599  0400  2C05               	goto	l5123
  2600                           
  2601                           ;newmain.c: 200: ((_tempPinDO) &= ~(1UL << (5)));
  2602  0401  30DF               	movlw	223
  2603  0402  00E6               	movwf	??_main^(0+128)
  2604  0403  0866               	movf	??_main^(0+128),w
  2605  0404  05C3               	andwf	__tempPinDO^(0+128),f
  2606  0405                     l5123:
  2607                           
  2608                           ;newmain.c: 203: if((RB5 || RB6) && (!(_tempPinDO & (1 << 6))))
  2609  0405  1283               	bcf	3,5	;RP0=0, select bank0
  2610  0406  1A86               	btfsc	6,5	;volatile
  2611  0407  2C0A               	goto	l212
  2612  0408  1F06               	btfss	6,6	;volatile
  2613  0409  2C0F               	goto	l210
  2614  040A                     l212:
  2615  040A  1683               	bsf	3,5	;RP0=1, select bank1
  2616  040B  1B43               	btfsc	__tempPinDO^(0+128),6
  2617  040C  2C0F               	goto	l210
  2618                           
  2619                           ;newmain.c: 204: ((_tempPinDO) |= 1UL << (6));
  2620  040D  1743               	bsf	__tempPinDO^(0+128),6
  2621  040E  2B41               	goto	l5029
  2622  040F                     l210:
  2623                           
  2624                           ;newmain.c: 205: else if (!(RB5 || RB6) && (_tempPinDO & (1 << 6)))
  2625  040F  1283               	bcf	3,5	;RP0=0, select bank0
  2626  0410  1E86               	btfss	6,5	;volatile
  2627  0411  1B06               	btfsc	6,6	;volatile
  2628  0412  2B41               	goto	l5029
  2629  0413  1683               	bsf	3,5	;RP0=1, select bank1
  2630  0414  1F43               	btfss	__tempPinDO^(0+128),6
  2631  0415  2B41               	goto	l5029
  2632                           
  2633                           ;newmain.c: 206: ((_tempPinDO) &= ~(1UL << (6)));
  2634  0416  30BF               	movlw	191
  2635  0417  00E6               	movwf	??_main^(0+128)
  2636  0418  0866               	movf	??_main^(0+128),w
  2637  0419  05C3               	andwf	__tempPinDO^(0+128),f
  2638  041A  2B41               	goto	l5029
  2639  041B                     __end_of_main:
  2640                           
  2641                           	psect	text1
  2642  174E                     __ptext1:	
  2643 ;; *************** function _rTemperature *****************
  2644 ;; Defined at:
  2645 ;;		line 8 in file "temp_ntc.c"
  2646 ;; Parameters:    Size  Location     Type
  2647 ;;  analogAI        1    wreg     unsigned char 
  2648 ;; Auto vars:     Size  Location     Type
  2649 ;;  analogAI        1   29[BANK1 ] unsigned char 
  2650 ;; Return value:  Size  Location     Type
  2651 ;;                  1    wreg      char 
  2652 ;; Registers used:
  2653 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2654 ;; Tracked objects:
  2655 ;;		On entry : 300/100
  2656 ;;		On exit  : 200/0
  2657 ;;		Unchanged: 0/0
  2658 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2659 ;;      Params:         0       0       0       0       0
  2660 ;;      Locals:         0       0      10       0       0
  2661 ;;      Temps:          0       0       0       0       0
  2662 ;;      Totals:         0       0      10       0       0
  2663 ;;Total ram usage:       10 bytes
  2664 ;; Hardware stack levels used: 1
  2665 ;; Hardware stack levels required when called: 6
  2666 ;; This function calls:
  2667 ;;		___awtoft
  2668 ;;		___ftadd
  2669 ;;		___ftdiv
  2670 ;;		___fttol
  2671 ;;		_log
  2672 ;;		_rThermistor
  2673 ;; This function is called by:
  2674 ;;		_main
  2675 ;; This function uses a non-reentrant model
  2676 ;;
  2677                           
  2678                           
  2679                           ;psect for function _rTemperature
  2680  174E                     _rTemperature:
  2681                           
  2682                           ;incstack = 0
  2683                           ; Regs used in _rTemperature: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2684                           ;rTemperature@analogAI stored from wreg
  2685  174E  00E5               	movwf	rTemperature@analogAI^(0+128)
  2686                           
  2687                           ;temp_ntc.c: 9: if(analogAI == 255) return 0;
  2688  174F  0A65               	incf	rTemperature@analogAI^(0+128),w
  2689  1750  1D03               	btfss	3,2
  2690  1751  2F54               	goto	l4477
  2691  1752  3000               	movlw	0
  2692  1753  0008               	return
  2693  1754                     l4477:
  2694                           
  2695                           ;temp_ntc.c: 10: return (1 / ((log(10000.0 / rThermistor(analogAI)) / 3892.48) + (1.0 / 
      +                          (25 + 273.15)))) - 273.15;
  2696  1754  0865               	movf	rTemperature@analogAI^(0+128),w
  2697  1755  160A  118A  2273  160A  118A  	fcall	_rThermistor
  2698  175A  086D               	movf	?_rThermistor+1,w
  2699  175B  1683               	bsf	3,5	;RP0=1, select bank1
  2700  175C  00D3               	movwf	(___awtoft@c+1)^(0+128)
  2701  175D  1283               	bcf	3,5	;RP0=0, select bank0
  2702  175E  086C               	movf	?_rThermistor,w
  2703  175F  1683               	bsf	3,5	;RP0=1, select bank1
  2704  1760  00D2               	movwf	___awtoft@c^(0+128)
  2705  1761  160A  158A  2547  160A  118A  	fcall	___awtoft
  2706  1766  0852               	movf	?___awtoft^(0+128),w
  2707  1767  00DC               	movwf	_rTemperature$1769^(0+128)
  2708  1768  0853               	movf	(?___awtoft+1)^(0+128),w
  2709  1769  00DD               	movwf	(_rTemperature$1769+1)^(0+128)
  2710  176A  0854               	movf	(?___awtoft+2)^(0+128),w
  2711  176B  00DE               	movwf	(_rTemperature$1769+2)^(0+128)
  2712                           
  2713                           ;temp_ntc.c: 10: return (1 / ((log(10000.0 / rThermistor(analogAI)) / 3892.48) + (1.0 / 
      +                          (25 + 273.15)))) - 273.15;
  2714  176C  3040               	movlw	64
  2715  176D  1283               	bcf	3,5	;RP0=0, select bank0
  2716  176E  00D7               	movwf	___ftdiv@f1
  2717  176F  301C               	movlw	28
  2718  1770  00D8               	movwf	___ftdiv@f1+1
  2719  1771  3046               	movlw	70
  2720  1772  00D9               	movwf	___ftdiv@f1+2
  2721  1773  1683               	bsf	3,5	;RP0=1, select bank1
  2722  1774  085C               	movf	_rTemperature$1769^(0+128),w
  2723  1775  1283               	bcf	3,5	;RP0=0, select bank0
  2724  1776  00D4               	movwf	___ftdiv@f2
  2725  1777  1683               	bsf	3,5	;RP0=1, select bank1
  2726  1778  085D               	movf	(_rTemperature$1769+1)^(0+128),w
  2727  1779  1283               	bcf	3,5	;RP0=0, select bank0
  2728  177A  00D5               	movwf	___ftdiv@f2+1
  2729  177B  1683               	bsf	3,5	;RP0=1, select bank1
  2730  177C  085E               	movf	(_rTemperature$1769+2)^(0+128),w
  2731  177D  1283               	bcf	3,5	;RP0=0, select bank0
  2732  177E  00D6               	movwf	___ftdiv@f2+2
  2733  177F  160A  118A  255B  160A  118A  	fcall	___ftdiv
  2734  1784  0854               	movf	?___ftdiv,w
  2735  1785  1683               	bsf	3,5	;RP0=1, select bank1
  2736  1786  00D6               	movwf	log@x^(0+128)
  2737  1787  1283               	bcf	3,5	;RP0=0, select bank0
  2738  1788  0855               	movf	?___ftdiv+1,w
  2739  1789  1683               	bsf	3,5	;RP0=1, select bank1
  2740  178A  00D7               	movwf	(log@x+1)^(0+128)
  2741  178B  1283               	bcf	3,5	;RP0=0, select bank0
  2742  178C  0856               	movf	?___ftdiv+2,w
  2743  178D  1683               	bsf	3,5	;RP0=1, select bank1
  2744  178E  00D8               	movwf	(log@x+2)^(0+128)
  2745  178F  120A  118A  2635  160A  118A  	fcall	_log
  2746  1794  0856               	movf	?_log^(0+128),w
  2747  1795  00DF               	movwf	_rTemperature$1770^(0+128)
  2748  1796  0857               	movf	(?_log+1)^(0+128),w
  2749  1797  00E0               	movwf	(_rTemperature$1770+1)^(0+128)
  2750  1798  0858               	movf	(?_log+2)^(0+128),w
  2751  1799  00E1               	movwf	(_rTemperature$1770+2)^(0+128)
  2752                           
  2753                           ;temp_ntc.c: 10: return (1 / ((log(10000.0 / rThermistor(analogAI)) / 3892.48) + (1.0 / 
      +                          (25 + 273.15)))) - 273.15;
  2754  179A  085F               	movf	_rTemperature$1770^(0+128),w
  2755  179B  1283               	bcf	3,5	;RP0=0, select bank0
  2756  179C  00D7               	movwf	___ftdiv@f1
  2757  179D  1683               	bsf	3,5	;RP0=1, select bank1
  2758  179E  0860               	movf	(_rTemperature$1770+1)^(0+128),w
  2759  179F  1283               	bcf	3,5	;RP0=0, select bank0
  2760  17A0  00D8               	movwf	___ftdiv@f1+1
  2761  17A1  1683               	bsf	3,5	;RP0=1, select bank1
  2762  17A2  0861               	movf	(_rTemperature$1770+2)^(0+128),w
  2763  17A3  1283               	bcf	3,5	;RP0=0, select bank0
  2764  17A4  00D9               	movwf	___ftdiv@f1+2
  2765  17A5  3048               	movlw	72
  2766  17A6  00D4               	movwf	___ftdiv@f2
  2767  17A7  3073               	movlw	115
  2768  17A8  00D5               	movwf	___ftdiv@f2+1
  2769  17A9  3045               	movlw	69
  2770  17AA  00D6               	movwf	___ftdiv@f2+2
  2771  17AB  160A  118A  255B  160A  118A  	fcall	___ftdiv
  2772  17B0  0854               	movf	?___ftdiv,w
  2773  17B1  00BB               	movwf	___ftadd@f2
  2774  17B2  0855               	movf	?___ftdiv+1,w
  2775  17B3  00BC               	movwf	___ftadd@f2+1
  2776  17B4  0856               	movf	?___ftdiv+2,w
  2777  17B5  00BD               	movwf	___ftadd@f2+2
  2778  17B6  30CF               	movlw	207
  2779  17B7  00B8               	movwf	___ftadd@f1
  2780  17B8  305B               	movlw	91
  2781  17B9  00B9               	movwf	___ftadd@f1+1
  2782  17BA  303B               	movlw	59
  2783  17BB  00BA               	movwf	___ftadd@f1+2
  2784  17BC  120A  118A  2530  160A  118A  	fcall	___ftadd
  2785  17C1  0838               	movf	?___ftadd,w
  2786  17C2  1683               	bsf	3,5	;RP0=1, select bank1
  2787  17C3  00E2               	movwf	_rTemperature$1771^(0+128)
  2788  17C4  1283               	bcf	3,5	;RP0=0, select bank0
  2789  17C5  0839               	movf	?___ftadd+1,w
  2790  17C6  1683               	bsf	3,5	;RP0=1, select bank1
  2791  17C7  00E3               	movwf	(_rTemperature$1771+1)^(0+128)
  2792  17C8  1283               	bcf	3,5	;RP0=0, select bank0
  2793  17C9  083A               	movf	?___ftadd+2,w
  2794  17CA  1683               	bsf	3,5	;RP0=1, select bank1
  2795  17CB  00E4               	movwf	(_rTemperature$1771+2)^(0+128)
  2796                           
  2797                           ;temp_ntc.c: 10: return (1 / ((log(10000.0 / rThermistor(analogAI)) / 3892.48) + (1.0 / 
      +                          (25 + 273.15)))) - 273.15;
  2798  17CC  3000               	movlw	0
  2799  17CD  1283               	bcf	3,5	;RP0=0, select bank0
  2800  17CE  00D7               	movwf	___ftdiv@f1
  2801  17CF  3080               	movlw	128
  2802  17D0  00D8               	movwf	___ftdiv@f1+1
  2803  17D1  303F               	movlw	63
  2804  17D2  00D9               	movwf	___ftdiv@f1+2
  2805  17D3  1683               	bsf	3,5	;RP0=1, select bank1
  2806  17D4  0862               	movf	_rTemperature$1771^(0+128),w
  2807  17D5  1283               	bcf	3,5	;RP0=0, select bank0
  2808  17D6  00D4               	movwf	___ftdiv@f2
  2809  17D7  1683               	bsf	3,5	;RP0=1, select bank1
  2810  17D8  0863               	movf	(_rTemperature$1771+1)^(0+128),w
  2811  17D9  1283               	bcf	3,5	;RP0=0, select bank0
  2812  17DA  00D5               	movwf	___ftdiv@f2+1
  2813  17DB  1683               	bsf	3,5	;RP0=1, select bank1
  2814  17DC  0864               	movf	(_rTemperature$1771+2)^(0+128),w
  2815  17DD  1283               	bcf	3,5	;RP0=0, select bank0
  2816  17DE  00D6               	movwf	___ftdiv@f2+2
  2817  17DF  160A  118A  255B  160A  118A  	fcall	___ftdiv
  2818  17E4  0854               	movf	?___ftdiv,w
  2819  17E5  00BB               	movwf	___ftadd@f2
  2820  17E6  0855               	movf	?___ftdiv+1,w
  2821  17E7  00BC               	movwf	___ftadd@f2+1
  2822  17E8  0856               	movf	?___ftdiv+2,w
  2823  17E9  00BD               	movwf	___ftadd@f2+2
  2824  17EA  3093               	movlw	147
  2825  17EB  00B8               	movwf	___ftadd@f1
  2826  17EC  3088               	movlw	136
  2827  17ED  00B9               	movwf	___ftadd@f1+1
  2828  17EE  30C3               	movlw	195
  2829  17EF  00BA               	movwf	___ftadd@f1+2
  2830  17F0  120A  118A  2530  160A  118A  	fcall	___ftadd
  2831  17F5  0838               	movf	?___ftadd,w
  2832  17F6  00E4               	movwf	___fttol@f1
  2833  17F7  0839               	movf	?___ftadd+1,w
  2834  17F8  00E5               	movwf	___fttol@f1+1
  2835  17F9  083A               	movf	?___ftadd+2,w
  2836  17FA  00E6               	movwf	___fttol@f1+2
  2837  17FB  160A  118A  24C9   	fcall	___fttol
  2838  17FE  0864               	movf	?___fttol,w
  2839  17FF  0008               	return
  2840  1800                     __end_of_rTemperature:
  2841                           
  2842                           	psect	text2
  2843  1273                     __ptext2:	
  2844 ;; *************** function _rThermistor *****************
  2845 ;; Defined at:
  2846 ;;		line 3 in file "temp_ntc.c"
  2847 ;; Parameters:    Size  Location     Type
  2848 ;;  analogAI        1    wreg     unsigned char 
  2849 ;; Auto vars:     Size  Location     Type
  2850 ;;  analogAI        1    9[BANK1 ] unsigned char 
  2851 ;;  A               3    6[BANK1 ] float 
  2852 ;; Return value:  Size  Location     Type
  2853 ;;                  2   76[BANK0 ] short 
  2854 ;; Registers used:
  2855 ;;		wreg, status,2, status,0, pclath, cstack
  2856 ;; Tracked objects:
  2857 ;;		On entry : 300/100
  2858 ;;		On exit  : 300/0
  2859 ;;		Unchanged: 0/0
  2860 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2861 ;;      Params:         0       2       0       0       0
  2862 ;;      Locals:         0       0       4       0       0
  2863 ;;      Temps:          0       0       0       0       0
  2864 ;;      Totals:         0       2       4       0       0
  2865 ;;Total ram usage:        6 bytes
  2866 ;; Hardware stack levels used: 1
  2867 ;; Hardware stack levels required when called: 4
  2868 ;; This function calls:
  2869 ;;		___ftadd
  2870 ;;		___ftdiv
  2871 ;;		___ftmul
  2872 ;;		___fttol
  2873 ;;		___lbtoft
  2874 ;; This function is called by:
  2875 ;;		_rTemperature
  2876 ;; This function uses a non-reentrant model
  2877 ;;
  2878                           
  2879                           
  2880                           ;psect for function _rThermistor
  2881  1273                     _rThermistor:
  2882                           
  2883                           ;incstack = 0
  2884                           ; Regs used in _rThermistor: [wreg+status,2+status,0+pclath+cstack]
  2885                           ;rThermistor@analogAI stored from wreg
  2886  1273  00D1               	movwf	rThermistor@analogAI^(0+128)
  2887                           
  2888                           ;temp_ntc.c: 4: float A = (255.0 / (float)analogAI) - 1.0;
  2889  1274  3000               	movlw	0
  2890  1275  1283               	bcf	3,5	;RP0=0, select bank0
  2891  1276  00B8               	movwf	___ftadd@f1
  2892  1277  3080               	movlw	128
  2893  1278  00B9               	movwf	___ftadd@f1+1
  2894  1279  30BF               	movlw	191
  2895  127A  00BA               	movwf	___ftadd@f1+2
  2896  127B  1683               	bsf	3,5	;RP0=1, select bank1
  2897  127C  0851               	movf	rThermistor@analogAI^(0+128),w
  2898  127D  160A  158A  24E9  160A  118A  	fcall	___lbtoft
  2899  1282  0828               	movf	?___lbtoft,w
  2900  1283  00D4               	movwf	___ftdiv@f2
  2901  1284  0829               	movf	?___lbtoft+1,w
  2902  1285  00D5               	movwf	___ftdiv@f2+1
  2903  1286  082A               	movf	?___lbtoft+2,w
  2904  1287  00D6               	movwf	___ftdiv@f2+2
  2905  1288  3000               	movlw	0
  2906  1289  00D7               	movwf	___ftdiv@f1
  2907  128A  307F               	movlw	127
  2908  128B  00D8               	movwf	___ftdiv@f1+1
  2909  128C  3043               	movlw	67
  2910  128D  00D9               	movwf	___ftdiv@f1+2
  2911  128E  160A  118A  255B  160A  118A  	fcall	___ftdiv
  2912  1293  0854               	movf	?___ftdiv,w
  2913  1294  00BB               	movwf	___ftadd@f2
  2914  1295  0855               	movf	?___ftdiv+1,w
  2915  1296  00BC               	movwf	___ftadd@f2+1
  2916  1297  0856               	movf	?___ftdiv+2,w
  2917  1298  00BD               	movwf	___ftadd@f2+2
  2918  1299  120A  118A  2530  160A  118A  	fcall	___ftadd
  2919  129E  0838               	movf	?___ftadd,w
  2920  129F  1683               	bsf	3,5	;RP0=1, select bank1
  2921  12A0  00CE               	movwf	rThermistor@A^(0+128)
  2922  12A1  1283               	bcf	3,5	;RP0=0, select bank0
  2923  12A2  0839               	movf	?___ftadd+1,w
  2924  12A3  1683               	bsf	3,5	;RP0=1, select bank1
  2925  12A4  00CF               	movwf	(rThermistor@A+1)^(0+128)
  2926  12A5  1283               	bcf	3,5	;RP0=0, select bank0
  2927  12A6  083A               	movf	?___ftadd+2,w
  2928  12A7  1683               	bsf	3,5	;RP0=1, select bank1
  2929  12A8  00D0               	movwf	(rThermistor@A+2)^(0+128)
  2930                           
  2931                           ;temp_ntc.c: 5: return A * 10000;
  2932  12A9  084E               	movf	rThermistor@A^(0+128),w
  2933  12AA  1283               	bcf	3,5	;RP0=0, select bank0
  2934  12AB  00AB               	movwf	___ftmul@f2
  2935  12AC  1683               	bsf	3,5	;RP0=1, select bank1
  2936  12AD  084F               	movf	(rThermistor@A+1)^(0+128),w
  2937  12AE  1283               	bcf	3,5	;RP0=0, select bank0
  2938  12AF  00AC               	movwf	___ftmul@f2+1
  2939  12B0  1683               	bsf	3,5	;RP0=1, select bank1
  2940  12B1  0850               	movf	(rThermistor@A+2)^(0+128),w
  2941  12B2  1283               	bcf	3,5	;RP0=0, select bank0
  2942  12B3  00AD               	movwf	___ftmul@f2+2
  2943  12B4  3040               	movlw	64
  2944  12B5  00A8               	movwf	___ftmul@f1
  2945  12B6  301C               	movlw	28
  2946  12B7  00A9               	movwf	___ftmul@f1+1
  2947  12B8  3046               	movlw	70
  2948  12B9  00AA               	movwf	___ftmul@f1+2
  2949  12BA  120A  118A  2718  160A  118A  	fcall	___ftmul
  2950  12BF  0828               	movf	?___ftmul,w
  2951  12C0  00E4               	movwf	___fttol@f1
  2952  12C1  0829               	movf	?___ftmul+1,w
  2953  12C2  00E5               	movwf	___fttol@f1+1
  2954  12C3  082A               	movf	?___ftmul+2,w
  2955  12C4  00E6               	movwf	___fttol@f1+2
  2956  12C5  160A  118A  24C9   	fcall	___fttol
  2957  12C8  0865               	movf	?___fttol+1,w
  2958  12C9  00ED               	movwf	?_rThermistor+1
  2959  12CA  0864               	movf	?___fttol,w
  2960  12CB  00EC               	movwf	?_rThermistor
  2961  12CC  0008               	return
  2962  12CD                     __end_of_rThermistor:
  2963                           
  2964                           	psect	text3
  2965  1CE9                     __ptext3:	
  2966 ;; *************** function ___lbtoft *****************
  2967 ;; Defined at:
  2968 ;;		line 27 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\lbtoft.c"
  2969 ;; Parameters:    Size  Location     Type
  2970 ;;  c               1    wreg     unsigned char 
  2971 ;; Auto vars:     Size  Location     Type
  2972 ;;  c               1   15[BANK0 ] unsigned char 
  2973 ;; Return value:  Size  Location     Type
  2974 ;;                  3    8[BANK0 ] float 
  2975 ;; Registers used:
  2976 ;;		wreg, status,2, status,0, pclath, cstack
  2977 ;; Tracked objects:
  2978 ;;		On entry : 300/100
  2979 ;;		On exit  : 300/0
  2980 ;;		Unchanged: 0/0
  2981 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2982 ;;      Params:         0       3       0       0       0
  2983 ;;      Locals:         0       1       0       0       0
  2984 ;;      Temps:          0       4       0       0       0
  2985 ;;      Totals:         0       8       0       0       0
  2986 ;;Total ram usage:        8 bytes
  2987 ;; Hardware stack levels used: 1
  2988 ;; Hardware stack levels required when called: 3
  2989 ;; This function calls:
  2990 ;;		___ftpack
  2991 ;; This function is called by:
  2992 ;;		_rThermistor
  2993 ;; This function uses a non-reentrant model
  2994 ;;
  2995                           
  2996                           
  2997                           ;psect for function ___lbtoft
  2998  1CE9                     ___lbtoft:
  2999                           
  3000                           ;incstack = 0
  3001                           ; Regs used in ___lbtoft: [wreg+status,2+status,0+pclath+cstack]
  3002                           ;___lbtoft@c stored from wreg
  3003  1CE9  1283               	bcf	3,5	;RP0=0, select bank0
  3004  1CEA  00AF               	movwf	___lbtoft@c
  3005  1CEB  082F               	movf	___lbtoft@c,w
  3006  1CEC  00AB               	movwf	??___lbtoft
  3007  1CED  01AC               	clrf	??___lbtoft+1
  3008  1CEE  01AD               	clrf	??___lbtoft+2
  3009  1CEF  082B               	movf	??___lbtoft,w
  3010  1CF0  00A0               	movwf	___ftpack@arg
  3011  1CF1  082C               	movf	??___lbtoft+1,w
  3012  1CF2  00A1               	movwf	___ftpack@arg+1
  3013  1CF3  082D               	movf	??___lbtoft+2,w
  3014  1CF4  00A2               	movwf	___ftpack@arg+2
  3015  1CF5  308E               	movlw	142
  3016  1CF6  00AE               	movwf	??___lbtoft+3
  3017  1CF7  082E               	movf	??___lbtoft+3,w
  3018  1CF8  00A3               	movwf	___ftpack@exp
  3019  1CF9  01A4               	clrf	___ftpack@sign
  3020  1CFA  160A  118A  22CD   	fcall	___ftpack
  3021  1CFD  0820               	movf	?___ftpack,w
  3022  1CFE  00A8               	movwf	?___lbtoft
  3023  1CFF  0821               	movf	?___ftpack+1,w
  3024  1D00  00A9               	movwf	?___lbtoft+1
  3025  1D01  0822               	movf	?___ftpack+2,w
  3026  1D02  00AA               	movwf	?___lbtoft+2
  3027  1D03  0008               	return
  3028  1D04                     __end_of___lbtoft:
  3029                           
  3030                           	psect	text4
  3031  14C9                     __ptext4:	
  3032 ;; *************** function ___fttol *****************
  3033 ;; Defined at:
  3034 ;;		line 44 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\fttol.c"
  3035 ;; Parameters:    Size  Location     Type
  3036 ;;  f1              3   68[BANK0 ] float 
  3037 ;; Auto vars:     Size  Location     Type
  3038 ;;  lval            4    1[BANK1 ] unsigned long 
  3039 ;;  exp1            1    5[BANK1 ] unsigned char 
  3040 ;;  sign1           1    0[BANK1 ] unsigned char 
  3041 ;; Return value:  Size  Location     Type
  3042 ;;                  4   68[BANK0 ] long 
  3043 ;; Registers used:
  3044 ;;		wreg, status,2, status,0
  3045 ;; Tracked objects:
  3046 ;;		On entry : 300/0
  3047 ;;		On exit  : 300/0
  3048 ;;		Unchanged: 0/0
  3049 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3050 ;;      Params:         0       4       0       0       0
  3051 ;;      Locals:         0       0       6       0       0
  3052 ;;      Temps:          0       4       0       0       0
  3053 ;;      Totals:         0       8       6       0       0
  3054 ;;Total ram usage:       14 bytes
  3055 ;; Hardware stack levels used: 1
  3056 ;; Hardware stack levels required when called: 2
  3057 ;; This function calls:
  3058 ;;		Nothing
  3059 ;; This function is called by:
  3060 ;;		_rThermistor
  3061 ;;		_rTemperature
  3062 ;; This function uses a non-reentrant model
  3063 ;;
  3064                           
  3065                           
  3066                           ;psect for function ___fttol
  3067  14C9                     ___fttol:
  3068                           
  3069                           ;incstack = 0
  3070                           ; Regs used in ___fttol: [wreg+status,2+status,0]
  3071  14C9  0864               	movf	___fttol@f1,w
  3072  14CA  00E8               	movwf	??___fttol
  3073  14CB  0865               	movf	___fttol@f1+1,w
  3074  14CC  00E9               	movwf	??___fttol+1
  3075  14CD  0866               	movf	___fttol@f1+2,w
  3076  14CE  00EA               	movwf	??___fttol+2
  3077  14CF  1003               	clrc
  3078  14D0  0D69               	rlf	??___fttol+1,w
  3079  14D1  0D6A               	rlf	??___fttol+2,w
  3080  14D2  00EB               	movwf	??___fttol+3
  3081  14D3  086B               	movf	??___fttol+3,w
  3082  14D4  1683               	bsf	3,5	;RP0=1, select bank1
  3083  14D5  00CD               	movwf	___fttol@exp1^(0+128)
  3084  14D6  084D               	movf	___fttol@exp1^(0+128),w
  3085  14D7  1D03               	btfss	3,2
  3086  14D8  2CE3               	goto	l3697
  3087  14D9                     l3693:
  3088  14D9  3000               	movlw	0
  3089  14DA  1283               	bcf	3,5	;RP0=0, select bank0
  3090  14DB  00E7               	movwf	?___fttol+3
  3091  14DC  3000               	movlw	0
  3092  14DD  00E6               	movwf	?___fttol+2
  3093  14DE  3000               	movlw	0
  3094  14DF  00E5               	movwf	?___fttol+1
  3095  14E0  3000               	movlw	0
  3096  14E1  00E4               	movwf	?___fttol
  3097  14E2  0008               	return
  3098  14E3                     l3697:
  3099  14E3  1283               	bcf	3,5	;RP0=0, select bank0
  3100  14E4  0864               	movf	___fttol@f1,w
  3101  14E5  00E8               	movwf	??___fttol
  3102  14E6  0865               	movf	___fttol@f1+1,w
  3103  14E7  00E9               	movwf	??___fttol+1
  3104  14E8  0866               	movf	___fttol@f1+2,w
  3105  14E9  00EA               	movwf	??___fttol+2
  3106  14EA  3017               	movlw	23
  3107  14EB                     u3975:
  3108  14EB  1003               	clrc
  3109  14EC  0CEA               	rrf	??___fttol+2,f
  3110  14ED  0CE9               	rrf	??___fttol+1,f
  3111  14EE  0CE8               	rrf	??___fttol,f
  3112  14EF  3EFF               	addlw	-1
  3113  14F0  1D03               	skipz
  3114  14F1  2CEB               	goto	u3975
  3115  14F2  0868               	movf	??___fttol,w
  3116  14F3  00EB               	movwf	??___fttol+3
  3117  14F4  086B               	movf	??___fttol+3,w
  3118  14F5  1683               	bsf	3,5	;RP0=1, select bank1
  3119  14F6  00C8               	movwf	___fttol@sign1^(0+128)
  3120  14F7  1283               	bcf	3,5	;RP0=0, select bank0
  3121  14F8  17E5               	bsf	___fttol@f1+1,7
  3122  14F9  30FF               	movlw	255
  3123  14FA  05E4               	andwf	___fttol@f1,f
  3124  14FB  30FF               	movlw	255
  3125  14FC  05E5               	andwf	___fttol@f1+1,f
  3126  14FD  3000               	movlw	0
  3127  14FE  05E6               	andwf	___fttol@f1+2,f
  3128  14FF  0864               	movf	___fttol@f1,w
  3129  1500  1683               	bsf	3,5	;RP0=1, select bank1
  3130  1501  00C9               	movwf	___fttol@lval^(0+128)
  3131  1502  1283               	bcf	3,5	;RP0=0, select bank0
  3132  1503  0865               	movf	___fttol@f1+1,w
  3133  1504  1683               	bsf	3,5	;RP0=1, select bank1
  3134  1505  00CA               	movwf	(___fttol@lval^(0+128)+1)
  3135  1506  1283               	bcf	3,5	;RP0=0, select bank0
  3136  1507  0866               	movf	___fttol@f1+2,w
  3137  1508  1683               	bsf	3,5	;RP0=1, select bank1
  3138  1509  00CB               	movwf	(___fttol@lval^(0+128)+2)
  3139  150A  01CC               	clrf	(___fttol@lval^(0+128)+3)
  3140  150B  308E               	movlw	142
  3141  150C  02CD               	subwf	___fttol@exp1^(0+128),f
  3142  150D  1FCD               	btfss	___fttol@exp1^(0+128),7
  3143  150E  2D26               	goto	l3717
  3144  150F  084D               	movf	___fttol@exp1^(0+128),w
  3145  1510  3A80               	xorlw	128
  3146  1511  3E8F               	addlw	143
  3147  1512  1C03               	btfss	3,0
  3148  1513  2CD9               	goto	l3693
  3149  1514                     l3715:
  3150  1514  3001               	movlw	1
  3151  1515                     u4005:
  3152  1515  1003               	clrc
  3153  1516  0CCC               	rrf	(___fttol@lval+3)^(0+128),f
  3154  1517  0CCB               	rrf	(___fttol@lval+2)^(0+128),f
  3155  1518  0CCA               	rrf	(___fttol@lval+1)^(0+128),f
  3156  1519  0CC9               	rrf	___fttol@lval^(0+128),f
  3157  151A  3EFF               	addlw	-1
  3158  151B  1D03               	skipz
  3159  151C  2D15               	goto	u4005
  3160  151D  3001               	movlw	1
  3161  151E  1283               	bcf	3,5	;RP0=0, select bank0
  3162  151F  00E8               	movwf	??___fttol
  3163  1520  0868               	movf	??___fttol,w
  3164  1521  1683               	bsf	3,5	;RP0=1, select bank1
  3165  1522  07CD               	addwf	___fttol@exp1^(0+128),f
  3166  1523  1903               	btfsc	3,2
  3167  1524  2D3D               	goto	l3725
  3168  1525  2D14               	goto	l3715
  3169  1526                     l3717:
  3170  1526  3018               	movlw	24
  3171  1527  024D               	subwf	___fttol@exp1^(0+128),w
  3172  1528  1803               	btfsc	3,0
  3173  1529  2CD9               	goto	l3693
  3174  152A                     l1117:
  3175  152A  084D               	movf	___fttol@exp1^(0+128),w
  3176  152B  1903               	btfsc	3,2
  3177  152C  2D3D               	goto	l3725
  3178  152D  3001               	movlw	1
  3179  152E  1283               	bcf	3,5	;RP0=0, select bank0
  3180  152F  00E8               	movwf	??___fttol
  3181  1530                     u4035:
  3182  1530  1003               	clrc
  3183  1531  1683               	bsf	3,5	;RP0=1, select bank1
  3184  1532  0DC9               	rlf	___fttol@lval^(0+128),f
  3185  1533  0DCA               	rlf	(___fttol@lval+1)^(0+128),f
  3186  1534  0DCB               	rlf	(___fttol@lval+2)^(0+128),f
  3187  1535  0DCC               	rlf	(___fttol@lval+3)^(0+128),f
  3188  1536  1283               	bcf	3,5	;RP0=0, select bank0
  3189  1537  0BE8               	decfsz	??___fttol,f
  3190  1538  2D30               	goto	u4035
  3191  1539  3001               	movlw	1
  3192  153A  1683               	bsf	3,5	;RP0=1, select bank1
  3193  153B  02CD               	subwf	___fttol@exp1^(0+128),f
  3194  153C  2D2A               	goto	l1117
  3195  153D                     l3725:
  3196  153D  0848               	movf	___fttol@sign1^(0+128),w
  3197  153E  1903               	btfsc	3,2
  3198  153F  2D4B               	goto	l3729
  3199  1540  09C9               	comf	___fttol@lval^(0+128),f
  3200  1541  09CA               	comf	(___fttol@lval+1)^(0+128),f
  3201  1542  09CB               	comf	(___fttol@lval+2)^(0+128),f
  3202  1543  09CC               	comf	(___fttol@lval+3)^(0+128),f
  3203  1544  0AC9               	incf	___fttol@lval^(0+128),f
  3204  1545  1903               	skipnz
  3205  1546  0ACA               	incf	(___fttol@lval+1)^(0+128),f
  3206  1547  1903               	skipnz
  3207  1548  0ACB               	incf	(___fttol@lval+2)^(0+128),f
  3208  1549  1903               	skipnz
  3209  154A  0ACC               	incf	(___fttol@lval+3)^(0+128),f
  3210  154B                     l3729:
  3211  154B  084C               	movf	(___fttol@lval+3)^(0+128),w
  3212  154C  1283               	bcf	3,5	;RP0=0, select bank0
  3213  154D  00E7               	movwf	?___fttol+3
  3214  154E  1683               	bsf	3,5	;RP0=1, select bank1
  3215  154F  084B               	movf	(___fttol@lval+2)^(0+128),w
  3216  1550  1283               	bcf	3,5	;RP0=0, select bank0
  3217  1551  00E6               	movwf	?___fttol+2
  3218  1552  1683               	bsf	3,5	;RP0=1, select bank1
  3219  1553  084A               	movf	(___fttol@lval+1)^(0+128),w
  3220  1554  1283               	bcf	3,5	;RP0=0, select bank0
  3221  1555  00E5               	movwf	?___fttol+1
  3222  1556  1683               	bsf	3,5	;RP0=1, select bank1
  3223  1557  0849               	movf	___fttol@lval^(0+128),w
  3224  1558  1283               	bcf	3,5	;RP0=0, select bank0
  3225  1559  00E4               	movwf	?___fttol
  3226  155A  0008               	return
  3227  155B                     __end_of___fttol:
  3228                           
  3229                           	psect	text5
  3230  155B                     __ptext5:	
  3231 ;; *************** function ___ftdiv *****************
  3232 ;; Defined at:
  3233 ;;		line 56 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\ftdiv.c"
  3234 ;; Parameters:    Size  Location     Type
  3235 ;;  f2              3   52[BANK0 ] float 
  3236 ;;  f1              3   55[BANK0 ] float 
  3237 ;; Auto vars:     Size  Location     Type
  3238 ;;  f3              3   63[BANK0 ] float 
  3239 ;;  sign            1   67[BANK0 ] unsigned char 
  3240 ;;  exp             1   66[BANK0 ] unsigned char 
  3241 ;;  cntr            1   62[BANK0 ] unsigned char 
  3242 ;; Return value:  Size  Location     Type
  3243 ;;                  3   52[BANK0 ] float 
  3244 ;; Registers used:
  3245 ;;		wreg, status,2, status,0, pclath, cstack
  3246 ;; Tracked objects:
  3247 ;;		On entry : 300/0
  3248 ;;		On exit  : 300/0
  3249 ;;		Unchanged: 0/0
  3250 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3251 ;;      Params:         0       6       0       0       0
  3252 ;;      Locals:         0       6       0       0       0
  3253 ;;      Temps:          0       4       0       0       0
  3254 ;;      Totals:         0      16       0       0       0
  3255 ;;Total ram usage:       16 bytes
  3256 ;; Hardware stack levels used: 1
  3257 ;; Hardware stack levels required when called: 3
  3258 ;; This function calls:
  3259 ;;		___ftpack
  3260 ;; This function is called by:
  3261 ;;		_rThermistor
  3262 ;;		_rTemperature
  3263 ;; This function uses a non-reentrant model
  3264 ;;
  3265                           
  3266                           
  3267                           ;psect for function ___ftdiv
  3268  155B                     ___ftdiv:
  3269                           
  3270                           ;incstack = 0
  3271                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+pclath+cstack]
  3272  155B  0857               	movf	___ftdiv@f1,w
  3273  155C  00DA               	movwf	??___ftdiv
  3274  155D  0858               	movf	___ftdiv@f1+1,w
  3275  155E  00DB               	movwf	??___ftdiv+1
  3276  155F  0859               	movf	___ftdiv@f1+2,w
  3277  1560  00DC               	movwf	??___ftdiv+2
  3278  1561  1003               	clrc
  3279  1562  0D5B               	rlf	??___ftdiv+1,w
  3280  1563  0D5C               	rlf	??___ftdiv+2,w
  3281  1564  00DD               	movwf	??___ftdiv+3
  3282  1565  085D               	movf	??___ftdiv+3,w
  3283  1566  00E2               	movwf	___ftdiv@exp
  3284  1567  0862               	movf	___ftdiv@exp,w
  3285  1568  1D03               	btfss	3,2
  3286  1569  2D71               	goto	l3635
  3287  156A  3000               	movlw	0
  3288  156B  00D4               	movwf	?___ftdiv
  3289  156C  3000               	movlw	0
  3290  156D  00D5               	movwf	?___ftdiv+1
  3291  156E  3000               	movlw	0
  3292  156F  00D6               	movwf	?___ftdiv+2
  3293  1570  0008               	return
  3294  1571                     l3635:
  3295  1571  0854               	movf	___ftdiv@f2,w
  3296  1572  00DA               	movwf	??___ftdiv
  3297  1573  0855               	movf	___ftdiv@f2+1,w
  3298  1574  00DB               	movwf	??___ftdiv+1
  3299  1575  0856               	movf	___ftdiv@f2+2,w
  3300  1576  00DC               	movwf	??___ftdiv+2
  3301  1577  1003               	clrc
  3302  1578  0D5B               	rlf	??___ftdiv+1,w
  3303  1579  0D5C               	rlf	??___ftdiv+2,w
  3304  157A  00DD               	movwf	??___ftdiv+3
  3305  157B  085D               	movf	??___ftdiv+3,w
  3306  157C  00E3               	movwf	___ftdiv@sign
  3307  157D  0863               	movf	___ftdiv@sign,w
  3308  157E  1D03               	btfss	3,2
  3309  157F  2D87               	goto	l3641
  3310  1580  3000               	movlw	0
  3311  1581  00D4               	movwf	?___ftdiv
  3312  1582  3000               	movlw	0
  3313  1583  00D5               	movwf	?___ftdiv+1
  3314  1584  3000               	movlw	0
  3315  1585  00D6               	movwf	?___ftdiv+2
  3316  1586  0008               	return
  3317  1587                     l3641:
  3318  1587  3000               	movlw	0
  3319  1588  00DF               	movwf	___ftdiv@f3
  3320  1589  3000               	movlw	0
  3321  158A  00E0               	movwf	___ftdiv@f3+1
  3322  158B  3000               	movlw	0
  3323  158C  00E1               	movwf	___ftdiv@f3+2
  3324  158D  3089               	movlw	137
  3325  158E  0763               	addwf	___ftdiv@sign,w
  3326  158F  00DA               	movwf	??___ftdiv
  3327  1590  085A               	movf	??___ftdiv,w
  3328  1591  02E2               	subwf	___ftdiv@exp,f
  3329  1592  0859               	movf	___ftdiv@f1+2,w
  3330  1593  00DA               	movwf	??___ftdiv
  3331  1594  085A               	movf	??___ftdiv,w
  3332  1595  00E3               	movwf	___ftdiv@sign
  3333  1596  0856               	movf	___ftdiv@f2+2,w
  3334  1597  00DA               	movwf	??___ftdiv
  3335  1598  085A               	movf	??___ftdiv,w
  3336  1599  06E3               	xorwf	___ftdiv@sign,f
  3337  159A  3080               	movlw	128
  3338  159B  00DA               	movwf	??___ftdiv
  3339  159C  085A               	movf	??___ftdiv,w
  3340  159D  05E3               	andwf	___ftdiv@sign,f
  3341  159E  17D8               	bsf	___ftdiv@f1+1,7
  3342  159F  30FF               	movlw	255
  3343  15A0  05D7               	andwf	___ftdiv@f1,f
  3344  15A1  30FF               	movlw	255
  3345  15A2  05D8               	andwf	___ftdiv@f1+1,f
  3346  15A3  3000               	movlw	0
  3347  15A4  05D9               	andwf	___ftdiv@f1+2,f
  3348  15A5  17D5               	bsf	___ftdiv@f2+1,7
  3349  15A6  30FF               	movlw	255
  3350  15A7  05D4               	andwf	___ftdiv@f2,f
  3351  15A8  30FF               	movlw	255
  3352  15A9  05D5               	andwf	___ftdiv@f2+1,f
  3353  15AA  3000               	movlw	0
  3354  15AB  05D6               	andwf	___ftdiv@f2+2,f
  3355  15AC  3018               	movlw	24
  3356  15AD  00DA               	movwf	??___ftdiv
  3357  15AE  085A               	movf	??___ftdiv,w
  3358  15AF  00DE               	movwf	___ftdiv@cntr
  3359  15B0                     l3657:
  3360  15B0  3001               	movlw	1
  3361  15B1                     u3895:
  3362  15B1  1003               	clrc
  3363  15B2  0DDF               	rlf	___ftdiv@f3,f
  3364  15B3  0DE0               	rlf	___ftdiv@f3+1,f
  3365  15B4  0DE1               	rlf	___ftdiv@f3+2,f
  3366  15B5  3EFF               	addlw	-1
  3367  15B6  1D03               	skipz
  3368  15B7  2DB1               	goto	u3895
  3369  15B8  0856               	movf	___ftdiv@f2+2,w
  3370  15B9  0259               	subwf	___ftdiv@f1+2,w
  3371  15BA  1D03               	skipz
  3372  15BB  2DC2               	goto	u3905
  3373  15BC  0855               	movf	___ftdiv@f2+1,w
  3374  15BD  0258               	subwf	___ftdiv@f1+1,w
  3375  15BE  1D03               	skipz
  3376  15BF  2DC2               	goto	u3905
  3377  15C0  0854               	movf	___ftdiv@f2,w
  3378  15C1  0257               	subwf	___ftdiv@f1,w
  3379  15C2                     u3905:
  3380  15C2  1C03               	skipc
  3381  15C3  2DCF               	goto	l3663
  3382  15C4  0854               	movf	___ftdiv@f2,w
  3383  15C5  02D7               	subwf	___ftdiv@f1,f
  3384  15C6  0855               	movf	___ftdiv@f2+1,w
  3385  15C7  1C03               	skipc
  3386  15C8  0F55               	incfsz	___ftdiv@f2+1,w
  3387  15C9  02D8               	subwf	___ftdiv@f1+1,f
  3388  15CA  0856               	movf	___ftdiv@f2+2,w
  3389  15CB  1C03               	skipc
  3390  15CC  0A56               	incf	___ftdiv@f2+2,w
  3391  15CD  02D9               	subwf	___ftdiv@f1+2,f
  3392  15CE  145F               	bsf	___ftdiv@f3,0
  3393  15CF                     l3663:
  3394  15CF  3001               	movlw	1
  3395  15D0                     u3915:
  3396  15D0  1003               	clrc
  3397  15D1  0DD7               	rlf	___ftdiv@f1,f
  3398  15D2  0DD8               	rlf	___ftdiv@f1+1,f
  3399  15D3  0DD9               	rlf	___ftdiv@f1+2,f
  3400  15D4  3EFF               	addlw	-1
  3401  15D5  1D03               	skipz
  3402  15D6  2DD0               	goto	u3915
  3403  15D7  3001               	movlw	1
  3404  15D8  02DE               	subwf	___ftdiv@cntr,f
  3405  15D9  1D03               	btfss	3,2
  3406  15DA  2DB0               	goto	l3657
  3407  15DB  085F               	movf	___ftdiv@f3,w
  3408  15DC  00A0               	movwf	___ftpack@arg
  3409  15DD  0860               	movf	___ftdiv@f3+1,w
  3410  15DE  00A1               	movwf	___ftpack@arg+1
  3411  15DF  0861               	movf	___ftdiv@f3+2,w
  3412  15E0  00A2               	movwf	___ftpack@arg+2
  3413  15E1  0862               	movf	___ftdiv@exp,w
  3414  15E2  00DA               	movwf	??___ftdiv
  3415  15E3  085A               	movf	??___ftdiv,w
  3416  15E4  00A3               	movwf	___ftpack@exp
  3417  15E5  0863               	movf	___ftdiv@sign,w
  3418  15E6  00DB               	movwf	??___ftdiv+1
  3419  15E7  085B               	movf	??___ftdiv+1,w
  3420  15E8  00A4               	movwf	___ftpack@sign
  3421  15E9  160A  118A  22CD   	fcall	___ftpack
  3422  15EC  0820               	movf	?___ftpack,w
  3423  15ED  00D4               	movwf	?___ftdiv
  3424  15EE  0821               	movf	?___ftpack+1,w
  3425  15EF  00D5               	movwf	?___ftdiv+1
  3426  15F0  0822               	movf	?___ftpack+2,w
  3427  15F1  00D6               	movwf	?___ftdiv+2
  3428  15F2  0008               	return
  3429  15F3                     __end_of___ftdiv:
  3430                           
  3431                           	psect	text6
  3432  0635                     __ptext6:	
  3433 ;; *************** function _log *****************
  3434 ;; Defined at:
  3435 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\log.c"
  3436 ;; Parameters:    Size  Location     Type
  3437 ;;  x               3   14[BANK1 ] float 
  3438 ;; Auto vars:     Size  Location     Type
  3439 ;;  exponent        2   18[BANK1 ] int 
  3440 ;; Return value:  Size  Location     Type
  3441 ;;                  3   14[BANK1 ] int 
  3442 ;; Registers used:
  3443 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3444 ;; Tracked objects:
  3445 ;;		On entry : 300/100
  3446 ;;		On exit  : 300/100
  3447 ;;		Unchanged: 0/0
  3448 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3449 ;;      Params:         0       0       3       0       0
  3450 ;;      Locals:         0       0       2       0       0
  3451 ;;      Temps:          0       0       1       0       0
  3452 ;;      Totals:         0       0       6       0       0
  3453 ;;Total ram usage:        6 bytes
  3454 ;; Hardware stack levels used: 1
  3455 ;; Hardware stack levels required when called: 5
  3456 ;; This function calls:
  3457 ;;		___awtoft
  3458 ;;		___ftadd
  3459 ;;		___ftge
  3460 ;;		___ftmul
  3461 ;;		_eval_poly
  3462 ;;		_frexp
  3463 ;; This function is called by:
  3464 ;;		_rTemperature
  3465 ;; This function uses a non-reentrant model
  3466 ;;
  3467                           
  3468                           
  3469                           ;psect for function _log
  3470  0635                     _log:
  3471                           
  3472                           ;incstack = 0
  3473                           ; Regs used in _log: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  3474  0635  0856               	movf	log@x^(0+128),w
  3475  0636  1283               	bcf	3,5	;RP0=0, select bank0
  3476  0637  00A0               	movwf	___ftge@ff1
  3477  0638  1683               	bsf	3,5	;RP0=1, select bank1
  3478  0639  0857               	movf	(log@x+1)^(0+128),w
  3479  063A  1283               	bcf	3,5	;RP0=0, select bank0
  3480  063B  00A1               	movwf	___ftge@ff1+1
  3481  063C  1683               	bsf	3,5	;RP0=1, select bank1
  3482  063D  0858               	movf	(log@x+2)^(0+128),w
  3483  063E  1283               	bcf	3,5	;RP0=0, select bank0
  3484  063F  00A2               	movwf	___ftge@ff1+2
  3485  0640  3000               	movlw	0
  3486  0641  00A3               	movwf	___ftge@ff2
  3487  0642  3000               	movlw	0
  3488  0643  00A4               	movwf	___ftge@ff2+1
  3489  0644  3000               	movlw	0
  3490  0645  00A5               	movwf	___ftge@ff2+2
  3491  0646  160A  158A  25CB  120A  118A  	fcall	___ftge
  3492  064B  1803               	btfsc	3,0
  3493  064C  2E59               	goto	l4023
  3494  064D  3021               	movlw	33
  3495  064E  1683               	bsf	3,5	;RP0=1, select bank1
  3496  064F  00A8               	movwf	_errno^(0+128)
  3497  0650  3000               	movlw	0
  3498  0651  00A9               	movwf	(_errno^(0+128)+1)
  3499  0652  3000               	movlw	0
  3500  0653  00D6               	movwf	?_log^(0+128)
  3501  0654  3000               	movlw	0
  3502  0655  00D7               	movwf	(?_log+1)^(0+128)
  3503  0656  3000               	movlw	0
  3504  0657  00D8               	movwf	(?_log+2)^(0+128)
  3505  0658  0008               	return
  3506  0659                     l4023:
  3507  0659  1683               	bsf	3,5	;RP0=1, select bank1
  3508  065A  0858               	movf	(log@x+2)^(0+128),w
  3509  065B  0457               	iorwf	(log@x+1)^(0+128),w
  3510  065C  0456               	iorwf	log@x^(0+128),w
  3511  065D  1D03               	skipz
  3512  065E  2E6A               	goto	l4029
  3513  065F  3022               	movlw	34
  3514  0660  00A8               	movwf	_errno^(0+128)
  3515  0661  3000               	movlw	0
  3516  0662  00A9               	movwf	(_errno^(0+128)+1)
  3517  0663  3000               	movlw	0
  3518  0664  00D6               	movwf	?_log^(0+128)
  3519  0665  3000               	movlw	0
  3520  0666  00D7               	movwf	(?_log+1)^(0+128)
  3521  0667  3000               	movlw	0
  3522  0668  00D8               	movwf	(?_log+2)^(0+128)
  3523  0669  0008               	return
  3524  066A                     l4029:
  3525  066A  3000               	movlw	0
  3526  066B  1283               	bcf	3,5	;RP0=0, select bank0
  3527  066C  00B8               	movwf	___ftadd@f1
  3528  066D  3080               	movlw	128
  3529  066E  00B9               	movwf	___ftadd@f1+1
  3530  066F  30BF               	movlw	191
  3531  0670  00BA               	movwf	___ftadd@f1+2
  3532  0671  3000               	movlw	0
  3533  0672  00A8               	movwf	___ftmul@f1
  3534  0673  3000               	movlw	0
  3535  0674  00A9               	movwf	___ftmul@f1+1
  3536  0675  3040               	movlw	64
  3537  0676  00AA               	movwf	___ftmul@f1+2
  3538  0677  30DA               	movlw	(low (log@exponent| 0))& (0+255)
  3539  0678  1683               	bsf	3,5	;RP0=1, select bank1
  3540  0679  00D9               	movwf	??_log^(0+128)
  3541  067A  0859               	movf	??_log^(0+128),w
  3542  067B  1283               	bcf	3,5	;RP0=0, select bank0
  3543  067C  00A3               	movwf	frexp@eptr
  3544  067D  1683               	bsf	3,5	;RP0=1, select bank1
  3545  067E  0856               	movf	log@x^(0+128),w
  3546  067F  1283               	bcf	3,5	;RP0=0, select bank0
  3547  0680  00A0               	movwf	frexp@value
  3548  0681  1683               	bsf	3,5	;RP0=1, select bank1
  3549  0682  0857               	movf	(log@x+1)^(0+128),w
  3550  0683  1283               	bcf	3,5	;RP0=0, select bank0
  3551  0684  00A1               	movwf	frexp@value+1
  3552  0685  1683               	bsf	3,5	;RP0=1, select bank1
  3553  0686  0858               	movf	(log@x+2)^(0+128),w
  3554  0687  1283               	bcf	3,5	;RP0=0, select bank0
  3555  0688  00A2               	movwf	frexp@value+2
  3556  0689  160A  158A  2694  120A  118A  	fcall	_frexp
  3557  068E  0820               	movf	?_frexp,w
  3558  068F  00AB               	movwf	___ftmul@f2
  3559  0690  0821               	movf	?_frexp+1,w
  3560  0691  00AC               	movwf	___ftmul@f2+1
  3561  0692  0822               	movf	?_frexp+2,w
  3562  0693  00AD               	movwf	___ftmul@f2+2
  3563  0694  120A  118A  2718  120A  118A  	fcall	___ftmul
  3564  0699  0828               	movf	?___ftmul,w
  3565  069A  00BB               	movwf	___ftadd@f2
  3566  069B  0829               	movf	?___ftmul+1,w
  3567  069C  00BC               	movwf	___ftadd@f2+1
  3568  069D  082A               	movf	?___ftmul+2,w
  3569  069E  00BD               	movwf	___ftadd@f2+2
  3570  069F  120A  118A  2530  120A  118A  	fcall	___ftadd
  3571  06A4  0838               	movf	?___ftadd,w
  3572  06A5  1683               	bsf	3,5	;RP0=1, select bank1
  3573  06A6  00D6               	movwf	log@x^(0+128)
  3574  06A7  1283               	bcf	3,5	;RP0=0, select bank0
  3575  06A8  0839               	movf	?___ftadd+1,w
  3576  06A9  1683               	bsf	3,5	;RP0=1, select bank1
  3577  06AA  00D7               	movwf	(log@x+1)^(0+128)
  3578  06AB  1283               	bcf	3,5	;RP0=0, select bank0
  3579  06AC  083A               	movf	?___ftadd+2,w
  3580  06AD  1683               	bsf	3,5	;RP0=1, select bank1
  3581  06AE  00D8               	movwf	(log@x+2)^(0+128)
  3582  06AF  30FF               	movlw	255
  3583  06B0  07DA               	addwf	log@exponent^(0+128),f
  3584  06B1  1803               	skipnc
  3585  06B2  0ADB               	incf	(log@exponent+1)^(0+128),f
  3586  06B3  30FF               	movlw	255
  3587  06B4  07DB               	addwf	(log@exponent+1)^(0+128),f
  3588  06B5  0856               	movf	log@x^(0+128),w
  3589  06B6  1283               	bcf	3,5	;RP0=0, select bank0
  3590  06B7  00C5               	movwf	eval_poly@x
  3591  06B8  1683               	bsf	3,5	;RP0=1, select bank1
  3592  06B9  0857               	movf	(log@x+1)^(0+128),w
  3593  06BA  1283               	bcf	3,5	;RP0=0, select bank0
  3594  06BB  00C6               	movwf	eval_poly@x+1
  3595  06BC  1683               	bsf	3,5	;RP0=1, select bank1
  3596  06BD  0858               	movf	(log@x+2)^(0+128),w
  3597  06BE  1283               	bcf	3,5	;RP0=0, select bank0
  3598  06BF  00C7               	movwf	eval_poly@x+2
  3599  06C0  305C               	movlw	low (log@coeff| (0+32768))
  3600  06C1  00C8               	movwf	eval_poly@d
  3601  06C2  3090               	movlw	high (log@coeff| (0+32768))
  3602  06C3  00C9               	movwf	eval_poly@d+1
  3603  06C4  3008               	movlw	8
  3604  06C5  00CA               	movwf	eval_poly@n
  3605  06C6  3000               	movlw	0
  3606  06C7  00CB               	movwf	eval_poly@n+1
  3607  06C8  160A  118A  243E  120A  118A  	fcall	_eval_poly
  3608  06CD  0845               	movf	?_eval_poly,w
  3609  06CE  1683               	bsf	3,5	;RP0=1, select bank1
  3610  06CF  00D6               	movwf	log@x^(0+128)
  3611  06D0  1283               	bcf	3,5	;RP0=0, select bank0
  3612  06D1  0846               	movf	?_eval_poly+1,w
  3613  06D2  1683               	bsf	3,5	;RP0=1, select bank1
  3614  06D3  00D7               	movwf	(log@x+1)^(0+128)
  3615  06D4  1283               	bcf	3,5	;RP0=0, select bank0
  3616  06D5  0847               	movf	?_eval_poly+2,w
  3617  06D6  1683               	bsf	3,5	;RP0=1, select bank1
  3618  06D7  00D8               	movwf	(log@x+2)^(0+128)
  3619  06D8  0856               	movf	log@x^(0+128),w
  3620  06D9  1283               	bcf	3,5	;RP0=0, select bank0
  3621  06DA  00B8               	movwf	___ftadd@f1
  3622  06DB  1683               	bsf	3,5	;RP0=1, select bank1
  3623  06DC  0857               	movf	(log@x+1)^(0+128),w
  3624  06DD  1283               	bcf	3,5	;RP0=0, select bank0
  3625  06DE  00B9               	movwf	___ftadd@f1+1
  3626  06DF  1683               	bsf	3,5	;RP0=1, select bank1
  3627  06E0  0858               	movf	(log@x+2)^(0+128),w
  3628  06E1  1283               	bcf	3,5	;RP0=0, select bank0
  3629  06E2  00BA               	movwf	___ftadd@f1+2
  3630  06E3  3072               	movlw	114
  3631  06E4  00A8               	movwf	___ftmul@f1
  3632  06E5  3031               	movlw	49
  3633  06E6  00A9               	movwf	___ftmul@f1+1
  3634  06E7  303F               	movlw	63
  3635  06E8  00AA               	movwf	___ftmul@f1+2
  3636  06E9  1683               	bsf	3,5	;RP0=1, select bank1
  3637  06EA  085B               	movf	(log@exponent+1)^(0+128),w
  3638  06EB  00D3               	movwf	(___awtoft@c+1)^(0+128)
  3639  06EC  085A               	movf	log@exponent^(0+128),w
  3640  06ED  00D2               	movwf	___awtoft@c^(0+128)
  3641  06EE  160A  158A  2547  120A  118A  	fcall	___awtoft
  3642  06F3  0852               	movf	?___awtoft^(0+128),w
  3643  06F4  1283               	bcf	3,5	;RP0=0, select bank0
  3644  06F5  00AB               	movwf	___ftmul@f2
  3645  06F6  1683               	bsf	3,5	;RP0=1, select bank1
  3646  06F7  0853               	movf	(?___awtoft+1)^(0+128),w
  3647  06F8  1283               	bcf	3,5	;RP0=0, select bank0
  3648  06F9  00AC               	movwf	___ftmul@f2+1
  3649  06FA  1683               	bsf	3,5	;RP0=1, select bank1
  3650  06FB  0854               	movf	(?___awtoft+2)^(0+128),w
  3651  06FC  1283               	bcf	3,5	;RP0=0, select bank0
  3652  06FD  00AD               	movwf	___ftmul@f2+2
  3653  06FE  120A  118A  2718  120A  118A  	fcall	___ftmul
  3654  0703  0828               	movf	?___ftmul,w
  3655  0704  00BB               	movwf	___ftadd@f2
  3656  0705  0829               	movf	?___ftmul+1,w
  3657  0706  00BC               	movwf	___ftadd@f2+1
  3658  0707  082A               	movf	?___ftmul+2,w
  3659  0708  00BD               	movwf	___ftadd@f2+2
  3660  0709  120A  118A  2530   	fcall	___ftadd
  3661  070C  0838               	movf	?___ftadd,w
  3662  070D  1683               	bsf	3,5	;RP0=1, select bank1
  3663  070E  00D6               	movwf	?_log^(0+128)
  3664  070F  1283               	bcf	3,5	;RP0=0, select bank0
  3665  0710  0839               	movf	?___ftadd+1,w
  3666  0711  1683               	bsf	3,5	;RP0=1, select bank1
  3667  0712  00D7               	movwf	(?_log+1)^(0+128)
  3668  0713  1283               	bcf	3,5	;RP0=0, select bank0
  3669  0714  083A               	movf	?___ftadd+2,w
  3670  0715  1683               	bsf	3,5	;RP0=1, select bank1
  3671  0716  00D8               	movwf	(?_log+2)^(0+128)
  3672  0717  0008               	return
  3673  0718                     __end_of_log:
  3674                           
  3675                           	psect	text7
  3676  1E94                     __ptext7:	
  3677 ;; *************** function _frexp *****************
  3678 ;; Defined at:
  3679 ;;		line 254 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\frexp.c"
  3680 ;; Parameters:    Size  Location     Type
  3681 ;;  value           3    0[BANK0 ] int 
  3682 ;;  eptr            1    3[BANK0 ] PTR int 
  3683 ;;		 -> log@exponent(2), 
  3684 ;; Auto vars:     Size  Location     Type
  3685 ;;		None
  3686 ;; Return value:  Size  Location     Type
  3687 ;;                  3    0[BANK0 ] PTR int 
  3688 ;; Registers used:
  3689 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1
  3690 ;; Tracked objects:
  3691 ;;		On entry : 300/0
  3692 ;;		On exit  : B00/0
  3693 ;;		Unchanged: 0/0
  3694 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3695 ;;      Params:         0       4       0       0       0
  3696 ;;      Locals:         0       0       0       0       0
  3697 ;;      Temps:          0       2       0       0       0
  3698 ;;      Totals:         0       6       0       0       0
  3699 ;;Total ram usage:        6 bytes
  3700 ;; Hardware stack levels used: 1
  3701 ;; Hardware stack levels required when called: 2
  3702 ;; This function calls:
  3703 ;;		Nothing
  3704 ;; This function is called by:
  3705 ;;		_log
  3706 ;; This function uses a non-reentrant model
  3707 ;;
  3708                           
  3709                           
  3710                           ;psect for function _frexp
  3711  1E94                     _frexp:
  3712                           
  3713                           ;incstack = 0
  3714                           ; Regs used in _frexp: [wreg-fsr0h+status,2+status,0+btemp+1]
  3715  1E94  0822               	movf	frexp@value+2,w
  3716  1E95  0421               	iorwf	frexp@value+1,w
  3717  1E96  0420               	iorwf	frexp@value,w
  3718  1E97  1D03               	skipz
  3719  1E98  2EA6               	goto	l3793
  3720  1E99  0823               	movf	frexp@eptr,w
  3721  1E9A  0084               	movwf	4
  3722  1E9B  1383               	bcf	3,7	;select IRP bank0
  3723  1E9C  0180               	clrf	0
  3724  1E9D  0A84               	incf	4,f
  3725  1E9E  0180               	clrf	0
  3726  1E9F  3000               	movlw	0
  3727  1EA0  00A0               	movwf	?_frexp
  3728  1EA1  3000               	movlw	0
  3729  1EA2  00A1               	movwf	?_frexp+1
  3730  1EA3  3000               	movlw	0
  3731  1EA4  00A2               	movwf	?_frexp+2
  3732  1EA5  0008               	return
  3733  1EA6                     l3793:
  3734  1EA6  0822               	movf	frexp@value+2,w
  3735  1EA7  397F               	andlw	127
  3736  1EA8  00A4               	movwf	??_frexp
  3737  1EA9  01A5               	clrf	??_frexp+1
  3738  1EAA  1003               	clrc
  3739  1EAB  0DA4               	rlf	??_frexp,f
  3740  1EAC  0DA5               	rlf	??_frexp+1,f
  3741  1EAD  0823               	movf	frexp@eptr,w
  3742  1EAE  0084               	movwf	4
  3743  1EAF  0824               	movf	??_frexp,w
  3744  1EB0  1383               	bcf	3,7	;select IRP bank0
  3745  1EB1  0080               	movwf	0
  3746  1EB2  0A84               	incf	4,f
  3747  1EB3  0825               	movf	??_frexp+1,w
  3748  1EB4  0080               	movwf	0
  3749  1EB5  0D21               	rlf	frexp@value+1,w
  3750  1EB6  0D21               	rlf	frexp@value+1,w
  3751  1EB7  3901               	andlw	1
  3752  1EB8  00A4               	movwf	??_frexp
  3753  1EB9  01A5               	clrf	??_frexp+1
  3754  1EBA  0823               	movf	frexp@eptr,w
  3755  1EBB  0084               	movwf	4
  3756  1EBC  0824               	movf	??_frexp,w
  3757  1EBD  0480               	iorwf	0,f
  3758  1EBE  0A84               	incf	4,f
  3759  1EBF  0825               	movf	??_frexp+1,w
  3760  1EC0  0480               	iorwf	0,f
  3761  1EC1  0823               	movf	frexp@eptr,w
  3762  1EC2  0084               	movwf	4
  3763  1EC3  3082               	movlw	130
  3764  1EC4  0780               	addwf	0,f
  3765  1EC5  0F84               	incfsz	4,f
  3766  1EC6  0800               	movf	0,w
  3767  1EC7  1803               	skipnc
  3768  1EC8  0A00               	incf	0,w
  3769  1EC9  00FF               	movwf	127
  3770  1ECA  30FF               	movlw	255
  3771  1ECB  077F               	addwf	127,w
  3772  1ECC  0080               	movwf	0
  3773  1ECD  0384               	decf	4,f
  3774  1ECE  0822               	movf	frexp@value+2,w
  3775  1ECF  3980               	andlw	-128
  3776  1ED0  383F               	iorlw	63
  3777  1ED1  00A2               	movwf	frexp@value+2
  3778  1ED2  13A1               	bcf	frexp@value+1,7
  3779  1ED3  0008               	return
  3780  1ED4                     __end_of_frexp:
  3781                           
  3782                           	psect	text8
  3783  143E                     __ptext8:	
  3784 ;; *************** function _eval_poly *****************
  3785 ;; Defined at:
  3786 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\evalpoly.c"
  3787 ;; Parameters:    Size  Location     Type
  3788 ;;  x               3   37[BANK0 ] PTR int 
  3789 ;;  d               2   40[BANK0 ] PTR const 
  3790 ;;		 -> log@coeff(27), 
  3791 ;;  n               2   42[BANK0 ] int 
  3792 ;; Auto vars:     Size  Location     Type
  3793 ;;  res             3   49[BANK0 ] int 
  3794 ;; Return value:  Size  Location     Type
  3795 ;;                  3   37[BANK0 ] int 
  3796 ;; Registers used:
  3797 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3798 ;; Tracked objects:
  3799 ;;		On entry : 300/0
  3800 ;;		On exit  : 300/0
  3801 ;;		Unchanged: 0/0
  3802 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3803 ;;      Params:         0       7       0       0       0
  3804 ;;      Locals:         0       3       0       0       0
  3805 ;;      Temps:          0       5       0       0       0
  3806 ;;      Totals:         0      15       0       0       0
  3807 ;;Total ram usage:       15 bytes
  3808 ;; Hardware stack levels used: 1
  3809 ;; Hardware stack levels required when called: 4
  3810 ;; This function calls:
  3811 ;;		___bmul
  3812 ;;		___ftadd
  3813 ;;		___ftmul
  3814 ;; This function is called by:
  3815 ;;		_log
  3816 ;; This function uses a non-reentrant model
  3817 ;;
  3818                           
  3819                           
  3820                           ;psect for function _eval_poly
  3821  143E                     _eval_poly:
  3822                           
  3823                           ;incstack = 0
  3824                           ; Regs used in _eval_poly: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  3825  143E  3003               	movlw	3
  3826  143F  00CC               	movwf	??_eval_poly
  3827  1440  084C               	movf	??_eval_poly,w
  3828  1441  00A9               	movwf	___bmul@multiplicand
  3829  1442  084A               	movf	eval_poly@n,w
  3830  1443  160A  158A  2479  160A  118A  	fcall	___bmul
  3831  1448  00CD               	movwf	??_eval_poly+1
  3832  1449  084D               	movf	??_eval_poly+1,w
  3833  144A  0748               	addwf	eval_poly@d,w
  3834  144B  00CF               	movwf	??_eval_poly+3
  3835  144C  0849               	movf	eval_poly@d+1,w
  3836  144D  00CE               	movwf	??_eval_poly+2
  3837  144E  1803               	skipnc
  3838  144F  0ACE               	incf	??_eval_poly+2,f
  3839  1450  1BCD               	btfsc	??_eval_poly+1,7
  3840  1451  03CE               	decf	??_eval_poly+2,f
  3841  1452  084E               	movf	??_eval_poly+2,w
  3842  1453  00D0               	movwf	??_eval_poly+4
  3843  1454  0850               	movf	??_eval_poly+4,w
  3844  1455  00FF               	movwf	127
  3845  1456  084F               	movf	??_eval_poly+3,w
  3846  1457  0084               	movwf	4
  3847  1458  160A  118A  2000  160A  118A  	fcall	stringtab
  3848  145D  00D1               	movwf	eval_poly@res
  3849  145E  160A  118A  2000  160A  118A  	fcall	stringtab
  3850  1463  00D2               	movwf	eval_poly@res+1
  3851  1464  160A  118A  2000  160A  118A  	fcall	stringtab
  3852  1469                     L1:
  3853  1469  00D3               	movwf	eval_poly@res+2
  3854  146A  084A               	movf	eval_poly@n,w
  3855  146B  044B               	iorwf	eval_poly@n+1,w
  3856  146C  1903               	btfsc	3,2
  3857  146D  2CC2               	goto	l3811
  3858  146E  3003               	movlw	3
  3859  146F  00CC               	movwf	??_eval_poly
  3860  1470  084C               	movf	??_eval_poly,w
  3861  1471  00A9               	movwf	___bmul@multiplicand
  3862  1472  30FF               	movlw	255
  3863  1473  07CA               	addwf	eval_poly@n,f
  3864  1474  1803               	skipnc
  3865  1475  0ACB               	incf	eval_poly@n+1,f
  3866  1476  30FF               	movlw	255
  3867  1477  07CB               	addwf	eval_poly@n+1,f
  3868  1478  084A               	movf	eval_poly@n,w
  3869  1479  160A  158A  2479  160A  118A  	fcall	___bmul
  3870  147E  00CD               	movwf	??_eval_poly+1
  3871  147F  084D               	movf	??_eval_poly+1,w
  3872  1480  0748               	addwf	eval_poly@d,w
  3873  1481  00CF               	movwf	??_eval_poly+3
  3874  1482  0849               	movf	eval_poly@d+1,w
  3875  1483  00CE               	movwf	??_eval_poly+2
  3876  1484  1803               	skipnc
  3877  1485  0ACE               	incf	??_eval_poly+2,f
  3878  1486  1BCD               	btfsc	??_eval_poly+1,7
  3879  1487  03CE               	decf	??_eval_poly+2,f
  3880  1488  084E               	movf	??_eval_poly+2,w
  3881  1489  00D0               	movwf	??_eval_poly+4
  3882  148A  0850               	movf	??_eval_poly+4,w
  3883  148B  00FF               	movwf	127
  3884  148C  084F               	movf	??_eval_poly+3,w
  3885  148D  0084               	movwf	4
  3886  148E  160A  118A  2000  160A  118A  	fcall	stringtab
  3887  1493  00B8               	movwf	___ftadd@f1
  3888  1494  160A  118A  2000  160A  118A  	fcall	stringtab
  3889  1499  00B9               	movwf	___ftadd@f1+1
  3890  149A  160A  118A  2000  160A  118A  	fcall	stringtab
  3891  149F  00BA               	movwf	___ftadd@f1+2
  3892  14A0  0851               	movf	eval_poly@res,w
  3893  14A1  00A8               	movwf	___ftmul@f1
  3894  14A2  0852               	movf	eval_poly@res+1,w
  3895  14A3  00A9               	movwf	___ftmul@f1+1
  3896  14A4  0853               	movf	eval_poly@res+2,w
  3897  14A5  00AA               	movwf	___ftmul@f1+2
  3898  14A6  0845               	movf	eval_poly@x,w
  3899  14A7  00AB               	movwf	___ftmul@f2
  3900  14A8  0846               	movf	eval_poly@x+1,w
  3901  14A9  00AC               	movwf	___ftmul@f2+1
  3902  14AA  0847               	movf	eval_poly@x+2,w
  3903  14AB  00AD               	movwf	___ftmul@f2+2
  3904  14AC  120A  118A  2718  160A  118A  	fcall	___ftmul
  3905  14B1  0828               	movf	?___ftmul,w
  3906  14B2  00BB               	movwf	___ftadd@f2
  3907  14B3  0829               	movf	?___ftmul+1,w
  3908  14B4  00BC               	movwf	___ftadd@f2+1
  3909  14B5  082A               	movf	?___ftmul+2,w
  3910  14B6  00BD               	movwf	___ftadd@f2+2
  3911  14B7  120A  118A  2530  160A  118A  	fcall	___ftadd
  3912  14BC  0838               	movf	?___ftadd,w
  3913  14BD  00D1               	movwf	eval_poly@res
  3914  14BE  0839               	movf	?___ftadd+1,w
  3915  14BF  00D2               	movwf	eval_poly@res+1
  3916  14C0  083A               	movf	?___ftadd+2,w
  3917  14C1  2C69               	goto	L1
  3918  14C2                     l3811:
  3919  14C2  0851               	movf	eval_poly@res,w
  3920  14C3  00C5               	movwf	?_eval_poly
  3921  14C4  0852               	movf	eval_poly@res+1,w
  3922  14C5  00C6               	movwf	?_eval_poly+1
  3923  14C6  0853               	movf	eval_poly@res+2,w
  3924  14C7  00C7               	movwf	?_eval_poly+2
  3925  14C8  0008               	return
  3926  14C9                     __end_of_eval_poly:
  3927                           
  3928                           	psect	text9
  3929  0718                     __ptext9:	
  3930 ;; *************** function ___ftmul *****************
  3931 ;; Defined at:
  3932 ;;		line 62 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\ftmul.c"
  3933 ;; Parameters:    Size  Location     Type
  3934 ;;  f1              3    8[BANK0 ] float 
  3935 ;;  f2              3   11[BANK0 ] float 
  3936 ;; Auto vars:     Size  Location     Type
  3937 ;;  f3_as_produc    3   19[BANK0 ] unsigned um
  3938 ;;  sign            1   23[BANK0 ] unsigned char 
  3939 ;;  cntr            1   22[BANK0 ] unsigned char 
  3940 ;;  exp             1   18[BANK0 ] unsigned char 
  3941 ;; Return value:  Size  Location     Type
  3942 ;;                  3    8[BANK0 ] float 
  3943 ;; Registers used:
  3944 ;;		wreg, status,2, status,0, pclath, cstack
  3945 ;; Tracked objects:
  3946 ;;		On entry : 300/0
  3947 ;;		On exit  : 300/0
  3948 ;;		Unchanged: 0/0
  3949 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3950 ;;      Params:         0       6       0       0       0
  3951 ;;      Locals:         0       6       0       0       0
  3952 ;;      Temps:          0       4       0       0       0
  3953 ;;      Totals:         0      16       0       0       0
  3954 ;;Total ram usage:       16 bytes
  3955 ;; Hardware stack levels used: 1
  3956 ;; Hardware stack levels required when called: 3
  3957 ;; This function calls:
  3958 ;;		___ftpack
  3959 ;; This function is called by:
  3960 ;;		_rThermistor
  3961 ;;		_log
  3962 ;;		_eval_poly
  3963 ;; This function uses a non-reentrant model
  3964 ;;
  3965                           
  3966                           
  3967                           ;psect for function ___ftmul
  3968  0718                     ___ftmul:
  3969                           
  3970                           ;incstack = 0
  3971                           ; Regs used in ___ftmul: [wreg+status,2+status,0+pclath+cstack]
  3972  0718  0828               	movf	___ftmul@f1,w
  3973  0719  00AE               	movwf	??___ftmul
  3974  071A  0829               	movf	___ftmul@f1+1,w
  3975  071B  00AF               	movwf	??___ftmul+1
  3976  071C  082A               	movf	___ftmul@f1+2,w
  3977  071D  00B0               	movwf	??___ftmul+2
  3978  071E  1003               	clrc
  3979  071F  0D2F               	rlf	??___ftmul+1,w
  3980  0720  0D30               	rlf	??___ftmul+2,w
  3981  0721  00B1               	movwf	??___ftmul+3
  3982  0722  0831               	movf	??___ftmul+3,w
  3983  0723  00B2               	movwf	___ftmul@exp
  3984  0724  0832               	movf	___ftmul@exp,w
  3985  0725  1D03               	btfss	3,2
  3986  0726  2F2E               	goto	l3525
  3987  0727  3000               	movlw	0
  3988  0728  00A8               	movwf	?___ftmul
  3989  0729  3000               	movlw	0
  3990  072A  00A9               	movwf	?___ftmul+1
  3991  072B  3000               	movlw	0
  3992  072C  00AA               	movwf	?___ftmul+2
  3993  072D  0008               	return
  3994  072E                     l3525:
  3995  072E  082B               	movf	___ftmul@f2,w
  3996  072F  00AE               	movwf	??___ftmul
  3997  0730  082C               	movf	___ftmul@f2+1,w
  3998  0731  00AF               	movwf	??___ftmul+1
  3999  0732  082D               	movf	___ftmul@f2+2,w
  4000  0733  00B0               	movwf	??___ftmul+2
  4001  0734  1003               	clrc
  4002  0735  0D2F               	rlf	??___ftmul+1,w
  4003  0736  0D30               	rlf	??___ftmul+2,w
  4004  0737  00B1               	movwf	??___ftmul+3
  4005  0738  0831               	movf	??___ftmul+3,w
  4006  0739  00B7               	movwf	___ftmul@sign
  4007  073A  0837               	movf	___ftmul@sign,w
  4008  073B  1D03               	btfss	3,2
  4009  073C  2F44               	goto	l3531
  4010  073D  3000               	movlw	0
  4011  073E  00A8               	movwf	?___ftmul
  4012  073F  3000               	movlw	0
  4013  0740  00A9               	movwf	?___ftmul+1
  4014  0741  3000               	movlw	0
  4015  0742  00AA               	movwf	?___ftmul+2
  4016  0743  0008               	return
  4017  0744                     l3531:
  4018  0744  0837               	movf	___ftmul@sign,w
  4019  0745  3E7B               	addlw	123
  4020  0746  00AE               	movwf	??___ftmul
  4021  0747  082E               	movf	??___ftmul,w
  4022  0748  07B2               	addwf	___ftmul@exp,f
  4023  0749  082A               	movf	___ftmul@f1+2,w
  4024  074A  00AE               	movwf	??___ftmul
  4025  074B  082E               	movf	??___ftmul,w
  4026  074C  00B7               	movwf	___ftmul@sign
  4027  074D  082D               	movf	___ftmul@f2+2,w
  4028  074E  00AE               	movwf	??___ftmul
  4029  074F  082E               	movf	??___ftmul,w
  4030  0750  06B7               	xorwf	___ftmul@sign,f
  4031  0751  3080               	movlw	128
  4032  0752  00AE               	movwf	??___ftmul
  4033  0753  082E               	movf	??___ftmul,w
  4034  0754  05B7               	andwf	___ftmul@sign,f
  4035  0755  17A9               	bsf	___ftmul@f1+1,7
  4036  0756  17AC               	bsf	___ftmul@f2+1,7
  4037  0757  30FF               	movlw	255
  4038  0758  05AB               	andwf	___ftmul@f2,f
  4039  0759  30FF               	movlw	255
  4040  075A  05AC               	andwf	___ftmul@f2+1,f
  4041  075B  3000               	movlw	0
  4042  075C  05AD               	andwf	___ftmul@f2+2,f
  4043  075D  3000               	movlw	0
  4044  075E  00B3               	movwf	___ftmul@f3_as_product
  4045  075F  3000               	movlw	0
  4046  0760  00B4               	movwf	___ftmul@f3_as_product+1
  4047  0761  3000               	movlw	0
  4048  0762  00B5               	movwf	___ftmul@f3_as_product+2
  4049  0763  3007               	movlw	7
  4050  0764  00AE               	movwf	??___ftmul
  4051  0765  082E               	movf	??___ftmul,w
  4052  0766  00B6               	movwf	___ftmul@cntr
  4053  0767                     l3549:
  4054  0767  1C28               	btfss	___ftmul@f1,0
  4055  0768  2F77               	goto	l3553
  4056  0769  082B               	movf	___ftmul@f2,w
  4057  076A  07B3               	addwf	___ftmul@f3_as_product,f
  4058  076B  082C               	movf	___ftmul@f2+1,w
  4059  076C  1103               	clrz
  4060  076D  1803               	skipnc
  4061  076E  0A2C               	incf	___ftmul@f2+1,w
  4062  076F  1D03               	btfss	3,2
  4063  0770  07B4               	addwf	___ftmul@f3_as_product+1,f
  4064  0771  082D               	movf	___ftmul@f2+2,w
  4065  0772  1103               	clrz
  4066  0773  1803               	skipnc
  4067  0774  0A2D               	incf	___ftmul@f2+2,w
  4068  0775  1D03               	btfss	3,2
  4069  0776  07B5               	addwf	___ftmul@f3_as_product+2,f
  4070  0777                     l3553:
  4071  0777  3001               	movlw	1
  4072  0778                     u3725:
  4073  0778  1003               	clrc
  4074  0779  0CAA               	rrf	___ftmul@f1+2,f
  4075  077A  0CA9               	rrf	___ftmul@f1+1,f
  4076  077B  0CA8               	rrf	___ftmul@f1,f
  4077  077C  3EFF               	addlw	-1
  4078  077D  1D03               	skipz
  4079  077E  2F78               	goto	u3725
  4080  077F  3001               	movlw	1
  4081  0780                     u3735:
  4082  0780  1003               	clrc
  4083  0781  0DAB               	rlf	___ftmul@f2,f
  4084  0782  0DAC               	rlf	___ftmul@f2+1,f
  4085  0783  0DAD               	rlf	___ftmul@f2+2,f
  4086  0784  3EFF               	addlw	-1
  4087  0785  1D03               	skipz
  4088  0786  2F80               	goto	u3735
  4089  0787  3001               	movlw	1
  4090  0788  02B6               	subwf	___ftmul@cntr,f
  4091  0789  1D03               	btfss	3,2
  4092  078A  2F67               	goto	l3549
  4093  078B  3009               	movlw	9
  4094  078C  00AE               	movwf	??___ftmul
  4095  078D  082E               	movf	??___ftmul,w
  4096  078E  00B6               	movwf	___ftmul@cntr
  4097  078F                     l3561:
  4098  078F  1C28               	btfss	___ftmul@f1,0
  4099  0790  2F9F               	goto	l3565
  4100  0791  082B               	movf	___ftmul@f2,w
  4101  0792  07B3               	addwf	___ftmul@f3_as_product,f
  4102  0793  082C               	movf	___ftmul@f2+1,w
  4103  0794  1103               	clrz
  4104  0795  1803               	skipnc
  4105  0796  0A2C               	incf	___ftmul@f2+1,w
  4106  0797  1D03               	btfss	3,2
  4107  0798  07B4               	addwf	___ftmul@f3_as_product+1,f
  4108  0799  082D               	movf	___ftmul@f2+2,w
  4109  079A  1103               	clrz
  4110  079B  1803               	skipnc
  4111  079C  0A2D               	incf	___ftmul@f2+2,w
  4112  079D  1D03               	btfss	3,2
  4113  079E  07B5               	addwf	___ftmul@f3_as_product+2,f
  4114  079F                     l3565:
  4115  079F  3001               	movlw	1
  4116  07A0                     u3775:
  4117  07A0  1003               	clrc
  4118  07A1  0CAA               	rrf	___ftmul@f1+2,f
  4119  07A2  0CA9               	rrf	___ftmul@f1+1,f
  4120  07A3  0CA8               	rrf	___ftmul@f1,f
  4121  07A4  3EFF               	addlw	-1
  4122  07A5  1D03               	skipz
  4123  07A6  2FA0               	goto	u3775
  4124  07A7  3001               	movlw	1
  4125  07A8                     u3785:
  4126  07A8  1003               	clrc
  4127  07A9  0CB5               	rrf	___ftmul@f3_as_product+2,f
  4128  07AA  0CB4               	rrf	___ftmul@f3_as_product+1,f
  4129  07AB  0CB3               	rrf	___ftmul@f3_as_product,f
  4130  07AC  3EFF               	addlw	-1
  4131  07AD  1D03               	skipz
  4132  07AE  2FA8               	goto	u3785
  4133  07AF  3001               	movlw	1
  4134  07B0  02B6               	subwf	___ftmul@cntr,f
  4135  07B1  1D03               	btfss	3,2
  4136  07B2  2F8F               	goto	l3561
  4137  07B3  0833               	movf	___ftmul@f3_as_product,w
  4138  07B4  00A0               	movwf	___ftpack@arg
  4139  07B5  0834               	movf	___ftmul@f3_as_product+1,w
  4140  07B6  00A1               	movwf	___ftpack@arg+1
  4141  07B7  0835               	movf	___ftmul@f3_as_product+2,w
  4142  07B8  00A2               	movwf	___ftpack@arg+2
  4143  07B9  0832               	movf	___ftmul@exp,w
  4144  07BA  00AE               	movwf	??___ftmul
  4145  07BB  082E               	movf	??___ftmul,w
  4146  07BC  00A3               	movwf	___ftpack@exp
  4147  07BD  0837               	movf	___ftmul@sign,w
  4148  07BE  00AF               	movwf	??___ftmul+1
  4149  07BF  082F               	movf	??___ftmul+1,w
  4150  07C0  00A4               	movwf	___ftpack@sign
  4151  07C1  160A  118A  22CD   	fcall	___ftpack
  4152  07C4  0820               	movf	?___ftpack,w
  4153  07C5  00A8               	movwf	?___ftmul
  4154  07C6  0821               	movf	?___ftpack+1,w
  4155  07C7  00A9               	movwf	?___ftmul+1
  4156  07C8  0822               	movf	?___ftpack+2,w
  4157  07C9  00AA               	movwf	?___ftmul+2
  4158  07CA  0008               	return
  4159  07CB                     __end_of___ftmul:
  4160                           
  4161                           	psect	text10
  4162  0530                     __ptext10:	
  4163 ;; *************** function ___ftadd *****************
  4164 ;; Defined at:
  4165 ;;		line 86 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\ftadd.c"
  4166 ;; Parameters:    Size  Location     Type
  4167 ;;  f1              3   24[BANK0 ] float 
  4168 ;;  f2              3   27[BANK0 ] float 
  4169 ;; Auto vars:     Size  Location     Type
  4170 ;;  exp1            1   36[BANK0 ] unsigned char 
  4171 ;;  exp2            1   35[BANK0 ] unsigned char 
  4172 ;;  sign            1   34[BANK0 ] unsigned char 
  4173 ;; Return value:  Size  Location     Type
  4174 ;;                  3   24[BANK0 ] float 
  4175 ;; Registers used:
  4176 ;;		wreg, status,2, status,0, pclath, cstack
  4177 ;; Tracked objects:
  4178 ;;		On entry : 300/0
  4179 ;;		On exit  : 300/0
  4180 ;;		Unchanged: 0/0
  4181 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4182 ;;      Params:         0       6       0       0       0
  4183 ;;      Locals:         0       3       0       0       0
  4184 ;;      Temps:          0       4       0       0       0
  4185 ;;      Totals:         0      13       0       0       0
  4186 ;;Total ram usage:       13 bytes
  4187 ;; Hardware stack levels used: 1
  4188 ;; Hardware stack levels required when called: 3
  4189 ;; This function calls:
  4190 ;;		___ftpack
  4191 ;; This function is called by:
  4192 ;;		_rThermistor
  4193 ;;		_rTemperature
  4194 ;;		_log
  4195 ;;		_eval_poly
  4196 ;; This function uses a non-reentrant model
  4197 ;;
  4198                           
  4199                           
  4200                           ;psect for function ___ftadd
  4201  0530                     ___ftadd:
  4202                           
  4203                           ;incstack = 0
  4204                           ; Regs used in ___ftadd: [wreg+status,2+status,0+pclath+cstack]
  4205  0530  0838               	movf	___ftadd@f1,w
  4206  0531  00BE               	movwf	??___ftadd
  4207  0532  0839               	movf	___ftadd@f1+1,w
  4208  0533  00BF               	movwf	??___ftadd+1
  4209  0534  083A               	movf	___ftadd@f1+2,w
  4210  0535  00C0               	movwf	??___ftadd+2
  4211  0536  1003               	clrc
  4212  0537  0D3F               	rlf	??___ftadd+1,w
  4213  0538  0D40               	rlf	??___ftadd+2,w
  4214  0539  00C1               	movwf	??___ftadd+3
  4215  053A  0841               	movf	??___ftadd+3,w
  4216  053B  00C4               	movwf	___ftadd@exp1
  4217  053C  083B               	movf	___ftadd@f2,w
  4218  053D  00BE               	movwf	??___ftadd
  4219  053E  083C               	movf	___ftadd@f2+1,w
  4220  053F  00BF               	movwf	??___ftadd+1
  4221  0540  083D               	movf	___ftadd@f2+2,w
  4222  0541  00C0               	movwf	??___ftadd+2
  4223  0542  1003               	clrc
  4224  0543  0D3F               	rlf	??___ftadd+1,w
  4225  0544  0D40               	rlf	??___ftadd+2,w
  4226  0545  00C1               	movwf	??___ftadd+3
  4227  0546  0841               	movf	??___ftadd+3,w
  4228  0547  00C3               	movwf	___ftadd@exp2
  4229  0548  0844               	movf	___ftadd@exp1,w
  4230  0549  1903               	btfsc	3,2
  4231  054A  2D57               	goto	l3455
  4232  054B  0843               	movf	___ftadd@exp2,w
  4233  054C  0244               	subwf	___ftadd@exp1,w
  4234  054D  1803               	skipnc
  4235  054E  2D5E               	goto	l3459
  4236  054F  0843               	movf	___ftadd@exp2,w
  4237  0550  00BE               	movwf	??___ftadd
  4238  0551  0844               	movf	___ftadd@exp1,w
  4239  0552  02BE               	subwf	??___ftadd,f
  4240  0553  3019               	movlw	25
  4241  0554  023E               	subwf	??___ftadd,w
  4242  0555  1C03               	skipc
  4243  0556  2D5E               	goto	l3459
  4244  0557                     l3455:
  4245  0557  083B               	movf	___ftadd@f2,w
  4246  0558  00B8               	movwf	?___ftadd
  4247  0559  083C               	movf	___ftadd@f2+1,w
  4248  055A  00B9               	movwf	?___ftadd+1
  4249  055B  083D               	movf	___ftadd@f2+2,w
  4250  055C  00BA               	movwf	?___ftadd+2
  4251  055D  0008               	return
  4252  055E                     l3459:
  4253  055E  0843               	movf	___ftadd@exp2,w
  4254  055F  1903               	btfsc	3,2
  4255  0560  0008               	return
  4256  0561  0844               	movf	___ftadd@exp1,w
  4257  0562  0243               	subwf	___ftadd@exp2,w
  4258  0563  1803               	skipnc
  4259  0564  2D6D               	goto	l3465
  4260  0565  0844               	movf	___ftadd@exp1,w
  4261  0566  00BE               	movwf	??___ftadd
  4262  0567  0843               	movf	___ftadd@exp2,w
  4263  0568  02BE               	subwf	??___ftadd,f
  4264  0569  3019               	movlw	25
  4265  056A  023E               	subwf	??___ftadd,w
  4266  056B  1803               	btfsc	3,0
  4267  056C  0008               	return
  4268  056D                     l3465:
  4269  056D  3006               	movlw	6
  4270  056E  00BE               	movwf	??___ftadd
  4271  056F  083E               	movf	??___ftadd,w
  4272  0570  00C2               	movwf	___ftadd@sign
  4273  0571  1BBA               	btfsc	___ftadd@f1+2,7
  4274  0572  17C2               	bsf	___ftadd@sign,7
  4275  0573  1BBD               	btfsc	___ftadd@f2+2,7
  4276  0574  1742               	bsf	___ftadd@sign,6
  4277  0575  17B9               	bsf	___ftadd@f1+1,7
  4278  0576  30FF               	movlw	255
  4279  0577  05B8               	andwf	___ftadd@f1,f
  4280  0578  30FF               	movlw	255
  4281  0579  05B9               	andwf	___ftadd@f1+1,f
  4282  057A  3000               	movlw	0
  4283  057B  05BA               	andwf	___ftadd@f1+2,f
  4284  057C  17BC               	bsf	___ftadd@f2+1,7
  4285  057D  30FF               	movlw	255
  4286  057E  05BB               	andwf	___ftadd@f2,f
  4287  057F  30FF               	movlw	255
  4288  0580  05BC               	andwf	___ftadd@f2+1,f
  4289  0581  3000               	movlw	0
  4290  0582  05BD               	andwf	___ftadd@f2+2,f
  4291  0583  0843               	movf	___ftadd@exp2,w
  4292  0584  0244               	subwf	___ftadd@exp1,w
  4293  0585  1803               	skipnc
  4294  0586  2DAD               	goto	l3487
  4295  0587                     l3477:
  4296  0587  3001               	movlw	1
  4297  0588                     u3535:
  4298  0588  1003               	clrc
  4299  0589  0DBB               	rlf	___ftadd@f2,f
  4300  058A  0DBC               	rlf	___ftadd@f2+1,f
  4301  058B  0DBD               	rlf	___ftadd@f2+2,f
  4302  058C  3EFF               	addlw	-1
  4303  058D  1D03               	skipz
  4304  058E  2D88               	goto	u3535
  4305  058F  3001               	movlw	1
  4306  0590  02C3               	subwf	___ftadd@exp2,f
  4307  0591  0843               	movf	___ftadd@exp2,w
  4308  0592  0644               	xorwf	___ftadd@exp1,w
  4309  0593  1903               	skipnz
  4310  0594  2DA8               	goto	l3485
  4311  0595  3001               	movlw	1
  4312  0596  02C2               	subwf	___ftadd@sign,f
  4313  0597  0842               	movf	___ftadd@sign,w
  4314  0598  3907               	andlw	7
  4315  0599  1903               	btfsc	3,2
  4316  059A  2DA8               	goto	l3485
  4317  059B  2D87               	goto	l3477
  4318  059C                     l3483:
  4319  059C  3001               	movlw	1
  4320  059D                     u3565:
  4321  059D  1003               	clrc
  4322  059E  0CBA               	rrf	___ftadd@f1+2,f
  4323  059F  0CB9               	rrf	___ftadd@f1+1,f
  4324  05A0  0CB8               	rrf	___ftadd@f1,f
  4325  05A1  3EFF               	addlw	-1
  4326  05A2  1D03               	skipz
  4327  05A3  2D9D               	goto	u3565
  4328  05A4  3001               	movlw	1
  4329  05A5  00BE               	movwf	??___ftadd
  4330  05A6  083E               	movf	??___ftadd,w
  4331  05A7  07C4               	addwf	___ftadd@exp1,f
  4332  05A8                     l3485:
  4333  05A8  0844               	movf	___ftadd@exp1,w
  4334  05A9  0643               	xorwf	___ftadd@exp2,w
  4335  05AA  1903               	btfsc	3,2
  4336  05AB  2DD6               	goto	l1057
  4337  05AC  2D9C               	goto	l3483
  4338  05AD                     l3487:
  4339  05AD  0844               	movf	___ftadd@exp1,w
  4340  05AE  0243               	subwf	___ftadd@exp2,w
  4341  05AF  1803               	skipnc
  4342  05B0  2DD6               	goto	l1057
  4343  05B1                     l3489:
  4344  05B1  3001               	movlw	1
  4345  05B2                     u3595:
  4346  05B2  1003               	clrc
  4347  05B3  0DB8               	rlf	___ftadd@f1,f
  4348  05B4  0DB9               	rlf	___ftadd@f1+1,f
  4349  05B5  0DBA               	rlf	___ftadd@f1+2,f
  4350  05B6  3EFF               	addlw	-1
  4351  05B7  1D03               	skipz
  4352  05B8  2DB2               	goto	u3595
  4353  05B9  3001               	movlw	1
  4354  05BA  02C4               	subwf	___ftadd@exp1,f
  4355  05BB  0843               	movf	___ftadd@exp2,w
  4356  05BC  0644               	xorwf	___ftadd@exp1,w
  4357  05BD  1903               	skipnz
  4358  05BE  2DD2               	goto	l3497
  4359  05BF  3001               	movlw	1
  4360  05C0  02C2               	subwf	___ftadd@sign,f
  4361  05C1  0842               	movf	___ftadd@sign,w
  4362  05C2  3907               	andlw	7
  4363  05C3  1903               	btfsc	3,2
  4364  05C4  2DD2               	goto	l3497
  4365  05C5  2DB1               	goto	l3489
  4366  05C6                     l3495:
  4367  05C6  3001               	movlw	1
  4368  05C7                     u3625:
  4369  05C7  1003               	clrc
  4370  05C8  0CBD               	rrf	___ftadd@f2+2,f
  4371  05C9  0CBC               	rrf	___ftadd@f2+1,f
  4372  05CA  0CBB               	rrf	___ftadd@f2,f
  4373  05CB  3EFF               	addlw	-1
  4374  05CC  1D03               	skipz
  4375  05CD  2DC7               	goto	u3625
  4376  05CE  3001               	movlw	1
  4377  05CF  00BE               	movwf	??___ftadd
  4378  05D0  083E               	movf	??___ftadd,w
  4379  05D1  07C3               	addwf	___ftadd@exp2,f
  4380  05D2                     l3497:
  4381  05D2  0844               	movf	___ftadd@exp1,w
  4382  05D3  0643               	xorwf	___ftadd@exp2,w
  4383  05D4  1D03               	skipz
  4384  05D5  2DC6               	goto	l3495
  4385  05D6                     l1057:
  4386  05D6  1FC2               	btfss	___ftadd@sign,7
  4387  05D7  2DE8               	goto	l3501
  4388  05D8  30FF               	movlw	255
  4389  05D9  06B8               	xorwf	___ftadd@f1,f
  4390  05DA  30FF               	movlw	255
  4391  05DB  06B9               	xorwf	___ftadd@f1+1,f
  4392  05DC  30FF               	movlw	255
  4393  05DD  06BA               	xorwf	___ftadd@f1+2,f
  4394  05DE  3001               	movlw	1
  4395  05DF  07B8               	addwf	___ftadd@f1,f
  4396  05E0  3000               	movlw	0
  4397  05E1  1803               	skipnc
  4398  05E2  3001               	movlw	1
  4399  05E3  07B9               	addwf	___ftadd@f1+1,f
  4400  05E4  3000               	movlw	0
  4401  05E5  1803               	skipnc
  4402  05E6  3001               	movlw	1
  4403  05E7  07BA               	addwf	___ftadd@f1+2,f
  4404  05E8                     l3501:
  4405  05E8  1F42               	btfss	___ftadd@sign,6
  4406  05E9  2DFA               	goto	l3505
  4407  05EA  30FF               	movlw	255
  4408  05EB  06BB               	xorwf	___ftadd@f2,f
  4409  05EC  30FF               	movlw	255
  4410  05ED  06BC               	xorwf	___ftadd@f2+1,f
  4411  05EE  30FF               	movlw	255
  4412  05EF  06BD               	xorwf	___ftadd@f2+2,f
  4413  05F0  3001               	movlw	1
  4414  05F1  07BB               	addwf	___ftadd@f2,f
  4415  05F2  3000               	movlw	0
  4416  05F3  1803               	skipnc
  4417  05F4  3001               	movlw	1
  4418  05F5  07BC               	addwf	___ftadd@f2+1,f
  4419  05F6  3000               	movlw	0
  4420  05F7  1803               	skipnc
  4421  05F8  3001               	movlw	1
  4422  05F9  07BD               	addwf	___ftadd@f2+2,f
  4423  05FA                     l3505:
  4424  05FA  01C2               	clrf	___ftadd@sign
  4425  05FB  0838               	movf	___ftadd@f1,w
  4426  05FC  07BB               	addwf	___ftadd@f2,f
  4427  05FD  0839               	movf	___ftadd@f1+1,w
  4428  05FE  1103               	clrz
  4429  05FF  1803               	skipnc
  4430  0600  0A39               	incf	___ftadd@f1+1,w
  4431  0601  1D03               	btfss	3,2
  4432  0602  07BC               	addwf	___ftadd@f2+1,f
  4433  0603  083A               	movf	___ftadd@f1+2,w
  4434  0604  1103               	clrz
  4435  0605  1803               	skipnc
  4436  0606  0A3A               	incf	___ftadd@f1+2,w
  4437  0607  1D03               	btfss	3,2
  4438  0608  07BD               	addwf	___ftadd@f2+2,f
  4439  0609  1FBD               	btfss	___ftadd@f2+2,7
  4440  060A  2E1D               	goto	l3515
  4441  060B  30FF               	movlw	255
  4442  060C  06BB               	xorwf	___ftadd@f2,f
  4443  060D  30FF               	movlw	255
  4444  060E  06BC               	xorwf	___ftadd@f2+1,f
  4445  060F  30FF               	movlw	255
  4446  0610  06BD               	xorwf	___ftadd@f2+2,f
  4447  0611  3001               	movlw	1
  4448  0612  07BB               	addwf	___ftadd@f2,f
  4449  0613  3000               	movlw	0
  4450  0614  1803               	skipnc
  4451  0615  3001               	movlw	1
  4452  0616  07BC               	addwf	___ftadd@f2+1,f
  4453  0617  3000               	movlw	0
  4454  0618  1803               	skipnc
  4455  0619  3001               	movlw	1
  4456  061A  07BD               	addwf	___ftadd@f2+2,f
  4457  061B  01C2               	clrf	___ftadd@sign
  4458  061C  0AC2               	incf	___ftadd@sign,f
  4459  061D                     l3515:
  4460  061D  083B               	movf	___ftadd@f2,w
  4461  061E  00A0               	movwf	___ftpack@arg
  4462  061F  083C               	movf	___ftadd@f2+1,w
  4463  0620  00A1               	movwf	___ftpack@arg+1
  4464  0621  083D               	movf	___ftadd@f2+2,w
  4465  0622  00A2               	movwf	___ftpack@arg+2
  4466  0623  0844               	movf	___ftadd@exp1,w
  4467  0624  00BE               	movwf	??___ftadd
  4468  0625  083E               	movf	??___ftadd,w
  4469  0626  00A3               	movwf	___ftpack@exp
  4470  0627  0842               	movf	___ftadd@sign,w
  4471  0628  00BF               	movwf	??___ftadd+1
  4472  0629  083F               	movf	??___ftadd+1,w
  4473  062A  00A4               	movwf	___ftpack@sign
  4474  062B  160A  118A  22CD   	fcall	___ftpack
  4475  062E  0820               	movf	?___ftpack,w
  4476  062F  00B8               	movwf	?___ftadd
  4477  0630  0821               	movf	?___ftpack+1,w
  4478  0631  00B9               	movwf	?___ftadd+1
  4479  0632  0822               	movf	?___ftpack+2,w
  4480  0633  00BA               	movwf	?___ftadd+2
  4481  0634  0008               	return
  4482  0635                     __end_of___ftadd:
  4483                           
  4484                           	psect	text11
  4485  1DCB                     __ptext11:	
  4486 ;; *************** function ___ftge *****************
  4487 ;; Defined at:
  4488 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\ftge.c"
  4489 ;; Parameters:    Size  Location     Type
  4490 ;;  ff1             3    0[BANK0 ] float 
  4491 ;;  ff2             3    3[BANK0 ] float 
  4492 ;; Auto vars:     Size  Location     Type
  4493 ;;		None
  4494 ;; Return value:  Size  Location     Type
  4495 ;;		None               void
  4496 ;; Registers used:
  4497 ;;		wreg, status,2, status,0
  4498 ;; Tracked objects:
  4499 ;;		On entry : 300/0
  4500 ;;		On exit  : 300/0
  4501 ;;		Unchanged: 0/0
  4502 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4503 ;;      Params:         0       6       0       0       0
  4504 ;;      Locals:         0       0       0       0       0
  4505 ;;      Temps:          0       0       0       0       0
  4506 ;;      Totals:         0       6       0       0       0
  4507 ;;Total ram usage:        6 bytes
  4508 ;; Hardware stack levels used: 1
  4509 ;; Hardware stack levels required when called: 2
  4510 ;; This function calls:
  4511 ;;		Nothing
  4512 ;; This function is called by:
  4513 ;;		_log
  4514 ;; This function uses a non-reentrant model
  4515 ;;
  4516                           
  4517                           
  4518                           ;psect for function ___ftge
  4519  1DCB                     ___ftge:
  4520                           
  4521                           ;incstack = 0
  4522                           ; Regs used in ___ftge: [wreg+status,2+status,0]
  4523  1DCB  1FA2               	btfss	___ftge@ff1+2,7
  4524  1DCC  2DDA               	goto	l3675
  4525  1DCD  0820               	movf	___ftge@ff1,w
  4526  1DCE  3C00               	sublw	0
  4527  1DCF  00A0               	movwf	___ftge@ff1
  4528  1DD0  0821               	movf	___ftge@ff1+1,w
  4529  1DD1  1C03               	skipc
  4530  1DD2  0F21               	incfsz	___ftge@ff1+1,w
  4531  1DD3  3C00               	sublw	0
  4532  1DD4  00A1               	movwf	___ftge@ff1+1
  4533  1DD5  0822               	movf	___ftge@ff1+2,w
  4534  1DD6  1C03               	skipc
  4535  1DD7  0F22               	incfsz	___ftge@ff1+2,w
  4536  1DD8  3C80               	sublw	128
  4537  1DD9  00A2               	movwf	___ftge@ff1+2
  4538  1DDA                     l3675:
  4539  1DDA  1FA5               	btfss	___ftge@ff2+2,7
  4540  1DDB  2DE9               	goto	l3679
  4541  1DDC  0823               	movf	___ftge@ff2,w
  4542  1DDD  3C00               	sublw	0
  4543  1DDE  00A3               	movwf	___ftge@ff2
  4544  1DDF  0824               	movf	___ftge@ff2+1,w
  4545  1DE0  1C03               	skipc
  4546  1DE1  0F24               	incfsz	___ftge@ff2+1,w
  4547  1DE2  3C00               	sublw	0
  4548  1DE3  00A4               	movwf	___ftge@ff2+1
  4549  1DE4  0825               	movf	___ftge@ff2+2,w
  4550  1DE5  1C03               	skipc
  4551  1DE6  0F25               	incfsz	___ftge@ff2+2,w
  4552  1DE7  3C80               	sublw	128
  4553  1DE8  00A5               	movwf	___ftge@ff2+2
  4554  1DE9                     l3679:
  4555  1DE9  3080               	movlw	128
  4556  1DEA  06A2               	xorwf	___ftge@ff1+2,f
  4557  1DEB  3080               	movlw	128
  4558  1DEC  06A5               	xorwf	___ftge@ff2+2,f
  4559  1DED  0825               	movf	___ftge@ff2+2,w
  4560  1DEE  0222               	subwf	___ftge@ff1+2,w
  4561  1DEF  1D03               	skipz
  4562  1DF0  0008               	return
  4563  1DF1  0824               	movf	___ftge@ff2+1,w
  4564  1DF2  0221               	subwf	___ftge@ff1+1,w
  4565  1DF3  1D03               	skipz
  4566  1DF4  0008               	return
  4567  1DF5  0823               	movf	___ftge@ff2,w
  4568  1DF6  0220               	subwf	___ftge@ff1,w
  4569  1DF7  0008               	return
  4570  1DF8                     __end_of___ftge:
  4571                           
  4572                           	psect	text12
  4573  1D47                     __ptext12:	
  4574 ;; *************** function ___awtoft *****************
  4575 ;; Defined at:
  4576 ;;		line 32 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\awtoft.c"
  4577 ;; Parameters:    Size  Location     Type
  4578 ;;  c               2   10[BANK1 ] int 
  4579 ;; Auto vars:     Size  Location     Type
  4580 ;;  sign            1   13[BANK1 ] unsigned char 
  4581 ;; Return value:  Size  Location     Type
  4582 ;;                  3   10[BANK1 ] float 
  4583 ;; Registers used:
  4584 ;;		wreg, status,2, status,0, pclath, cstack
  4585 ;; Tracked objects:
  4586 ;;		On entry : 300/100
  4587 ;;		On exit  : 300/100
  4588 ;;		Unchanged: 0/0
  4589 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4590 ;;      Params:         0       0       3       0       0
  4591 ;;      Locals:         0       0       1       0       0
  4592 ;;      Temps:          0       2       0       0       0
  4593 ;;      Totals:         0       2       4       0       0
  4594 ;;Total ram usage:        6 bytes
  4595 ;; Hardware stack levels used: 1
  4596 ;; Hardware stack levels required when called: 3
  4597 ;; This function calls:
  4598 ;;		___ftpack
  4599 ;; This function is called by:
  4600 ;;		_rTemperature
  4601 ;;		_log
  4602 ;; This function uses a non-reentrant model
  4603 ;;
  4604                           
  4605                           
  4606                           ;psect for function ___awtoft
  4607  1D47                     ___awtoft:
  4608                           
  4609                           ;incstack = 0
  4610                           ; Regs used in ___awtoft: [wreg+status,2+status,0+pclath+cstack]
  4611  1D47  01D5               	clrf	___awtoft@sign^(0+128)
  4612  1D48  1FD3               	btfss	(___awtoft@c+1)^(0+128),7
  4613  1D49  2D51               	goto	l3625
  4614  1D4A  09D2               	comf	___awtoft@c^(0+128),f
  4615  1D4B  09D3               	comf	(___awtoft@c+1)^(0+128),f
  4616  1D4C  0AD2               	incf	___awtoft@c^(0+128),f
  4617  1D4D  1903               	skipnz
  4618  1D4E  0AD3               	incf	(___awtoft@c+1)^(0+128),f
  4619  1D4F  01D5               	clrf	___awtoft@sign^(0+128)
  4620  1D50  0AD5               	incf	___awtoft@sign^(0+128),f
  4621  1D51                     l3625:
  4622  1D51  0852               	movf	___awtoft@c^(0+128),w
  4623  1D52  1283               	bcf	3,5	;RP0=0, select bank0
  4624  1D53  00A0               	movwf	___ftpack@arg
  4625  1D54  1683               	bsf	3,5	;RP0=1, select bank1
  4626  1D55  0853               	movf	(___awtoft@c+1)^(0+128),w
  4627  1D56  1283               	bcf	3,5	;RP0=0, select bank0
  4628  1D57  00A1               	movwf	___ftpack@arg+1
  4629  1D58  01A2               	clrf	___ftpack@arg+2
  4630  1D59  308E               	movlw	142
  4631  1D5A  00EE               	movwf	??___awtoft
  4632  1D5B  086E               	movf	??___awtoft,w
  4633  1D5C  00A3               	movwf	___ftpack@exp
  4634  1D5D  1683               	bsf	3,5	;RP0=1, select bank1
  4635  1D5E  0855               	movf	___awtoft@sign^(0+128),w
  4636  1D5F  1283               	bcf	3,5	;RP0=0, select bank0
  4637  1D60  00EF               	movwf	??___awtoft+1
  4638  1D61  086F               	movf	??___awtoft+1,w
  4639  1D62  00A4               	movwf	___ftpack@sign
  4640  1D63  160A  118A  22CD   	fcall	___ftpack
  4641  1D66  0820               	movf	?___ftpack,w
  4642  1D67  1683               	bsf	3,5	;RP0=1, select bank1
  4643  1D68  00D2               	movwf	?___awtoft^(0+128)
  4644  1D69  1283               	bcf	3,5	;RP0=0, select bank0
  4645  1D6A  0821               	movf	?___ftpack+1,w
  4646  1D6B  1683               	bsf	3,5	;RP0=1, select bank1
  4647  1D6C  00D3               	movwf	(?___awtoft+1)^(0+128)
  4648  1D6D  1283               	bcf	3,5	;RP0=0, select bank0
  4649  1D6E  0822               	movf	?___ftpack+2,w
  4650  1D6F  1683               	bsf	3,5	;RP0=1, select bank1
  4651  1D70  00D4               	movwf	(?___awtoft+2)^(0+128)
  4652  1D71  0008               	return
  4653  1D72                     __end_of___awtoft:
  4654                           
  4655                           	psect	text13
  4656  12CD                     __ptext13:	
  4657 ;; *************** function ___ftpack *****************
  4658 ;; Defined at:
  4659 ;;		line 62 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\float.c"
  4660 ;; Parameters:    Size  Location     Type
  4661 ;;  arg             3    0[BANK0 ] unsigned um
  4662 ;;  exp             1    3[BANK0 ] unsigned char 
  4663 ;;  sign            1    4[BANK0 ] unsigned char 
  4664 ;; Auto vars:     Size  Location     Type
  4665 ;;		None
  4666 ;; Return value:  Size  Location     Type
  4667 ;;                  3    0[BANK0 ] float 
  4668 ;; Registers used:
  4669 ;;		wreg, status,2, status,0
  4670 ;; Tracked objects:
  4671 ;;		On entry : 300/0
  4672 ;;		On exit  : 300/0
  4673 ;;		Unchanged: 0/0
  4674 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4675 ;;      Params:         0       5       0       0       0
  4676 ;;      Locals:         0       0       0       0       0
  4677 ;;      Temps:          0       3       0       0       0
  4678 ;;      Totals:         0       8       0       0       0
  4679 ;;Total ram usage:        8 bytes
  4680 ;; Hardware stack levels used: 1
  4681 ;; Hardware stack levels required when called: 2
  4682 ;; This function calls:
  4683 ;;		Nothing
  4684 ;; This function is called by:
  4685 ;;		___awtoft
  4686 ;;		___ftadd
  4687 ;;		___ftdiv
  4688 ;;		___ftmul
  4689 ;;		___lbtoft
  4690 ;; This function uses a non-reentrant model
  4691 ;;
  4692                           
  4693                           
  4694                           ;psect for function ___ftpack
  4695  12CD                     ___ftpack:
  4696                           
  4697                           ;incstack = 0
  4698                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
  4699  12CD  0823               	movf	___ftpack@exp,w
  4700  12CE  1903               	btfsc	3,2
  4701  12CF  2AD5               	goto	l3383
  4702  12D0  0822               	movf	___ftpack@arg+2,w
  4703  12D1  0421               	iorwf	___ftpack@arg+1,w
  4704  12D2  0420               	iorwf	___ftpack@arg,w
  4705  12D3  1D03               	skipz
  4706  12D4  2AE8               	goto	l3389
  4707  12D5                     l3383:
  4708  12D5  3000               	movlw	0
  4709  12D6  00A0               	movwf	?___ftpack
  4710  12D7  3000               	movlw	0
  4711  12D8  00A1               	movwf	?___ftpack+1
  4712  12D9  3000               	movlw	0
  4713  12DA  00A2               	movwf	?___ftpack+2
  4714  12DB  0008               	return
  4715  12DC                     l3387:
  4716  12DC  3001               	movlw	1
  4717  12DD  00A5               	movwf	??___ftpack
  4718  12DE  0825               	movf	??___ftpack,w
  4719  12DF  07A3               	addwf	___ftpack@exp,f
  4720  12E0  3001               	movlw	1
  4721  12E1                     u3315:
  4722  12E1  1003               	clrc
  4723  12E2  0CA2               	rrf	___ftpack@arg+2,f
  4724  12E3  0CA1               	rrf	___ftpack@arg+1,f
  4725  12E4  0CA0               	rrf	___ftpack@arg,f
  4726  12E5  3EFF               	addlw	-1
  4727  12E6  1D03               	skipz
  4728  12E7  2AE1               	goto	u3315
  4729  12E8                     l3389:
  4730  12E8  30FE               	movlw	254
  4731  12E9  0522               	andwf	___ftpack@arg+2,w
  4732  12EA  1903               	btfsc	3,2
  4733  12EB  2B03               	goto	l1026
  4734  12EC  2ADC               	goto	l3387
  4735  12ED                     l3391:
  4736  12ED  3001               	movlw	1
  4737  12EE  00A5               	movwf	??___ftpack
  4738  12EF  0825               	movf	??___ftpack,w
  4739  12F0  07A3               	addwf	___ftpack@exp,f
  4740  12F1  3001               	movlw	1
  4741  12F2  07A0               	addwf	___ftpack@arg,f
  4742  12F3  3000               	movlw	0
  4743  12F4  1803               	skipnc
  4744  12F5  3001               	movlw	1
  4745  12F6  07A1               	addwf	___ftpack@arg+1,f
  4746  12F7  3000               	movlw	0
  4747  12F8  1803               	skipnc
  4748  12F9  3001               	movlw	1
  4749  12FA  07A2               	addwf	___ftpack@arg+2,f
  4750  12FB  3001               	movlw	1
  4751  12FC                     u3335:
  4752  12FC  1003               	clrc
  4753  12FD  0CA2               	rrf	___ftpack@arg+2,f
  4754  12FE  0CA1               	rrf	___ftpack@arg+1,f
  4755  12FF  0CA0               	rrf	___ftpack@arg,f
  4756  1300  3EFF               	addlw	-1
  4757  1301  1D03               	skipz
  4758  1302  2AFC               	goto	u3335
  4759  1303                     l1026:
  4760  1303  30FF               	movlw	255
  4761  1304  0522               	andwf	___ftpack@arg+2,w
  4762  1305  1903               	btfsc	3,2
  4763  1306  2B16               	goto	l3399
  4764  1307  2AED               	goto	l3391
  4765  1308                     l3401:
  4766  1308  3002               	movlw	2
  4767  1309  0223               	subwf	___ftpack@exp,w
  4768  130A  1C03               	btfss	3,0
  4769  130B  2B18               	goto	l1033
  4770  130C  3001               	movlw	1
  4771  130D  02A3               	subwf	___ftpack@exp,f
  4772  130E  3001               	movlw	1
  4773  130F                     u3355:
  4774  130F  1003               	clrc
  4775  1310  0DA0               	rlf	___ftpack@arg,f
  4776  1311  0DA1               	rlf	___ftpack@arg+1,f
  4777  1312  0DA2               	rlf	___ftpack@arg+2,f
  4778  1313  3EFF               	addlw	-1
  4779  1314  1D03               	skipz
  4780  1315  2B0F               	goto	u3355
  4781  1316                     l3399:
  4782  1316  1FA1               	btfss	___ftpack@arg+1,7
  4783  1317  2B08               	goto	l3401
  4784  1318                     l1033:
  4785  1318  1823               	btfsc	___ftpack@exp,0
  4786  1319  2B20               	goto	l1034
  4787  131A  30FF               	movlw	255
  4788  131B  05A0               	andwf	___ftpack@arg,f
  4789  131C  307F               	movlw	127
  4790  131D  05A1               	andwf	___ftpack@arg+1,f
  4791  131E  30FF               	movlw	255
  4792  131F  05A2               	andwf	___ftpack@arg+2,f
  4793  1320                     l1034:
  4794  1320  1003               	clrc
  4795  1321  0CA3               	rrf	___ftpack@exp,f
  4796  1322  0823               	movf	___ftpack@exp,w
  4797  1323  00A5               	movwf	??___ftpack
  4798  1324  01A6               	clrf	??___ftpack+1
  4799  1325  01A7               	clrf	??___ftpack+2
  4800  1326  3010               	movlw	16
  4801  1327                     u3395:
  4802  1327  1003               	clrc
  4803  1328  0DA5               	rlf	??___ftpack,f
  4804  1329  0DA6               	rlf	??___ftpack+1,f
  4805  132A  0DA7               	rlf	??___ftpack+2,f
  4806  132B  3EFF               	addlw	-1
  4807  132C  1D03               	skipz
  4808  132D  2B27               	goto	u3395
  4809  132E  0825               	movf	??___ftpack,w
  4810  132F  04A0               	iorwf	___ftpack@arg,f
  4811  1330  0826               	movf	??___ftpack+1,w
  4812  1331  04A1               	iorwf	___ftpack@arg+1,f
  4813  1332  0827               	movf	??___ftpack+2,w
  4814  1333  04A2               	iorwf	___ftpack@arg+2,f
  4815  1334  0824               	movf	___ftpack@sign,w
  4816  1335  1903               	btfsc	3,2
  4817  1336  0008               	return
  4818  1337  17A2               	bsf	___ftpack@arg+2,7
  4819  1338  0008               	return
  4820  1339                     __end_of___ftpack:
  4821                           
  4822                           	psect	text14
  4823  13B6                     __ptext14:	
  4824 ;; *************** function _init *****************
  4825 ;; Defined at:
  4826 ;;		line 5 in file "config.c"
  4827 ;; Parameters:    Size  Location     Type
  4828 ;;		None
  4829 ;; Auto vars:     Size  Location     Type
  4830 ;;		None
  4831 ;; Return value:  Size  Location     Type
  4832 ;;                  1    wreg      void 
  4833 ;; Registers used:
  4834 ;;		wreg, status,2
  4835 ;; Tracked objects:
  4836 ;;		On entry : B00/0
  4837 ;;		On exit  : 0/0
  4838 ;;		Unchanged: 0/0
  4839 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4840 ;;      Params:         0       0       0       0       0
  4841 ;;      Locals:         0       0       0       0       0
  4842 ;;      Temps:          0       2       0       0       0
  4843 ;;      Totals:         0       2       0       0       0
  4844 ;;Total ram usage:        2 bytes
  4845 ;; Hardware stack levels used: 1
  4846 ;; Hardware stack levels required when called: 2
  4847 ;; This function calls:
  4848 ;;		Nothing
  4849 ;; This function is called by:
  4850 ;;		_main
  4851 ;; This function uses a non-reentrant model
  4852 ;;
  4853                           
  4854                           
  4855                           ;psect for function _init
  4856  13B6                     _init:
  4857                           
  4858                           ;config.c: 7: TRISAbits.TRISA0 = 1;
  4859                           
  4860                           ;incstack = 0
  4861                           ; Regs used in _init: [wreg+status,2]
  4862  13B6  1683               	bsf	3,5	;RP0=1, select bank1
  4863  13B7  1405               	bsf	5,0	;volatile
  4864                           
  4865                           ;config.c: 8: TRISAbits.TRISA1 = 1;
  4866  13B8  1485               	bsf	5,1	;volatile
  4867                           
  4868                           ;config.c: 9: TRISAbits.TRISA2 = 0;
  4869  13B9  1105               	bcf	5,2	;volatile
  4870                           
  4871                           ;config.c: 10: TRISAbits.TRISA3 = 1;
  4872  13BA  1585               	bsf	5,3	;volatile
  4873                           
  4874                           ;config.c: 11: TRISAbits.TRISA4 = 0;
  4875  13BB  1205               	bcf	5,4	;volatile
  4876                           
  4877                           ;config.c: 12: TRISAbits.TRISA5 = 0;
  4878  13BC  1285               	bcf	5,5	;volatile
  4879                           
  4880                           ;config.c: 14: TRISBbits.TRISB0 = 0;
  4881  13BD  1006               	bcf	6,0	;volatile
  4882                           
  4883                           ;config.c: 15: TRISBbits.TRISB1 = 0;
  4884  13BE  1086               	bcf	6,1	;volatile
  4885                           
  4886                           ;config.c: 16: TRISBbits.TRISB2 = 0;
  4887  13BF  1106               	bcf	6,2	;volatile
  4888                           
  4889                           ;config.c: 17: TRISBbits.TRISB3 = 1;
  4890  13C0  1586               	bsf	6,3	;volatile
  4891                           
  4892                           ;config.c: 18: TRISBbits.TRISB4 = 1;
  4893  13C1  1606               	bsf	6,4	;volatile
  4894                           
  4895                           ;config.c: 19: TRISBbits.TRISB5 = 1;
  4896  13C2  1686               	bsf	6,5	;volatile
  4897                           
  4898                           ;config.c: 20: TRISBbits.TRISB6 = 1;
  4899  13C3  1706               	bsf	6,6	;volatile
  4900                           
  4901                           ;config.c: 21: TRISBbits.TRISB7 = 1;
  4902  13C4  1786               	bsf	6,7	;volatile
  4903                           
  4904                           ;config.c: 23: TRISCbits.TRISC0 = 0;
  4905  13C5  1007               	bcf	7,0	;volatile
  4906                           
  4907                           ;config.c: 24: TRISCbits.TRISC1 = 0;
  4908  13C6  1087               	bcf	7,1	;volatile
  4909                           
  4910                           ;config.c: 25: TRISCbits.TRISC2 = 0;
  4911  13C7  1107               	bcf	7,2	;volatile
  4912                           
  4913                           ;config.c: 26: TRISCbits.TRISC3 = 0;
  4914  13C8  1187               	bcf	7,3	;volatile
  4915                           
  4916                           ;config.c: 27: TRISCbits.TRISC4 = 0;
  4917  13C9  1207               	bcf	7,4	;volatile
  4918                           
  4919                           ;config.c: 28: TRISCbits.TRISC5 = 0;
  4920  13CA  1287               	bcf	7,5	;volatile
  4921                           
  4922                           ;config.c: 29: TRISCbits.TRISC6 = 1;
  4923  13CB  1707               	bsf	7,6	;volatile
  4924                           
  4925                           ;config.c: 30: TRISCbits.TRISC7 = 1;
  4926  13CC  1787               	bsf	7,7	;volatile
  4927                           
  4928                           ;config.c: 32: PORTA = 0x0;
  4929  13CD  1283               	bcf	3,5	;RP0=0, select bank0
  4930  13CE  0185               	clrf	5	;volatile
  4931                           
  4932                           ;config.c: 33: PORTB = 0x0;
  4933  13CF  0186               	clrf	6	;volatile
  4934                           
  4935                           ;config.c: 34: PORTC = 0x0;
  4936  13D0  0187               	clrf	7	;volatile
  4937                           
  4938                           ;config.c: 36: OPTION_REGbits.nRBPU = 1;
  4939  13D1  1683               	bsf	3,5	;RP0=1, select bank1
  4940  13D2  1781               	bsf	1,7	;volatile
  4941                           
  4942                           ;config.c: 37: OPTION_REGbits.INTEDG = 0;
  4943  13D3  1301               	bcf	1,6	;volatile
  4944                           
  4945                           ;config.c: 38: OPTION_REGbits.T0CS = 0;
  4946  13D4  1281               	bcf	1,5	;volatile
  4947                           
  4948                           ;config.c: 39: OPTION_REGbits.T0SE = 0;
  4949  13D5  1201               	bcf	1,4	;volatile
  4950                           
  4951                           ;config.c: 40: OPTION_REGbits.PSA = 0;
  4952  13D6  1181               	bcf	1,3	;volatile
  4953                           
  4954                           ;config.c: 41: OPTION_REGbits.PS2 = 1;
  4955  13D7  1501               	bsf	1,2	;volatile
  4956                           
  4957                           ;config.c: 42: OPTION_REGbits.PS1 = 1;
  4958  13D8  1481               	bsf	1,1	;volatile
  4959                           
  4960                           ;config.c: 43: OPTION_REGbits.PS0 = 1;
  4961  13D9  1401               	bsf	1,0	;volatile
  4962                           
  4963                           ;config.c: 45: INTCONbits.GIE = 1;
  4964  13DA  178B               	bsf	11,7	;volatile
  4965                           
  4966                           ;config.c: 46: INTCONbits.PEIE = 1;
  4967  13DB  170B               	bsf	11,6	;volatile
  4968                           
  4969                           ;config.c: 47: INTCONbits.T0IE = 0;
  4970  13DC  128B               	bcf	11,5	;volatile
  4971                           
  4972                           ;config.c: 48: INTCONbits.INTE = 0;
  4973  13DD  120B               	bcf	11,4	;volatile
  4974                           
  4975                           ;config.c: 49: INTCONbits.RBIE = 1;
  4976  13DE  158B               	bsf	11,3	;volatile
  4977                           
  4978                           ;config.c: 51: PIE1bits.ADIE = 1;
  4979  13DF  170C               	bsf	12,6	;volatile
  4980                           
  4981                           ;config.c: 52: PIE1bits.RCIE = 1;
  4982  13E0  168C               	bsf	12,5	;volatile
  4983                           
  4984                           ;config.c: 53: PIE1bits.TXIE = 0;
  4985  13E1  120C               	bcf	12,4	;volatile
  4986                           
  4987                           ;config.c: 54: PIE1bits.SSPIE = 0;
  4988  13E2  118C               	bcf	12,3	;volatile
  4989                           
  4990                           ;config.c: 55: PIE1bits.TMR2IE = 1;
  4991  13E3  148C               	bsf	12,1	;volatile
  4992                           
  4993                           ;config.c: 56: PIE1bits.TMR1IE = 1;
  4994  13E4  140C               	bsf	12,0	;volatile
  4995                           
  4996                           ;config.c: 58: PIE2bits.CCP2IE = 0;
  4997  13E5  100D               	bcf	13,0	;volatile
  4998                           
  4999                           ;config.c: 60: T1CONbits.T1CKPS1 = 0;
  5000  13E6  1283               	bcf	3,5	;RP0=0, select bank0
  5001  13E7  1290               	bcf	16,5	;volatile
  5002                           
  5003                           ;config.c: 61: T1CONbits.T1CKPS0 = 1;
  5004  13E8  1610               	bsf	16,4	;volatile
  5005                           
  5006                           ;config.c: 62: T1CONbits.T1OSCEN = 0;
  5007  13E9  1190               	bcf	16,3	;volatile
  5008                           
  5009                           ;config.c: 63: T1CONbits.nT1SYNC = 0;
  5010  13EA  1110               	bcf	16,2	;volatile
  5011                           
  5012                           ;config.c: 64: T1CONbits.TMR1CS = 0;
  5013  13EB  1090               	bcf	16,1	;volatile
  5014                           
  5015                           ;config.c: 65: T1CONbits.TMR1ON = 0;
  5016  13EC  1010               	bcf	16,0	;volatile
  5017                           
  5018                           ;config.c: 67: T2CONbits.TOUTPS3 = 1;
  5019  13ED  1712               	bsf	18,6	;volatile
  5020                           
  5021                           ;config.c: 68: T2CONbits.TOUTPS2 = 1;
  5022  13EE  1692               	bsf	18,5	;volatile
  5023                           
  5024                           ;config.c: 69: T2CONbits.TOUTPS1 = 1;
  5025  13EF  1612               	bsf	18,4	;volatile
  5026                           
  5027                           ;config.c: 70: T2CONbits.TOUTPS0 = 1;
  5028  13F0  1592               	bsf	18,3	;volatile
  5029                           
  5030                           ;config.c: 71: T2CONbits.TMR2ON = 1;
  5031  13F1  1512               	bsf	18,2	;volatile
  5032                           
  5033                           ;config.c: 72: T2CONbits.T2CKPS1 = 1;
  5034  13F2  1492               	bsf	18,1	;volatile
  5035                           
  5036                           ;config.c: 73: T2CONbits.T2CKPS0 = 0;
  5037  13F3  1012               	bcf	18,0	;volatile
  5038                           
  5039                           ;config.c: 75: TMR2 = 195;
  5040  13F4  30C3               	movlw	195
  5041  13F5  0091               	movwf	17	;volatile
  5042                           
  5043                           ;config.c: 77: SSPSTATbits.SMP = 0;
  5044  13F6  1683               	bsf	3,5	;RP0=1, select bank1
  5045  13F7  1394               	bcf	20,7	;volatile
  5046                           
  5047                           ;config.c: 78: SSPSTATbits.CKE = 0;
  5048  13F8  1314               	bcf	20,6	;volatile
  5049                           
  5050                           ;config.c: 79: SSPSTATbits.D_nA = 0;
  5051  13F9  1294               	bcf	20,5	;volatile
  5052                           
  5053                           ;config.c: 80: SSPSTATbits.P = 0;
  5054  13FA  1214               	bcf	20,4	;volatile
  5055                           
  5056                           ;config.c: 81: SSPSTATbits.S = 0;
  5057  13FB  1194               	bcf	20,3	;volatile
  5058                           
  5059                           ;config.c: 82: SSPSTATbits.R_nW = 0;
  5060  13FC  1114               	bcf	20,2	;volatile
  5061                           
  5062                           ;config.c: 83: SSPSTATbits.UA = 0;
  5063  13FD  1094               	bcf	20,1	;volatile
  5064                           
  5065                           ;config.c: 84: SSPSTATbits.BF = 0;
  5066  13FE  1014               	bcf	20,0	;volatile
  5067                           
  5068                           ;config.c: 86: SSPCONbits.WCOL = 0;
  5069  13FF  1283               	bcf	3,5	;RP0=0, select bank0
  5070  1400  1394               	bcf	20,7	;volatile
  5071                           
  5072                           ;config.c: 87: SSPCONbits.SSPOV = 0;
  5073  1401  1314               	bcf	20,6	;volatile
  5074                           
  5075                           ;config.c: 88: SSPCONbits.SSPEN = 0;
  5076  1402  1294               	bcf	20,5	;volatile
  5077                           
  5078                           ;config.c: 89: SSPCONbits.CKP = 0;
  5079  1403  1214               	bcf	20,4	;volatile
  5080                           
  5081                           ;config.c: 90: SSPCONbits.SSPM3 = 0;
  5082  1404  1194               	bcf	20,3	;volatile
  5083                           
  5084                           ;config.c: 91: SSPCONbits.SSPM2 = 0;
  5085  1405  1114               	bcf	20,2	;volatile
  5086                           
  5087                           ;config.c: 92: SSPCONbits.SSPM1 = 0;
  5088  1406  1094               	bcf	20,1	;volatile
  5089                           
  5090                           ;config.c: 93: SSPCONbits.SSPM0 = 0;
  5091  1407  1014               	bcf	20,0	;volatile
  5092                           
  5093                           ;config.c: 95: TXSTAbits.CSRC = 0;
  5094  1408  1683               	bsf	3,5	;RP0=1, select bank1
  5095  1409  1398               	bcf	24,7	;volatile
  5096                           
  5097                           ;config.c: 96: TXSTAbits.TX9 = 0;
  5098  140A  1318               	bcf	24,6	;volatile
  5099                           
  5100                           ;config.c: 97: TXSTAbits.TXEN = 1;
  5101  140B  1698               	bsf	24,5	;volatile
  5102                           
  5103                           ;config.c: 98: TXSTAbits.SYNC = 0;
  5104  140C  1218               	bcf	24,4	;volatile
  5105                           
  5106                           ;config.c: 99: TXSTAbits.BRGH = 1;
  5107  140D  1518               	bsf	24,2	;volatile
  5108                           
  5109                           ;config.c: 100: TXSTAbits.TRMT = 0;
  5110  140E  1098               	bcf	24,1	;volatile
  5111                           
  5112                           ;config.c: 101: TXSTAbits.TX9D = 0;
  5113  140F  1018               	bcf	24,0	;volatile
  5114                           
  5115                           ;config.c: 103: RCSTAbits.SPEN = 1;
  5116  1410  1283               	bcf	3,5	;RP0=0, select bank0
  5117  1411  1798               	bsf	24,7	;volatile
  5118                           
  5119                           ;config.c: 104: RCSTAbits.RX9 = 0;
  5120  1412  1318               	bcf	24,6	;volatile
  5121                           
  5122                           ;config.c: 105: RCSTAbits.SREN = 0;
  5123  1413  1298               	bcf	24,5	;volatile
  5124                           
  5125                           ;config.c: 106: RCSTAbits.CREN = 1;
  5126  1414  1618               	bsf	24,4	;volatile
  5127                           
  5128                           ;config.c: 107: RCSTAbits.FERR = 0;
  5129  1415  1118               	bcf	24,2	;volatile
  5130                           
  5131                           ;config.c: 108: RCSTAbits.OERR = 0;
  5132  1416  1098               	bcf	24,1	;volatile
  5133                           
  5134                           ;config.c: 109: RCSTAbits.RX9D = 0;
  5135  1417  1018               	bcf	24,0	;volatile
  5136                           
  5137                           ;config.c: 111: if(TXSTAbits.BRGH)
  5138  1418  1683               	bsf	3,5	;RP0=1, select bank1
  5139  1419  1D18               	btfss	24,2	;volatile
  5140  141A  2C1D               	goto	l4399
  5141                           
  5142                           ;config.c: 112: SPBRG = (char)((8000000/38400)/16)-1;
  5143  141B  300C               	movlw	12
  5144  141C  2C1E               	goto	L3
  5145  141D                     l4399:
  5146                           
  5147                           ;config.c: 113: else;config.c: 114: SPBRG = (char)((8000000/38400)/64)-1;
  5148  141D  3002               	movlw	2
  5149  141E                     L3:
  5150  141E  0099               	movwf	25	;volatile
  5151                           
  5152                           ;config.c: 116: ADCON0bits.ADCS1 = 0;
  5153  141F  1283               	bcf	3,5	;RP0=0, select bank0
  5154  1420  139F               	bcf	31,7	;volatile
  5155                           
  5156                           ;config.c: 117: ADCON0bits.ADCS0 = 1;
  5157  1421  171F               	bsf	31,6	;volatile
  5158                           
  5159                           ;config.c: 118: ADCON0bits.CHS2 = 0;
  5160  1422  129F               	bcf	31,5	;volatile
  5161                           
  5162                           ;config.c: 119: ADCON0bits.CHS1 = 1;
  5163  1423  161F               	bsf	31,4	;volatile
  5164                           
  5165                           ;config.c: 120: ADCON0bits.CHS0 = 1;
  5166  1424  159F               	bsf	31,3	;volatile
  5167                           
  5168                           ;config.c: 121: ADCON0bits.GO_nDONE = 0;
  5169  1425  111F               	bcf	31,2	;volatile
  5170                           
  5171                           ;config.c: 122: ADCON0bits.ADON = 0;
  5172  1426  101F               	bcf	31,0	;volatile
  5173                           
  5174                           ;config.c: 124: ADCON1bits.PCFG2 = 1;
  5175  1427  1683               	bsf	3,5	;RP0=1, select bank1
  5176  1428  151F               	bsf	31,2	;volatile
  5177                           
  5178                           ;config.c: 125: ADCON1bits.PCFG1 = 0;
  5179  1429  109F               	bcf	31,1	;volatile
  5180                           
  5181                           ;config.c: 126: ADCON1bits.PCFG0 = 0;
  5182  142A  101F               	bcf	31,0	;volatile
  5183                           
  5184                           ;config.c: 128: TMR0_Value = 127;
  5185  142B  307F               	movlw	127
  5186  142C  1283               	bcf	3,5	;RP0=0, select bank0
  5187  142D  00A0               	movwf	??_init
  5188  142E  0820               	movf	??_init,w
  5189  142F  1683               	bsf	3,5	;RP0=1, select bank1
  5190  1430  00C2               	movwf	_TMR0_Value^(0+128)
  5191                           
  5192                           ;config.c: 129: cTMR0 = 0;
  5193  1431  01C1               	clrf	_cTMR0^(0+128)
  5194                           
  5195                           ;config.c: 131: _delay((unsigned long)((10)*(8000000/4000.0)));
  5196  1432  301A               	movlw	26
  5197  1433  1283               	bcf	3,5	;RP0=0, select bank0
  5198  1434  1303               	bcf	3,6	;RP1=0, select bank0
  5199  1435  00A1               	movwf	??_init+1
  5200  1436  30F7               	movlw	247
  5201  1437  00A0               	movwf	??_init
  5202  1438                     u6427:
  5203  1438  0BA0               	decfsz	??_init,f
  5204  1439  2C38               	goto	u6427
  5205  143A  0BA1               	decfsz	??_init+1,f
  5206  143B  2C38               	goto	u6427
  5207  143C  2C3D               	nop2
  5208  143D  0008               	return
  5209  143E                     __end_of_init:
  5210                           
  5211                           	psect	text15
  5212  041B                     __ptext15:	
  5213 ;; *************** function _fMenuStrip *****************
  5214 ;; Defined at:
  5215 ;;		line 3 in file "menu.c"
  5216 ;; Parameters:    Size  Location     Type
  5217 ;;		None
  5218 ;; Auto vars:     Size  Location     Type
  5219 ;;		None
  5220 ;; Return value:  Size  Location     Type
  5221 ;;                  1    wreg      void 
  5222 ;; Registers used:
  5223 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  5224 ;; Tracked objects:
  5225 ;;		On entry : 300/100
  5226 ;;		On exit  : B00/800
  5227 ;;		Unchanged: 0/0
  5228 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5229 ;;      Params:         0       0       0       0       0
  5230 ;;      Locals:         0       0       0       0       0
  5231 ;;      Temps:          0       8       0       0       0
  5232 ;;      Totals:         0       8       0       0       0
  5233 ;;Total ram usage:        8 bytes
  5234 ;; Hardware stack levels used: 1
  5235 ;; Hardware stack levels required when called: 7
  5236 ;; This function calls:
  5237 ;;		_LCD_SetPos
  5238 ;;		_LCD_StringOnOff
  5239 ;;		_LCD_clear
  5240 ;;		_LCD_string
  5241 ;;		_SPI_Write
  5242 ;;		___awdiv
  5243 ;;		___awmod
  5244 ;;		___bmul
  5245 ;;		___wmul
  5246 ;;		_fEraseString
  5247 ;;		_sprintf
  5248 ;;		_strcat
  5249 ;; This function is called by:
  5250 ;;		_main
  5251 ;; This function uses a non-reentrant model
  5252 ;;
  5253                           
  5254                           
  5255                           ;psect for function _fMenuStrip
  5256  041B                     _fMenuStrip:
  5257                           
  5258                           ;menu.c: 4: if(flMenuStrip == 0x01 && flSwitchButton == 0){
  5259                           
  5260                           ;incstack = 0
  5261                           ; Regs used in _fMenuStrip: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  5262  041B  033E               	decf	_flMenuStrip^(0+128),w
  5263  041C  1903               	btfsc	3,2
  5264  041D  187A               	btfsc	_flSwitchButton/(0+8),_flSwitchButton& (0+7)
  5265  041E  2CDC               	goto	l4521
  5266                           
  5267                           ;menu.c: 5: if(_MenuNav == 1) _MenuNav = 2;
  5268  041F  037B               	decf	__MenuNav,w
  5269  0420  047C               	iorwf	__MenuNav+1,w
  5270  0421  1D03               	btfss	3,2
  5271  0422  2C25               	goto	l4495
  5272  0423  3002               	movlw	2
  5273  0424  2CD3               	goto	L4
  5274  0425                     l4495:
  5275                           
  5276                           ;menu.c: 6: else if(_MenuNav >= 20 && _MenuNav < _MenuArr[0] * 10 + 9) _MenuNav /= 10;
  5277  0425  087C               	movf	__MenuNav+1,w
  5278  0426  3A80               	xorlw	128
  5279  0427  00FF               	movwf	127
  5280  0428  3080               	movlw	128
  5281  0429  027F               	subwf	127,w
  5282  042A  1D03               	skipz
  5283  042B  2C2E               	goto	u5095
  5284  042C  3014               	movlw	20
  5285  042D  027B               	subwf	__MenuNav,w
  5286  042E                     u5095:
  5287  042E  1C03               	skipc
  5288  042F  2C6C               	goto	l4501
  5289  0430  1683               	bsf	3,5	;RP0=1, select bank3
  5290  0431  1703               	bsf	3,6	;RP1=1, select bank3
  5291  0432  0828               	movf	__MenuArr^(0+384),w
  5292  0433  1283               	bcf	3,5	;RP0=0, select bank0
  5293  0434  1303               	bcf	3,6	;RP1=0, select bank0
  5294  0435  00CA               	movwf	??_fMenuStrip
  5295  0436  01CB               	clrf	??_fMenuStrip+1
  5296  0437  084A               	movf	??_fMenuStrip,w
  5297  0438  00A0               	movwf	___wmul@multiplier
  5298  0439  084B               	movf	??_fMenuStrip+1,w
  5299  043A  00A1               	movwf	___wmul@multiplier+1
  5300  043B  300A               	movlw	10
  5301  043C  00A2               	movwf	___wmul@multiplicand
  5302  043D  3000               	movlw	0
  5303  043E  00A3               	movwf	___wmul@multiplicand+1
  5304  043F  160A  158A  2504  120A  118A  	fcall	___wmul
  5305  0444  0820               	movf	?___wmul,w
  5306  0445  3E09               	addlw	9
  5307  0446  00CC               	movwf	??_fMenuStrip+2
  5308  0447  0821               	movf	?___wmul+1,w
  5309  0448  1803               	skipnc
  5310  0449  3E01               	addlw	1
  5311  044A  3E00               	addlw	0
  5312  044B  00CD               	movwf	??_fMenuStrip+3
  5313  044C  087C               	movf	__MenuNav+1,w
  5314  044D  3A80               	xorlw	128
  5315  044E  00CE               	movwf	??_fMenuStrip+4
  5316  044F  084D               	movf	??_fMenuStrip+3,w
  5317  0450  3A80               	xorlw	128
  5318  0451  024E               	subwf	??_fMenuStrip+4,w
  5319  0452  1D03               	skipz
  5320  0453  2C56               	goto	u5105
  5321  0454  084C               	movf	??_fMenuStrip+2,w
  5322  0455  027B               	subwf	__MenuNav,w
  5323  0456                     u5105:
  5324  0456  1803               	skipnc
  5325  0457  2C6C               	goto	l4501
  5326  0458                     l4499:
  5327  0458  300A               	movlw	10
  5328  0459  1283               	bcf	3,5	;RP0=0, select bank0
  5329  045A  1303               	bcf	3,6	;RP1=0, select bank0
  5330  045B  00A0               	movwf	___awdiv@divisor
  5331  045C  3000               	movlw	0
  5332  045D  00A1               	movwf	___awdiv@divisor+1
  5333  045E  087C               	movf	__MenuNav+1,w
  5334  045F  00A3               	movwf	___awdiv@dividend+1
  5335  0460  087B               	movf	__MenuNav,w
  5336  0461  00A2               	movwf	___awdiv@dividend
  5337  0462  160A  118A  221A  120A  118A  	fcall	___awdiv
  5338  0467  0821               	movf	?___awdiv+1,w
  5339  0468  00FC               	movwf	__MenuNav+1
  5340  0469  0820               	movf	?___awdiv,w
  5341  046A  00FB               	movwf	__MenuNav
  5342  046B  2CD6               	goto	l4515
  5343  046C                     l4501:
  5344                           
  5345                           ;menu.c: 7: else if(_MenuNav >= 100 && _MenuNav < _MenuArr[0] * 100 + 99) _MenuNav /= 10
      +                          ;
  5346  046C  087C               	movf	__MenuNav+1,w
  5347  046D  3A80               	xorlw	128
  5348  046E  00FF               	movwf	127
  5349  046F  3080               	movlw	128
  5350  0470  027F               	subwf	127,w
  5351  0471  1D03               	skipz
  5352  0472  2C75               	goto	u5115
  5353  0473  3064               	movlw	100
  5354  0474  027B               	subwf	__MenuNav,w
  5355  0475                     u5115:
  5356  0475  1C03               	skipc
  5357  0476  2C9F               	goto	l4507
  5358  0477  1683               	bsf	3,5	;RP0=1, select bank3
  5359  0478  1703               	bsf	3,6	;RP1=1, select bank3
  5360  0479  0828               	movf	__MenuArr^(0+384),w
  5361  047A  1283               	bcf	3,5	;RP0=0, select bank0
  5362  047B  1303               	bcf	3,6	;RP1=0, select bank0
  5363  047C  00CA               	movwf	??_fMenuStrip
  5364  047D  01CB               	clrf	??_fMenuStrip+1
  5365  047E  084A               	movf	??_fMenuStrip,w
  5366  047F  00A0               	movwf	___wmul@multiplier
  5367  0480  084B               	movf	??_fMenuStrip+1,w
  5368  0481  00A1               	movwf	___wmul@multiplier+1
  5369  0482  3064               	movlw	100
  5370  0483  00A2               	movwf	___wmul@multiplicand
  5371  0484  3000               	movlw	0
  5372  0485  00A3               	movwf	___wmul@multiplicand+1
  5373  0486  160A  158A  2504  120A  118A  	fcall	___wmul
  5374  048B  0820               	movf	?___wmul,w
  5375  048C  3E63               	addlw	99
  5376  048D  00CC               	movwf	??_fMenuStrip+2
  5377  048E  0821               	movf	?___wmul+1,w
  5378  048F  1803               	skipnc
  5379  0490  3E01               	addlw	1
  5380  0491  3E00               	addlw	0
  5381  0492  00CD               	movwf	??_fMenuStrip+3
  5382  0493  087C               	movf	__MenuNav+1,w
  5383  0494  3A80               	xorlw	128
  5384  0495  00CE               	movwf	??_fMenuStrip+4
  5385  0496  084D               	movf	??_fMenuStrip+3,w
  5386  0497  3A80               	xorlw	128
  5387  0498  024E               	subwf	??_fMenuStrip+4,w
  5388  0499  1D03               	skipz
  5389  049A  2C9D               	goto	u5125
  5390  049B  084C               	movf	??_fMenuStrip+2,w
  5391  049C  027B               	subwf	__MenuNav,w
  5392  049D                     u5125:
  5393  049D  1C03               	btfss	3,0
  5394  049E  2C58               	goto	l4499
  5395  049F                     l4507:
  5396                           
  5397                           ;menu.c: 8: else if(_MenuNav >= 1000 && _MenuNav < _MenuArr[0] * 1000 + 999) _MenuNav /=
      +                           10;
  5398  049F  087C               	movf	__MenuNav+1,w
  5399  04A0  3A80               	xorlw	128
  5400  04A1  00FF               	movwf	127
  5401  04A2  3083               	movlw	131
  5402  04A3  027F               	subwf	127,w
  5403  04A4  1D03               	skipz
  5404  04A5  2CA8               	goto	u5135
  5405  04A6  30E8               	movlw	232
  5406  04A7  027B               	subwf	__MenuNav,w
  5407  04A8                     u5135:
  5408  04A8  1C03               	skipc
  5409  04A9  2CD2               	goto	l4513
  5410  04AA  1683               	bsf	3,5	;RP0=1, select bank3
  5411  04AB  1703               	bsf	3,6	;RP1=1, select bank3
  5412  04AC  0828               	movf	__MenuArr^(0+384),w
  5413  04AD  1283               	bcf	3,5	;RP0=0, select bank0
  5414  04AE  1303               	bcf	3,6	;RP1=0, select bank0
  5415  04AF  00CA               	movwf	??_fMenuStrip
  5416  04B0  01CB               	clrf	??_fMenuStrip+1
  5417  04B1  084A               	movf	??_fMenuStrip,w
  5418  04B2  00A0               	movwf	___wmul@multiplier
  5419  04B3  084B               	movf	??_fMenuStrip+1,w
  5420  04B4  00A1               	movwf	___wmul@multiplier+1
  5421  04B5  30E8               	movlw	232
  5422  04B6  00A2               	movwf	___wmul@multiplicand
  5423  04B7  3003               	movlw	3
  5424  04B8  00A3               	movwf	___wmul@multiplicand+1
  5425  04B9  160A  158A  2504  120A  118A  	fcall	___wmul
  5426  04BE  0820               	movf	?___wmul,w
  5427  04BF  3EE7               	addlw	231
  5428  04C0  00CC               	movwf	??_fMenuStrip+2
  5429  04C1  0821               	movf	?___wmul+1,w
  5430  04C2  1803               	skipnc
  5431  04C3  3E01               	addlw	1
  5432  04C4  3E03               	addlw	3
  5433  04C5  00CD               	movwf	??_fMenuStrip+3
  5434  04C6  087C               	movf	__MenuNav+1,w
  5435  04C7  3A80               	xorlw	128
  5436  04C8  00CE               	movwf	??_fMenuStrip+4
  5437  04C9  084D               	movf	??_fMenuStrip+3,w
  5438  04CA  3A80               	xorlw	128
  5439  04CB  024E               	subwf	??_fMenuStrip+4,w
  5440  04CC  1D03               	skipz
  5441  04CD  2CD0               	goto	u5145
  5442  04CE  084C               	movf	??_fMenuStrip+2,w
  5443  04CF  027B               	subwf	__MenuNav,w
  5444  04D0                     u5145:
  5445  04D0  1C03               	btfss	3,0
  5446  04D1  2C58               	goto	l4499
  5447  04D2                     l4513:
  5448                           
  5449                           ;menu.c: 9: else _MenuNav = 1;
  5450  04D2  3001               	movlw	1
  5451  04D3                     L4:
  5452  04D3  00FB               	movwf	__MenuNav
  5453  04D4  3000               	movlw	0
  5454  04D5  00FC               	movwf	__MenuNav+1
  5455  04D6                     l4515:
  5456                           
  5457                           ;menu.c: 10: flSwitchButton = 1;
  5458  04D6  147A               	bsf	_flSwitchButton/(0+8),_flSwitchButton& (0+7)
  5459                           
  5460                           ;menu.c: 11: flClearLCD = 0;
  5461  04D7  10FA               	bcf	_flClearLCD/(0+8),_flClearLCD& (0+7)
  5462                           
  5463                           ;menu.c: 12: flUpdate = 0;
  5464  04D8  117A               	bcf	_flUpdate/(0+8),_flUpdate& (0+7)
  5465                           
  5466                           ;menu.c: 13: }
  5467  04D9  120A  158A  29F4   	goto	l4643
  5468  04DC                     l4521:
  5469                           
  5470                           ;menu.c: 14: else if(flMenuStrip == 0x02 && flSwitchButton == 0){
  5471  04DC  3002               	movlw	2
  5472  04DD  063E               	xorwf	_flMenuStrip^(0+128),w
  5473  04DE  1903               	btfsc	3,2
  5474  04DF  187A               	btfsc	_flSwitchButton/(0+8),_flSwitchButton& (0+7)
  5475  04E0  2D2A               	goto	L28
  5476                           
  5477                           ;menu.c: 15: if(_MenuNav <= 1) _MenuNav = _MenuArr[0];
  5478  04E1  087C               	movf	__MenuNav+1,w
  5479  04E2  3A80               	xorlw	128
  5480  04E3  00FF               	movwf	127
  5481  04E4  3080               	movlw	128
  5482  04E5  027F               	subwf	127,w
  5483  04E6  1D03               	skipz
  5484  04E7  2CEA               	goto	u5175
  5485  04E8  3002               	movlw	2
  5486  04E9  027B               	subwf	__MenuNav,w
  5487  04EA                     u5175:
  5488  04EA  1803               	skipnc
  5489  04EB  2CF4               	goto	l4529
  5490  04EC  1683               	bsf	3,5	;RP0=1, select bank3
  5491  04ED  1703               	bsf	3,6	;RP1=1, select bank3
  5492  04EE  0828               	movf	__MenuArr^(0+384),w
  5493  04EF  1283               	bcf	3,5	;RP0=0, select bank0
  5494  04F0  1303               	bcf	3,6	;RP1=0, select bank0
  5495  04F1  120A  158A  2930   	goto	L21
  5496  04F4                     l4529:
  5497                           
  5498                           ;menu.c: 16: else if(_MenuNav >= 10 && _MenuNav < 100){
  5499  04F4  087C               	movf	__MenuNav+1,w
  5500  04F5  3A80               	xorlw	128
  5501  04F6  00FF               	movwf	127
  5502  04F7  3080               	movlw	128
  5503  04F8  027F               	subwf	127,w
  5504  04F9  1D03               	skipz
  5505  04FA  2CFD               	goto	u5185
  5506  04FB  300A               	movlw	10
  5507  04FC  027B               	subwf	__MenuNav,w
  5508  04FD                     u5185:
  5509  04FD  1C03               	skipc
  5510  04FE  2D2D               	goto	L30
  5511  04FF  087C               	movf	__MenuNav+1,w
  5512  0500  3A80               	xorlw	128
  5513  0501  00FF               	movwf	127
  5514  0502  3080               	movlw	128
  5515  0503  027F               	subwf	127,w
  5516  0504  1D03               	skipz
  5517  0505  2D08               	goto	u5195
  5518  0506  3064               	movlw	100
  5519  0507  027B               	subwf	__MenuNav,w
  5520  0508                     u5195:
  5521  0508  1803               	skipnc
  5522  0509  2D2D               	goto	L30
  5523                           
  5524                           ;menu.c: 17: if(_MenuNav <= _tempTwoDigit)
  5525  050A  087C               	movf	__MenuNav+1,w
  5526  050B  3A80               	xorlw	128
  5527  050C  3C80               	sublw	128
  5528  050D  1D03               	skipz
  5529  050E  2D13               	goto	u5205
  5530  050F  087B               	movf	__MenuNav,w
  5531  0510  1683               	bsf	3,5	;RP0=1, select bank1
  5532  0511  1303               	bcf	3,6	;RP1=0, select bank1
  5533  0512  023A               	subwf	__tempTwoDigit^(0+128),w
  5534  0513                     u5205:
  5535  0513  120A  158A  1C03   	skipc
  5536  0516  283E               	goto	l4537
  5537                           
  5538                           ;menu.c: 18: _MenuNav = _tempTwoDigit + _MenuArr[_cellTwoDigit] - 1;
  5539  0517  1683               	bsf	3,5	;RP0=1, select bank1
  5540  0518  1303               	bcf	3,6	;RP1=0, select bank1
  5541  0519  083B               	movf	__cellTwoDigit^(0+128),w
  5542  051A  3EA8               	addlw	(low (__MenuArr| (0+256)))& (0+255)
  5543  051B  0084               	movwf	4
  5544  051C  083A               	movf	__tempTwoDigit^(0+128),w
  5545  051D  1783               	bsf	3,7	;select IRP bank3
  5546  051E  0700               	addwf	0,w
  5547  051F  1283               	bcf	3,5	;RP0=0, select bank0
  5548  0520  00CA               	movwf	??_fMenuStrip
  5549  0521  01CB               	clrf	??_fMenuStrip+1
  5550  0522  0DCB               	rlf	??_fMenuStrip+1,f
  5551  0523  084A               	movf	??_fMenuStrip,w
  5552  0524  3EFF               	addlw	255
  5553  0525  00FB               	movwf	__MenuNav
  5554  0526  084B               	movf	??_fMenuStrip+1,w
  5555  0527  120A  158A  28C4   	goto	L22
  5556  052A                     L28:
  5557  052A                     L27:
  5558  052A  120A  158A  28D4   	ljmp	l4577
  5559  052D                     L30:
  5560  052D                     L29:
  5561  052D  120A  158A  2844   	ljmp	l4539
  5562                           
  5563                           	psect	text16
  5564  1D72                     __ptext16:	
  5565 ;; *************** function _strcat *****************
  5566 ;; Defined at:
  5567 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\strcat.c"
  5568 ;; Parameters:    Size  Location     Type
  5569 ;;  to              1    wreg     PTR unsigned char 
  5570 ;;		 -> str2(16), 
  5571 ;;  from            2    0[BANK0 ] PTR const unsigned char 
  5572 ;;		 -> ROM(8192), 
  5573 ;; Auto vars:     Size  Location     Type
  5574 ;;  to              1    4[BANK0 ] PTR unsigned char 
  5575 ;;		 -> str2(16), 
  5576 ;;  cp              1    3[BANK0 ] PTR unsigned char 
  5577 ;;		 -> str2(16), 
  5578 ;; Return value:  Size  Location     Type
  5579 ;;                  1    wreg      PTR unsigned char 
  5580 ;; Registers used:
  5581 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath
  5582 ;; Tracked objects:
  5583 ;;		On entry : B00/800
  5584 ;;		On exit  : B00/800
  5585 ;;		Unchanged: 0/0
  5586 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5587 ;;      Params:         0       2       0       0       0
  5588 ;;      Locals:         0       2       0       0       0
  5589 ;;      Temps:          0       1       0       0       0
  5590 ;;      Totals:         0       5       0       0       0
  5591 ;;Total ram usage:        5 bytes
  5592 ;; Hardware stack levels used: 1
  5593 ;; Hardware stack levels required when called: 2
  5594 ;; This function calls:
  5595 ;;		Nothing
  5596 ;; This function is called by:
  5597 ;;		_fMenuStrip
  5598 ;; This function uses a non-reentrant model
  5599 ;;
  5600                           
  5601                           
  5602                           ;psect for function _strcat
  5603  1D72                     _strcat:
  5604                           
  5605                           ;incstack = 0
  5606                           ; Regs used in _strcat: [wreg-fsr0h+status,2+status,0+btemp+1+pclath]
  5607                           ;strcat@to stored from wreg
  5608  1D72  00A4               	movwf	strcat@to
  5609  1D73  0824               	movf	strcat@to,w
  5610  1D74  00A2               	movwf	??_strcat
  5611  1D75  0822               	movf	??_strcat,w
  5612  1D76  00A3               	movwf	strcat@cp
  5613  1D77                     l4005:
  5614  1D77  0823               	movf	strcat@cp,w
  5615  1D78  0084               	movwf	4
  5616  1D79  0800               	movf	0,w
  5617  1D7A  1903               	btfsc	3,2
  5618  1D7B  2D8B               	goto	l4011
  5619  1D7C  3001               	movlw	1
  5620  1D7D  00A2               	movwf	??_strcat
  5621  1D7E  0822               	movf	??_strcat,w
  5622  1D7F  07A3               	addwf	strcat@cp,f
  5623  1D80  2D77               	goto	l4005
  5624  1D81                     l4007:
  5625  1D81  3001               	movlw	1
  5626  1D82  00A2               	movwf	??_strcat
  5627  1D83  0822               	movf	??_strcat,w
  5628  1D84  07A3               	addwf	strcat@cp,f
  5629  1D85  3001               	movlw	1
  5630  1D86  07A0               	addwf	strcat@from,f
  5631  1D87  1803               	skipnc
  5632  1D88  0AA1               	incf	strcat@from+1,f
  5633  1D89  3000               	movlw	0
  5634  1D8A  07A1               	addwf	strcat@from+1,f
  5635  1D8B                     l4011:
  5636  1D8B  0821               	movf	strcat@from+1,w
  5637  1D8C  00FF               	movwf	127
  5638  1D8D  0820               	movf	strcat@from,w
  5639  1D8E  0084               	movwf	4
  5640  1D8F  160A  118A  2000  160A  158A  	fcall	stringtab
  5641  1D94  00A2               	movwf	??_strcat
  5642  1D95  0823               	movf	strcat@cp,w
  5643  1D96  0084               	movwf	4
  5644  1D97  0822               	movf	??_strcat,w
  5645  1D98  1783               	bsf	3,7	;select IRP bank2
  5646  1D99  0080               	movwf	0
  5647  1D9A  0800               	movf	0,w
  5648  1D9B  1903               	btfsc	3,2
  5649  1D9C  0008               	return
  5650  1D9D  2D81               	goto	l4007
  5651  1D9E                     __end_of_strcat:
  5652                           
  5653                           	psect	text17
  5654  0042                     __ptext17:	
  5655 ;; *************** function _sprintf *****************
  5656 ;; Defined at:
  5657 ;;		line 505 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c"
  5658 ;; Parameters:    Size  Location     Type
  5659 ;;  sp              1    wreg     PTR unsigned char 
  5660 ;;		 -> str2(16), str(16), 
  5661 ;;  f               2   14[BANK0 ] PTR const unsigned char 
  5662 ;;		 -> STR_65(13), STR_62(14), STR_60(5), STR_58(5), 
  5663 ;;		 -> STR_56(5), STR_54(5), STR_52(3), STR_50(5), 
  5664 ;;		 -> STR_48(5), STR_46(13), STR_44(5), STR_42(13), 
  5665 ;;		 -> STR_40(5), STR_37(15), STR_35(5), STR_33(5), 
  5666 ;;		 -> STR_31(3), STR_29(3), STR_27(5), STR_26(9), 
  5667 ;;		 -> STR_24(5), STR_23(9), STR_21(5), STR_19(3), 
  5668 ;;		 -> STR_17(3), STR_15(5), STR_14(9), STR_12(5), 
  5669 ;;		 -> STR_10(3), STR_8(3), STR_6(5), STR_4(5), 
  5670 ;; Auto vars:     Size  Location     Type
  5671 ;;  sp              1   41[BANK0 ] PTR unsigned char 
  5672 ;;		 -> str2(16), str(16), 
  5673 ;;  tmpval          4    0        struct .
  5674 ;;  width           2   38[BANK0 ] int 
  5675 ;;  val             2   36[BANK0 ] unsigned int 
  5676 ;;  len             2   34[BANK0 ] unsigned int 
  5677 ;;  cp              2   30[BANK0 ] PTR const unsigned char 
  5678 ;;		 -> STR_68(7), ?_sprintf(2), STR_67(6), STR_66(4), 
  5679 ;;		 -> STR_64(6), STR_63(5), STR_61(3), STR_59(17), 
  5680 ;;		 -> STR_57(3), STR_55(17), STR_53(3), STR_51(16), 
  5681 ;;		 -> STR_49(7), STR_47(10), STR_45(12), STR_43(9), 
  5682 ;;		 -> STR_41(11), STR_39(5), STR_38(5), STR_36(13), 
  5683 ;;		 -> STR_34(10), STR_32(4), STR_30(3), STR_28(16), 
  5684 ;;		 -> STR_25(16), STR_22(15), STR_20(4), STR_18(3), 
  5685 ;;		 -> STR_16(15), STR_13(14), STR_11(11), STR_9(8), 
  5686 ;;		 -> STR_7(13), STR_5(10), STR_3(5), STR_2(4), 
  5687 ;;  c               1   40[BANK0 ] unsigned char 
  5688 ;;  ap              1   33[BANK0 ] PTR void [1]
  5689 ;;		 -> ?_sprintf(2), 
  5690 ;;  flag            1   32[BANK0 ] unsigned char 
  5691 ;;  prec            1   29[BANK0 ] char 
  5692 ;; Return value:  Size  Location     Type
  5693 ;;                  2   14[BANK0 ] int 
  5694 ;; Registers used:
  5695 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  5696 ;; Tracked objects:
  5697 ;;		On entry : 300/0
  5698 ;;		On exit  : B00/800
  5699 ;;		Unchanged: 0/0
  5700 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5701 ;;      Params:         0      12       0       0       0
  5702 ;;      Locals:         0      13       0       0       0
  5703 ;;      Temps:          0       3       0       0       0
  5704 ;;      Totals:         0      28       0       0       0
  5705 ;;Total ram usage:       28 bytes
  5706 ;; Hardware stack levels used: 1
  5707 ;; Hardware stack levels required when called: 3
  5708 ;; This function calls:
  5709 ;;		___lwdiv
  5710 ;;		___lwmod
  5711 ;;		___wmul
  5712 ;;		_isdigit
  5713 ;; This function is called by:
  5714 ;;		_fMenuStrip
  5715 ;; This function uses a non-reentrant model
  5716 ;;
  5717                           
  5718                           
  5719                           ;psect for function _sprintf
  5720  0042                     _sprintf:
  5721                           
  5722                           ;incstack = 0
  5723                           ; Regs used in _sprintf: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  5724                           ;sprintf@sp stored from wreg
  5725  0042  00C9               	movwf	sprintf@sp
  5726                           
  5727                           ;doprnt.c: 507: va_list ap;;doprnt.c: 512: char c;;doprnt.c: 514: int width;;doprnt.c: 5
      +                          21: signed char prec;;doprnt.c: 525: unsigned char flag;;doprnt.c: 540: union {;doprnt.c
      +                          : 541: unsigned long vd;;doprnt.c: 542: double integ;;doprnt.c: 543: } tmpval;;doprnt.c:
      +                           545: unsigned int val;;doprnt.c: 546: unsigned len;;doprnt.c: 547: const char * cp;;dop
      +                          rnt.c: 550: *ap = __va_start();
  5728  0043  3030               	movlw	(low ((?_sprintf| 0+2)))& (0+255)
  5729  0044  00BA               	movwf	??_sprintf
  5730  0045  083A               	movf	??_sprintf,w
  5731  0046  00C1               	movwf	sprintf@ap
  5732  0047                     l3995:	
  5733                           ;doprnt.c: 553: while((c = *f++)) {
  5734                           
  5735  0047  082F               	movf	sprintf@f+1,w
  5736  0048  00BB               	movwf	??_sprintf+1
  5737  0049  082E               	movf	sprintf@f,w
  5738  004A  00BA               	movwf	??_sprintf
  5739  004B  0AAE               	incf	sprintf@f,f
  5740  004C  1903               	skipnz
  5741  004D  0AAF               	incf	sprintf@f+1,f
  5742  004E  083B               	movf	??_sprintf+1,w
  5743  004F  00FF               	movwf	127
  5744  0050  083A               	movf	??_sprintf,w
  5745  0051  0084               	movwf	4
  5746  0052  160A  118A  2000  120A  118A  	fcall	stringtab
  5747  0057  00BC               	movwf	??_sprintf+2
  5748  0058  083C               	movf	??_sprintf+2,w
  5749  0059  00C8               	movwf	sprintf@c
  5750  005A  0848               	movf	sprintf@c,w
  5751  005B  1903               	btfsc	3,2
  5752  005C  2A40               	goto	l3997
  5753                           
  5754                           ;doprnt.c: 555: if(c != '%')
  5755  005D  3025               	movlw	37
  5756  005E  0648               	xorwf	sprintf@c,w
  5757  005F  1903               	btfsc	3,2
  5758  0060  286D               	goto	l3883
  5759                           
  5760                           ;doprnt.c: 557: {;doprnt.c: 558: ((*sp++ = (c)));
  5761  0061  0848               	movf	sprintf@c,w
  5762  0062  00BA               	movwf	??_sprintf
  5763  0063  0849               	movf	sprintf@sp,w
  5764  0064  0084               	movwf	4
  5765  0065  083A               	movf	??_sprintf,w
  5766  0066  1783               	bsf	3,7	;select IRP bank2
  5767  0067  0080               	movwf	0
  5768  0068  3001               	movlw	1
  5769  0069  00BA               	movwf	??_sprintf
  5770  006A  083A               	movf	??_sprintf,w
  5771  006B  07C9               	addwf	sprintf@sp,f
  5772                           
  5773                           ;doprnt.c: 559: continue;
  5774  006C  2847               	goto	l3995
  5775  006D                     l3883:
  5776                           
  5777                           ;doprnt.c: 560: };doprnt.c: 563: width = 0;
  5778  006D  01C6               	clrf	sprintf@width
  5779  006E  01C7               	clrf	sprintf@width+1
  5780                           
  5781                           ;doprnt.c: 565: flag = 0;
  5782  006F  01C0               	clrf	sprintf@flag
  5783                           
  5784                           ;doprnt.c: 614: if(isdigit((unsigned)*f)) {
  5785  0070  082F               	movf	sprintf@f+1,w
  5786  0071  00FF               	movwf	127
  5787  0072  082E               	movf	sprintf@f,w
  5788  0073  0084               	movwf	4
  5789  0074  160A  118A  2000  120A  118A  	fcall	stringtab
  5790  0079  160A  158A  2449  120A  118A  	fcall	_isdigit
  5791  007E  1C03               	btfss	3,0
  5792  007F  293C               	goto	l3933
  5793                           
  5794                           ;doprnt.c: 615: width = 0;
  5795  0080  01C6               	clrf	sprintf@width
  5796  0081  01C7               	clrf	sprintf@width+1
  5797  0082                     l3889:
  5798                           
  5799                           ;doprnt.c: 617: width *= 10;
  5800  0082  300A               	movlw	10
  5801  0083  00A0               	movwf	___wmul@multiplier
  5802  0084  3000               	movlw	0
  5803  0085  00A1               	movwf	___wmul@multiplier+1
  5804  0086  0847               	movf	sprintf@width+1,w
  5805  0087  00A3               	movwf	___wmul@multiplicand+1
  5806  0088  0846               	movf	sprintf@width,w
  5807  0089  00A2               	movwf	___wmul@multiplicand
  5808  008A  160A  158A  2504  120A  118A  	fcall	___wmul
  5809  008F  0821               	movf	?___wmul+1,w
  5810  0090  00C7               	movwf	sprintf@width+1
  5811  0091  0820               	movf	?___wmul,w
  5812  0092  00C6               	movwf	sprintf@width
  5813                           
  5814                           ;doprnt.c: 618: width += *f++ - '0';
  5815  0093  082F               	movf	sprintf@f+1,w
  5816  0094  00FF               	movwf	127
  5817  0095  082E               	movf	sprintf@f,w
  5818  0096  0084               	movwf	4
  5819  0097  160A  118A  2000  120A  118A  	fcall	stringtab
  5820  009C  3ED0               	addlw	208
  5821  009D  00BA               	movwf	??_sprintf
  5822  009E  30FF               	movlw	255
  5823  009F  1803               	skipnc
  5824  00A0  3000               	movlw	0
  5825  00A1  00BB               	movwf	??_sprintf+1
  5826  00A2  083A               	movf	??_sprintf,w
  5827  00A3  07C6               	addwf	sprintf@width,f
  5828  00A4  1803               	skipnc
  5829  00A5  0AC7               	incf	sprintf@width+1,f
  5830  00A6  083B               	movf	??_sprintf+1,w
  5831  00A7  07C7               	addwf	sprintf@width+1,f
  5832  00A8  3001               	movlw	1
  5833  00A9  07AE               	addwf	sprintf@f,f
  5834  00AA  1803               	skipnc
  5835  00AB  0AAF               	incf	sprintf@f+1,f
  5836  00AC  3000               	movlw	0
  5837  00AD  07AF               	addwf	sprintf@f+1,f
  5838                           
  5839                           ;doprnt.c: 619: } while(isdigit((unsigned)*f));
  5840  00AE  082F               	movf	sprintf@f+1,w
  5841  00AF  00FF               	movwf	127
  5842  00B0  082E               	movf	sprintf@f,w
  5843  00B1  0084               	movwf	4
  5844  00B2  160A  118A  2000  120A  118A  	fcall	stringtab
  5845  00B7  160A  158A  2449  120A  118A  	fcall	_isdigit
  5846  00BC  1C03               	btfss	3,0
  5847  00BD  293C               	goto	l3933
  5848  00BE  2882               	goto	l3889
  5849  00BF                     l3897:
  5850                           
  5851                           ;doprnt.c: 760: cp = (*(const char * *)__va_arg((*(const char * **)ap), (const char *)0)
      +                          );
  5852  00BF  0841               	movf	sprintf@ap,w
  5853  00C0  0084               	movwf	4
  5854  00C1  1383               	bcf	3,7	;select IRP bank0
  5855  00C2  0800               	movf	0,w
  5856  00C3  00BE               	movwf	sprintf@cp
  5857  00C4  0A84               	incf	4,f
  5858  00C5  0800               	movf	0,w
  5859  00C6  0384               	decf	4,f
  5860  00C7  00BF               	movwf	sprintf@cp+1
  5861  00C8  3002               	movlw	2
  5862  00C9  00BA               	movwf	??_sprintf
  5863  00CA  083A               	movf	??_sprintf,w
  5864  00CB  07C1               	addwf	sprintf@ap,f
  5865                           
  5866                           ;doprnt.c: 766: if(!cp)
  5867  00CC  083E               	movf	sprintf@cp,w
  5868  00CD  043F               	iorwf	sprintf@cp+1,w
  5869  00CE  1D03               	btfss	3,2
  5870  00CF  28D4               	goto	l3905
  5871                           
  5872                           ;doprnt.c: 767: cp = "(null)";
  5873  00D0  30B6               	movlw	low (STR_68| (0+32768))
  5874  00D1  00BE               	movwf	sprintf@cp
  5875  00D2  3091               	movlw	high (STR_68| (0+32768))
  5876  00D3  00BF               	movwf	sprintf@cp+1
  5877  00D4                     l3905:
  5878                           
  5879                           ;doprnt.c: 771: len = 0;
  5880  00D4  01C2               	clrf	sprintf@len
  5881  00D5  01C3               	clrf	sprintf@len+1
  5882  00D6                     l3909:	
  5883                           ;doprnt.c: 772: while(cp[len])
  5884                           
  5885  00D6  0842               	movf	sprintf@len,w
  5886  00D7  073E               	addwf	sprintf@cp,w
  5887  00D8  0084               	movwf	4
  5888  00D9  083F               	movf	sprintf@cp+1,w
  5889  00DA  1803               	skipnc
  5890  00DB  0A3F               	incf	sprintf@cp+1,w
  5891  00DC  00FF               	movwf	127
  5892  00DD  160A  118A  2000  120A  118A  	fcall	stringtab
  5893  00E2  3A00               	xorlw	0
  5894  00E3  1903               	btfsc	3,2
  5895  00E4  28EC               	goto	l3911
  5896                           
  5897                           ;doprnt.c: 773: len++;
  5898  00E5  3001               	movlw	1
  5899  00E6  07C2               	addwf	sprintf@len,f
  5900  00E7  1803               	skipnc
  5901  00E8  0AC3               	incf	sprintf@len+1,f
  5902  00E9  3000               	movlw	0
  5903  00EA  07C3               	addwf	sprintf@len+1,f
  5904  00EB  28D6               	goto	l3909
  5905  00EC                     l3911:
  5906                           
  5907                           ;doprnt.c: 783: if(((unsigned)width) > len)
  5908  00EC  0847               	movf	sprintf@width+1,w
  5909  00ED  0243               	subwf	sprintf@len+1,w
  5910  00EE  1D03               	skipz
  5911  00EF  28F2               	goto	u4335
  5912  00F0  0846               	movf	sprintf@width,w
  5913  00F1  0242               	subwf	sprintf@len,w
  5914  00F2                     u4335:
  5915  00F2  1803               	skipnc
  5916  00F3  28FB               	goto	l3915
  5917                           
  5918                           ;doprnt.c: 784: width -= len;
  5919  00F4  0842               	movf	sprintf@len,w
  5920  00F5  02C6               	subwf	sprintf@width,f
  5921  00F6  0843               	movf	sprintf@len+1,w
  5922  00F7  1C03               	skipc
  5923  00F8  03C7               	decf	sprintf@width+1,f
  5924  00F9  02C7               	subwf	sprintf@width+1,f
  5925  00FA  28FD               	goto	l3921
  5926  00FB                     l3915:
  5927                           
  5928                           ;doprnt.c: 785: else;doprnt.c: 786: width = 0;
  5929  00FB  01C6               	clrf	sprintf@width
  5930  00FC  01C7               	clrf	sprintf@width+1
  5931  00FD                     l3921:
  5932  00FD  30FF               	movlw	255
  5933  00FE  07C6               	addwf	sprintf@width,f
  5934  00FF  1803               	skipnc
  5935  0100  0AC7               	incf	sprintf@width+1,f
  5936  0101  30FF               	movlw	255
  5937  0102  07C7               	addwf	sprintf@width+1,f
  5938  0103  0A46               	incf	sprintf@width,w
  5939  0104  1903               	btfsc	3,2
  5940  0105  0A47               	incf	sprintf@width+1,w
  5941  0106  1903               	btfsc	3,2
  5942  0107  292D               	goto	l3929
  5943                           
  5944                           ;doprnt.c: 791: ((*sp++ = (' ')));
  5945  0108  3020               	movlw	32
  5946  0109  00BA               	movwf	??_sprintf
  5947  010A  0849               	movf	sprintf@sp,w
  5948  010B  0084               	movwf	4
  5949  010C  083A               	movf	??_sprintf,w
  5950  010D  1783               	bsf	3,7	;select IRP bank2
  5951  010E  0080               	movwf	0
  5952  010F  3001               	movlw	1
  5953  0110  00BA               	movwf	??_sprintf
  5954  0111  083A               	movf	??_sprintf,w
  5955  0112  07C9               	addwf	sprintf@sp,f
  5956  0113  28FD               	goto	l3921
  5957  0114                     l3923:
  5958                           
  5959                           ;doprnt.c: 794: ((*sp++ = (*cp++)));
  5960  0114  083F               	movf	sprintf@cp+1,w
  5961  0115  00FF               	movwf	127
  5962  0116  083E               	movf	sprintf@cp,w
  5963  0117  0084               	movwf	4
  5964  0118  160A  118A  2000  120A  118A  	fcall	stringtab
  5965  011D  00BA               	movwf	??_sprintf
  5966  011E  0849               	movf	sprintf@sp,w
  5967  011F  0084               	movwf	4
  5968  0120  083A               	movf	??_sprintf,w
  5969  0121  1783               	bsf	3,7	;select IRP bank2
  5970  0122  0080               	movwf	0
  5971  0123  3001               	movlw	1
  5972  0124  07BE               	addwf	sprintf@cp,f
  5973  0125  1803               	skipnc
  5974  0126  0ABF               	incf	sprintf@cp+1,f
  5975  0127  3000               	movlw	0
  5976  0128  07BF               	addwf	sprintf@cp+1,f
  5977  0129  3001               	movlw	1
  5978  012A  00BA               	movwf	??_sprintf
  5979  012B  083A               	movf	??_sprintf,w
  5980  012C  07C9               	addwf	sprintf@sp,f
  5981  012D                     l3929:
  5982  012D  3001               	movlw	1
  5983  012E  02C2               	subwf	sprintf@len,f
  5984  012F  3000               	movlw	0
  5985  0130  1C03               	skipc
  5986  0131  03C3               	decf	sprintf@len+1,f
  5987  0132  02C3               	subwf	sprintf@len+1,f
  5988  0133  0A42               	incf	sprintf@len,w
  5989  0134  1D03               	skipz
  5990  0135  2914               	goto	l3923
  5991  0136  0A43               	incf	sprintf@len+1,w
  5992  0137  1903               	btfsc	3,2
  5993  0138  2847               	goto	l3995
  5994  0139  2914               	goto	l3923
  5995  013A                     l792:	
  5996                           ;doprnt.c: 843: case 'u':
  5997                           
  5998                           
  5999                           ;doprnt.c: 844: flag |= 0x40;
  6000  013A  1740               	bsf	sprintf@flag,6
  6001                           
  6002                           ;doprnt.c: 845: break;
  6003  013B  295D               	goto	l777
  6004  013C                     l3933:
  6005  013C  082F               	movf	sprintf@f+1,w
  6006  013D  00BB               	movwf	??_sprintf+1
  6007  013E  082E               	movf	sprintf@f,w
  6008  013F  00BA               	movwf	??_sprintf
  6009  0140  0AAE               	incf	sprintf@f,f
  6010  0141  1903               	skipnz
  6011  0142  0AAF               	incf	sprintf@f+1,f
  6012  0143  083B               	movf	??_sprintf+1,w
  6013  0144  00FF               	movwf	127
  6014  0145  083A               	movf	??_sprintf,w
  6015  0146  0084               	movwf	4
  6016  0147  160A  118A  2000  120A  118A  	fcall	stringtab
  6017  014C  00C8               	movwf	sprintf@c
  6018                           
  6019                           ; Switch size 1, requested type "simple"
  6020                           ; Number of cases is 5, Range of values is 0 to 117
  6021                           ; switch strategies available:
  6022                           ; Name         Instructions Cycles
  6023                           ; simple_byte           16     9 (average)
  6024                           ; jumptable            260     6 (fixed)
  6025                           ;	Chosen strategy is simple_byte
  6026  014D  3A00               	xorlw	0	; case 0
  6027  014E  1903               	skipnz
  6028  014F  2A40               	goto	l3997
  6029  0150  3A64               	xorlw	100	; case 100
  6030  0151  1903               	skipnz
  6031  0152  295D               	goto	l777
  6032  0153  3A0D               	xorlw	13	; case 105
  6033  0154  1903               	skipnz
  6034  0155  295D               	goto	l777
  6035  0156  3A1A               	xorlw	26	; case 115
  6036  0157  1903               	skipnz
  6037  0158  28BF               	goto	l3897
  6038  0159  3A06               	xorlw	6	; case 117
  6039  015A  1903               	skipnz
  6040  015B  293A               	goto	l792
  6041  015C  2847               	goto	l3995
  6042  015D                     l777:
  6043                           
  6044                           ;doprnt.c: 1277: if((flag & 0x40) == 0x00)
  6045  015D  1B40               	btfsc	sprintf@flag,6
  6046  015E  2977               	goto	l3945
  6047                           
  6048                           ;doprnt.c: 1279: {;doprnt.c: 1285: val = (unsigned int)(*(int *)__va_arg((*(int **)ap), 
      +                          (int)0));
  6049  015F  0841               	movf	sprintf@ap,w
  6050  0160  0084               	movwf	4
  6051  0161  1383               	bcf	3,7	;select IRP bank0
  6052  0162  0800               	movf	0,w
  6053  0163  00C4               	movwf	sprintf@val
  6054  0164  0A84               	incf	4,f
  6055  0165  0800               	movf	0,w
  6056  0166  00C5               	movwf	sprintf@val+1
  6057  0167  3002               	movlw	2
  6058  0168  00BA               	movwf	??_sprintf
  6059  0169  083A               	movf	??_sprintf,w
  6060  016A  07C1               	addwf	sprintf@ap,f
  6061                           
  6062                           ;doprnt.c: 1287: if((int)val < 0) {
  6063  016B  1FC5               	btfss	sprintf@val+1,7
  6064  016C  2983               	goto	l3949
  6065                           
  6066                           ;doprnt.c: 1288: flag |= 0x03;
  6067  016D  3003               	movlw	3
  6068  016E  00BA               	movwf	??_sprintf
  6069  016F  083A               	movf	??_sprintf,w
  6070  0170  04C0               	iorwf	sprintf@flag,f
  6071                           
  6072                           ;doprnt.c: 1289: val = -val;
  6073  0171  09C4               	comf	sprintf@val,f
  6074  0172  09C5               	comf	sprintf@val+1,f
  6075  0173  0AC4               	incf	sprintf@val,f
  6076  0174  1903               	skipnz
  6077  0175  0AC5               	incf	sprintf@val+1,f
  6078  0176  2983               	goto	l3949
  6079  0177                     l3945:
  6080                           
  6081                           ;doprnt.c: 1294: else;doprnt.c: 1299: {;doprnt.c: 1312: val = (*(unsigned *)__va_arg((*(
      +                          unsigned **)ap), (unsigned)0));
  6082  0177  0841               	movf	sprintf@ap,w
  6083  0178  0084               	movwf	4
  6084  0179  1383               	bcf	3,7	;select IRP bank0
  6085  017A  0800               	movf	0,w
  6086  017B  00C4               	movwf	sprintf@val
  6087  017C  0A84               	incf	4,f
  6088  017D  0800               	movf	0,w
  6089  017E  00C5               	movwf	sprintf@val+1
  6090  017F  3002               	movlw	2
  6091  0180  00BA               	movwf	??_sprintf
  6092  0181  083A               	movf	??_sprintf,w
  6093  0182  07C1               	addwf	sprintf@ap,f
  6094  0183                     l3949:
  6095                           
  6096                           ;doprnt.c: 1313: };doprnt.c: 1331: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c
      +                          ++)
  6097  0183  01C8               	clrf	sprintf@c
  6098  0184  0AC8               	incf	sprintf@c,f
  6099  0185                     l3955:
  6100                           
  6101                           ;doprnt.c: 1332: if(val < dpowers[c])
  6102  0185  0848               	movf	sprintf@c,w
  6103  0186  00BA               	movwf	??_sprintf
  6104  0187  073A               	addwf	??_sprintf,w
  6105  0188  3E52               	addlw	low (_dpowers| (0+32768))
  6106  0189  0084               	movwf	4
  6107  018A  3090               	movlw	high (_dpowers| (0+32768))
  6108  018B  1803               	skipnc
  6109  018C  3E01               	addlw	1
  6110  018D  00FF               	movwf	127
  6111  018E  160A  118A  2000  120A  118A  	fcall	stringtab
  6112  0193  00BB               	movwf	??_sprintf+1
  6113  0194  160A  118A  2000  120A  118A  	fcall	stringtab
  6114  0199  00BC               	movwf	??_sprintf+2
  6115  019A  083C               	movf	??_sprintf+2,w
  6116  019B  0245               	subwf	sprintf@val+1,w
  6117  019C  1D03               	skipz
  6118  019D  29A0               	goto	u4385
  6119  019E  083B               	movf	??_sprintf+1,w
  6120  019F  0244               	subwf	sprintf@val,w
  6121  01A0                     u4385:
  6122  01A0  1C03               	btfss	3,0
  6123  01A1  29AA               	goto	l3961
  6124  01A2  3001               	movlw	1
  6125  01A3  00BA               	movwf	??_sprintf
  6126  01A4  083A               	movf	??_sprintf,w
  6127  01A5  07C8               	addwf	sprintf@c,f
  6128  01A6  3005               	movlw	5
  6129  01A7  0648               	xorwf	sprintf@c,w
  6130  01A8  1D03               	btfss	3,2
  6131  01A9  2985               	goto	l3955
  6132  01AA                     l3961:
  6133                           
  6134                           ;doprnt.c: 1371: if(width && flag & 0x03)
  6135  01AA  0846               	movf	sprintf@width,w
  6136  01AB  0447               	iorwf	sprintf@width+1,w
  6137  01AC  1903               	btfsc	3,2
  6138  01AD  29B8               	goto	l799
  6139  01AE  0840               	movf	sprintf@flag,w
  6140  01AF  3903               	andlw	3
  6141  01B0  1903               	btfsc	3,2
  6142  01B1  29B8               	goto	l799
  6143                           
  6144                           ;doprnt.c: 1372: width--;
  6145  01B2  30FF               	movlw	255
  6146  01B3  07C6               	addwf	sprintf@width,f
  6147  01B4  1803               	skipnc
  6148  01B5  0AC7               	incf	sprintf@width+1,f
  6149  01B6  30FF               	movlw	255
  6150  01B7  07C7               	addwf	sprintf@width+1,f
  6151  01B8                     l799:
  6152                           
  6153                           ;doprnt.c: 1407: if(width > c)
  6154  01B8  0847               	movf	sprintf@width+1,w
  6155  01B9  3A80               	xorlw	128
  6156  01BA  3C80               	sublw	128
  6157  01BB  1D03               	skipz
  6158  01BC  29BF               	goto	u4425
  6159  01BD  0846               	movf	sprintf@width,w
  6160  01BE  0248               	subwf	sprintf@c,w
  6161  01BF                     u4425:
  6162  01BF  1803               	skipnc
  6163  01C0  29CD               	goto	l3969
  6164                           
  6165                           ;doprnt.c: 1408: width -= c;
  6166  01C1  1283               	bcf	3,5	;RP0=0, select bank0
  6167  01C2  1303               	bcf	3,6	;RP1=0, select bank0
  6168  01C3  0848               	movf	sprintf@c,w
  6169  01C4  00BA               	movwf	??_sprintf
  6170  01C5  01BB               	clrf	??_sprintf+1
  6171  01C6  083A               	movf	??_sprintf,w
  6172  01C7  02C6               	subwf	sprintf@width,f
  6173  01C8  083B               	movf	??_sprintf+1,w
  6174  01C9  1C03               	skipc
  6175  01CA  03C7               	decf	sprintf@width+1,f
  6176  01CB  02C7               	subwf	sprintf@width+1,f
  6177  01CC  29D1               	goto	l3971
  6178  01CD                     l3969:
  6179                           
  6180                           ;doprnt.c: 1409: else;doprnt.c: 1410: width = 0;
  6181  01CD  1283               	bcf	3,5	;RP0=0, select bank0
  6182  01CE  1303               	bcf	3,6	;RP1=0, select bank0
  6183  01CF  01C6               	clrf	sprintf@width
  6184  01D0  01C7               	clrf	sprintf@width+1
  6185  01D1                     l3971:
  6186                           
  6187                           ;doprnt.c: 1448: {;doprnt.c: 1450: if(width;doprnt.c: 1454: )
  6188  01D1  0846               	movf	sprintf@width,w
  6189  01D2  0447               	iorwf	sprintf@width+1,w
  6190  01D3  1903               	btfsc	3,2
  6191  01D4  29EA               	goto	l3979
  6192  01D5                     l3973:
  6193                           
  6194                           ;doprnt.c: 1456: ((*sp++ = (' ')));
  6195  01D5  3020               	movlw	32
  6196  01D6  00BA               	movwf	??_sprintf
  6197  01D7  0849               	movf	sprintf@sp,w
  6198  01D8  0084               	movwf	4
  6199  01D9  083A               	movf	??_sprintf,w
  6200  01DA  1783               	bsf	3,7	;select IRP bank2
  6201  01DB  0080               	movwf	0
  6202  01DC  3001               	movlw	1
  6203  01DD  00BA               	movwf	??_sprintf
  6204  01DE  083A               	movf	??_sprintf,w
  6205  01DF  07C9               	addwf	sprintf@sp,f
  6206                           
  6207                           ;doprnt.c: 1457: while(--width);
  6208  01E0  30FF               	movlw	255
  6209  01E1  07C6               	addwf	sprintf@width,f
  6210  01E2  1803               	skipnc
  6211  01E3  0AC7               	incf	sprintf@width+1,f
  6212  01E4  30FF               	movlw	255
  6213  01E5  07C7               	addwf	sprintf@width+1,f
  6214  01E6  0846               	movf	sprintf@width,w
  6215  01E7  0447               	iorwf	sprintf@width+1,w
  6216  01E8  1D03               	btfss	3,2
  6217  01E9  29D5               	goto	l3973
  6218  01EA                     l3979:
  6219                           
  6220                           ;doprnt.c: 1464: if(flag & 0x03)
  6221  01EA  0840               	movf	sprintf@flag,w
  6222  01EB  3903               	andlw	3
  6223  01EC  1903               	btfsc	3,2
  6224  01ED  29F9               	goto	l3985
  6225                           
  6226                           ;doprnt.c: 1465: ((*sp++ = ('-')));
  6227  01EE  302D               	movlw	45
  6228  01EF  00BA               	movwf	??_sprintf
  6229  01F0  0849               	movf	sprintf@sp,w
  6230  01F1  0084               	movwf	4
  6231  01F2  083A               	movf	??_sprintf,w
  6232  01F3  1783               	bsf	3,7	;select IRP bank2
  6233  01F4  0080               	movwf	0
  6234  01F5  3001               	movlw	1
  6235  01F6  00BA               	movwf	??_sprintf
  6236  01F7  083A               	movf	??_sprintf,w
  6237  01F8  07C9               	addwf	sprintf@sp,f
  6238  01F9                     l3985:
  6239                           
  6240                           ;doprnt.c: 1495: };doprnt.c: 1498: prec = c;
  6241  01F9  0848               	movf	sprintf@c,w
  6242  01FA  00BA               	movwf	??_sprintf
  6243  01FB  083A               	movf	??_sprintf,w
  6244  01FC  00BD               	movwf	sprintf@prec
  6245  01FD                     l3993:	
  6246                           ;doprnt.c: 1500: while(prec--) {
  6247                           
  6248  01FD  30FF               	movlw	255
  6249  01FE  00BA               	movwf	??_sprintf
  6250  01FF  083A               	movf	??_sprintf,w
  6251  0200  07BD               	addwf	sprintf@prec,f
  6252  0201  0A3D               	incf	sprintf@prec,w
  6253  0202  1903               	btfsc	3,2
  6254  0203  2847               	goto	l3995
  6255                           
  6256                           ;doprnt.c: 1504: {;doprnt.c: 1515: c = (val / dpowers[(unsigned char)prec]) % 10 + '0';
  6257  0204  300A               	movlw	10
  6258  0205  00A8               	movwf	___lwmod@divisor
  6259  0206  3000               	movlw	0
  6260  0207  00A9               	movwf	___lwmod@divisor+1
  6261  0208  083D               	movf	sprintf@prec,w
  6262  0209  00BA               	movwf	??_sprintf
  6263  020A  073A               	addwf	??_sprintf,w
  6264  020B  3E52               	addlw	low (_dpowers| (0+32768))
  6265  020C  0084               	movwf	4
  6266  020D  3090               	movlw	high (_dpowers| (0+32768))
  6267  020E  1803               	skipnc
  6268  020F  3E01               	addlw	1
  6269  0210  00FF               	movwf	127
  6270  0211  160A  118A  2000  120A  118A  	fcall	stringtab
  6271  0216  00A0               	movwf	___lwdiv@divisor
  6272  0217  160A  118A  2000  120A  118A  	fcall	stringtab
  6273  021C  00A1               	movwf	___lwdiv@divisor+1
  6274  021D  0845               	movf	sprintf@val+1,w
  6275  021E  00A3               	movwf	___lwdiv@dividend+1
  6276  021F  0844               	movf	sprintf@val,w
  6277  0220  00A2               	movwf	___lwdiv@dividend
  6278  0221  120A  158A  2002  120A  118A  	fcall	___lwdiv
  6279  0226  0821               	movf	?___lwdiv+1,w
  6280  0227  00AB               	movwf	___lwmod@dividend+1
  6281  0228  0820               	movf	?___lwdiv,w
  6282  0229  00AA               	movwf	___lwmod@dividend
  6283  022A  160A  158A  262A  120A  118A  	fcall	___lwmod
  6284  022F  0828               	movf	?___lwmod,w
  6285  0230  3E30               	addlw	48
  6286  0231  00BB               	movwf	??_sprintf+1
  6287  0232  083B               	movf	??_sprintf+1,w
  6288  0233  00C8               	movwf	sprintf@c
  6289                           
  6290                           ;doprnt.c: 1549: };doprnt.c: 1550: ((*sp++ = (c)));
  6291  0234  0848               	movf	sprintf@c,w
  6292  0235  00BA               	movwf	??_sprintf
  6293  0236  0849               	movf	sprintf@sp,w
  6294  0237  0084               	movwf	4
  6295  0238  083A               	movf	??_sprintf,w
  6296  0239  1783               	bsf	3,7	;select IRP bank2
  6297  023A  0080               	movwf	0
  6298  023B  3001               	movlw	1
  6299  023C  00BA               	movwf	??_sprintf
  6300  023D  083A               	movf	??_sprintf,w
  6301  023E  07C9               	addwf	sprintf@sp,f
  6302  023F  29FD               	goto	l3993
  6303  0240                     l3997:
  6304                           
  6305                           ;doprnt.c: 1564: *sp = 0;
  6306  0240  0849               	movf	sprintf@sp,w
  6307  0241  0084               	movwf	4
  6308  0242  1783               	bsf	3,7	;select IRP bank2
  6309  0243  0180               	clrf	0
  6310  0244  0008               	return
  6311  0245                     __end_of_sprintf:
  6312                           
  6313                           	psect	text18
  6314  1C49                     __ptext18:	
  6315 ;; *************** function _isdigit *****************
  6316 ;; Defined at:
  6317 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\isdigit.c"
  6318 ;; Parameters:    Size  Location     Type
  6319 ;;  c               1    wreg     unsigned char 
  6320 ;; Auto vars:     Size  Location     Type
  6321 ;;  c               1    1[BANK0 ] unsigned char 
  6322 ;; Return value:  Size  Location     Type
  6323 ;;		None               void
  6324 ;; Registers used:
  6325 ;;		wreg, status,2, status,0
  6326 ;; Tracked objects:
  6327 ;;		On entry : 300/0
  6328 ;;		On exit  : 300/0
  6329 ;;		Unchanged: 0/0
  6330 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6331 ;;      Params:         0       0       0       0       0
  6332 ;;      Locals:         0       2       0       0       0
  6333 ;;      Temps:          0       0       0       0       0
  6334 ;;      Totals:         0       2       0       0       0
  6335 ;;Total ram usage:        2 bytes
  6336 ;; Hardware stack levels used: 1
  6337 ;; Hardware stack levels required when called: 2
  6338 ;; This function calls:
  6339 ;;		Nothing
  6340 ;; This function is called by:
  6341 ;;		_sprintf
  6342 ;; This function uses a non-reentrant model
  6343 ;;
  6344                           
  6345                           
  6346                           ;psect for function _isdigit
  6347  1C49                     _isdigit:
  6348                           
  6349                           ;incstack = 0
  6350                           ; Regs used in _isdigit: [wreg+status,2+status,0]
  6351                           ;isdigit@c stored from wreg
  6352  1C49  00A1               	movwf	isdigit@c
  6353  1C4A  01A0               	clrf	_isdigit$1558
  6354  1C4B  303A               	movlw	58
  6355  1C4C  0221               	subwf	isdigit@c,w
  6356  1C4D  1803               	skipnc
  6357  1C4E  2C55               	goto	l3599
  6358  1C4F  3030               	movlw	48
  6359  1C50  0221               	subwf	isdigit@c,w
  6360  1C51  1C03               	skipc
  6361  1C52  2C55               	goto	l3599
  6362  1C53  01A0               	clrf	_isdigit$1558
  6363  1C54  0AA0               	incf	_isdigit$1558,f
  6364  1C55                     l3599:
  6365  1C55  0C20               	rrf	_isdigit$1558,w
  6366  1C56  0008               	return
  6367  1C57                     __end_of_isdigit:
  6368                           
  6369                           	psect	text19
  6370  1D04                     __ptext19:	
  6371 ;; *************** function ___wmul *****************
  6372 ;; Defined at:
  6373 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\Umul16.c"
  6374 ;; Parameters:    Size  Location     Type
  6375 ;;  multiplier      2    0[BANK0 ] unsigned int 
  6376 ;;  multiplicand    2    2[BANK0 ] unsigned int 
  6377 ;; Auto vars:     Size  Location     Type
  6378 ;;  product         2    4[BANK0 ] unsigned int 
  6379 ;; Return value:  Size  Location     Type
  6380 ;;                  2    0[BANK0 ] unsigned int 
  6381 ;; Registers used:
  6382 ;;		wreg, status,2, status,0
  6383 ;; Tracked objects:
  6384 ;;		On entry : 300/0
  6385 ;;		On exit  : 300/0
  6386 ;;		Unchanged: 0/0
  6387 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6388 ;;      Params:         0       4       0       0       0
  6389 ;;      Locals:         0       2       0       0       0
  6390 ;;      Temps:          0       0       0       0       0
  6391 ;;      Totals:         0       6       0       0       0
  6392 ;;Total ram usage:        6 bytes
  6393 ;; Hardware stack levels used: 1
  6394 ;; Hardware stack levels required when called: 2
  6395 ;; This function calls:
  6396 ;;		Nothing
  6397 ;; This function is called by:
  6398 ;;		_fMenuStrip
  6399 ;;		_sprintf
  6400 ;; This function uses a non-reentrant model
  6401 ;;
  6402                           
  6403                           
  6404                           ;psect for function ___wmul
  6405  1D04                     ___wmul:
  6406                           
  6407                           ;incstack = 0
  6408                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  6409  1D04  01A4               	clrf	___wmul@product
  6410  1D05  01A5               	clrf	___wmul@product+1
  6411  1D06                     l3605:
  6412  1D06  1C20               	btfss	___wmul@multiplier,0
  6413  1D07  2D0E               	goto	l814
  6414  1D08  0822               	movf	___wmul@multiplicand,w
  6415  1D09  07A4               	addwf	___wmul@product,f
  6416  1D0A  1803               	skipnc
  6417  1D0B  0AA5               	incf	___wmul@product+1,f
  6418  1D0C  0823               	movf	___wmul@multiplicand+1,w
  6419  1D0D  07A5               	addwf	___wmul@product+1,f
  6420  1D0E                     l814:
  6421  1D0E  3001               	movlw	1
  6422  1D0F                     u3835:
  6423  1D0F  1003               	clrc
  6424  1D10  0DA2               	rlf	___wmul@multiplicand,f
  6425  1D11  0DA3               	rlf	___wmul@multiplicand+1,f
  6426  1D12  3EFF               	addlw	-1
  6427  1D13  1D03               	skipz
  6428  1D14  2D0F               	goto	u3835
  6429  1D15  3001               	movlw	1
  6430  1D16                     u3845:
  6431  1D16  1003               	clrc
  6432  1D17  0CA1               	rrf	___wmul@multiplier+1,f
  6433  1D18  0CA0               	rrf	___wmul@multiplier,f
  6434  1D19  3EFF               	addlw	-1
  6435  1D1A  1D03               	skipz
  6436  1D1B  2D16               	goto	u3845
  6437  1D1C  0820               	movf	___wmul@multiplier,w
  6438  1D1D  0421               	iorwf	___wmul@multiplier+1,w
  6439  1D1E  1D03               	btfss	3,2
  6440  1D1F  2D06               	goto	l3605
  6441  1D20  0825               	movf	___wmul@product+1,w
  6442  1D21  00A1               	movwf	?___wmul+1
  6443  1D22  0824               	movf	___wmul@product,w
  6444  1D23  00A0               	movwf	?___wmul
  6445  1D24  0008               	return
  6446  1D25                     __end_of___wmul:
  6447                           
  6448                           	psect	text20
  6449  1E2A                     __ptext20:	
  6450 ;; *************** function ___lwmod *****************
  6451 ;; Defined at:
  6452 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\lwmod.c"
  6453 ;; Parameters:    Size  Location     Type
  6454 ;;  divisor         2    8[BANK0 ] unsigned int 
  6455 ;;  dividend        2   10[BANK0 ] unsigned int 
  6456 ;; Auto vars:     Size  Location     Type
  6457 ;;  counter         1   13[BANK0 ] unsigned char 
  6458 ;; Return value:  Size  Location     Type
  6459 ;;                  2    8[BANK0 ] unsigned int 
  6460 ;; Registers used:
  6461 ;;		wreg, status,2, status,0
  6462 ;; Tracked objects:
  6463 ;;		On entry : 300/0
  6464 ;;		On exit  : 300/0
  6465 ;;		Unchanged: 0/0
  6466 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6467 ;;      Params:         0       4       0       0       0
  6468 ;;      Locals:         0       1       0       0       0
  6469 ;;      Temps:          0       1       0       0       0
  6470 ;;      Totals:         0       6       0       0       0
  6471 ;;Total ram usage:        6 bytes
  6472 ;; Hardware stack levels used: 1
  6473 ;; Hardware stack levels required when called: 2
  6474 ;; This function calls:
  6475 ;;		Nothing
  6476 ;; This function is called by:
  6477 ;;		_sprintf
  6478 ;; This function uses a non-reentrant model
  6479 ;;
  6480                           
  6481                           
  6482                           ;psect for function ___lwmod
  6483  1E2A                     ___lwmod:
  6484                           
  6485                           ;incstack = 0
  6486                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  6487  1E2A  0828               	movf	___lwmod@divisor,w
  6488  1E2B  0429               	iorwf	___lwmod@divisor+1,w
  6489  1E2C  1903               	btfsc	3,2
  6490  1E2D  2E57               	goto	l3781
  6491  1E2E  01AD               	clrf	___lwmod@counter
  6492  1E2F  0AAD               	incf	___lwmod@counter,f
  6493  1E30                     l3771:
  6494  1E30  1BA9               	btfsc	___lwmod@divisor+1,7
  6495  1E31  2E3E               	goto	l3773
  6496  1E32  3001               	movlw	1
  6497  1E33                     u4145:
  6498  1E33  1003               	clrc
  6499  1E34  0DA8               	rlf	___lwmod@divisor,f
  6500  1E35  0DA9               	rlf	___lwmod@divisor+1,f
  6501  1E36  3EFF               	addlw	-1
  6502  1E37  1D03               	skipz
  6503  1E38  2E33               	goto	u4145
  6504  1E39  3001               	movlw	1
  6505  1E3A  00AC               	movwf	??___lwmod
  6506  1E3B  082C               	movf	??___lwmod,w
  6507  1E3C  07AD               	addwf	___lwmod@counter,f
  6508  1E3D  2E30               	goto	l3771
  6509  1E3E                     l3773:
  6510  1E3E  0829               	movf	___lwmod@divisor+1,w
  6511  1E3F  022B               	subwf	___lwmod@dividend+1,w
  6512  1E40  1D03               	skipz
  6513  1E41  2E44               	goto	u4165
  6514  1E42  0828               	movf	___lwmod@divisor,w
  6515  1E43  022A               	subwf	___lwmod@dividend,w
  6516  1E44                     u4165:
  6517  1E44  1C03               	skipc
  6518  1E45  2E4C               	goto	l3777
  6519  1E46  0828               	movf	___lwmod@divisor,w
  6520  1E47  02AA               	subwf	___lwmod@dividend,f
  6521  1E48  0829               	movf	___lwmod@divisor+1,w
  6522  1E49  1C03               	skipc
  6523  1E4A  03AB               	decf	___lwmod@dividend+1,f
  6524  1E4B  02AB               	subwf	___lwmod@dividend+1,f
  6525  1E4C                     l3777:
  6526  1E4C  3001               	movlw	1
  6527  1E4D                     u4175:
  6528  1E4D  1003               	clrc
  6529  1E4E  0CA9               	rrf	___lwmod@divisor+1,f
  6530  1E4F  0CA8               	rrf	___lwmod@divisor,f
  6531  1E50  3EFF               	addlw	-1
  6532  1E51  1D03               	skipz
  6533  1E52  2E4D               	goto	u4175
  6534  1E53  3001               	movlw	1
  6535  1E54  02AD               	subwf	___lwmod@counter,f
  6536  1E55  1D03               	btfss	3,2
  6537  1E56  2E3E               	goto	l3773
  6538  1E57                     l3781:
  6539  1E57  082B               	movf	___lwmod@dividend+1,w
  6540  1E58  00A9               	movwf	?___lwmod+1
  6541  1E59  082A               	movf	___lwmod@dividend,w
  6542  1E5A  00A8               	movwf	?___lwmod
  6543  1E5B  0008               	return
  6544  1E5C                     __end_of___lwmod:
  6545                           
  6546                           	psect	text21
  6547  0802                     __ptext21:	
  6548 ;; *************** function ___lwdiv *****************
  6549 ;; Defined at:
  6550 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\lwdiv.c"
  6551 ;; Parameters:    Size  Location     Type
  6552 ;;  divisor         2    0[BANK0 ] unsigned int 
  6553 ;;  dividend        2    2[BANK0 ] unsigned int 
  6554 ;; Auto vars:     Size  Location     Type
  6555 ;;  quotient        2    5[BANK0 ] unsigned int 
  6556 ;;  counter         1    7[BANK0 ] unsigned char 
  6557 ;; Return value:  Size  Location     Type
  6558 ;;                  2    0[BANK0 ] unsigned int 
  6559 ;; Registers used:
  6560 ;;		wreg, status,2, status,0
  6561 ;; Tracked objects:
  6562 ;;		On entry : 300/0
  6563 ;;		On exit  : 300/0
  6564 ;;		Unchanged: 0/0
  6565 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6566 ;;      Params:         0       4       0       0       0
  6567 ;;      Locals:         0       3       0       0       0
  6568 ;;      Temps:          0       1       0       0       0
  6569 ;;      Totals:         0       8       0       0       0
  6570 ;;Total ram usage:        8 bytes
  6571 ;; Hardware stack levels used: 1
  6572 ;; Hardware stack levels required when called: 2
  6573 ;; This function calls:
  6574 ;;		Nothing
  6575 ;; This function is called by:
  6576 ;;		_sprintf
  6577 ;; This function uses a non-reentrant model
  6578 ;;
  6579                           
  6580                           
  6581                           ;psect for function ___lwdiv
  6582  0802                     ___lwdiv:
  6583                           
  6584                           ;incstack = 0
  6585                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  6586  0802  01A5               	clrf	___lwdiv@quotient
  6587  0803  01A6               	clrf	___lwdiv@quotient+1
  6588  0804  0820               	movf	___lwdiv@divisor,w
  6589  0805  0421               	iorwf	___lwdiv@divisor+1,w
  6590  0806  1903               	btfsc	3,2
  6591  0807  2839               	goto	l3759
  6592  0808  01A7               	clrf	___lwdiv@counter
  6593  0809  0AA7               	incf	___lwdiv@counter,f
  6594  080A                     l3747:
  6595  080A  1BA1               	btfsc	___lwdiv@divisor+1,7
  6596  080B  2818               	goto	l3749
  6597  080C  3001               	movlw	1
  6598  080D                     u4075:
  6599  080D  1003               	clrc
  6600  080E  0DA0               	rlf	___lwdiv@divisor,f
  6601  080F  0DA1               	rlf	___lwdiv@divisor+1,f
  6602  0810  3EFF               	addlw	-1
  6603  0811  1D03               	skipz
  6604  0812  280D               	goto	u4075
  6605  0813  3001               	movlw	1
  6606  0814  00A4               	movwf	??___lwdiv
  6607  0815  0824               	movf	??___lwdiv,w
  6608  0816  07A7               	addwf	___lwdiv@counter,f
  6609  0817  280A               	goto	l3747
  6610  0818                     l3749:
  6611  0818  3001               	movlw	1
  6612  0819                     u4095:
  6613  0819  1003               	clrc
  6614  081A  0DA5               	rlf	___lwdiv@quotient,f
  6615  081B  0DA6               	rlf	___lwdiv@quotient+1,f
  6616  081C  3EFF               	addlw	-1
  6617  081D  1D03               	skipz
  6618  081E  2819               	goto	u4095
  6619  081F  0821               	movf	___lwdiv@divisor+1,w
  6620  0820  0223               	subwf	___lwdiv@dividend+1,w
  6621  0821  1D03               	skipz
  6622  0822  2825               	goto	u4105
  6623  0823  0820               	movf	___lwdiv@divisor,w
  6624  0824  0222               	subwf	___lwdiv@dividend,w
  6625  0825                     u4105:
  6626  0825  1C03               	skipc
  6627  0826  282E               	goto	l3755
  6628  0827  0820               	movf	___lwdiv@divisor,w
  6629  0828  02A2               	subwf	___lwdiv@dividend,f
  6630  0829  0821               	movf	___lwdiv@divisor+1,w
  6631  082A  1C03               	skipc
  6632  082B  03A3               	decf	___lwdiv@dividend+1,f
  6633  082C  02A3               	subwf	___lwdiv@dividend+1,f
  6634  082D  1425               	bsf	___lwdiv@quotient,0
  6635  082E                     l3755:
  6636  082E  3001               	movlw	1
  6637  082F                     u4115:
  6638  082F  1003               	clrc
  6639  0830  0CA1               	rrf	___lwdiv@divisor+1,f
  6640  0831  0CA0               	rrf	___lwdiv@divisor,f
  6641  0832  3EFF               	addlw	-1
  6642  0833  1D03               	skipz
  6643  0834  282F               	goto	u4115
  6644  0835  3001               	movlw	1
  6645  0836  02A7               	subwf	___lwdiv@counter,f
  6646  0837  1D03               	btfss	3,2
  6647  0838  2818               	goto	l3749
  6648  0839                     l3759:
  6649  0839  0826               	movf	___lwdiv@quotient+1,w
  6650  083A  00A1               	movwf	?___lwdiv+1
  6651  083B  0825               	movf	___lwdiv@quotient,w
  6652  083C  00A0               	movwf	?___lwdiv
  6653  083D  0008               	return
  6654  083E                     __end_of___lwdiv:
  6655                           
  6656                           	psect	text22
  6657  1C22                     __ptext22:	
  6658 ;; *************** function _fEraseString *****************
  6659 ;; Defined at:
  6660 ;;		line 149 in file "config.c"
  6661 ;; Parameters:    Size  Location     Type
  6662 ;;  string          1    wreg     PTR unsigned char 
  6663 ;;		 -> str2(16), 
  6664 ;; Auto vars:     Size  Location     Type
  6665 ;;  string          1    0[BANK0 ] PTR unsigned char 
  6666 ;;		 -> str2(16), 
  6667 ;; Return value:  Size  Location     Type
  6668 ;;                  1    wreg      void 
  6669 ;; Registers used:
  6670 ;;		wreg, fsr0l, fsr0h, status,2
  6671 ;; Tracked objects:
  6672 ;;		On entry : 300/800
  6673 ;;		On exit  : B00/800
  6674 ;;		Unchanged: 0/0
  6675 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6676 ;;      Params:         0       0       0       0       0
  6677 ;;      Locals:         0       1       0       0       0
  6678 ;;      Temps:          0       0       0       0       0
  6679 ;;      Totals:         0       1       0       0       0
  6680 ;;Total ram usage:        1 bytes
  6681 ;; Hardware stack levels used: 1
  6682 ;; Hardware stack levels required when called: 2
  6683 ;; This function calls:
  6684 ;;		Nothing
  6685 ;; This function is called by:
  6686 ;;		_fMenuStrip
  6687 ;; This function uses a non-reentrant model
  6688 ;;
  6689                           
  6690                           
  6691                           ;psect for function _fEraseString
  6692  1C22                     _fEraseString:
  6693                           
  6694                           ;incstack = 0
  6695                           ; Regs used in _fEraseString: [wreg-fsr0h+status,2]
  6696                           ;fEraseString@string stored from wreg
  6697  1C22  00A0               	movwf	fEraseString@string
  6698                           
  6699                           ;config.c: 150: string[0] = 0;
  6700  1C23  0820               	movf	fEraseString@string,w
  6701  1C24  0084               	movwf	4
  6702  1C25  1783               	bsf	3,7	;select IRP bank2
  6703  1C26  0180               	clrf	0
  6704  1C27  0008               	return
  6705  1C28                     __end_of_fEraseString:
  6706                           
  6707                           	psect	text23
  6708  1C79                     __ptext23:	
  6709 ;; *************** function ___bmul *****************
  6710 ;; Defined at:
  6711 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\Umul8.c"
  6712 ;; Parameters:    Size  Location     Type
  6713 ;;  multiplier      1    wreg     unsigned char 
  6714 ;;  multiplicand    1    9[BANK0 ] unsigned char 
  6715 ;; Auto vars:     Size  Location     Type
  6716 ;;  multiplier      1   12[BANK0 ] unsigned char 
  6717 ;;  product         1   11[BANK0 ] unsigned char 
  6718 ;; Return value:  Size  Location     Type
  6719 ;;                  1    wreg      unsigned char 
  6720 ;; Registers used:
  6721 ;;		wreg, status,2, status,0
  6722 ;; Tracked objects:
  6723 ;;		On entry : 200/0
  6724 ;;		On exit  : 300/0
  6725 ;;		Unchanged: 0/0
  6726 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6727 ;;      Params:         0       1       0       0       0
  6728 ;;      Locals:         0       2       0       0       0
  6729 ;;      Temps:          0       1       0       0       0
  6730 ;;      Totals:         0       4       0       0       0
  6731 ;;Total ram usage:        4 bytes
  6732 ;; Hardware stack levels used: 1
  6733 ;; Hardware stack levels required when called: 2
  6734 ;; This function calls:
  6735 ;;		Nothing
  6736 ;; This function is called by:
  6737 ;;		_fMenuStrip
  6738 ;;		_eval_poly
  6739 ;; This function uses a non-reentrant model
  6740 ;;
  6741                           
  6742                           
  6743                           ;psect for function ___bmul
  6744  1C79                     ___bmul:
  6745                           
  6746                           ;incstack = 0
  6747                           ; Regs used in ___bmul: [wreg+status,2+status,0]
  6748                           ;___bmul@multiplier stored from wreg
  6749  1C79  1283               	bcf	3,5	;RP0=0, select bank0
  6750  1C7A  00AC               	movwf	___bmul@multiplier
  6751  1C7B  01AB               	clrf	___bmul@product
  6752  1C7C                     l3437:
  6753  1C7C  1C2C               	btfss	___bmul@multiplier,0
  6754  1C7D  2C82               	goto	l3441
  6755  1C7E  0829               	movf	___bmul@multiplicand,w
  6756  1C7F  00AA               	movwf	??___bmul
  6757  1C80  082A               	movf	??___bmul,w
  6758  1C81  07AB               	addwf	___bmul@product,f
  6759  1C82                     l3441:
  6760  1C82  1003               	clrc
  6761  1C83  0DA9               	rlf	___bmul@multiplicand,f
  6762  1C84  1003               	clrc
  6763  1C85  0CAC               	rrf	___bmul@multiplier,f
  6764  1C86  082C               	movf	___bmul@multiplier,w
  6765  1C87  1D03               	btfss	3,2
  6766  1C88  2C7C               	goto	l3437
  6767  1C89  082B               	movf	___bmul@product,w
  6768  1C8A  0008               	return
  6769  1C8B                     __end_of___bmul:
  6770                           
  6771                           	psect	text24
  6772  1F17                     __ptext24:	
  6773 ;; *************** function ___awmod *****************
  6774 ;; Defined at:
  6775 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\awmod.c"
  6776 ;; Parameters:    Size  Location     Type
  6777 ;;  divisor         2    9[BANK0 ] int 
  6778 ;;  dividend        2   11[BANK0 ] int 
  6779 ;; Auto vars:     Size  Location     Type
  6780 ;;  sign            1   15[BANK0 ] unsigned char 
  6781 ;;  counter         1   14[BANK0 ] unsigned char 
  6782 ;; Return value:  Size  Location     Type
  6783 ;;                  2    9[BANK0 ] int 
  6784 ;; Registers used:
  6785 ;;		wreg, status,2, status,0
  6786 ;; Tracked objects:
  6787 ;;		On entry : 300/0
  6788 ;;		On exit  : 300/0
  6789 ;;		Unchanged: 0/0
  6790 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6791 ;;      Params:         0       4       0       0       0
  6792 ;;      Locals:         0       2       0       0       0
  6793 ;;      Temps:          0       1       0       0       0
  6794 ;;      Totals:         0       7       0       0       0
  6795 ;;Total ram usage:        7 bytes
  6796 ;; Hardware stack levels used: 1
  6797 ;; Hardware stack levels required when called: 2
  6798 ;; This function calls:
  6799 ;;		Nothing
  6800 ;; This function is called by:
  6801 ;;		_fMenuStrip
  6802 ;; This function uses a non-reentrant model
  6803 ;;
  6804                           
  6805                           
  6806                           ;psect for function ___awmod
  6807  1F17                     ___awmod:
  6808                           
  6809                           ;incstack = 0
  6810                           ; Regs used in ___awmod: [wreg+status,2+status,0]
  6811  1F17  01AF               	clrf	___awmod@sign
  6812  1F18  1FAC               	btfss	___awmod@dividend+1,7
  6813  1F19  2F21               	goto	l4091
  6814  1F1A  09AB               	comf	___awmod@dividend,f
  6815  1F1B  09AC               	comf	___awmod@dividend+1,f
  6816  1F1C  0AAB               	incf	___awmod@dividend,f
  6817  1F1D  1903               	skipnz
  6818  1F1E  0AAC               	incf	___awmod@dividend+1,f
  6819  1F1F  01AF               	clrf	___awmod@sign
  6820  1F20  0AAF               	incf	___awmod@sign,f
  6821  1F21                     l4091:
  6822  1F21  1FAA               	btfss	___awmod@divisor+1,7
  6823  1F22  2F28               	goto	l4095
  6824  1F23  09A9               	comf	___awmod@divisor,f
  6825  1F24  09AA               	comf	___awmod@divisor+1,f
  6826  1F25  0AA9               	incf	___awmod@divisor,f
  6827  1F26  1903               	skipnz
  6828  1F27  0AAA               	incf	___awmod@divisor+1,f
  6829  1F28                     l4095:
  6830  1F28  0829               	movf	___awmod@divisor,w
  6831  1F29  042A               	iorwf	___awmod@divisor+1,w
  6832  1F2A  1903               	btfsc	3,2
  6833  1F2B  2F55               	goto	l4113
  6834  1F2C  01AE               	clrf	___awmod@counter
  6835  1F2D  0AAE               	incf	___awmod@counter,f
  6836  1F2E                     l4103:
  6837  1F2E  1BAA               	btfsc	___awmod@divisor+1,7
  6838  1F2F  2F3C               	goto	l4105
  6839  1F30  3001               	movlw	1
  6840  1F31                     u4655:
  6841  1F31  1003               	clrc
  6842  1F32  0DA9               	rlf	___awmod@divisor,f
  6843  1F33  0DAA               	rlf	___awmod@divisor+1,f
  6844  1F34  3EFF               	addlw	-1
  6845  1F35  1D03               	skipz
  6846  1F36  2F31               	goto	u4655
  6847  1F37  3001               	movlw	1
  6848  1F38  00AD               	movwf	??___awmod
  6849  1F39  082D               	movf	??___awmod,w
  6850  1F3A  07AE               	addwf	___awmod@counter,f
  6851  1F3B  2F2E               	goto	l4103
  6852  1F3C                     l4105:
  6853  1F3C  082A               	movf	___awmod@divisor+1,w
  6854  1F3D  022C               	subwf	___awmod@dividend+1,w
  6855  1F3E  1D03               	skipz
  6856  1F3F  2F42               	goto	u4675
  6857  1F40  0829               	movf	___awmod@divisor,w
  6858  1F41  022B               	subwf	___awmod@dividend,w
  6859  1F42                     u4675:
  6860  1F42  1C03               	skipc
  6861  1F43  2F4A               	goto	l4109
  6862  1F44  0829               	movf	___awmod@divisor,w
  6863  1F45  02AB               	subwf	___awmod@dividend,f
  6864  1F46  082A               	movf	___awmod@divisor+1,w
  6865  1F47  1C03               	skipc
  6866  1F48  03AC               	decf	___awmod@dividend+1,f
  6867  1F49  02AC               	subwf	___awmod@dividend+1,f
  6868  1F4A                     l4109:
  6869  1F4A  3001               	movlw	1
  6870  1F4B                     u4685:
  6871  1F4B  1003               	clrc
  6872  1F4C  0CAA               	rrf	___awmod@divisor+1,f
  6873  1F4D  0CA9               	rrf	___awmod@divisor,f
  6874  1F4E  3EFF               	addlw	-1
  6875  1F4F  1D03               	skipz
  6876  1F50  2F4B               	goto	u4685
  6877  1F51  3001               	movlw	1
  6878  1F52  02AE               	subwf	___awmod@counter,f
  6879  1F53  1D03               	btfss	3,2
  6880  1F54  2F3C               	goto	l4105
  6881  1F55                     l4113:
  6882  1F55  082F               	movf	___awmod@sign,w
  6883  1F56  1903               	btfsc	3,2
  6884  1F57  2F5D               	goto	l4117
  6885  1F58  09AB               	comf	___awmod@dividend,f
  6886  1F59  09AC               	comf	___awmod@dividend+1,f
  6887  1F5A  0AAB               	incf	___awmod@dividend,f
  6888  1F5B  1903               	skipnz
  6889  1F5C  0AAC               	incf	___awmod@dividend+1,f
  6890  1F5D                     l4117:
  6891  1F5D  082C               	movf	___awmod@dividend+1,w
  6892  1F5E  00AA               	movwf	?___awmod+1
  6893  1F5F  082B               	movf	___awmod@dividend,w
  6894  1F60  00A9               	movwf	?___awmod
  6895  1F61  0008               	return
  6896  1F62                     __end_of___awmod:
  6897                           
  6898                           	psect	text25
  6899  121A                     __ptext25:	
  6900 ;; *************** function ___awdiv *****************
  6901 ;; Defined at:
  6902 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\awdiv.c"
  6903 ;; Parameters:    Size  Location     Type
  6904 ;;  divisor         2    0[BANK0 ] int 
  6905 ;;  dividend        2    2[BANK0 ] int 
  6906 ;; Auto vars:     Size  Location     Type
  6907 ;;  quotient        2    7[BANK0 ] int 
  6908 ;;  sign            1    6[BANK0 ] unsigned char 
  6909 ;;  counter         1    5[BANK0 ] unsigned char 
  6910 ;; Return value:  Size  Location     Type
  6911 ;;                  2    0[BANK0 ] int 
  6912 ;; Registers used:
  6913 ;;		wreg, status,2, status,0
  6914 ;; Tracked objects:
  6915 ;;		On entry : 300/0
  6916 ;;		On exit  : 300/0
  6917 ;;		Unchanged: 0/0
  6918 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6919 ;;      Params:         0       4       0       0       0
  6920 ;;      Locals:         0       4       0       0       0
  6921 ;;      Temps:          0       1       0       0       0
  6922 ;;      Totals:         0       9       0       0       0
  6923 ;;Total ram usage:        9 bytes
  6924 ;; Hardware stack levels used: 1
  6925 ;; Hardware stack levels required when called: 2
  6926 ;; This function calls:
  6927 ;;		Nothing
  6928 ;; This function is called by:
  6929 ;;		_fMenuStrip
  6930 ;; This function uses a non-reentrant model
  6931 ;;
  6932                           
  6933                           
  6934                           ;psect for function ___awdiv
  6935  121A                     ___awdiv:
  6936                           
  6937                           ;incstack = 0
  6938                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
  6939  121A  01A6               	clrf	___awdiv@sign
  6940  121B  1FA1               	btfss	___awdiv@divisor+1,7
  6941  121C  2A24               	goto	l4047
  6942  121D  09A0               	comf	___awdiv@divisor,f
  6943  121E  09A1               	comf	___awdiv@divisor+1,f
  6944  121F  0AA0               	incf	___awdiv@divisor,f
  6945  1220  1903               	skipnz
  6946  1221  0AA1               	incf	___awdiv@divisor+1,f
  6947  1222  01A6               	clrf	___awdiv@sign
  6948  1223  0AA6               	incf	___awdiv@sign,f
  6949  1224                     l4047:
  6950  1224  1FA3               	btfss	___awdiv@dividend+1,7
  6951  1225  2A2F               	goto	l4053
  6952  1226  09A2               	comf	___awdiv@dividend,f
  6953  1227  09A3               	comf	___awdiv@dividend+1,f
  6954  1228  0AA2               	incf	___awdiv@dividend,f
  6955  1229  1903               	skipnz
  6956  122A  0AA3               	incf	___awdiv@dividend+1,f
  6957  122B  3001               	movlw	1
  6958  122C  00A4               	movwf	??___awdiv
  6959  122D  0824               	movf	??___awdiv,w
  6960  122E  06A6               	xorwf	___awdiv@sign,f
  6961  122F                     l4053:
  6962  122F  01A7               	clrf	___awdiv@quotient
  6963  1230  01A8               	clrf	___awdiv@quotient+1
  6964  1231  0820               	movf	___awdiv@divisor,w
  6965  1232  0421               	iorwf	___awdiv@divisor+1,w
  6966  1233  1903               	btfsc	3,2
  6967  1234  2A66               	goto	l4075
  6968  1235  01A5               	clrf	___awdiv@counter
  6969  1236  0AA5               	incf	___awdiv@counter,f
  6970  1237                     l4063:
  6971  1237  1BA1               	btfsc	___awdiv@divisor+1,7
  6972  1238  2A45               	goto	l4065
  6973  1239  3001               	movlw	1
  6974  123A                     u4555:
  6975  123A  1003               	clrc
  6976  123B  0DA0               	rlf	___awdiv@divisor,f
  6977  123C  0DA1               	rlf	___awdiv@divisor+1,f
  6978  123D  3EFF               	addlw	-1
  6979  123E  1D03               	skipz
  6980  123F  2A3A               	goto	u4555
  6981  1240  3001               	movlw	1
  6982  1241  00A4               	movwf	??___awdiv
  6983  1242  0824               	movf	??___awdiv,w
  6984  1243  07A5               	addwf	___awdiv@counter,f
  6985  1244  2A37               	goto	l4063
  6986  1245                     l4065:
  6987  1245  3001               	movlw	1
  6988  1246                     u4575:
  6989  1246  1003               	clrc
  6990  1247  0DA7               	rlf	___awdiv@quotient,f
  6991  1248  0DA8               	rlf	___awdiv@quotient+1,f
  6992  1249  3EFF               	addlw	-1
  6993  124A  1D03               	skipz
  6994  124B  2A46               	goto	u4575
  6995  124C  0821               	movf	___awdiv@divisor+1,w
  6996  124D  0223               	subwf	___awdiv@dividend+1,w
  6997  124E  1D03               	skipz
  6998  124F  2A52               	goto	u4585
  6999  1250  0820               	movf	___awdiv@divisor,w
  7000  1251  0222               	subwf	___awdiv@dividend,w
  7001  1252                     u4585:
  7002  1252  1C03               	skipc
  7003  1253  2A5B               	goto	l4071
  7004  1254  0820               	movf	___awdiv@divisor,w
  7005  1255  02A2               	subwf	___awdiv@dividend,f
  7006  1256  0821               	movf	___awdiv@divisor+1,w
  7007  1257  1C03               	skipc
  7008  1258  03A3               	decf	___awdiv@dividend+1,f
  7009  1259  02A3               	subwf	___awdiv@dividend+1,f
  7010  125A  1427               	bsf	___awdiv@quotient,0
  7011  125B                     l4071:
  7012  125B  3001               	movlw	1
  7013  125C                     u4595:
  7014  125C  1003               	clrc
  7015  125D  0CA1               	rrf	___awdiv@divisor+1,f
  7016  125E  0CA0               	rrf	___awdiv@divisor,f
  7017  125F  3EFF               	addlw	-1
  7018  1260  1D03               	skipz
  7019  1261  2A5C               	goto	u4595
  7020  1262  3001               	movlw	1
  7021  1263  02A5               	subwf	___awdiv@counter,f
  7022  1264  1D03               	btfss	3,2
  7023  1265  2A45               	goto	l4065
  7024  1266                     l4075:
  7025  1266  0826               	movf	___awdiv@sign,w
  7026  1267  1903               	btfsc	3,2
  7027  1268  2A6E               	goto	l4079
  7028  1269  09A7               	comf	___awdiv@quotient,f
  7029  126A  09A8               	comf	___awdiv@quotient+1,f
  7030  126B  0AA7               	incf	___awdiv@quotient,f
  7031  126C  1903               	skipnz
  7032  126D  0AA8               	incf	___awdiv@quotient+1,f
  7033  126E                     l4079:
  7034  126E  0828               	movf	___awdiv@quotient+1,w
  7035  126F  00A1               	movwf	?___awdiv+1
  7036  1270  0827               	movf	___awdiv@quotient,w
  7037  1271  00A0               	movwf	?___awdiv
  7038  1272  0008               	return
  7039  1273                     __end_of___awdiv:
  7040                           
  7041                           	psect	text26
  7042  07CB                     __ptext26:	
  7043 ;; *************** function _SPI_Write *****************
  7044 ;; Defined at:
  7045 ;;		line 32 in file "spi_flash.c"
  7046 ;; Parameters:    Size  Location     Type
  7047 ;;  address         2    6[BANK0 ] unsigned int 
  7048 ;;  data            1    8[BANK0 ] unsigned char 
  7049 ;; Auto vars:     Size  Location     Type
  7050 ;;		None
  7051 ;; Return value:  Size  Location     Type
  7052 ;;                  1    wreg      void 
  7053 ;; Registers used:
  7054 ;;		wreg, status,2, status,0, pclath, cstack
  7055 ;; Tracked objects:
  7056 ;;		On entry : 300/0
  7057 ;;		On exit  : 300/0
  7058 ;;		Unchanged: 0/0
  7059 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7060 ;;      Params:         0       3       0       0       0
  7061 ;;      Locals:         0       2       0       0       0
  7062 ;;      Temps:          0       0       0       0       0
  7063 ;;      Totals:         0       5       0       0       0
  7064 ;;Total ram usage:        5 bytes
  7065 ;; Hardware stack levels used: 1
  7066 ;; Hardware stack levels required when called: 6
  7067 ;; This function calls:
  7068 ;;		_SPI_WriteByte
  7069 ;;		_SPI_notRDY
  7070 ;; This function is called by:
  7071 ;;		_main
  7072 ;;		_fMenuStrip
  7073 ;; This function uses a non-reentrant model
  7074 ;;
  7075                           
  7076                           
  7077                           ;psect for function _SPI_Write
  7078  07CB                     _SPI_Write:
  7079  07CB                     l3835:	
  7080                           ;spi_flash.c: 33: while(SPI_notRDY() == 1);
  7081                           
  7082                           ;incstack = 0
  7083                           ; Regs used in _SPI_Write: [wreg+status,2+status,0+pclath+cstack]
  7084                           
  7085  07CB  160A  158A  2440  120A  118A  	fcall	_SPI_notRDY
  7086  07D0  3A01               	xorlw	1
  7087  07D1  1903               	skipnz
  7088  07D2  2FCB               	goto	l3835
  7089                           
  7090                           ;spi_flash.c: 34: PORTAbits.RA5 = 0;
  7091  07D3  1285               	bcf	5,5	;volatile
  7092                           
  7093                           ;spi_flash.c: 35: SPI_WriteByte(0x06);
  7094  07D4  3006               	movlw	6
  7095  07D5  160A  158A  2428  120A  118A  	fcall	_SPI_WriteByte
  7096                           
  7097                           ;spi_flash.c: 36: PORTAbits.RA5 = 1;
  7098  07DA  1283               	bcf	3,5	;RP0=0, select bank0
  7099  07DB  1685               	bsf	5,5	;volatile
  7100                           
  7101                           ;spi_flash.c: 38: PORTAbits.RA5 = 0;
  7102  07DC  1285               	bcf	5,5	;volatile
  7103                           
  7104                           ;spi_flash.c: 39: SPI_WriteByte(address > 255 ? 0x02|0x08 : 0x02);
  7105  07DD  3001               	movlw	1
  7106  07DE  0227               	subwf	SPI_Write@address+1,w
  7107  07DF  3000               	movlw	0
  7108  07E0  1903               	skipnz
  7109  07E1  0226               	subwf	SPI_Write@address,w
  7110  07E2  1803               	skipnc
  7111  07E3  2FE6               	goto	l3847
  7112  07E4  3002               	movlw	2
  7113  07E5  2FE7               	goto	L23
  7114  07E6                     l3847:
  7115  07E6  300A               	movlw	10
  7116  07E7                     L23:
  7117  07E7  00A9               	movwf	_SPI_Write$1300
  7118  07E8  3000               	movlw	0
  7119  07E9  00AA               	movwf	_SPI_Write$1300+1
  7120  07EA  0829               	movf	_SPI_Write$1300,w
  7121  07EB  160A  158A  2428  120A  118A  	fcall	_SPI_WriteByte
  7122                           
  7123                           ;spi_flash.c: 42: SPI_WriteByte(address);
  7124  07F0  1283               	bcf	3,5	;RP0=0, select bank0
  7125  07F1  0826               	movf	SPI_Write@address,w
  7126  07F2  160A  158A  2428  120A  118A  	fcall	_SPI_WriteByte
  7127                           
  7128                           ;spi_flash.c: 43: SPI_WriteByte(data);
  7129  07F7  1283               	bcf	3,5	;RP0=0, select bank0
  7130  07F8  0828               	movf	SPI_Write@data,w
  7131  07F9  160A  158A  2428   	fcall	_SPI_WriteByte
  7132                           
  7133                           ;spi_flash.c: 44: PORTAbits.RA5 = 1;
  7134  07FC  1283               	bcf	3,5	;RP0=0, select bank0
  7135  07FD  1685               	bsf	5,5	;volatile
  7136  07FE  0008               	return
  7137  07FF                     __end_of_SPI_Write:
  7138                           
  7139                           	psect	text27
  7140  1FB1                     __ptext27:	
  7141 ;; *************** function _LCD_string *****************
  7142 ;; Defined at:
  7143 ;;		line 89 in file "lcd.c"
  7144 ;; Parameters:    Size  Location     Type
  7145 ;;  st              2   14[BANK0 ] PTR unsigned char 
  7146 ;;		 -> str2(16), str(16), STR_1(13), 
  7147 ;; Auto vars:     Size  Location     Type
  7148 ;;  i               1   18[BANK0 ] unsigned char 
  7149 ;;  symbol          1   17[BANK0 ] unsigned char 
  7150 ;; Return value:  Size  Location     Type
  7151 ;;                  1    wreg      void 
  7152 ;; Registers used:
  7153 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  7154 ;; Tracked objects:
  7155 ;;		On entry : 300/0
  7156 ;;		On exit  : 300/0
  7157 ;;		Unchanged: 0/0
  7158 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7159 ;;      Params:         0       2       0       0       0
  7160 ;;      Locals:         0       2       0       0       0
  7161 ;;      Temps:          0       1       0       0       0
  7162 ;;      Totals:         0       5       0       0       0
  7163 ;;Total ram usage:        5 bytes
  7164 ;; Hardware stack levels used: 1
  7165 ;; Hardware stack levels required when called: 6
  7166 ;; This function calls:
  7167 ;;		_LCD_SetPos
  7168 ;;		_sendbyte
  7169 ;; This function is called by:
  7170 ;;		_main
  7171 ;;		_fMenuStrip
  7172 ;; This function uses a non-reentrant model
  7173 ;;
  7174                           
  7175                           
  7176                           ;psect for function _LCD_string
  7177  1FB1                     _LCD_string:
  7178                           
  7179                           ;lcd.c: 90: unsigned char symbol;;lcd.c: 91: unsigned char i = 0;
  7180                           
  7181                           ;incstack = 0
  7182 ;; using string table level
  7183                           ; Regs used in _LCD_string: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  7184  1FB1  01B2               	clrf	LCD_string@i
  7185  1FB2                     l3831:	
  7186                           ;lcd.c: 93: while(st[i] != '\0'){
  7187                           
  7188  1FB2  1283               	bcf	3,5	;RP0=0, select bank0
  7189  1FB3  1303               	bcf	3,6	;RP1=0, select bank0
  7190  1FB4  0832               	movf	LCD_string@i,w
  7191  1FB5  072E               	addwf	LCD_string@st,w
  7192  1FB6  0084               	movwf	4
  7193  1FB7  082F               	movf	LCD_string@st+1,w
  7194  1FB8  1803               	skipnc
  7195  1FB9  0A2F               	incf	LCD_string@st+1,w
  7196  1FBA  00FF               	movwf	127
  7197  1FBB  160A  118A  2000  160A  158A  	fcall	stringtab
  7198  1FC0  3A00               	xorlw	0
  7199  1FC1  1903               	btfsc	3,2
  7200  1FC2  0008               	return
  7201                           
  7202                           ;lcd.c: 94: if(i == 16 ) LCD_SetPos(0,1);
  7203  1FC3  3010               	movlw	16
  7204  1FC4  0632               	xorwf	LCD_string@i,w
  7205  1FC5  1D03               	btfss	3,2
  7206  1FC6  2FCF               	goto	l3821
  7207  1FC7  01AC               	clrf	LCD_SetPos@y
  7208  1FC8  0AAC               	incf	LCD_SetPos@y,f
  7209  1FC9  3000               	movlw	0
  7210  1FCA  160A  158A  24CF  160A  158A  	fcall	_LCD_SetPos
  7211  1FCF                     l3821:
  7212                           
  7213                           ;lcd.c: 100: symbol = st[i++];
  7214  1FCF  1283               	bcf	3,5	;RP0=0, select bank0
  7215  1FD0  1303               	bcf	3,6	;RP1=0, select bank0
  7216  1FD1  0832               	movf	LCD_string@i,w
  7217  1FD2  072E               	addwf	LCD_string@st,w
  7218  1FD3  0084               	movwf	4
  7219  1FD4  082F               	movf	LCD_string@st+1,w
  7220  1FD5  1803               	skipnc
  7221  1FD6  0A2F               	incf	LCD_string@st+1,w
  7222  1FD7  00FF               	movwf	127
  7223  1FD8  160A  118A  2000  160A  158A  	fcall	stringtab
  7224  1FDD  00B0               	movwf	??_LCD_string
  7225  1FDE  0830               	movf	??_LCD_string,w
  7226  1FDF  00B1               	movwf	LCD_string@symbol
  7227  1FE0  3001               	movlw	1
  7228  1FE1  00B0               	movwf	??_LCD_string
  7229  1FE2  0830               	movf	??_LCD_string,w
  7230  1FE3  07B2               	addwf	LCD_string@i,f
  7231                           
  7232                           ;lcd.c: 101: if(symbol > 0xBFu) symbol = SHRIFT[(symbol-0xC0u)];
  7233  1FE4  30C0               	movlw	192
  7234  1FE5  0231               	subwf	LCD_string@symbol,w
  7235  1FE6  1C03               	skipc
  7236  1FE7  2FF7               	goto	l3829
  7237  1FE8  0831               	movf	LCD_string@symbol,w
  7238  1FE9  3E52               	addlw	low ((_SHRIFT| (0+32768)+65344))
  7239  1FEA  0084               	movwf	4
  7240  1FEB  308F               	movlw	high ((_SHRIFT| (0+32768)+65344))
  7241  1FEC  1803               	skipnc
  7242  1FED  3E01               	addlw	1
  7243  1FEE  00FF               	movwf	127
  7244  1FEF  160A  118A  2000  160A  158A  	fcall	stringtab
  7245  1FF4  00B0               	movwf	??_LCD_string
  7246  1FF5  0830               	movf	??_LCD_string,w
  7247  1FF6  00B1               	movwf	LCD_string@symbol
  7248  1FF7                     l3829:
  7249                           
  7250                           ;lcd.c: 102: sendbyte(symbol,1);
  7251  1FF7  01A8               	clrf	sendbyte@mode
  7252  1FF8  0AA8               	incf	sendbyte@mode,f
  7253  1FF9  0831               	movf	LCD_string@symbol,w
  7254  1FFA  160A  118A  21FC  160A  158A  	fcall	_sendbyte
  7255  1FFF  2FB2               	goto	l3831
  7256  2000                     __end_of_LCD_string:
  7257                           
  7258                           	psect	text28
  7259  1CCF                     __ptext28:	
  7260 ;; *************** function _LCD_SetPos *****************
  7261 ;; Defined at:
  7262 ;;		line 107 in file "lcd.c"
  7263 ;; Parameters:    Size  Location     Type
  7264 ;;  x               1    wreg     unsigned char 
  7265 ;;  y               1   12[BANK0 ] unsigned char 
  7266 ;; Auto vars:     Size  Location     Type
  7267 ;;  x               1   13[BANK0 ] unsigned char 
  7268 ;; Return value:  Size  Location     Type
  7269 ;;                  1    wreg      void 
  7270 ;; Registers used:
  7271 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  7272 ;; Tracked objects:
  7273 ;;		On entry : 300/0
  7274 ;;		On exit  : 0/0
  7275 ;;		Unchanged: 0/0
  7276 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7277 ;;      Params:         0       1       0       0       0
  7278 ;;      Locals:         0       1       0       0       0
  7279 ;;      Temps:          0       0       0       0       0
  7280 ;;      Totals:         0       2       0       0       0
  7281 ;;Total ram usage:        2 bytes
  7282 ;; Hardware stack levels used: 1
  7283 ;; Hardware stack levels required when called: 5
  7284 ;; This function calls:
  7285 ;;		_sendbyte
  7286 ;; This function is called by:
  7287 ;;		_main
  7288 ;;		_LCD_string
  7289 ;;		_fMenuStrip
  7290 ;; This function uses a non-reentrant model
  7291 ;;
  7292                           
  7293                           
  7294                           ;psect for function _LCD_SetPos
  7295  1CCF                     _LCD_SetPos:
  7296                           
  7297                           ;incstack = 0
  7298                           ; Regs used in _LCD_SetPos: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  7299                           ;LCD_SetPos@x stored from wreg
  7300  1CCF  00AD               	movwf	LCD_SetPos@x
  7301                           
  7302                           ;lcd.c: 108: switch(y){
  7303  1CD0  2CE0               	goto	l3583
  7304  1CD1                     l3577:
  7305                           
  7306                           ;lcd.c: 110: sendbyte((unsigned char)(x|0x80),0);
  7307  1CD1  01A8               	clrf	sendbyte@mode
  7308  1CD2  082D               	movf	LCD_SetPos@x,w
  7309  1CD3  3880               	iorlw	128
  7310  1CD4  160A  118A  21FC   	fcall	_sendbyte
  7311                           
  7312                           ;lcd.c: 111: break;
  7313  1CD7  0008               	return
  7314  1CD8                     l3579:
  7315                           
  7316                           ;lcd.c: 113: sendbyte((unsigned char)((0x40+x)|0x80),0);
  7317  1CD8  01A8               	clrf	sendbyte@mode
  7318  1CD9  082D               	movf	LCD_SetPos@x,w
  7319  1CDA  3E40               	addlw	64
  7320  1CDB  3880               	iorlw	128
  7321  1CDC  160A  118A  21FC   	fcall	_sendbyte
  7322                           
  7323                           ;lcd.c: 114: break;
  7324  1CDF  0008               	return
  7325  1CE0                     l3583:
  7326  1CE0  082C               	movf	LCD_SetPos@y,w
  7327                           
  7328                           ; Switch size 1, requested type "simple"
  7329                           ; Number of cases is 2, Range of values is 0 to 1
  7330                           ; switch strategies available:
  7331                           ; Name         Instructions Cycles
  7332                           ; simple_byte            7     4 (average)
  7333                           ; direct_byte           14     8 (fixed)
  7334                           ; jumptable            260     6 (fixed)
  7335                           ;	Chosen strategy is simple_byte
  7336  1CE1  3A00               	xorlw	0	; case 0
  7337  1CE2  1903               	skipnz
  7338  1CE3  2CD1               	goto	l3577
  7339  1CE4  3A01               	xorlw	1	; case 1
  7340  1CE5  1903               	skipnz
  7341  1CE6  2CD8               	goto	l3579
  7342  1CE7  2CE8               	goto	l358
  7343  1CE8                     l358:
  7344  1CE8  0008               	return
  7345  1CE9                     __end_of_LCD_SetPos:
  7346                           
  7347                           	psect	text29
  7348  1CB6                     __ptext29:	
  7349 ;; *************** function _LCD_StringOnOff *****************
  7350 ;; Defined at:
  7351 ;;		line 123 in file "lcd.c"
  7352 ;; Parameters:    Size  Location     Type
  7353 ;;  st              1    wreg     const unsigned char 
  7354 ;;  numb            1    0[BANK0 ] const unsigned char 
  7355 ;; Auto vars:     Size  Location     Type
  7356 ;;  st              1    2[BANK0 ] const unsigned char 
  7357 ;; Return value:  Size  Location     Type
  7358 ;;                  2    0[BANK0 ] PTR unsigned char 
  7359 ;; Registers used:
  7360 ;;		wreg, status,2, status,0
  7361 ;; Tracked objects:
  7362 ;;		On entry : 300/900
  7363 ;;		On exit  : 300/0
  7364 ;;		Unchanged: 0/0
  7365 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7366 ;;      Params:         0       1       0       0       0
  7367 ;;      Locals:         0       1       0       0       0
  7368 ;;      Temps:          0       1       0       0       0
  7369 ;;      Totals:         0       3       0       0       0
  7370 ;;Total ram usage:        3 bytes
  7371 ;; Hardware stack levels used: 1
  7372 ;; Hardware stack levels required when called: 2
  7373 ;; This function calls:
  7374 ;;		Nothing
  7375 ;; This function is called by:
  7376 ;;		_fMenuStrip
  7377 ;; This function uses a non-reentrant model
  7378 ;;
  7379                           
  7380                           
  7381                           ;psect for function _LCD_StringOnOff
  7382  1CB6                     _LCD_StringOnOff:
  7383                           
  7384                           ;incstack = 0
  7385                           ; Regs used in _LCD_StringOnOff: [wreg+status,2+status,0]
  7386                           ;LCD_StringOnOff@st stored from wreg
  7387  1CB6  1283               	bcf	3,5	;RP0=0, select bank0
  7388  1CB7  00A2               	movwf	LCD_StringOnOff@st
  7389                           
  7390                           ;lcd.c: 124: if(st & (1u << numb)) return "Âêë";
  7391  1CB8  3001               	movlw	1
  7392  1CB9  00A1               	movwf	??_LCD_StringOnOff
  7393  1CBA  0A20               	incf	LCD_StringOnOff@numb,w
  7394  1CBB  2CBE               	goto	u4264
  7395  1CBC                     u4265:
  7396  1CBC  1003               	clrc
  7397  1CBD  0DA1               	rlf	??_LCD_StringOnOff,f
  7398  1CBE                     u4264:
  7399  1CBE  3EFF               	addlw	-1
  7400  1CBF  1D03               	skipz
  7401  1CC0  2CBC               	goto	u4265
  7402  1CC1  0821               	movf	??_LCD_StringOnOff,w
  7403  1CC2  0522               	andwf	LCD_StringOnOff@st,w
  7404  1CC3  1903               	btfsc	3,2
  7405  1CC4  2CCA               	goto	l3871
  7406  1CC5  30F1               	movlw	low (STR_2| (0+32768))
  7407  1CC6  00A0               	movwf	?_LCD_StringOnOff
  7408  1CC7  3091               	movlw	high (STR_2| (0+32768))
  7409  1CC8  00A1               	movwf	?_LCD_StringOnOff+1
  7410  1CC9  0008               	return
  7411  1CCA                     l3871:
  7412                           
  7413                           ;lcd.c: 125: else return "Âûêë";
  7414  1CCA  30E4               	movlw	low (STR_3| (0+32768))
  7415  1CCB  00A0               	movwf	?_LCD_StringOnOff
  7416  1CCC  3091               	movlw	high (STR_3| (0+32768))
  7417  1CCD  00A1               	movwf	?_LCD_StringOnOff+1
  7418  1CCE  0008               	return
  7419  1CCF                     __end_of_LCD_StringOnOff:
  7420                           
  7421                           	psect	text30
  7422  1F62                     __ptext30:	
  7423 ;; *************** function _fACP *****************
  7424 ;; Defined at:
  7425 ;;		line 62 in file "newmain.c"
  7426 ;; Parameters:    Size  Location     Type
  7427 ;;		None
  7428 ;; Auto vars:     Size  Location     Type
  7429 ;;		None
  7430 ;; Return value:  Size  Location     Type
  7431 ;;                  1    wreg      void 
  7432 ;; Registers used:
  7433 ;;		wreg
  7434 ;; Tracked objects:
  7435 ;;		On entry : 300/100
  7436 ;;		On exit  : 300/100
  7437 ;;		Unchanged: 0/0
  7438 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7439 ;;      Params:         0       0       0       0       0
  7440 ;;      Locals:         0       0       0       0       0
  7441 ;;      Temps:          0       2       0       0       0
  7442 ;;      Totals:         0       2       0       0       0
  7443 ;;Total ram usage:        2 bytes
  7444 ;; Hardware stack levels used: 1
  7445 ;; Hardware stack levels required when called: 2
  7446 ;; This function calls:
  7447 ;;		Nothing
  7448 ;; This function is called by:
  7449 ;;		_main
  7450 ;; This function uses a non-reentrant model
  7451 ;;
  7452                           
  7453                           
  7454                           ;psect for function _fACP
  7455  1F62                     _fACP:
  7456                           
  7457                           ;newmain.c: 64: ADCON0bits.CHS2 = 0;
  7458                           
  7459                           ;incstack = 0
  7460                           ; Regs used in _fACP: [wreg]
  7461  1F62  1283               	bcf	3,5	;RP0=0, select bank0
  7462  1F63  129F               	bcf	31,5	;volatile
  7463                           
  7464                           ;newmain.c: 65: ADCON0bits.CHS1 = 0;
  7465  1F64  121F               	bcf	31,4	;volatile
  7466                           
  7467                           ;newmain.c: 66: ADCON0bits.CHS0 = 0;
  7468  1F65  119F               	bcf	31,3	;volatile
  7469                           
  7470                           ;newmain.c: 67: ADCON0bits.ADON = 1;
  7471  1F66  141F               	bsf	31,0	;volatile
  7472                           
  7473                           ;newmain.c: 68: _delay((unsigned long)((1)*(8000000/4000.0)));
  7474  1F67  3003               	movlw	3
  7475  1F68  1283               	bcf	3,5	;RP0=0, select bank0
  7476  1F69  1303               	bcf	3,6	;RP1=0, select bank0
  7477  1F6A  00A1               	movwf	??_fACP+1
  7478  1F6B  3097               	movlw	151
  7479  1F6C  00A0               	movwf	??_fACP
  7480  1F6D                     u6437:
  7481  1F6D  0BA0               	decfsz	??_fACP,f
  7482  1F6E  2F6D               	goto	u6437
  7483  1F6F  0BA1               	decfsz	??_fACP+1,f
  7484  1F70  2F6D               	goto	u6437
  7485                           
  7486                           ;newmain.c: 69: ADCON0bits.GO_nDONE = 1;
  7487  1F71  1283               	bcf	3,5	;RP0=0, select bank0
  7488  1F72  1303               	bcf	3,6	;RP1=0, select bank0
  7489  1F73  151F               	bsf	31,2	;volatile
  7490  1F74                     l164:	
  7491                           ;newmain.c: 70: while(GO_DONE);
  7492                           
  7493  1F74  191F               	btfsc	31,2	;volatile
  7494  1F75  2F74               	goto	l164
  7495                           
  7496                           ;newmain.c: 71: ADCON0bits.ADON = 0;
  7497  1F76  101F               	bcf	31,0	;volatile
  7498                           
  7499                           ;newmain.c: 72: Analog.AI0 = ADRES;
  7500  1F77  081E               	movf	30,w	;volatile
  7501  1F78  00A0               	movwf	??_fACP
  7502  1F79  0820               	movf	??_fACP,w
  7503  1F7A  1683               	bsf	3,5	;RP0=1, select bank1
  7504  1F7B  00A4               	movwf	_Analog^(0+128)
  7505                           
  7506                           ;newmain.c: 74: ADCON0bits.CHS2 = 0;
  7507  1F7C  1283               	bcf	3,5	;RP0=0, select bank0
  7508  1F7D  129F               	bcf	31,5	;volatile
  7509                           
  7510                           ;newmain.c: 75: ADCON0bits.CHS1 = 0;
  7511  1F7E  121F               	bcf	31,4	;volatile
  7512                           
  7513                           ;newmain.c: 76: ADCON0bits.CHS0 = 1;
  7514  1F7F  159F               	bsf	31,3	;volatile
  7515                           
  7516                           ;newmain.c: 77: ADCON0bits.ADON = 1;
  7517  1F80  141F               	bsf	31,0	;volatile
  7518                           
  7519                           ;newmain.c: 78: _delay((unsigned long)((1)*(8000000/4000.0)));
  7520  1F81  3003               	movlw	3
  7521  1F82  1283               	bcf	3,5	;RP0=0, select bank0
  7522  1F83  1303               	bcf	3,6	;RP1=0, select bank0
  7523  1F84  00A1               	movwf	??_fACP+1
  7524  1F85  3097               	movlw	151
  7525  1F86  00A0               	movwf	??_fACP
  7526  1F87                     u6447:
  7527  1F87  0BA0               	decfsz	??_fACP,f
  7528  1F88  2F87               	goto	u6447
  7529  1F89  0BA1               	decfsz	??_fACP+1,f
  7530  1F8A  2F87               	goto	u6447
  7531                           
  7532                           ;newmain.c: 79: ADCON0bits.GO_nDONE = 1;
  7533  1F8B  1283               	bcf	3,5	;RP0=0, select bank0
  7534  1F8C  1303               	bcf	3,6	;RP1=0, select bank0
  7535  1F8D  151F               	bsf	31,2	;volatile
  7536  1F8E                     l167:	
  7537                           ;newmain.c: 80: while(GO_DONE);
  7538                           
  7539  1F8E  191F               	btfsc	31,2	;volatile
  7540  1F8F  2F8E               	goto	l167
  7541                           
  7542                           ;newmain.c: 81: ADCON0bits.ADON = 0;
  7543  1F90  101F               	bcf	31,0	;volatile
  7544                           
  7545                           ;newmain.c: 82: Analog.AI1 = ADRES;
  7546  1F91  081E               	movf	30,w	;volatile
  7547  1F92  00A0               	movwf	??_fACP
  7548  1F93  0820               	movf	??_fACP,w
  7549  1F94  1683               	bsf	3,5	;RP0=1, select bank1
  7550  1F95  00A5               	movwf	(_Analog^(0+128)+1)
  7551                           
  7552                           ;newmain.c: 84: ADCON0bits.CHS2 = 0;
  7553  1F96  1283               	bcf	3,5	;RP0=0, select bank0
  7554  1F97  129F               	bcf	31,5	;volatile
  7555                           
  7556                           ;newmain.c: 85: ADCON0bits.CHS1 = 1;
  7557  1F98  161F               	bsf	31,4	;volatile
  7558                           
  7559                           ;newmain.c: 86: ADCON0bits.CHS0 = 1;
  7560  1F99  159F               	bsf	31,3	;volatile
  7561                           
  7562                           ;newmain.c: 87: ADCON0bits.ADON = 1;
  7563  1F9A  141F               	bsf	31,0	;volatile
  7564                           
  7565                           ;newmain.c: 88: _delay((unsigned long)((1)*(8000000/4000.0)));
  7566  1F9B  3003               	movlw	3
  7567  1F9C  1283               	bcf	3,5	;RP0=0, select bank0
  7568  1F9D  1303               	bcf	3,6	;RP1=0, select bank0
  7569  1F9E  00A1               	movwf	??_fACP+1
  7570  1F9F  3097               	movlw	151
  7571  1FA0  00A0               	movwf	??_fACP
  7572  1FA1                     u6457:
  7573  1FA1  0BA0               	decfsz	??_fACP,f
  7574  1FA2  2FA1               	goto	u6457
  7575  1FA3  0BA1               	decfsz	??_fACP+1,f
  7576  1FA4  2FA1               	goto	u6457
  7577                           
  7578                           ;newmain.c: 89: ADCON0bits.GO_nDONE = 1;
  7579  1FA5  1283               	bcf	3,5	;RP0=0, select bank0
  7580  1FA6  1303               	bcf	3,6	;RP1=0, select bank0
  7581  1FA7  151F               	bsf	31,2	;volatile
  7582  1FA8                     l170:	
  7583                           ;newmain.c: 90: while(GO_DONE);
  7584                           
  7585  1FA8  191F               	btfsc	31,2	;volatile
  7586  1FA9  2FA8               	goto	l170
  7587                           
  7588                           ;newmain.c: 91: ADCON0bits.ADON = 0;
  7589  1FAA  101F               	bcf	31,0	;volatile
  7590                           
  7591                           ;newmain.c: 92: Analog.AI2 = ADRES;
  7592  1FAB  081E               	movf	30,w	;volatile
  7593  1FAC  00A0               	movwf	??_fACP
  7594  1FAD  0820               	movf	??_fACP,w
  7595  1FAE  1683               	bsf	3,5	;RP0=1, select bank1
  7596  1FAF  00A6               	movwf	(_Analog^(0+128)+2)
  7597  1FB0  0008               	return
  7598  1FB1                     __end_of_fACP:
  7599                           
  7600                           	psect	text31
  7601  1CA0                     __ptext31:	
  7602 ;; *************** function _SPI_init *****************
  7603 ;; Defined at:
  7604 ;;		line 3 in file "spi_flash.c"
  7605 ;; Parameters:    Size  Location     Type
  7606 ;;		None
  7607 ;; Auto vars:     Size  Location     Type
  7608 ;;		None
  7609 ;; Return value:  Size  Location     Type
  7610 ;;                  1    wreg      void 
  7611 ;; Registers used:
  7612 ;;		None
  7613 ;; Tracked objects:
  7614 ;;		On entry : 0/0
  7615 ;;		On exit  : 300/0
  7616 ;;		Unchanged: 0/0
  7617 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7618 ;;      Params:         0       0       0       0       0
  7619 ;;      Locals:         0       0       0       0       0
  7620 ;;      Temps:          0       0       0       0       0
  7621 ;;      Totals:         0       0       0       0       0
  7622 ;;Total ram usage:        0 bytes
  7623 ;; Hardware stack levels used: 1
  7624 ;; Hardware stack levels required when called: 2
  7625 ;; This function calls:
  7626 ;;		Nothing
  7627 ;; This function is called by:
  7628 ;;		_main
  7629 ;; This function uses a non-reentrant model
  7630 ;;
  7631                           
  7632                           
  7633                           ;psect for function _SPI_init
  7634  1CA0                     _SPI_init:
  7635                           
  7636                           ;spi_flash.c: 4: TRISCbits.TRISC4 = 1;
  7637                           
  7638                           ;incstack = 0
  7639                           ; Regs used in _SPI_init: []
  7640  1CA0  1683               	bsf	3,5	;RP0=1, select bank1
  7641  1CA1  1303               	bcf	3,6	;RP1=0, select bank1
  7642  1CA2  1607               	bsf	7,4	;volatile
  7643                           
  7644                           ;spi_flash.c: 5: TRISCbits.TRISC5 = 0;
  7645  1CA3  1287               	bcf	7,5	;volatile
  7646                           
  7647                           ;spi_flash.c: 6: TRISCbits.TRISC3 = 0;
  7648  1CA4  1187               	bcf	7,3	;volatile
  7649                           
  7650                           ;spi_flash.c: 7: TRISAbits.TRISA5 = 0;
  7651  1CA5  1285               	bcf	5,5	;volatile
  7652                           
  7653                           ;spi_flash.c: 9: PORTAbits.RA5 = 1;
  7654  1CA6  1283               	bcf	3,5	;RP0=0, select bank0
  7655  1CA7  1685               	bsf	5,5	;volatile
  7656                           
  7657                           ;spi_flash.c: 11: SSPSTATbits.SMP = 0;
  7658  1CA8  1683               	bsf	3,5	;RP0=1, select bank1
  7659  1CA9  1394               	bcf	20,7	;volatile
  7660                           
  7661                           ;spi_flash.c: 12: SSPSTATbits.CKE = 1;
  7662  1CAA  1714               	bsf	20,6	;volatile
  7663                           
  7664                           ;spi_flash.c: 13: SSPSTATbits.BF = 0;
  7665  1CAB  1014               	bcf	20,0	;volatile
  7666                           
  7667                           ;spi_flash.c: 15: SSPCONbits.WCOL = 0;
  7668  1CAC  1283               	bcf	3,5	;RP0=0, select bank0
  7669  1CAD  1394               	bcf	20,7	;volatile
  7670                           
  7671                           ;spi_flash.c: 16: SSPCONbits.SSPOV = 0;
  7672  1CAE  1314               	bcf	20,6	;volatile
  7673                           
  7674                           ;spi_flash.c: 17: SSPCONbits.SSPEN = 1;
  7675  1CAF  1694               	bsf	20,5	;volatile
  7676                           
  7677                           ;spi_flash.c: 18: SSPCONbits.CKP = 0;
  7678  1CB0  1214               	bcf	20,4	;volatile
  7679                           
  7680                           ;spi_flash.c: 19: SSPCONbits.SSPM3 = 0;
  7681  1CB1  1194               	bcf	20,3	;volatile
  7682                           
  7683                           ;spi_flash.c: 20: SSPCONbits.SSPM2 = 0;
  7684  1CB2  1114               	bcf	20,2	;volatile
  7685                           
  7686                           ;spi_flash.c: 21: SSPCONbits.SSPM1 = 0;
  7687  1CB3  1094               	bcf	20,1	;volatile
  7688                           
  7689                           ;spi_flash.c: 22: SSPCONbits.SSPM0 = 1;
  7690  1CB4  1414               	bsf	20,0	;volatile
  7691  1CB5  0008               	return
  7692  1CB6                     __end_of_SPI_init:
  7693                           
  7694                           	psect	text32
  7695  1D9E                     __ptext32:	
  7696 ;; *************** function _SPI_Read *****************
  7697 ;; Defined at:
  7698 ;;		line 46 in file "spi_flash.c"
  7699 ;; Parameters:    Size  Location     Type
  7700 ;;  address         2    6[BANK0 ] unsigned int 
  7701 ;; Auto vars:     Size  Location     Type
  7702 ;;  data            1   11[BANK0 ] unsigned char 
  7703 ;; Return value:  Size  Location     Type
  7704 ;;                  1    wreg      unsigned char 
  7705 ;; Registers used:
  7706 ;;		wreg, status,2, status,0, pclath, cstack
  7707 ;; Tracked objects:
  7708 ;;		On entry : 300/0
  7709 ;;		On exit  : 300/0
  7710 ;;		Unchanged: 0/0
  7711 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7712 ;;      Params:         0       2       0       0       0
  7713 ;;      Locals:         0       3       0       0       0
  7714 ;;      Temps:          0       1       0       0       0
  7715 ;;      Totals:         0       6       0       0       0
  7716 ;;Total ram usage:        6 bytes
  7717 ;; Hardware stack levels used: 1
  7718 ;; Hardware stack levels required when called: 6
  7719 ;; This function calls:
  7720 ;;		_SPI_ReadByte
  7721 ;;		_SPI_WriteByte
  7722 ;;		_SPI_notRDY
  7723 ;; This function is called by:
  7724 ;;		_main
  7725 ;; This function uses a non-reentrant model
  7726 ;;
  7727                           
  7728                           
  7729                           ;psect for function _SPI_Read
  7730  1D9E                     _SPI_Read:
  7731  1D9E                     l4451:	
  7732                           ;spi_flash.c: 47: while(SPI_notRDY() == 1);
  7733                           
  7734                           ;incstack = 0
  7735                           ; Regs used in _SPI_Read: [wreg+status,2+status,0+pclath+cstack]
  7736                           
  7737  1D9E  160A  158A  2440  160A  158A  	fcall	_SPI_notRDY
  7738  1DA3  3A01               	xorlw	1
  7739  1DA4  1903               	skipnz
  7740  1DA5  2D9E               	goto	l4451
  7741                           
  7742                           ;spi_flash.c: 48: PORTAbits.RA5 = 0;
  7743  1DA6  1285               	bcf	5,5	;volatile
  7744                           
  7745                           ;spi_flash.c: 49: SPI_WriteByte(address > 255 ? 0x03|0x08 : 0x03);
  7746  1DA7  3001               	movlw	1
  7747  1DA8  0227               	subwf	SPI_Read@address+1,w
  7748  1DA9  3000               	movlw	0
  7749  1DAA  1903               	skipnz
  7750  1DAB  0226               	subwf	SPI_Read@address,w
  7751  1DAC  1803               	skipnc
  7752  1DAD  2DB0               	goto	l4457
  7753  1DAE  3003               	movlw	3
  7754  1DAF  2DB1               	goto	L24
  7755  1DB0                     l4457:
  7756  1DB0  300B               	movlw	11
  7757  1DB1                     L24:
  7758  1DB1  00A9               	movwf	_SPI_Read$1303
  7759  1DB2  3000               	movlw	0
  7760  1DB3  00AA               	movwf	_SPI_Read$1303+1
  7761  1DB4  0829               	movf	_SPI_Read$1303,w
  7762  1DB5  160A  158A  2428  160A  158A  	fcall	_SPI_WriteByte
  7763                           
  7764                           ;spi_flash.c: 52: SPI_WriteByte(address);
  7765  1DBA  1283               	bcf	3,5	;RP0=0, select bank0
  7766  1DBB  0826               	movf	SPI_Read@address,w
  7767  1DBC  160A  158A  2428  160A  158A  	fcall	_SPI_WriteByte
  7768                           
  7769                           ;spi_flash.c: 53: char data = SPI_ReadByte(0);
  7770  1DC1  3000               	movlw	0
  7771  1DC2  160A  158A  2437   	fcall	_SPI_ReadByte
  7772  1DC5  00A8               	movwf	??_SPI_Read
  7773  1DC6  0828               	movf	??_SPI_Read,w
  7774  1DC7  00AB               	movwf	SPI_Read@data
  7775                           
  7776                           ;spi_flash.c: 54: PORTAbits.RA5 = 1;
  7777  1DC8  1685               	bsf	5,5	;volatile
  7778                           
  7779                           ;spi_flash.c: 55: return data;
  7780  1DC9  082B               	movf	SPI_Read@data,w
  7781  1DCA  0008               	return
  7782  1DCB                     __end_of_SPI_Read:
  7783                           
  7784                           	psect	text33
  7785  1C40                     __ptext33:	
  7786 ;; *************** function _SPI_notRDY *****************
  7787 ;; Defined at:
  7788 ;;		line 74 in file "spi_flash.c"
  7789 ;; Parameters:    Size  Location     Type
  7790 ;;		None
  7791 ;; Auto vars:     Size  Location     Type
  7792 ;;  notRDY          1    5[BANK0 ] unsigned char 
  7793 ;; Return value:  Size  Location     Type
  7794 ;;                  1    wreg      unsigned char 
  7795 ;; Registers used:
  7796 ;;		wreg, status,2, status,0, pclath, cstack
  7797 ;; Tracked objects:
  7798 ;;		On entry : 300/0
  7799 ;;		On exit  : 300/0
  7800 ;;		Unchanged: 0/0
  7801 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7802 ;;      Params:         0       0       0       0       0
  7803 ;;      Locals:         0       1       0       0       0
  7804 ;;      Temps:          0       1       0       0       0
  7805 ;;      Totals:         0       2       0       0       0
  7806 ;;Total ram usage:        2 bytes
  7807 ;; Hardware stack levels used: 1
  7808 ;; Hardware stack levels required when called: 5
  7809 ;; This function calls:
  7810 ;;		_SPI_ReadStatus
  7811 ;; This function is called by:
  7812 ;;		_SPI_Write
  7813 ;;		_SPI_Read
  7814 ;; This function uses a non-reentrant model
  7815 ;;
  7816                           
  7817                           
  7818                           ;psect for function _SPI_notRDY
  7819  1C40                     _SPI_notRDY:
  7820                           
  7821                           ;spi_flash.c: 75: char notRDY = SPI_ReadStatus();
  7822                           
  7823                           ;incstack = 0
  7824                           ; Regs used in _SPI_notRDY: [wreg+status,2+status,0+pclath+cstack]
  7825  1C40  160A  158A  2457   	fcall	_SPI_ReadStatus
  7826  1C43  00A4               	movwf	??_SPI_notRDY
  7827  1C44  0824               	movf	??_SPI_notRDY,w
  7828  1C45  00A5               	movwf	SPI_notRDY@notRDY
  7829                           
  7830                           ;spi_flash.c: 76: return (notRDY & 0x01);
  7831  1C46  0825               	movf	SPI_notRDY@notRDY,w
  7832  1C47  3901               	andlw	1
  7833  1C48  0008               	return
  7834  1C49                     __end_of_SPI_notRDY:
  7835                           
  7836                           	psect	text34
  7837  1C57                     __ptext34:	
  7838 ;; *************** function _SPI_ReadStatus *****************
  7839 ;; Defined at:
  7840 ;;		line 57 in file "spi_flash.c"
  7841 ;; Parameters:    Size  Location     Type
  7842 ;;		None
  7843 ;; Auto vars:     Size  Location     Type
  7844 ;;  status          1    3[BANK0 ] unsigned char 
  7845 ;; Return value:  Size  Location     Type
  7846 ;;                  1    wreg      unsigned char 
  7847 ;; Registers used:
  7848 ;;		wreg, status,2, status,0, pclath, cstack
  7849 ;; Tracked objects:
  7850 ;;		On entry : 300/0
  7851 ;;		On exit  : 300/0
  7852 ;;		Unchanged: 0/0
  7853 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7854 ;;      Params:         0       0       0       0       0
  7855 ;;      Locals:         0       1       0       0       0
  7856 ;;      Temps:          0       1       0       0       0
  7857 ;;      Totals:         0       2       0       0       0
  7858 ;;Total ram usage:        2 bytes
  7859 ;; Hardware stack levels used: 1
  7860 ;; Hardware stack levels required when called: 4
  7861 ;; This function calls:
  7862 ;;		_SPI_ReadByte
  7863 ;;		_SPI_WriteByte
  7864 ;; This function is called by:
  7865 ;;		_SPI_notRDY
  7866 ;; This function uses a non-reentrant model
  7867 ;;
  7868                           
  7869                           
  7870                           ;psect for function _SPI_ReadStatus
  7871  1C57                     _SPI_ReadStatus:
  7872                           
  7873                           ;spi_flash.c: 58: PORTAbits.RA5 = 0;
  7874                           
  7875                           ;incstack = 0
  7876                           ; Regs used in _SPI_ReadStatus: [wreg+status,2+status,0+pclath+cstack]
  7877  1C57  1285               	bcf	5,5	;volatile
  7878                           
  7879                           ;spi_flash.c: 59: SPI_WriteByte(0x05);
  7880  1C58  3005               	movlw	5
  7881  1C59  160A  158A  2428  160A  158A  	fcall	_SPI_WriteByte
  7882                           
  7883                           ;spi_flash.c: 60: char status = SPI_ReadByte(0);
  7884  1C5E  3000               	movlw	0
  7885  1C5F  160A  158A  2437   	fcall	_SPI_ReadByte
  7886  1C62  00A2               	movwf	??_SPI_ReadStatus
  7887  1C63  0822               	movf	??_SPI_ReadStatus,w
  7888  1C64  00A3               	movwf	SPI_ReadStatus@status
  7889                           
  7890                           ;spi_flash.c: 61: PORTAbits.RA5 = 1;
  7891  1C65  1685               	bsf	5,5	;volatile
  7892                           
  7893                           ;spi_flash.c: 62: return status;
  7894  1C66  0823               	movf	SPI_ReadStatus@status,w
  7895  1C67  0008               	return
  7896  1C68                     __end_of_SPI_ReadStatus:
  7897                           
  7898                           	psect	text35
  7899  1C37                     __ptext35:	
  7900 ;; *************** function _SPI_ReadByte *****************
  7901 ;; Defined at:
  7902 ;;		line 28 in file "spi_flash.c"
  7903 ;; Parameters:    Size  Location     Type
  7904 ;;  data            1    wreg     unsigned char 
  7905 ;; Auto vars:     Size  Location     Type
  7906 ;;  data            1    1[BANK0 ] unsigned char 
  7907 ;; Return value:  Size  Location     Type
  7908 ;;                  1    wreg      unsigned char 
  7909 ;; Registers used:
  7910 ;;		wreg, status,2, status,0, pclath, cstack
  7911 ;; Tracked objects:
  7912 ;;		On entry : 300/100
  7913 ;;		On exit  : 300/0
  7914 ;;		Unchanged: 0/0
  7915 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7916 ;;      Params:         0       0       0       0       0
  7917 ;;      Locals:         0       1       0       0       0
  7918 ;;      Temps:          0       0       0       0       0
  7919 ;;      Totals:         0       1       0       0       0
  7920 ;;Total ram usage:        1 bytes
  7921 ;; Hardware stack levels used: 1
  7922 ;; Hardware stack levels required when called: 3
  7923 ;; This function calls:
  7924 ;;		_SPI_WriteByte
  7925 ;; This function is called by:
  7926 ;;		_SPI_Read
  7927 ;;		_SPI_ReadStatus
  7928 ;; This function uses a non-reentrant model
  7929 ;;
  7930                           
  7931                           
  7932                           ;psect for function _SPI_ReadByte
  7933  1C37                     _SPI_ReadByte:
  7934                           
  7935                           ;incstack = 0
  7936                           ; Regs used in _SPI_ReadByte: [wreg+status,2+status,0+pclath+cstack]
  7937                           ;SPI_ReadByte@data stored from wreg
  7938  1C37  1283               	bcf	3,5	;RP0=0, select bank0
  7939  1C38  00A1               	movwf	SPI_ReadByte@data
  7940                           
  7941                           ;spi_flash.c: 29: SPI_WriteByte(data);
  7942  1C39  0821               	movf	SPI_ReadByte@data,w
  7943  1C3A  160A  158A  2428   	fcall	_SPI_WriteByte
  7944                           
  7945                           ;spi_flash.c: 30: return SSPBUF;
  7946  1C3D  1283               	bcf	3,5	;RP0=0, select bank0
  7947  1C3E  0813               	movf	19,w	;volatile
  7948  1C3F  0008               	return
  7949  1C40                     __end_of_SPI_ReadByte:
  7950                           
  7951                           	psect	text36
  7952  1C28                     __ptext36:	
  7953 ;; *************** function _SPI_WriteByte *****************
  7954 ;; Defined at:
  7955 ;;		line 24 in file "spi_flash.c"
  7956 ;; Parameters:    Size  Location     Type
  7957 ;;  data            1    wreg     unsigned char 
  7958 ;; Auto vars:     Size  Location     Type
  7959 ;;  data            1    0[BANK0 ] unsigned char 
  7960 ;; Return value:  Size  Location     Type
  7961 ;;                  1    wreg      void 
  7962 ;; Registers used:
  7963 ;;		wreg
  7964 ;; Tracked objects:
  7965 ;;		On entry : 300/0
  7966 ;;		On exit  : 300/100
  7967 ;;		Unchanged: 0/0
  7968 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7969 ;;      Params:         0       0       0       0       0
  7970 ;;      Locals:         0       1       0       0       0
  7971 ;;      Temps:          0       0       0       0       0
  7972 ;;      Totals:         0       1       0       0       0
  7973 ;;Total ram usage:        1 bytes
  7974 ;; Hardware stack levels used: 1
  7975 ;; Hardware stack levels required when called: 2
  7976 ;; This function calls:
  7977 ;;		Nothing
  7978 ;; This function is called by:
  7979 ;;		_SPI_ReadByte
  7980 ;;		_SPI_Write
  7981 ;;		_SPI_Read
  7982 ;;		_SPI_ReadStatus
  7983 ;; This function uses a non-reentrant model
  7984 ;;
  7985                           
  7986                           
  7987                           ;psect for function _SPI_WriteByte
  7988  1C28                     _SPI_WriteByte:
  7989                           
  7990                           ;incstack = 0
  7991                           ; Regs used in _SPI_WriteByte: [wreg]
  7992                           ;SPI_WriteByte@data stored from wreg
  7993  1C28  00A0               	movwf	SPI_WriteByte@data
  7994                           
  7995                           ;spi_flash.c: 25: SSPBUF = data;
  7996  1C29  0820               	movf	SPI_WriteByte@data,w
  7997  1C2A  0093               	movwf	19	;volatile
  7998  1C2B                     l720:	
  7999                           ;spi_flash.c: 26: while(SSPSTATbits.BF == 0);
  8000                           
  8001  1C2B  1683               	bsf	3,5	;RP0=1, select bank1
  8002  1C2C  1814               	btfsc	20,0	;volatile
  8003  1C2D  0008               	return
  8004  1C2E  2C2B               	goto	l720
  8005  1C2F                     __end_of_SPI_WriteByte:
  8006                           
  8007                           	psect	text37
  8008  1339                     __ptext37:	
  8009 ;; *************** function _LCD_init *****************
  8010 ;; Defined at:
  8011 ;;		line 18 in file "lcd.c"
  8012 ;; Parameters:    Size  Location     Type
  8013 ;;		None
  8014 ;; Auto vars:     Size  Location     Type
  8015 ;;		None
  8016 ;; Return value:  Size  Location     Type
  8017 ;;                  1    wreg      void 
  8018 ;; Registers used:
  8019 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  8020 ;; Tracked objects:
  8021 ;;		On entry : 300/0
  8022 ;;		On exit  : 0/0
  8023 ;;		Unchanged: 0/0
  8024 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8025 ;;      Params:         0       0       0       0       0
  8026 ;;      Locals:         0       0       0       0       0
  8027 ;;      Temps:          0       2       0       0       0
  8028 ;;      Totals:         0       2       0       0       0
  8029 ;;Total ram usage:        2 bytes
  8030 ;; Hardware stack levels used: 1
  8031 ;; Hardware stack levels required when called: 6
  8032 ;; This function calls:
  8033 ;;		_LCD_clear
  8034 ;;		_sendbyte
  8035 ;;		_sendhalfbyte
  8036 ;; This function is called by:
  8037 ;;		_main
  8038 ;; This function uses a non-reentrant model
  8039 ;;
  8040                           
  8041                           
  8042                           ;psect for function _LCD_init
  8043  1339                     _LCD_init:
  8044                           
  8045                           ;lcd.c: 19: _delay((unsigned long)((50)*(8000000/4000.0)));
  8046                           
  8047                           ;incstack = 0
  8048                           ; Regs used in _LCD_init: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  8049  1339  3082               	movlw	130
  8050  133A  1283               	bcf	3,5	;RP0=0, select bank0
  8051  133B  1303               	bcf	3,6	;RP1=0, select bank0
  8052  133C  00AF               	movwf	??_LCD_init+1
  8053  133D  30DD               	movlw	221
  8054  133E  00AE               	movwf	??_LCD_init
  8055  133F                     u6467:
  8056  133F  0BAE               	decfsz	??_LCD_init,f
  8057  1340  2B3F               	goto	u6467
  8058  1341  0BAF               	decfsz	??_LCD_init+1,f
  8059  1342  2B3F               	goto	u6467
  8060                           
  8061                           ;lcd.c: 23: sendhalfbyte(0b00000011);
  8062  1343  3003               	movlw	3
  8063  1344  160A  158A  265C  160A  118A  	fcall	_sendhalfbyte
  8064                           
  8065                           ;lcd.c: 24: _delay((unsigned long)((4500)*(8000000/4000000.0)));
  8066  1349  300C               	movlw	12
  8067  134A  1283               	bcf	3,5	;RP0=0, select bank0
  8068  134B  1303               	bcf	3,6	;RP1=0, select bank0
  8069  134C  00AF               	movwf	??_LCD_init+1
  8070  134D  30AE               	movlw	174
  8071  134E  00AE               	movwf	??_LCD_init
  8072  134F                     u6477:
  8073  134F  0BAE               	decfsz	??_LCD_init,f
  8074  1350  2B4F               	goto	u6477
  8075  1351  0BAF               	decfsz	??_LCD_init+1,f
  8076  1352  2B4F               	goto	u6477
  8077  1353  0000               	nop
  8078                           
  8079                           ;lcd.c: 25: sendhalfbyte(0b00000011);
  8080  1354  3003               	movlw	3
  8081  1355  160A  158A  265C  160A  118A  	fcall	_sendhalfbyte
  8082                           
  8083                           ;lcd.c: 26: _delay((unsigned long)((200)*(8000000/4000000.0)));
  8084  135A  3084               	movlw	132
  8085  135B  1283               	bcf	3,5	;RP0=0, select bank0
  8086  135C  1303               	bcf	3,6	;RP1=0, select bank0
  8087  135D  00AE               	movwf	??_LCD_init
  8088  135E                     u6487:
  8089  135E  0BAE               	decfsz	??_LCD_init,f
  8090  135F  2B5E               	goto	u6487
  8091  1360  0000               	nop
  8092                           
  8093                           ;lcd.c: 27: sendhalfbyte(0b00000011);
  8094  1361  3003               	movlw	3
  8095  1362  160A  158A  265C  160A  118A  	fcall	_sendhalfbyte
  8096                           
  8097                           ;lcd.c: 28: _delay((unsigned long)((1)*(8000000/4000.0)));
  8098  1367  3003               	movlw	3
  8099  1368  1283               	bcf	3,5	;RP0=0, select bank0
  8100  1369  1303               	bcf	3,6	;RP1=0, select bank0
  8101  136A  00AF               	movwf	??_LCD_init+1
  8102  136B  3097               	movlw	151
  8103  136C  00AE               	movwf	??_LCD_init
  8104  136D                     u6497:
  8105  136D  0BAE               	decfsz	??_LCD_init,f
  8106  136E  2B6D               	goto	u6497
  8107  136F  0BAF               	decfsz	??_LCD_init+1,f
  8108  1370  2B6D               	goto	u6497
  8109                           
  8110                           ;lcd.c: 29: sendhalfbyte(0b00000010);
  8111  1371  3002               	movlw	2
  8112  1372  160A  158A  265C  160A  118A  	fcall	_sendhalfbyte
  8113                           
  8114                           ;lcd.c: 30: _delay((unsigned long)((1)*(8000000/4000.0)));
  8115  1377  3003               	movlw	3
  8116  1378  1283               	bcf	3,5	;RP0=0, select bank0
  8117  1379  1303               	bcf	3,6	;RP1=0, select bank0
  8118  137A  00AF               	movwf	??_LCD_init+1
  8119  137B  3097               	movlw	151
  8120  137C  00AE               	movwf	??_LCD_init
  8121  137D                     u6507:
  8122  137D  0BAE               	decfsz	??_LCD_init,f
  8123  137E  2B7D               	goto	u6507
  8124  137F  0BAF               	decfsz	??_LCD_init+1,f
  8125  1380  2B7D               	goto	u6507
  8126                           
  8127                           ;lcd.c: 33: sendbyte(0b00101000,0);
  8128  1381  1283               	bcf	3,5	;RP0=0, select bank0
  8129  1382  1303               	bcf	3,6	;RP1=0, select bank0
  8130  1383  01A8               	clrf	sendbyte@mode
  8131  1384  3028               	movlw	40
  8132  1385  160A  118A  21FC  160A  118A  	fcall	_sendbyte
  8133                           
  8134                           ;lcd.c: 34: _delay((unsigned long)((1)*(8000000/4000.0)));
  8135  138A  3003               	movlw	3
  8136  138B  1283               	bcf	3,5	;RP0=0, select bank0
  8137  138C  1303               	bcf	3,6	;RP1=0, select bank0
  8138  138D  00AF               	movwf	??_LCD_init+1
  8139  138E  3097               	movlw	151
  8140  138F  00AE               	movwf	??_LCD_init
  8141  1390                     u6517:
  8142  1390  0BAE               	decfsz	??_LCD_init,f
  8143  1391  2B90               	goto	u6517
  8144  1392  0BAF               	decfsz	??_LCD_init+1,f
  8145  1393  2B90               	goto	u6517
  8146                           
  8147                           ;lcd.c: 35: sendbyte(0b00001100,0);
  8148  1394  1283               	bcf	3,5	;RP0=0, select bank0
  8149  1395  1303               	bcf	3,6	;RP1=0, select bank0
  8150  1396  01A8               	clrf	sendbyte@mode
  8151  1397  300C               	movlw	12
  8152  1398  160A  118A  21FC  160A  118A  	fcall	_sendbyte
  8153                           
  8154                           ;lcd.c: 36: LCD_clear();
  8155  139D  160A  158A  248B  160A  118A  	fcall	_LCD_clear
  8156                           
  8157                           ;lcd.c: 37: sendbyte(0b00000110,0);
  8158  13A2  1283               	bcf	3,5	;RP0=0, select bank0
  8159  13A3  1303               	bcf	3,6	;RP1=0, select bank0
  8160  13A4  01A8               	clrf	sendbyte@mode
  8161  13A5  3006               	movlw	6
  8162  13A6  160A  118A  21FC  160A  118A  	fcall	_sendbyte
  8163                           
  8164                           ;lcd.c: 38: _delay((unsigned long)((1)*(8000000/4000.0)));
  8165  13AB  3003               	movlw	3
  8166  13AC  1283               	bcf	3,5	;RP0=0, select bank0
  8167  13AD  1303               	bcf	3,6	;RP1=0, select bank0
  8168  13AE  00AF               	movwf	??_LCD_init+1
  8169  13AF  3097               	movlw	151
  8170  13B0  00AE               	movwf	??_LCD_init
  8171  13B1                     u6527:
  8172  13B1  0BAE               	decfsz	??_LCD_init,f
  8173  13B2  2BB1               	goto	u6527
  8174  13B3  0BAF               	decfsz	??_LCD_init+1,f
  8175  13B4  2BB1               	goto	u6527
  8176  13B5  0008               	return
  8177  13B6                     __end_of_LCD_init:
  8178                           
  8179                           	psect	text38
  8180  1C8B                     __ptext38:	
  8181 ;; *************** function _LCD_clear *****************
  8182 ;; Defined at:
  8183 ;;		line 118 in file "lcd.c"
  8184 ;; Parameters:    Size  Location     Type
  8185 ;;		None
  8186 ;; Auto vars:     Size  Location     Type
  8187 ;;		None
  8188 ;; Return value:  Size  Location     Type
  8189 ;;                  1    wreg      void 
  8190 ;; Registers used:
  8191 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  8192 ;; Tracked objects:
  8193 ;;		On entry : 0/100
  8194 ;;		On exit  : 0/0
  8195 ;;		Unchanged: 0/0
  8196 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8197 ;;      Params:         0       0       0       0       0
  8198 ;;      Locals:         0       0       0       0       0
  8199 ;;      Temps:          0       2       0       0       0
  8200 ;;      Totals:         0       2       0       0       0
  8201 ;;Total ram usage:        2 bytes
  8202 ;; Hardware stack levels used: 1
  8203 ;; Hardware stack levels required when called: 5
  8204 ;; This function calls:
  8205 ;;		_sendbyte
  8206 ;; This function is called by:
  8207 ;;		_LCD_init
  8208 ;;		_fMenuStrip
  8209 ;; This function uses a non-reentrant model
  8210 ;;
  8211                           
  8212                           
  8213                           ;psect for function _LCD_clear
  8214  1C8B                     _LCD_clear:
  8215                           
  8216                           ;lcd.c: 119: sendbyte(0b00000001,0);
  8217                           
  8218                           ;incstack = 0
  8219                           ; Regs used in _LCD_clear: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  8220  1C8B  1283               	bcf	3,5	;RP0=0, select bank0
  8221  1C8C  1303               	bcf	3,6	;RP1=0, select bank0
  8222  1C8D  01A8               	clrf	sendbyte@mode
  8223  1C8E  3001               	movlw	1
  8224  1C8F  160A  118A  21FC  160A  158A  	fcall	_sendbyte
  8225                           
  8226                           ;lcd.c: 120: _delay((unsigned long)((1600)*(8000000/4000000.0)));
  8227  1C94  3005               	movlw	5
  8228  1C95  1283               	bcf	3,5	;RP0=0, select bank0
  8229  1C96  1303               	bcf	3,6	;RP1=0, select bank0
  8230  1C97  00AD               	movwf	??_LCD_clear+1
  8231  1C98  3025               	movlw	37
  8232  1C99  00AC               	movwf	??_LCD_clear
  8233  1C9A                     u6537:
  8234  1C9A  0BAC               	decfsz	??_LCD_clear,f
  8235  1C9B  2C9A               	goto	u6537
  8236  1C9C  0BAD               	decfsz	??_LCD_clear+1,f
  8237  1C9D  2C9A               	goto	u6537
  8238  1C9E  2C9F               	nop2
  8239  1C9F  0008               	return
  8240  1CA0                     __end_of_LCD_clear:
  8241                           
  8242                           	psect	text39
  8243  11FC                     __ptext39:	
  8244 ;; *************** function _sendbyte *****************
  8245 ;; Defined at:
  8246 ;;		line 69 in file "lcd.c"
  8247 ;; Parameters:    Size  Location     Type
  8248 ;;  c               1    wreg     unsigned char 
  8249 ;;  mode            1    8[BANK0 ] unsigned char 
  8250 ;; Auto vars:     Size  Location     Type
  8251 ;;  c               1   11[BANK0 ] unsigned char 
  8252 ;;  hb              1   10[BANK0 ] unsigned char 
  8253 ;; Return value:  Size  Location     Type
  8254 ;;                  1    wreg      void 
  8255 ;; Registers used:
  8256 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  8257 ;; Tracked objects:
  8258 ;;		On entry : 300/0
  8259 ;;		On exit  : 0/0
  8260 ;;		Unchanged: 0/0
  8261 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8262 ;;      Params:         0       1       0       0       0
  8263 ;;      Locals:         0       2       0       0       0
  8264 ;;      Temps:          0       1       0       0       0
  8265 ;;      Totals:         0       4       0       0       0
  8266 ;;Total ram usage:        4 bytes
  8267 ;; Hardware stack levels used: 1
  8268 ;; Hardware stack levels required when called: 4
  8269 ;; This function calls:
  8270 ;;		_sendhalfbyte
  8271 ;; This function is called by:
  8272 ;;		_LCD_init
  8273 ;;		_LCD_string
  8274 ;;		_LCD_SetPos
  8275 ;;		_LCD_clear
  8276 ;; This function uses a non-reentrant model
  8277 ;;
  8278                           
  8279                           
  8280                           ;psect for function _sendbyte
  8281  11FC                     _sendbyte:
  8282                           
  8283                           ;incstack = 0
  8284                           ; Regs used in _sendbyte: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  8285                           ;sendbyte@c stored from wreg
  8286  11FC  00AB               	movwf	sendbyte@c
  8287                           
  8288                           ;lcd.c: 71: hb = c;
  8289  11FD  082B               	movf	sendbyte@c,w
  8290  11FE  00A9               	movwf	??_sendbyte
  8291  11FF  0829               	movf	??_sendbyte,w
  8292  1200  00AA               	movwf	sendbyte@hb
  8293                           
  8294                           ;lcd.c: 72: hb &= ~0x0F;
  8295  1201  30F0               	movlw	240
  8296  1202  00A9               	movwf	??_sendbyte
  8297  1203  0829               	movf	??_sendbyte,w
  8298  1204  05AA               	andwf	sendbyte@hb,f
  8299                           
  8300                           ;lcd.c: 73: c <<= 4;
  8301  1205  0EAB               	swapf	sendbyte@c,f
  8302  1206  30F0               	movlw	240
  8303  1207  05AB               	andwf	sendbyte@c,f
  8304                           
  8305                           ;lcd.c: 75: if(mode != 0)
  8306  1208  0828               	movf	sendbyte@mode,w
  8307  1209  1903               	btfsc	3,2
  8308  120A  2A0D               	goto	l3423
  8309                           
  8310                           ;lcd.c: 81: {;lcd.c: 82: c |= 0x04;
  8311  120B  152B               	bsf	sendbyte@c,2
  8312                           
  8313                           ;lcd.c: 83: hb |= 0x04;
  8314  120C  152A               	bsf	sendbyte@hb,2
  8315  120D                     l3423:
  8316                           
  8317                           ;lcd.c: 84: };lcd.c: 85: sendhalfbyte(hb);
  8318  120D  082A               	movf	sendbyte@hb,w
  8319  120E  160A  158A  265C  160A  118A  	fcall	_sendhalfbyte
  8320                           
  8321                           ;lcd.c: 86: sendhalfbyte(c);
  8322  1213  1283               	bcf	3,5	;RP0=0, select bank0
  8323  1214  1303               	bcf	3,6	;RP1=0, select bank0
  8324  1215  082B               	movf	sendbyte@c,w
  8325  1216  160A  158A  265C   	fcall	_sendhalfbyte
  8326  1219  0008               	return
  8327  121A                     __end_of_sendbyte:
  8328                           
  8329                           	psect	text40
  8330  1E5C                     __ptext40:	
  8331 ;; *************** function _sendhalfbyte *****************
  8332 ;; Defined at:
  8333 ;;		line 45 in file "lcd.c"
  8334 ;; Parameters:    Size  Location     Type
  8335 ;;  c               1    wreg     unsigned char 
  8336 ;; Auto vars:     Size  Location     Type
  8337 ;;  c               1    7[BANK0 ] unsigned char 
  8338 ;; Return value:  Size  Location     Type
  8339 ;;                  1    wreg      void 
  8340 ;; Registers used:
  8341 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  8342 ;; Tracked objects:
  8343 ;;		On entry : 0/0
  8344 ;;		On exit  : 0/0
  8345 ;;		Unchanged: 0/0
  8346 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8347 ;;      Params:         0       0       0       0       0
  8348 ;;      Locals:         0       1       0       0       0
  8349 ;;      Temps:          0       1       0       0       0
  8350 ;;      Totals:         0       2       0       0       0
  8351 ;;Total ram usage:        2 bytes
  8352 ;; Hardware stack levels used: 1
  8353 ;; Hardware stack levels required when called: 3
  8354 ;; This function calls:
  8355 ;;		_fShiftData
  8356 ;; This function is called by:
  8357 ;;		_LCD_init
  8358 ;;		_sendbyte
  8359 ;; This function uses a non-reentrant model
  8360 ;;
  8361                           
  8362                           
  8363                           ;psect for function _sendhalfbyte
  8364  1E5C                     _sendhalfbyte:
  8365                           
  8366                           ;incstack = 0
  8367                           ; Regs used in _sendhalfbyte: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  8368                           ;sendhalfbyte@c stored from wreg
  8369  1E5C  1283               	bcf	3,5	;RP0=0, select bank0
  8370  1E5D  1303               	bcf	3,6	;RP1=0, select bank0
  8371  1E5E  00A7               	movwf	sendhalfbyte@c
  8372                           
  8373                           ;lcd.c: 50: fShiftData(0x00);
  8374  1E5F  3000               	movlw	0
  8375  1E60  160A  158A  26D4  160A  158A  	fcall	_fShiftData
  8376                           
  8377                           ;lcd.c: 51: _delay((unsigned long)((1)*(8000000/4000000.0)));
  8378  1E65  2E66               	nop2	;2 cycle nop
  8379                           
  8380                           ;lcd.c: 52: if(c & 0x01 || c & 0x02 || c & 0x03)
  8381  1E66  1283               	bcf	3,5	;RP0=0, select bank0
  8382  1E67  1303               	bcf	3,6	;RP1=0, select bank0
  8383  1E68  1C27               	btfss	sendhalfbyte@c,0
  8384  1E69  18A7               	btfsc	sendhalfbyte@c,1
  8385  1E6A  2E6F               	goto	l3357
  8386  1E6B  0827               	movf	sendhalfbyte@c,w
  8387  1E6C  3903               	andlw	3
  8388  1E6D  1903               	btfsc	3,2
  8389  1E6E  2E76               	goto	l3359
  8390  1E6F                     l3357:
  8391                           
  8392                           ;lcd.c: 53: c <<= 3;
  8393  1E6F  1003               	clrc
  8394  1E70  0DA7               	rlf	sendhalfbyte@c,f
  8395  1E71  1003               	clrc
  8396  1E72  0DA7               	rlf	sendhalfbyte@c,f
  8397  1E73  1003               	clrc
  8398  1E74  0DA7               	rlf	sendhalfbyte@c,f
  8399  1E75  2E78               	goto	l3361
  8400  1E76                     l3359:
  8401                           
  8402                           ;lcd.c: 54: else;lcd.c: 55: c >>= 1;
  8403  1E76  1003               	clrc
  8404  1E77  0CA7               	rrf	sendhalfbyte@c,f
  8405  1E78                     l3361:
  8406                           
  8407                           ;lcd.c: 59: c |= 0x04;
  8408  1E78  1527               	bsf	sendhalfbyte@c,2
  8409                           
  8410                           ;lcd.c: 60: fShiftData(c);
  8411  1E79  0827               	movf	sendhalfbyte@c,w
  8412  1E7A  160A  158A  26D4  160A  158A  	fcall	_fShiftData
  8413                           
  8414                           ;lcd.c: 62: _delay((unsigned long)((1)*(8000000/4000000.0)));
  8415  1E7F  2E80               	nop2	;2 cycle nop
  8416                           
  8417                           ;lcd.c: 63: c &= ~0x04;
  8418  1E80  30FB               	movlw	251
  8419  1E81  1283               	bcf	3,5	;RP0=0, select bank0
  8420  1E82  1303               	bcf	3,6	;RP1=0, select bank0
  8421  1E83  00A6               	movwf	??_sendhalfbyte
  8422  1E84  0826               	movf	??_sendhalfbyte,w
  8423  1E85  05A7               	andwf	sendhalfbyte@c,f
  8424                           
  8425                           ;lcd.c: 64: fShiftData(c);
  8426  1E86  0827               	movf	sendhalfbyte@c,w
  8427  1E87  160A  158A  26D4  160A  158A  	fcall	_fShiftData
  8428                           
  8429                           ;lcd.c: 66: _delay((unsigned long)((50)*(8000000/4000000.0)));
  8430  1E8C  3020               	movlw	32
  8431  1E8D  1283               	bcf	3,5	;RP0=0, select bank0
  8432  1E8E  1303               	bcf	3,6	;RP1=0, select bank0
  8433  1E8F  00A6               	movwf	??_sendhalfbyte
  8434  1E90                     u6547:
  8435  1E90  0BA6               	decfsz	??_sendhalfbyte,f
  8436  1E91  2E90               	goto	u6547
  8437  1E92  0000               	nop
  8438  1E93  0008               	return
  8439  1E94                     __end_of_sendhalfbyte:
  8440                           
  8441                           	psect	text41
  8442  1ED4                     __ptext41:	
  8443 ;; *************** function _fShiftData *****************
  8444 ;; Defined at:
  8445 ;;		line 3 in file "shift_registr.c"
  8446 ;; Parameters:    Size  Location     Type
  8447 ;;  shiftVar        1    wreg     unsigned char 
  8448 ;; Auto vars:     Size  Location     Type
  8449 ;;  shiftVar        1    2[BANK0 ] unsigned char 
  8450 ;;  i               1    5[BANK0 ] unsigned char 
  8451 ;;  shiftVariabl    2    3[BANK0 ] short 
  8452 ;; Return value:  Size  Location     Type
  8453 ;;                  1    wreg      void 
  8454 ;; Registers used:
  8455 ;;		wreg, status,2, status,0, btemp+1
  8456 ;; Tracked objects:
  8457 ;;		On entry : 0/0
  8458 ;;		On exit  : 300/0
  8459 ;;		Unchanged: 0/0
  8460 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8461 ;;      Params:         0       0       0       0       0
  8462 ;;      Locals:         0       4       0       0       0
  8463 ;;      Temps:          0       2       0       0       0
  8464 ;;      Totals:         0       6       0       0       0
  8465 ;;Total ram usage:        6 bytes
  8466 ;; Hardware stack levels used: 1
  8467 ;; Hardware stack levels required when called: 2
  8468 ;; This function calls:
  8469 ;;		Nothing
  8470 ;; This function is called by:
  8471 ;;		_main
  8472 ;;		_sendhalfbyte
  8473 ;; This function uses a non-reentrant model
  8474 ;;
  8475                           
  8476                           
  8477                           ;psect for function _fShiftData
  8478  1ED4                     _fShiftData:
  8479                           
  8480                           ;incstack = 0
  8481                           ; Regs used in _fShiftData: [wreg+status,2+status,0+btemp+1]
  8482                           ;fShiftData@shiftVar stored from wreg
  8483  1ED4  1283               	bcf	3,5	;RP0=0, select bank0
  8484  1ED5  1303               	bcf	3,6	;RP1=0, select bank0
  8485  1ED6  00A2               	movwf	fShiftData@shiftVar
  8486                           
  8487                           ;shift_registr.c: 5: shiftVariable = _tempPinDO;
  8488  1ED7  1683               	bsf	3,5	;RP0=1, select bank1
  8489  1ED8  0843               	movf	__tempPinDO^(0+128),w
  8490  1ED9  1283               	bcf	3,5	;RP0=0, select bank0
  8491  1EDA  00A0               	movwf	??_fShiftData
  8492  1EDB  01A1               	clrf	??_fShiftData+1
  8493  1EDC  0820               	movf	??_fShiftData,w
  8494  1EDD  00A3               	movwf	fShiftData@shiftVariable
  8495  1EDE  0821               	movf	??_fShiftData+1,w
  8496  1EDF  00A4               	movwf	fShiftData@shiftVariable+1
  8497                           
  8498                           ;shift_registr.c: 6: shiftVariable <<= 8;
  8499  1EE0  3008               	movlw	8
  8500  1EE1                     u3215:
  8501  1EE1  1003               	clrc
  8502  1EE2  0DA3               	rlf	fShiftData@shiftVariable,f
  8503  1EE3  0DA4               	rlf	fShiftData@shiftVariable+1,f
  8504  1EE4  3EFF               	addlw	-1
  8505  1EE5  1D03               	skipz
  8506  1EE6  2EE1               	goto	u3215
  8507                           
  8508                           ;shift_registr.c: 7: shiftVariable |= shiftVar;
  8509  1EE7  0822               	movf	fShiftData@shiftVar,w
  8510  1EE8  00A0               	movwf	??_fShiftData
  8511  1EE9  01A1               	clrf	??_fShiftData+1
  8512  1EEA  0820               	movf	??_fShiftData,w
  8513  1EEB  04A3               	iorwf	fShiftData@shiftVariable,f
  8514  1EEC  0821               	movf	??_fShiftData+1,w
  8515  1EED  04A4               	iorwf	fShiftData@shiftVariable+1,f
  8516                           
  8517                           ;shift_registr.c: 8: for(char i = 0; i < 16; i++)
  8518  1EEE  01A5               	clrf	fShiftData@i
  8519  1EEF                     l683:
  8520                           
  8521                           ;shift_registr.c: 9: {;shift_registr.c: 10: if(shiftVariable & 0x0001)
  8522  1EEF  1C23               	btfss	fShiftData@shiftVariable,0
  8523  1EF0  2EF3               	goto	l685
  8524                           
  8525                           ;shift_registr.c: 11: PORTBbits.RB1 = 1;
  8526  1EF1  1486               	bsf	6,1	;volatile
  8527  1EF2  2EF4               	goto	l686
  8528  1EF3                     l685:
  8529                           
  8530                           ;shift_registr.c: 12: else;shift_registr.c: 13: PORTBbits.RB1 = 0;
  8531  1EF3  1086               	bcf	6,1	;volatile
  8532  1EF4                     l686:
  8533                           
  8534                           ;shift_registr.c: 14: _delay((unsigned long)((3)*(8000000/4000000.0)));
  8535  1EF4  2EF5               	nop2	;2 cycle nop
  8536  1EF5  2EF6               	nop2	;2 cycle nop
  8537  1EF6  2EF7               	nop2	;2 cycle nop
  8538                           
  8539                           ;shift_registr.c: 16: shiftVariable >>= 1;
  8540  1EF7  3001               	movlw	1
  8541  1EF8  00FF               	movwf	127
  8542  1EF9                     u3235:
  8543  1EF9  1283               	bcf	3,5	;RP0=0, select bank0
  8544  1EFA  1303               	bcf	3,6	;RP1=0, select bank0
  8545  1EFB  0D24               	rlf	fShiftData@shiftVariable+1,w
  8546  1EFC  0CA4               	rrf	fShiftData@shiftVariable+1,f
  8547  1EFD  0CA3               	rrf	fShiftData@shiftVariable,f
  8548  1EFE  0BFF               	decfsz	127,f
  8549  1EFF  2EF9               	goto	u3235
  8550                           
  8551                           ;shift_registr.c: 17: PORTBbits.RB2 = 1;
  8552  1F00  1506               	bsf	6,2	;volatile
  8553                           
  8554                           ;shift_registr.c: 18: _delay((unsigned long)((3)*(8000000/4000000.0)));
  8555  1F01  2F02               	nop2	;2 cycle nop
  8556  1F02  2F03               	nop2	;2 cycle nop
  8557  1F03  2F04               	nop2	;2 cycle nop
  8558                           
  8559                           ;shift_registr.c: 20: PORTBbits.RB2 = 0;
  8560  1F04  1283               	bcf	3,5	;RP0=0, select bank0
  8561  1F05  1303               	bcf	3,6	;RP1=0, select bank0
  8562  1F06  1106               	bcf	6,2	;volatile
  8563  1F07  3001               	movlw	1
  8564  1F08  00A0               	movwf	??_fShiftData
  8565  1F09  0820               	movf	??_fShiftData,w
  8566  1F0A  07A5               	addwf	fShiftData@i,f
  8567  1F0B  3010               	movlw	16
  8568  1F0C  0225               	subwf	fShiftData@i,w
  8569  1F0D  1C03               	skipc
  8570  1F0E  2EEF               	goto	l683
  8571                           
  8572                           ;shift_registr.c: 21: };shift_registr.c: 22: PORTBbits.RB0 = 1;
  8573  1F0F  1406               	bsf	6,0	;volatile
  8574                           
  8575                           ;shift_registr.c: 23: _delay((unsigned long)((3)*(8000000/4000000.0)));
  8576  1F10  2F11               	nop2	;2 cycle nop
  8577  1F11  2F12               	nop2	;2 cycle nop
  8578  1F12  2F13               	nop2	;2 cycle nop
  8579                           
  8580                           ;shift_registr.c: 25: PORTBbits.RB0 = 0;
  8581  1F13  1283               	bcf	3,5	;RP0=0, select bank0
  8582  1F14  1303               	bcf	3,6	;RP1=0, select bank0
  8583  1F15  1006               	bcf	6,0	;volatile
  8584  1F16  0008               	return
  8585  1F17                     __end_of_fShiftData:
  8586                           
  8587                           	psect	text42
  8588  169F                     __ptext42:	
  8589 ;; *************** function _linkup *****************
  8590 ;; Defined at:
  8591 ;;		line 10 in file "newmain.c"
  8592 ;; Parameters:    Size  Location     Type
  8593 ;;		None
  8594 ;; Auto vars:     Size  Location     Type
  8595 ;;		None
  8596 ;; Return value:  Size  Location     Type
  8597 ;;                  1    wreg      void 
  8598 ;; Registers used:
  8599 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8600 ;; Tracked objects:
  8601 ;;		On entry : 0/0
  8602 ;;		On exit  : 200/0
  8603 ;;		Unchanged: 0/0
  8604 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8605 ;;      Params:         0       0       0       0       0
  8606 ;;      Locals:         0       0       0       0       0
  8607 ;;      Temps:          4       0       0       0       0
  8608 ;;      Totals:         4       0       0       0       0
  8609 ;;Total ram usage:        4 bytes
  8610 ;; Hardware stack levels used: 1
  8611 ;; Hardware stack levels required when called: 1
  8612 ;; This function calls:
  8613 ;;		_fInterruptRecieveDevice
  8614 ;;		i1___lwmod
  8615 ;; This function is called by:
  8616 ;;		Interrupt level 1
  8617 ;; This function uses a non-reentrant model
  8618 ;;
  8619                           
  8620                           
  8621                           ;psect for function _linkup
  8622  169F                     _linkup:
  8623                           
  8624                           ;newmain.c: 11: if(INTCONbits.RBIE && INTCONbits.RBIF){
  8625  169F  198B               	btfsc	11,3	;volatile
  8626  16A0  1C0B               	btfss	11,0	;volatile
  8627  16A1  2EA8               	goto	i1l4895
  8628                           
  8629                           ;newmain.c: 12: fInterruptRecieveDevice();
  8630  16A2  160A  118A  25F3  160A  118A  	fcall	_fInterruptRecieveDevice
  8631                           
  8632                           ;newmain.c: 13: INTCONbits.RBIF = 0;
  8633  16A7  100B               	bcf	11,0	;volatile
  8634  16A8                     i1l4895:
  8635                           
  8636                           ;newmain.c: 14: };newmain.c: 15: if(INTCONbits.T0IE && INTCONbits.T0IF){
  8637  16A8  1A8B               	btfsc	11,5	;volatile
  8638  16A9  1D0B               	btfss	11,2	;volatile
  8639  16AA  2EC3               	goto	i1l4919
  8640                           
  8641                           ;newmain.c: 16: TMR0 = TMR0_Value;
  8642  16AB  1683               	bsf	3,5	;RP0=1, select bank1
  8643  16AC  1303               	bcf	3,6	;RP1=0, select bank1
  8644  16AD  0842               	movf	_TMR0_Value^(0+128),w
  8645  16AE  1283               	bcf	3,5	;RP0=0, select bank0
  8646  16AF  0081               	movwf	1	;volatile
  8647                           
  8648                           ;newmain.c: 17: if(cTMR0 == 3){
  8649  16B0  3003               	movlw	3
  8650  16B1  1683               	bsf	3,5	;RP0=1, select bank1
  8651  16B2  0641               	xorwf	_cTMR0^(0+128),w
  8652  16B3  1D03               	btfss	3,2
  8653  16B4  2EBD               	goto	i1l4915
  8654                           
  8655                           ;newmain.c: 19: cTMR0 = 0;
  8656  16B5  01C1               	clrf	_cTMR0^(0+128)
  8657                           
  8658                           ;newmain.c: 20: flModeStep = 0;
  8659  16B6  01FD               	clrf	_flModeStep
  8660                           
  8661                           ;newmain.c: 21: flStartBitRecieve = 0;
  8662  16B7  127A               	bcf	_flStartBitRecieve/(0+8),_flStartBitRecieve& (0+7)
  8663                           
  8664                           ;newmain.c: 22: flStopBitRecieve = 0;
  8665  16B8  11FA               	bcf	_flStopBitRecieve/(0+8),_flStopBitRecieve& (0+7)
  8666                           
  8667                           ;newmain.c: 23: flDO1 = 0;
  8668  16B9  12FA               	bcf	_flDO1/(0+8),_flDO1& (0+7)
  8669                           
  8670                           ;newmain.c: 24: T1CONbits.TMR1ON = 0;
  8671  16BA  1283               	bcf	3,5	;RP0=0, select bank0
  8672  16BB  1010               	bcf	16,0	;volatile
  8673                           
  8674                           ;newmain.c: 25: INTCONbits.T0IE = 0;
  8675  16BC  128B               	bcf	11,5	;volatile
  8676  16BD                     i1l4915:
  8677                           
  8678                           ;newmain.c: 26: };newmain.c: 27: INTCONbits.T0IF = 0;
  8679  16BD  110B               	bcf	11,2	;volatile
  8680                           
  8681                           ;newmain.c: 28: cTMR0++;
  8682  16BE  3001               	movlw	1
  8683  16BF  00F6               	movwf	??_linkup
  8684  16C0  0876               	movf	??_linkup,w
  8685  16C1  1683               	bsf	3,5	;RP0=1, select bank1
  8686  16C2  07C1               	addwf	_cTMR0^(0+128),f
  8687  16C3                     i1l4919:
  8688                           
  8689                           ;newmain.c: 29: };newmain.c: 30: if(PIE1bits.TMR1IE && PIR1bits.TMR1IF){
  8690  16C3  1683               	bsf	3,5	;RP0=1, select bank1
  8691  16C4  1303               	bcf	3,6	;RP1=0, select bank1
  8692  16C5  1C0C               	btfss	12,0	;volatile
  8693  16C6  2ECC               	goto	i1l146
  8694  16C7  1283               	bcf	3,5	;RP0=0, select bank0
  8695  16C8  1C0C               	btfss	12,0	;volatile
  8696  16C9  2ECC               	goto	i1l146
  8697                           
  8698                           ;newmain.c: 31: T1CONbits.TMR1ON = 0;
  8699  16CA  1010               	bcf	16,0	;volatile
  8700                           
  8701                           ;newmain.c: 32: PIR1bits.TMR1IF = 0;
  8702  16CB  100C               	bcf	12,0	;volatile
  8703  16CC                     i1l146:
  8704                           
  8705                           ;newmain.c: 33: };newmain.c: 34: if(PIE1bits.TMR2IE && PIR1bits.TMR2IF){
  8706  16CC  1683               	bsf	3,5	;RP0=1, select bank1
  8707  16CD  1C8C               	btfss	12,1	;volatile
  8708  16CE  2F0A               	goto	i1l4949
  8709  16CF  1283               	bcf	3,5	;RP0=0, select bank0
  8710  16D0  1C8C               	btfss	12,1	;volatile
  8711  16D1  2F0A               	goto	i1l4949
  8712                           
  8713                           ;newmain.c: 35: _countTMR2trigger++;
  8714  16D2  3001               	movlw	1
  8715  16D3  00F6               	movwf	??_linkup
  8716  16D4  0876               	movf	??_linkup,w
  8717  16D5  1683               	bsf	3,5	;RP0=1, select bank1
  8718  16D6  07C5               	addwf	__countTMR2trigger^(0+128),f
  8719                           
  8720                           ;newmain.c: 38: if(_countTMR2trigger >= 28) {
  8721  16D7  301C               	movlw	28
  8722  16D8  0245               	subwf	__countTMR2trigger^(0+128),w
  8723  16D9  1C03               	skipc
  8724  16DA  2F08               	goto	i1l4947
  8725                           
  8726                           ;newmain.c: 39: _countSecond++;
  8727  16DB  3001               	movlw	1
  8728  16DC  07B6               	addwf	__countSecond^(0+128),f
  8729  16DD  1803               	skipnc
  8730  16DE  0AB7               	incf	(__countSecond+1)^(0+128),f
  8731  16DF  3000               	movlw	0
  8732  16E0  07B7               	addwf	(__countSecond+1)^(0+128),f
  8733                           
  8734                           ;newmain.c: 40: _countTMR2trigger = 0;
  8735  16E1  01C5               	clrf	__countTMR2trigger^(0+128)
  8736                           
  8737                           ;newmain.c: 42: _second = 1;
  8738  16E2  17FA               	bsf	__second/(0+8),__second& (0+7)
  8739                           
  8740                           ;newmain.c: 43: if((_countSecond % 60) == 0)
  8741  16E3  303C               	movlw	60
  8742  16E4  00F0               	movwf	i1___lwmod@divisor
  8743  16E5  3000               	movlw	0
  8744  16E6  00F1               	movwf	i1___lwmod@divisor+1
  8745  16E7  0837               	movf	(__countSecond+1)^(0+128),w
  8746  16E8  00F3               	movwf	i1___lwmod@dividend+1
  8747  16E9  0836               	movf	__countSecond^(0+128),w
  8748  16EA  00F2               	movwf	i1___lwmod@dividend
  8749  16EB  160A  158A  25F8  160A  118A  	fcall	i1___lwmod
  8750  16F0  0870               	movf	?i1___lwmod,w
  8751  16F1  0471               	iorwf	?i1___lwmod+1,w
  8752  16F2  1903               	btfsc	3,2
  8753                           
  8754                           ;newmain.c: 44: _minute = 1;
  8755  16F3  177A               	bsf	__minute/(0+8),__minute& (0+7)
  8756                           
  8757                           ;newmain.c: 45: if((_countSecond % 3600) == 0){
  8758  16F4  3010               	movlw	16
  8759  16F5  00F0               	movwf	i1___lwmod@divisor
  8760  16F6  300E               	movlw	14
  8761  16F7  00F1               	movwf	i1___lwmod@divisor+1
  8762  16F8  0837               	movf	(__countSecond+1)^(0+128),w
  8763  16F9  00F3               	movwf	i1___lwmod@dividend+1
  8764  16FA  0836               	movf	__countSecond^(0+128),w
  8765  16FB  00F2               	movwf	i1___lwmod@dividend
  8766  16FC  160A  158A  25F8  160A  118A  	fcall	i1___lwmod
  8767  1701  0870               	movf	?i1___lwmod,w
  8768  1702  0471               	iorwf	?i1___lwmod+1,w
  8769  1703  1D03               	btfss	3,2
  8770  1704  2F08               	goto	i1l4947
  8771                           
  8772                           ;newmain.c: 46: _hour = 1;
  8773  1705  146A               	bsf	(__hour/(0+8))^(0+128),__hour& (0+7)
  8774                           
  8775                           ;newmain.c: 47: _countSecond = 0;
  8776  1706  01B6               	clrf	__countSecond^(0+128)
  8777  1707  01B7               	clrf	(__countSecond+1)^(0+128)
  8778  1708                     i1l4947:
  8779                           
  8780                           ;newmain.c: 48: };newmain.c: 49: };newmain.c: 51: PIR1bits.TMR2IF = 0;
  8781  1708  1283               	bcf	3,5	;RP0=0, select bank0
  8782  1709  108C               	bcf	12,1	;volatile
  8783  170A                     i1l4949:
  8784                           
  8785                           ;newmain.c: 52: };newmain.c: 53: if(PIE1bits.ADIE && PIR1bits.ADIF){
  8786  170A  1683               	bsf	3,5	;RP0=1, select bank1
  8787  170B  1F0C               	btfss	12,6	;volatile
  8788  170C  2F45               	goto	i1l161
  8789  170D  1283               	bcf	3,5	;RP0=0, select bank0
  8790  170E  1F0C               	btfss	12,6	;volatile
  8791  170F  2F45               	goto	i1l161
  8792                           
  8793                           ;newmain.c: 54: if(Analog.AI0 >= 35 && Analog.AI0 <= 45) flMenuStrip = 0x01;
  8794  1710  3023               	movlw	35
  8795  1711  1683               	bsf	3,5	;RP0=1, select bank1
  8796  1712  0224               	subwf	_Analog^(0+128),w
  8797  1713  1C03               	skipc
  8798  1714  2F1C               	goto	i1l4959
  8799  1715  302E               	movlw	46
  8800  1716  0224               	subwf	_Analog^(0+128),w
  8801  1717  1803               	skipnc
  8802  1718  2F1C               	goto	i1l4959
  8803  1719  01BE               	clrf	_flMenuStrip^(0+128)
  8804  171A  0ABE               	incf	_flMenuStrip^(0+128),f
  8805  171B  2F43               	goto	i1l4983
  8806  171C                     i1l4959:
  8807                           
  8808                           ;newmain.c: 55: else if(Analog.AI0 >= 85 && Analog.AI0 <= 105) flMenuStrip = 0x02;
  8809  171C  3055               	movlw	85
  8810  171D  0224               	subwf	_Analog^(0+128),w
  8811  171E  1C03               	skipc
  8812  171F  2F26               	goto	i1l4965
  8813  1720  306A               	movlw	106
  8814  1721  0224               	subwf	_Analog^(0+128),w
  8815  1722  1803               	skipnc
  8816  1723  2F26               	goto	i1l4965
  8817  1724  3002               	movlw	2
  8818  1725  2F39               	goto	L26
  8819  1726                     i1l4965:
  8820                           
  8821                           ;newmain.c: 56: else if(Analog.AI0 >= 130 && Analog.AI0 <= 155) flMenuStrip = 0x04;
  8822  1726  3082               	movlw	130
  8823  1727  0224               	subwf	_Analog^(0+128),w
  8824  1728  1C03               	skipc
  8825  1729  2F30               	goto	i1l4971
  8826  172A  309C               	movlw	156
  8827  172B  0224               	subwf	_Analog^(0+128),w
  8828  172C  1803               	skipnc
  8829  172D  2F30               	goto	i1l4971
  8830  172E  3004               	movlw	4
  8831  172F  2F39               	goto	L26
  8832  1730                     i1l4971:
  8833                           
  8834                           ;newmain.c: 57: else if(Analog.AI0 >= 190 && Analog.AI0 <= 210) flMenuStrip = 0x08;
  8835  1730  30BE               	movlw	190
  8836  1731  0224               	subwf	_Analog^(0+128),w
  8837  1732  1C03               	skipc
  8838  1733  2F3D               	goto	i1l4977
  8839  1734  30D3               	movlw	211
  8840  1735  0224               	subwf	_Analog^(0+128),w
  8841  1736  1803               	skipnc
  8842  1737  2F3D               	goto	i1l4977
  8843  1738  3008               	movlw	8
  8844  1739                     L26:
  8845  1739  00F6               	movwf	??_linkup
  8846  173A  0876               	movf	??_linkup,w
  8847  173B  00BE               	movwf	_flMenuStrip^(0+128)
  8848  173C  2F43               	goto	i1l4983
  8849  173D                     i1l4977:
  8850                           
  8851                           ;newmain.c: 58: else if (Analog.AI0 >= 230) { flMenuStrip = 0; flSwitchButton = 0; }
  8852  173D  30E6               	movlw	230
  8853  173E  0224               	subwf	_Analog^(0+128),w
  8854  173F  1C03               	skipc
  8855  1740  2F43               	goto	i1l4983
  8856  1741  01BE               	clrf	_flMenuStrip^(0+128)
  8857  1742  107A               	bcf	_flSwitchButton/(0+8),_flSwitchButton& (0+7)
  8858  1743                     i1l4983:
  8859                           
  8860                           ;newmain.c: 59: PIR1bits.ADIF = 0;
  8861  1743  1283               	bcf	3,5	;RP0=0, select bank0
  8862  1744  130C               	bcf	12,6	;volatile
  8863  1745                     i1l161:
  8864  1745  0879               	movf	??_linkup+3,w
  8865  1746  008A               	movwf	10
  8866  1747  0878               	movf	??_linkup+2,w
  8867  1748  0084               	movwf	4
  8868  1749  0E77               	swapf	??_linkup+1,w
  8869  174A  0083               	movwf	3
  8870  174B  0EFE               	swapf	126,f
  8871  174C  0E7E               	swapf	126,w
  8872  174D  0009               	retfie
  8873  174E                     __end_of_linkup:
  8874                           
  8875                           	psect	intentry
  8876  0004                     __pintentry:	
  8877                           ;incstack = 0
  8878                           ; Regs used in _linkup: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8879                           
  8880  0004                     interrupt_function:
  8881  007E                     saved_w	set	btemp
  8882  0004  00FE               	movwf	btemp
  8883  0005  0E03               	swapf	3,w
  8884  0006  00F7               	movwf	??_linkup+1
  8885  0007  0804               	movf	4,w
  8886  0008  00F8               	movwf	??_linkup+2
  8887  0009  080A               	movf	10,w
  8888  000A  00F9               	movwf	??_linkup+3
  8889  000B  160A  118A  2E9F   	ljmp	_linkup
  8890                           
  8891                           	psect	text43
  8892  1DF8                     __ptext43:	
  8893 ;; *************** function i1___lwmod *****************
  8894 ;; Defined at:
  8895 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\lwmod.c"
  8896 ;; Parameters:    Size  Location     Type
  8897 ;;  divisor         2    0[COMMON] unsigned int 
  8898 ;;  dividend        2    2[COMMON] unsigned int 
  8899 ;; Auto vars:     Size  Location     Type
  8900 ;;  counter         1    5[COMMON] unsigned char 
  8901 ;; Return value:  Size  Location     Type
  8902 ;;                  2    0[COMMON] unsigned int 
  8903 ;; Registers used:
  8904 ;;		wreg, status,2, status,0
  8905 ;; Tracked objects:
  8906 ;;		On entry : 300/100
  8907 ;;		On exit  : 300/100
  8908 ;;		Unchanged: 300/0
  8909 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8910 ;;      Params:         4       0       0       0       0
  8911 ;;      Locals:         1       0       0       0       0
  8912 ;;      Temps:          1       0       0       0       0
  8913 ;;      Totals:         6       0       0       0       0
  8914 ;;Total ram usage:        6 bytes
  8915 ;; Hardware stack levels used: 1
  8916 ;; This function calls:
  8917 ;;		Nothing
  8918 ;; This function is called by:
  8919 ;;		_linkup
  8920 ;; This function uses a non-reentrant model
  8921 ;;
  8922                           
  8923                           
  8924                           ;psect for function i1___lwmod
  8925  1DF8                     i1___lwmod:
  8926                           
  8927                           ;incstack = 0
  8928                           ; Regs used in i1___lwmod: [wreg+status,2+status,0]
  8929  1DF8  0870               	movf	i1___lwmod@divisor,w
  8930  1DF9  0471               	iorwf	i1___lwmod@divisor+1,w
  8931  1DFA  1903               	btfsc	3,2
  8932  1DFB  2E25               	goto	i1l4883
  8933  1DFC  01F5               	clrf	i1___lwmod@counter
  8934  1DFD  0AF5               	incf	i1___lwmod@counter,f
  8935  1DFE                     i1l4873:
  8936  1DFE  1BF1               	btfsc	i1___lwmod@divisor+1,7
  8937  1DFF  2E0C               	goto	i1l4875
  8938  1E00  3001               	movlw	1
  8939  1E01                     u572_25:
  8940  1E01  1003               	clrc
  8941  1E02  0DF0               	rlf	i1___lwmod@divisor,f
  8942  1E03  0DF1               	rlf	i1___lwmod@divisor+1,f
  8943  1E04  3EFF               	addlw	-1
  8944  1E05  1D03               	skipz
  8945  1E06  2E01               	goto	u572_25
  8946  1E07  3001               	movlw	1
  8947  1E08  00F4               	movwf	??i1___lwmod
  8948  1E09  0874               	movf	??i1___lwmod,w
  8949  1E0A  07F5               	addwf	i1___lwmod@counter,f
  8950  1E0B  2DFE               	goto	i1l4873
  8951  1E0C                     i1l4875:
  8952  1E0C  0871               	movf	i1___lwmod@divisor+1,w
  8953  1E0D  0273               	subwf	i1___lwmod@dividend+1,w
  8954  1E0E  1D03               	skipz
  8955  1E0F  2E12               	goto	u574_25
  8956  1E10  0870               	movf	i1___lwmod@divisor,w
  8957  1E11  0272               	subwf	i1___lwmod@dividend,w
  8958  1E12                     u574_25:
  8959  1E12  1C03               	skipc
  8960  1E13  2E1A               	goto	i1l4879
  8961  1E14  0870               	movf	i1___lwmod@divisor,w
  8962  1E15  02F2               	subwf	i1___lwmod@dividend,f
  8963  1E16  0871               	movf	i1___lwmod@divisor+1,w
  8964  1E17  1C03               	skipc
  8965  1E18  03F3               	decf	i1___lwmod@dividend+1,f
  8966  1E19  02F3               	subwf	i1___lwmod@dividend+1,f
  8967  1E1A                     i1l4879:
  8968  1E1A  3001               	movlw	1
  8969  1E1B                     u575_25:
  8970  1E1B  1003               	clrc
  8971  1E1C  0CF1               	rrf	i1___lwmod@divisor+1,f
  8972  1E1D  0CF0               	rrf	i1___lwmod@divisor,f
  8973  1E1E  3EFF               	addlw	-1
  8974  1E1F  1D03               	skipz
  8975  1E20  2E1B               	goto	u575_25
  8976  1E21  3001               	movlw	1
  8977  1E22  02F5               	subwf	i1___lwmod@counter,f
  8978  1E23  1D03               	btfss	3,2
  8979  1E24  2E0C               	goto	i1l4875
  8980  1E25                     i1l4883:
  8981  1E25  0873               	movf	i1___lwmod@dividend+1,w
  8982  1E26  00F1               	movwf	?i1___lwmod+1
  8983  1E27  0872               	movf	i1___lwmod@dividend,w
  8984  1E28  00F0               	movwf	?i1___lwmod
  8985  1E29  0008               	return
  8986  1E2A                     __end_ofi1___lwmod:
  8987                           
  8988                           	psect	text44
  8989  15F3                     __ptext44:	
  8990 ;; *************** function _fInterruptRecieveDevice *****************
  8991 ;; Defined at:
  8992 ;;		line 95 in file "Bb_device.c"
  8993 ;; Parameters:    Size  Location     Type
  8994 ;;		None
  8995 ;; Auto vars:     Size  Location     Type
  8996 ;;		None
  8997 ;; Return value:  Size  Location     Type
  8998 ;;                  1    wreg      void 
  8999 ;; Registers used:
  9000 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  9001 ;; Tracked objects:
  9002 ;;		On entry : 0/0
  9003 ;;		On exit  : 0/0
  9004 ;;		Unchanged: 0/0
  9005 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  9006 ;;      Params:         0       0       0       0       0
  9007 ;;      Locals:         0       0       0       0       0
  9008 ;;      Temps:          2       0       0       0       0
  9009 ;;      Totals:         2       0       0       0       0
  9010 ;;Total ram usage:        2 bytes
  9011 ;; Hardware stack levels used: 1
  9012 ;; This function calls:
  9013 ;;		Nothing
  9014 ;; This function is called by:
  9015 ;;		_linkup
  9016 ;; This function uses a non-reentrant model
  9017 ;;
  9018                           
  9019                           
  9020                           ;psect for function _fInterruptRecieveDevice
  9021  15F3                     _fInterruptRecieveDevice:
  9022                           
  9023                           ;Bb_device.c: 99: if(PORTBbits.RB7 == 1 && flModeStep == 0 && flStartBitRecieve == 0){
  9024                           
  9025                           ;incstack = 0
  9026                           ; Regs used in _fInterruptRecieveDevice: [wreg-fsr0h+status,2+status,0]
  9027  15F3  1283               	bcf	3,5	;RP0=0, select bank0
  9028  15F4  1303               	bcf	3,6	;RP1=0, select bank0
  9029  15F5  1F86               	btfss	6,7	;volatile
  9030  15F6  2E08               	goto	i1l439
  9031  15F7  087D               	movf	_flModeStep,w
  9032  15F8  1903               	btfsc	3,2
  9033  15F9  1A7A               	btfsc	_flStartBitRecieve/(0+8),_flStartBitRecieve& (0+7)
  9034  15FA  2E08               	goto	i1l439
  9035                           
  9036                           ;Bb_device.c: 100: TMR0 = TMR0_Value;
  9037  15FB  1683               	bsf	3,5	;RP0=1, select bank1
  9038  15FC  0842               	movf	_TMR0_Value^(0+128),w
  9039  15FD  1283               	bcf	3,5	;RP0=0, select bank0
  9040  15FE  0081               	movwf	1	;volatile
  9041                           
  9042                           ;Bb_device.c: 101: INTCONbits.T0IF = 0;
  9043  15FF  110B               	bcf	11,2	;volatile
  9044                           
  9045                           ;Bb_device.c: 102: INTCONbits.T0IE = 1;
  9046  1600  168B               	bsf	11,5	;volatile
  9047                           
  9048                           ;Bb_device.c: 103: TMR1H = 0x00;
  9049  1601  018F               	clrf	15	;volatile
  9050                           
  9051                           ;Bb_device.c: 104: TMR1L = 0x00;
  9052  1602  018E               	clrf	14	;volatile
  9053                           
  9054                           ;Bb_device.c: 105: flStartBitRecieve = 1;
  9055  1603  167A               	bsf	_flStartBitRecieve/(0+8),_flStartBitRecieve& (0+7)
  9056                           
  9057                           ;Bb_device.c: 106: flModeStep = 1;
  9058  1604  01FD               	clrf	_flModeStep
  9059  1605  0AFD               	incf	_flModeStep,f
  9060                           
  9061                           ;Bb_device.c: 107: T1CONbits.TMR1ON = 1;
  9062  1606  1410               	bsf	16,0	;volatile
  9063                           
  9064                           ;Bb_device.c: 110: }
  9065  1607  0008               	return
  9066  1608                     i1l439:
  9067                           
  9068                           ;Bb_device.c: 111: else if(PORTBbits.RB7 == 0 && flModeStep == 1 && flStartBitRecieve ==
      +                           1){
  9069  1608  1B86               	btfsc	6,7	;volatile
  9070  1609  2E22               	goto	i1l441
  9071  160A  037D               	decf	_flModeStep,w
  9072  160B  1903               	btfsc	3,2
  9073  160C  1E7A               	btfss	_flStartBitRecieve/(0+8),_flStartBitRecieve& (0+7)
  9074  160D  2E22               	goto	i1l441
  9075                           
  9076                           ;Bb_device.c: 112: T1CONbits.TMR1ON = 0;
  9077  160E  1010               	bcf	16,0	;volatile
  9078                           
  9079                           ;Bb_device.c: 118: if(TMR1H >= 0x0A && TMR1H <= 0x0C){
  9080  160F  300A               	movlw	10
  9081  1610  020F               	subwf	15,w	;volatile
  9082  1611  1C03               	skipc
  9083  1612  2E1F               	goto	i1l442
  9084  1613  300D               	movlw	13
  9085  1614  020F               	subwf	15,w	;volatile
  9086  1615  1803               	skipnc
  9087  1616  2E1F               	goto	i1l442
  9088                           
  9089                           ;Bb_device.c: 121: flModeStep = 2;
  9090  1617  3002               	movlw	2
  9091  1618  00F0               	movwf	??_fInterruptRecieveDevice
  9092  1619  0870               	movf	??_fInterruptRecieveDevice,w
  9093  161A  00FD               	movwf	_flModeStep
  9094  161B                     i1l4155:
  9095                           
  9096                           ;Bb_device.c: 124: TMR1H = 0x00;
  9097  161B  1283               	bcf	3,5	;RP0=0, select bank0
  9098  161C  018F               	clrf	15	;volatile
  9099                           
  9100                           ;Bb_device.c: 125: TMR1L = 0x00;
  9101  161D  018E               	clrf	14	;volatile
  9102                           
  9103                           ;Bb_device.c: 126: }
  9104  161E  0008               	return
  9105  161F                     i1l442:
  9106                           
  9107                           ;Bb_device.c: 127: else{;Bb_device.c: 128: flStartBitRecieve = 0;
  9108  161F  127A               	bcf	_flStartBitRecieve/(0+8),_flStartBitRecieve& (0+7)
  9109                           
  9110                           ;Bb_device.c: 129: flModeStep = 0;
  9111  1620  01FD               	clrf	_flModeStep
  9112                           
  9113                           ;Bb_device.c: 131: };Bb_device.c: 134: }
  9114  1621  0008               	return
  9115  1622                     i1l441:
  9116                           
  9117                           ;Bb_device.c: 135: else if(PORTBbits.RB7 == 1 && flModeStep == 2 && flStartBitRecieve ==
      +                           1){
  9118  1622  1F86               	btfss	6,7	;volatile
  9119  1623  2E2F               	goto	i1l445
  9120  1624  3002               	movlw	2
  9121  1625  067D               	xorwf	_flModeStep,w
  9122  1626  1903               	btfsc	3,2
  9123  1627  1E7A               	btfss	_flStartBitRecieve/(0+8),_flStartBitRecieve& (0+7)
  9124  1628  2E2F               	goto	i1l445
  9125                           
  9126                           ;Bb_device.c: 136: T1CONbits.TMR1ON = 1;
  9127  1629  1410               	bsf	16,0	;volatile
  9128                           
  9129                           ;Bb_device.c: 137: flModeStep = 3;
  9130  162A  3003               	movlw	3
  9131  162B  00F0               	movwf	??_fInterruptRecieveDevice
  9132  162C  0870               	movf	??_fInterruptRecieveDevice,w
  9133  162D  00FD               	movwf	_flModeStep
  9134                           
  9135                           ;Bb_device.c: 139: }
  9136  162E  0008               	return
  9137  162F                     i1l445:
  9138                           
  9139                           ;Bb_device.c: 140: else if(PORTBbits.RB7 == 0 && flModeStep == 3 && flStartBitRecieve ==
      +                           1){
  9140  162F  1B86               	btfsc	6,7	;volatile
  9141  1630  2E70               	goto	i1l447
  9142  1631  3003               	movlw	3
  9143  1632  067D               	xorwf	_flModeStep,w
  9144  1633  1903               	btfsc	3,2
  9145  1634  1E7A               	btfss	_flStartBitRecieve/(0+8),_flStartBitRecieve& (0+7)
  9146  1635  2E70               	goto	i1l447
  9147                           
  9148                           ;Bb_device.c: 143: T1CONbits.TMR1ON = 0;
  9149  1636  1010               	bcf	16,0	;volatile
  9150                           
  9151                           ;Bb_device.c: 144: flModeStep = 2;
  9152  1637  3002               	movlw	2
  9153  1638  00F0               	movwf	??_fInterruptRecieveDevice
  9154  1639  0870               	movf	??_fInterruptRecieveDevice,w
  9155  163A  00FD               	movwf	_flModeStep
  9156                           
  9157                           ;Bb_device.c: 145: if(cQuantity < 32){
  9158  163B  3020               	movlw	32
  9159  163C  1683               	bsf	3,5	;RP0=1, select bank1
  9160  163D  0240               	subwf	_cQuantity^(0+128),w
  9161  163E  1803               	skipnc
  9162  163F  2E61               	goto	i1l448
  9163                           
  9164                           ;Bb_device.c: 146: arrCmd[carrCmd] <<= 1;
  9165  1640  083F               	movf	_carrCmd^(0+128),w
  9166  1641  3EA0               	addlw	(low (_arrCmd| 0))& (0+255)
  9167  1642  0084               	movwf	4
  9168  1643  1003               	clrc
  9169  1644  1383               	bcf	3,7	;select IRP bank1
  9170  1645  0D80               	rlf	0,f
  9171                           
  9172                           ;Bb_device.c: 147: if( TMR1H >= 0x02) arrCmd[carrCmd] |= 0b00000001;
  9173  1646  3002               	movlw	2
  9174  1647  1283               	bcf	3,5	;RP0=0, select bank0
  9175  1648  020F               	subwf	15,w	;volatile
  9176  1649  1C03               	skipc
  9177  164A  2E50               	goto	i1l4183
  9178  164B  1683               	bsf	3,5	;RP0=1, select bank1
  9179  164C  083F               	movf	_carrCmd^(0+128),w
  9180  164D  3EA0               	addlw	(low (_arrCmd| 0))& (0+255)
  9181  164E  0084               	movwf	4
  9182  164F  1400               	bsf	0,0
  9183  1650                     i1l4183:
  9184                           
  9185                           ;Bb_device.c: 148: if(cQuantity == 7 || cQuantity == 15 || cQuantity == 23) {carrCmd++;}
  9186  1650  3007               	movlw	7
  9187  1651  1683               	bsf	3,5	;RP0=1, select bank1
  9188  1652  0640               	xorwf	_cQuantity^(0+128),w
  9189  1653  1903               	btfsc	3,2
  9190  1654  2E5D               	goto	i1l4189
  9191  1655  300F               	movlw	15
  9192  1656  0640               	xorwf	_cQuantity^(0+128),w
  9193  1657  1903               	btfsc	3,2
  9194  1658  2E5D               	goto	i1l4189
  9195  1659  3017               	movlw	23
  9196  165A  0640               	xorwf	_cQuantity^(0+128),w
  9197  165B  1D03               	btfss	3,2
  9198  165C  2E61               	goto	i1l448
  9199  165D                     i1l4189:
  9200  165D  3001               	movlw	1
  9201  165E  00F0               	movwf	??_fInterruptRecieveDevice
  9202  165F  0870               	movf	??_fInterruptRecieveDevice,w
  9203  1660  07BF               	addwf	_carrCmd^(0+128),f
  9204  1661                     i1l448:
  9205                           
  9206                           ;Bb_device.c: 149: };Bb_device.c: 150: cQuantity++;
  9207  1661  3001               	movlw	1
  9208  1662  00F0               	movwf	??_fInterruptRecieveDevice
  9209  1663  0870               	movf	??_fInterruptRecieveDevice,w
  9210  1664  07C0               	addwf	_cQuantity^(0+128),f
  9211                           
  9212                           ;Bb_device.c: 151: if(cQuantity == 32){
  9213  1665  3020               	movlw	32
  9214  1666  0640               	xorwf	_cQuantity^(0+128),w
  9215  1667  1D03               	btfss	3,2
  9216  1668  2E1B               	goto	i1l4155
  9217                           
  9218                           ;Bb_device.c: 159: flModeStep = 4;
  9219  1669  3004               	movlw	4
  9220  166A  00F0               	movwf	??_fInterruptRecieveDevice
  9221  166B  0870               	movf	??_fInterruptRecieveDevice,w
  9222  166C  00FD               	movwf	_flModeStep
  9223                           
  9224                           ;Bb_device.c: 162: cQuantity = 0;
  9225  166D  01C0               	clrf	_cQuantity^(0+128)
  9226                           
  9227                           ;Bb_device.c: 163: carrCmd = 0;
  9228  166E  01BF               	clrf	_carrCmd^(0+128)
  9229  166F  2E1B               	goto	i1l4155
  9230  1670                     i1l447:
  9231                           
  9232                           ;Bb_device.c: 171: else if(PORTBbits.RB7 == 1 && flModeStep == 4 && flStartBitRecieve ==
      +                           1){
  9233  1670  1F86               	btfss	6,7	;volatile
  9234  1671  2E7D               	goto	i1l455
  9235  1672  3004               	movlw	4
  9236  1673  067D               	xorwf	_flModeStep,w
  9237  1674  1903               	btfsc	3,2
  9238  1675  1E7A               	btfss	_flStartBitRecieve/(0+8),_flStartBitRecieve& (0+7)
  9239  1676  2E7D               	goto	i1l455
  9240                           
  9241                           ;Bb_device.c: 175: T1CONbits.TMR1ON = 1;
  9242  1677  1410               	bsf	16,0	;volatile
  9243                           
  9244                           ;Bb_device.c: 176: flModeStep = 5;
  9245  1678  3005               	movlw	5
  9246  1679  00F0               	movwf	??_fInterruptRecieveDevice
  9247  167A  0870               	movf	??_fInterruptRecieveDevice,w
  9248  167B  00FD               	movwf	_flModeStep
  9249                           
  9250                           ;Bb_device.c: 177: }
  9251  167C  0008               	return
  9252  167D                     i1l455:
  9253                           
  9254                           ;Bb_device.c: 178: else if(PORTBbits.RB7 == 0 && flModeStep == 5 && flStartBitRecieve ==
      +                           1){
  9255  167D  1B86               	btfsc	6,7	;volatile
  9256  167E  0008               	return
  9257  167F  3005               	movlw	5
  9258  1680  067D               	xorwf	_flModeStep,w
  9259  1681  1D03               	btfss	3,2
  9260  1682  0008               	return
  9261  1683  1E7A               	btfss	_flStartBitRecieve/(0+8),_flStartBitRecieve& (0+7)
  9262  1684  0008               	return
  9263                           
  9264                           ;Bb_device.c: 180: T1CONbits.TMR1ON = 0;
  9265  1685  1010               	bcf	16,0	;volatile
  9266                           
  9267                           ;Bb_device.c: 185: if(TMR1H >= 0x02 && TMR1H <= 0x04){
  9268  1686  3002               	movlw	2
  9269  1687  020F               	subwf	15,w	;volatile
  9270  1688  1C03               	skipc
  9271  1689  2E95               	goto	i1l4229
  9272  168A  3005               	movlw	5
  9273  168B  020F               	subwf	15,w	;volatile
  9274  168C  1803               	skipnc
  9275  168D  2E95               	goto	i1l4229
  9276                           
  9277                           ;Bb_device.c: 197: flModeStep = 0;
  9278  168E  01FD               	clrf	_flModeStep
  9279                           
  9280                           ;Bb_device.c: 198: flStartBitRecieve = 0;
  9281  168F  127A               	bcf	_flStartBitRecieve/(0+8),_flStartBitRecieve& (0+7)
  9282                           
  9283                           ;Bb_device.c: 199: flStopBitRecieve = 1;
  9284  1690  15FA               	bsf	_flStopBitRecieve/(0+8),_flStopBitRecieve& (0+7)
  9285                           
  9286                           ;Bb_device.c: 201: cTMR0 = 0;
  9287  1691  1683               	bsf	3,5	;RP0=1, select bank1
  9288  1692  01C1               	clrf	_cTMR0^(0+128)
  9289                           
  9290                           ;Bb_device.c: 202: INTCONbits.T0IF = 0;
  9291  1693  110B               	bcf	11,2	;volatile
  9292                           
  9293                           ;Bb_device.c: 203: INTCONbits.T0IE = 0;
  9294  1694  128B               	bcf	11,5	;volatile
  9295  1695                     i1l4229:
  9296                           
  9297                           ;Bb_device.c: 207: };Bb_device.c: 208: _delay((unsigned long)((1)*(8000000/4000.0)));
  9298  1695  3003               	movlw	3
  9299  1696  00F1               	movwf	??_fInterruptRecieveDevice+1
  9300  1697  3097               	movlw	151
  9301  1698  00F0               	movwf	??_fInterruptRecieveDevice
  9302  1699                     u655_27:
  9303  1699  0BF0               	decfsz	??_fInterruptRecieveDevice,f
  9304  169A  2E99               	goto	u655_27
  9305  169B  0BF1               	decfsz	??_fInterruptRecieveDevice+1,f
  9306  169C  2E99               	goto	u655_27
  9307  169D  2E9E               	nop2
  9308  169E  0008               	return
  9309  169F                     __end_of_fInterruptRecieveDevice:
  9310  007E                     btemp	set	126	;btemp
  9311  007E                     wtemp0	set	126
  9312                           
  9313                           	psect	config
  9314                           
  9315                           ;Config register CONFIG @ 0x2007
  9316                           ;	Oscillator Selection bits
  9317                           ;	FOSC = HS, HS oscillator
  9318                           ;	Watchdog Timer Enable bit
  9319                           ;	WDTE = OFF, WDT disabled
  9320                           ;	Power-up Timer Enable bit
  9321                           ;	PWRTE = OFF, PWRT disabled
  9322                           ;	FLASH Program Memory Code Protection bit
  9323                           ;	CP = OFF, Code protection off
  9324                           ;	Brown-out Reset Enable bit
  9325                           ;	BOREN = OFF, BOR disabled
  9326  2007                     	org	8199
  9327  2007  3FBA               	dw	16314
  9328                           
  9329                           	psect	text15_split_1
  9330  083E                     l4537:
  9331                           
  9332                           ;menu.c: 19: else;menu.c: 20: _MenuNav--;
  9333  083E  30FF               	movlw	255
  9334  083F  07FB               	addwf	__MenuNav,f
  9335  0840  1803               	skipnc
  9336  0841  0AFC               	incf	__MenuNav+1,f
  9337  0842  30FF               	movlw	255
  9338  0843  293C               	goto	L7
  9339  0844                     l4539:
  9340                           
  9341                           ;menu.c: 22: else if(_MenuNav >= 100 && _MenuNav < 1000) {
  9342  0844  087C               	movf	__MenuNav+1,w
  9343  0845  3A80               	xorlw	128
  9344  0846  00FF               	movwf	127
  9345  0847  3080               	movlw	128
  9346  0848  027F               	subwf	127,w
  9347  0849  1D03               	skipz
  9348  084A  284D               	goto	u5215
  9349  084B  3064               	movlw	100
  9350  084C  027B               	subwf	__MenuNav,w
  9351  084D                     u5215:
  9352  084D  1C03               	skipc
  9353  084E  28C8               	goto	l4567
  9354  084F  087C               	movf	__MenuNav+1,w
  9355  0850  3A80               	xorlw	128
  9356  0851  00FF               	movwf	127
  9357  0852  3083               	movlw	131
  9358  0853  027F               	subwf	127,w
  9359  0854  1D03               	skipz
  9360  0855  2858               	goto	u5225
  9361  0856  30E8               	movlw	232
  9362  0857  027B               	subwf	__MenuNav,w
  9363  0858                     u5225:
  9364  0858  1803               	skipnc
  9365  0859  28C8               	goto	l4567
  9366                           
  9367                           ;menu.c: 23: if(_MenuNav == 210 && _settingTimeImpDO1 != 0) _settingTimeImpDO1--;
  9368  085A  30D2               	movlw	210
  9369  085B  067B               	xorwf	__MenuNav,w
  9370  085C  047C               	iorwf	__MenuNav+1,w
  9371  085D  1D03               	btfss	3,2
  9372  085E  286C               	goto	l4549
  9373  085F  1683               	bsf	3,5	;RP0=1, select bank1
  9374  0860  1303               	bcf	3,6	;RP1=0, select bank1
  9375  0861  0834               	movf	__settingTimeImpDO1^(0+128),w
  9376  0862  0435               	iorwf	(__settingTimeImpDO1+1)^(0+128),w
  9377  0863  1903               	btfsc	3,2
  9378  0864  286C               	goto	l4549
  9379  0865  3001               	movlw	1
  9380  0866  02B4               	subwf	__settingTimeImpDO1^(0+128),f
  9381  0867  3000               	movlw	0
  9382  0868  1C03               	skipc
  9383  0869  03B5               	decf	(__settingTimeImpDO1+1)^(0+128),f
  9384  086A  02B5               	subwf	(__settingTimeImpDO1+1)^(0+128),f
  9385  086B  29F2               	goto	l4573
  9386  086C                     l4549:
  9387                           
  9388                           ;menu.c: 24: else if(_MenuNav == 230 && _settingTimerOnDO2 != 0) _settingTimerOnDO2--;
  9389  086C  30E6               	movlw	230
  9390  086D  067B               	xorwf	__MenuNav,w
  9391  086E  047C               	iorwf	__MenuNav+1,w
  9392  086F  1D03               	btfss	3,2
  9393  0870  287E               	goto	l4555
  9394  0871  1683               	bsf	3,5	;RP0=1, select bank1
  9395  0872  1303               	bcf	3,6	;RP1=0, select bank1
  9396  0873  0832               	movf	__settingTimerOnDO2^(0+128),w
  9397  0874  0433               	iorwf	(__settingTimerOnDO2+1)^(0+128),w
  9398  0875  1903               	btfsc	3,2
  9399  0876  287E               	goto	l4555
  9400  0877  3001               	movlw	1
  9401  0878  02B2               	subwf	__settingTimerOnDO2^(0+128),f
  9402  0879  3000               	movlw	0
  9403  087A  1C03               	skipc
  9404  087B  03B3               	decf	(__settingTimerOnDO2+1)^(0+128),f
  9405  087C  02B3               	subwf	(__settingTimerOnDO2+1)^(0+128),f
  9406  087D  29F2               	goto	l4573
  9407  087E                     l4555:
  9408                           
  9409                           ;menu.c: 25: else if(_MenuNav == 240 && _settingTimerOffDO2 != 0) _settingTimerOffDO2--;
  9410  087E  30F0               	movlw	240
  9411  087F  067B               	xorwf	__MenuNav,w
  9412  0880  047C               	iorwf	__MenuNav+1,w
  9413  0881  1D03               	btfss	3,2
  9414  0882  2890               	goto	l4561
  9415  0883  1683               	bsf	3,5	;RP0=1, select bank1
  9416  0884  1303               	bcf	3,6	;RP1=0, select bank1
  9417  0885  0830               	movf	__settingTimerOffDO2^(0+128),w
  9418  0886  0431               	iorwf	(__settingTimerOffDO2+1)^(0+128),w
  9419  0887  1903               	btfsc	3,2
  9420  0888  2890               	goto	l4561
  9421  0889  3001               	movlw	1
  9422  088A  02B0               	subwf	__settingTimerOffDO2^(0+128),f
  9423  088B  3000               	movlw	0
  9424  088C  1C03               	skipc
  9425  088D  03B1               	decf	(__settingTimerOffDO2+1)^(0+128),f
  9426  088E  02B1               	subwf	(__settingTimerOffDO2+1)^(0+128),f
  9427  088F  29F2               	goto	l4573
  9428  0890                     l4561:
  9429                           
  9430                           ;menu.c: 26: else if(_MenuNav <= (short int)_tempDigit)
  9431  0890  1683               	bsf	3,5	;RP0=1, select bank1
  9432  0891  1303               	bcf	3,6	;RP1=0, select bank1
  9433  0892  082B               	movf	(__tempDigit+1)^(0+128),w
  9434  0893  3A80               	xorlw	128
  9435  0894  1283               	bcf	3,5	;RP0=0, select bank0
  9436  0895  00CA               	movwf	??_fMenuStrip
  9437  0896  087C               	movf	__MenuNav+1,w
  9438  0897  3A80               	xorlw	128
  9439  0898  024A               	subwf	??_fMenuStrip,w
  9440  0899  1D03               	skipz
  9441  089A  289E               	goto	u5295
  9442  089B  087B               	movf	__MenuNav,w
  9443  089C  1683               	bsf	3,5	;RP0=1, select bank1
  9444  089D  022A               	subwf	__tempDigit^(0+128),w
  9445  089E                     u5295:
  9446  089E  1C03               	skipc
  9447  089F  283E               	goto	l4537
  9448                           
  9449                           ;menu.c: 27: _MenuNav = (short int)((_tempDigit + _SubMenuArr[_firstCell][_secondCell]) 
      +                          - 1);
  9450  08A0  3006               	movlw	6
  9451  08A1  1283               	bcf	3,5	;RP0=0, select bank0
  9452  08A2  1303               	bcf	3,6	;RP1=0, select bank0
  9453  08A3  00CA               	movwf	??_fMenuStrip
  9454  08A4  084A               	movf	??_fMenuStrip,w
  9455  08A5  00A9               	movwf	___bmul@multiplicand
  9456  08A6  1683               	bsf	3,5	;RP0=1, select bank1
  9457  08A7  083D               	movf	__firstCell^(0+128),w
  9458  08A8  160A  158A  2479  120A  158A  	fcall	___bmul
  9459  08AD  3E90               	addlw	(low (__SubMenuArr| (0+256)))& (0+255)
  9460  08AE  1683               	bsf	3,5	;RP0=1, select bank1
  9461  08AF  073C               	addwf	__secondCell^(0+128),w
  9462  08B0  1283               	bcf	3,5	;RP0=0, select bank0
  9463  08B1  00CB               	movwf	??_fMenuStrip+1
  9464  08B2  084B               	movf	??_fMenuStrip+1,w
  9465  08B3  0084               	movwf	4
  9466  08B4  1783               	bsf	3,7	;select IRP bank3
  9467  08B5  0800               	movf	0,w
  9468  08B6  1683               	bsf	3,5	;RP0=1, select bank1
  9469  08B7  072A               	addwf	__tempDigit^(0+128),w
  9470  08B8  1283               	bcf	3,5	;RP0=0, select bank0
  9471  08B9  00CC               	movwf	??_fMenuStrip+2
  9472  08BA  1683               	bsf	3,5	;RP0=1, select bank1
  9473  08BB  082B               	movf	(__tempDigit+1)^(0+128),w
  9474  08BC  1803               	skipnc
  9475  08BD  0A2B               	incf	(__tempDigit+1)^(0+128),w
  9476  08BE  1283               	bcf	3,5	;RP0=0, select bank0
  9477  08BF  00CD               	movwf	??_fMenuStrip+3
  9478  08C0  084C               	movf	??_fMenuStrip+2,w
  9479  08C1  3EFF               	addlw	255
  9480  08C2  00FB               	movwf	__MenuNav
  9481  08C3  084D               	movf	??_fMenuStrip+3,w
  9482  08C4                     L22:
  9483  08C4  1803               	skipnc
  9484  08C5  3E01               	addlw	1
  9485  08C6  3EFF               	addlw	255
  9486  08C7  2935               	goto	L9
  9487  08C8                     l4567:
  9488                           
  9489                           ;menu.c: 30: else if(_MenuNav >= 1000) _MenuNav = _MenuNav;
  9490  08C8  087C               	movf	__MenuNav+1,w
  9491  08C9  3A80               	xorlw	128
  9492  08CA  00FF               	movwf	127
  9493  08CB  3083               	movlw	131
  9494  08CC  027F               	subwf	127,w
  9495  08CD  1D03               	skipz
  9496  08CE  28D1               	goto	u5305
  9497  08CF  30E8               	movlw	232
  9498  08D0  027B               	subwf	__MenuNav,w
  9499  08D1                     u5305:
  9500  08D1  1803               	btfsc	3,0
  9501  08D2  29F2               	goto	l4573
  9502  08D3  283E               	goto	l4537
  9503  08D4                     l4577:	
  9504                           ;menu.c: 34: }
  9505                           
  9506                           
  9507                           ;menu.c: 35: else if(flMenuStrip == 0x04 && flSwitchButton == 0){
  9508  08D4  3004               	movlw	4
  9509  08D5  063E               	xorwf	_flMenuStrip^(0+128),w
  9510  08D6  1903               	btfsc	3,2
  9511  08D7  187A               	btfsc	_flSwitchButton/(0+8),_flSwitchButton& (0+7)
  9512  08D8  29C4               	goto	l4629
  9513                           
  9514                           ;menu.c: 36: if(_MenuNav >= _MenuArr[0] && _MenuNav < 10) _MenuNav = 1;
  9515  08D9  087C               	movf	__MenuNav+1,w
  9516  08DA  3A80               	xorlw	128
  9517  08DB  1283               	bcf	3,5	;RP0=0, select bank0
  9518  08DC  00CA               	movwf	??_fMenuStrip
  9519  08DD  3080               	movlw	128
  9520  08DE  024A               	subwf	??_fMenuStrip,w
  9521  08DF  1D03               	skipz
  9522  08E0  28E5               	goto	u5335
  9523  08E1  1683               	bsf	3,5	;RP0=1, select bank3
  9524  08E2  1703               	bsf	3,6	;RP1=1, select bank3
  9525  08E3  0828               	movf	__MenuArr^(0+384),w
  9526  08E4  027B               	subwf	__MenuNav,w
  9527  08E5                     u5335:
  9528  08E5  1C03               	skipc
  9529  08E6  28F6               	goto	l4587
  9530  08E7  087C               	movf	__MenuNav+1,w
  9531  08E8  3A80               	xorlw	128
  9532  08E9  00FF               	movwf	127
  9533  08EA  3080               	movlw	128
  9534  08EB  027F               	subwf	127,w
  9535  08EC  1D03               	skipz
  9536  08ED  28F0               	goto	u5345
  9537  08EE  300A               	movlw	10
  9538  08EF  027B               	subwf	__MenuNav,w
  9539  08F0                     u5345:
  9540  08F0  1803               	skipnc
  9541  08F1  28F6               	goto	l4587
  9542  08F2  3001               	movlw	1
  9543  08F3  00FB               	movwf	__MenuNav
  9544  08F4  3000               	movlw	0
  9545  08F5  2935               	goto	L9
  9546  08F6                     l4587:
  9547                           
  9548                           ;menu.c: 37: else if(_MenuNav >= 10 && _MenuNav < 100){
  9549  08F6  087C               	movf	__MenuNav+1,w
  9550  08F7  3A80               	xorlw	128
  9551  08F8  00FF               	movwf	127
  9552  08F9  3080               	movlw	128
  9553  08FA  027F               	subwf	127,w
  9554  08FB  1D03               	skipz
  9555  08FC  28FF               	goto	u5355
  9556  08FD  300A               	movlw	10
  9557  08FE  027B               	subwf	__MenuNav,w
  9558  08FF                     u5355:
  9559  08FF  1C03               	skipc
  9560  0900  293E               	goto	l4597
  9561  0901  087C               	movf	__MenuNav+1,w
  9562  0902  3A80               	xorlw	128
  9563  0903  00FF               	movwf	127
  9564  0904  3080               	movlw	128
  9565  0905  027F               	subwf	127,w
  9566  0906  1D03               	skipz
  9567  0907  290A               	goto	u5365
  9568  0908  3064               	movlw	100
  9569  0909  027B               	subwf	__MenuNav,w
  9570  090A                     u5365:
  9571  090A  1803               	skipnc
  9572  090B  293E               	goto	l4597
  9573                           
  9574                           ;menu.c: 38: if(_MenuNav >= _tempTwoDigit + _MenuArr[_cellTwoDigit] - 1)
  9575  090C  1683               	bsf	3,5	;RP0=1, select bank1
  9576  090D  1303               	bcf	3,6	;RP1=0, select bank1
  9577  090E  083B               	movf	__cellTwoDigit^(0+128),w
  9578  090F  3EA8               	addlw	(low (__MenuArr| (0+256)))& (0+255)
  9579  0910  0084               	movwf	4
  9580  0911  083A               	movf	__tempTwoDigit^(0+128),w
  9581  0912  1783               	bsf	3,7	;select IRP bank3
  9582  0913  0700               	addwf	0,w
  9583  0914  1283               	bcf	3,5	;RP0=0, select bank0
  9584  0915  00CA               	movwf	??_fMenuStrip
  9585  0916  01CB               	clrf	??_fMenuStrip+1
  9586  0917  0DCB               	rlf	??_fMenuStrip+1,f
  9587  0918  084A               	movf	??_fMenuStrip,w
  9588  0919  3EFF               	addlw	255
  9589  091A  00CC               	movwf	??_fMenuStrip+2
  9590  091B  084B               	movf	??_fMenuStrip+1,w
  9591  091C  1803               	skipnc
  9592  091D  3E01               	addlw	1
  9593  091E  3EFF               	addlw	255
  9594  091F  00CD               	movwf	??_fMenuStrip+3
  9595  0920  087C               	movf	__MenuNav+1,w
  9596  0921  3A80               	xorlw	128
  9597  0922  00CE               	movwf	??_fMenuStrip+4
  9598  0923  084D               	movf	??_fMenuStrip+3,w
  9599  0924  3A80               	xorlw	128
  9600  0925  024E               	subwf	??_fMenuStrip+4,w
  9601  0926  1D03               	skipz
  9602  0927  292A               	goto	u5375
  9603  0928  084C               	movf	??_fMenuStrip+2,w
  9604  0929  027B               	subwf	__MenuNav,w
  9605  092A                     u5375:
  9606  092A  1C03               	skipc
  9607  092B  2937               	goto	l4595
  9608                           
  9609                           ;menu.c: 39: _MenuNav = _tempTwoDigit;
  9610  092C  1683               	bsf	3,5	;RP0=1, select bank1
  9611  092D  1303               	bcf	3,6	;RP1=0, select bank1
  9612  092E  083A               	movf	__tempTwoDigit^(0+128),w
  9613  092F  1283               	bcf	3,5	;RP0=0, select bank0
  9614  0930                     L21:
  9615  0930  00CA               	movwf	??_fMenuStrip
  9616  0931  01CB               	clrf	??_fMenuStrip+1
  9617  0932  084A               	movf	??_fMenuStrip,w
  9618  0933  00FB               	movwf	__MenuNav
  9619  0934  084B               	movf	??_fMenuStrip+1,w
  9620  0935                     L9:
  9621  0935  00FC               	movwf	__MenuNav+1
  9622  0936  29F2               	goto	l4573
  9623  0937                     l4595:
  9624                           
  9625                           ;menu.c: 40: else;menu.c: 41: _MenuNav++;
  9626  0937  3001               	movlw	1
  9627  0938  07FB               	addwf	__MenuNav,f
  9628  0939  1803               	skipnc
  9629  093A  0AFC               	incf	__MenuNav+1,f
  9630  093B  3000               	movlw	0
  9631  093C                     L7:
  9632  093C  07FC               	addwf	__MenuNav+1,f
  9633  093D  29F2               	goto	l4573
  9634  093E                     l4597:
  9635                           
  9636                           ;menu.c: 43: else if(_MenuNav >= 100 && _MenuNav < 1000) {
  9637  093E  087C               	movf	__MenuNav+1,w
  9638  093F  3A80               	xorlw	128
  9639  0940  00FF               	movwf	127
  9640  0941  3080               	movlw	128
  9641  0942  027F               	subwf	127,w
  9642  0943  1D03               	skipz
  9643  0944  2947               	goto	u5385
  9644  0945  3064               	movlw	100
  9645  0946  027B               	subwf	__MenuNav,w
  9646  0947                     u5385:
  9647  0947  1C03               	skipc
  9648  0948  29B8               	goto	l4619
  9649  0949  087C               	movf	__MenuNav+1,w
  9650  094A  3A80               	xorlw	128
  9651  094B  00FF               	movwf	127
  9652  094C  3083               	movlw	131
  9653  094D  027F               	subwf	127,w
  9654  094E  1D03               	skipz
  9655  094F  2952               	goto	u5395
  9656  0950  30E8               	movlw	232
  9657  0951  027B               	subwf	__MenuNav,w
  9658  0952                     u5395:
  9659  0952  1803               	skipnc
  9660  0953  29B8               	goto	l4619
  9661                           
  9662                           ;menu.c: 44: if(_MenuNav == 210) _settingTimeImpDO1++;
  9663  0954  30D2               	movlw	210
  9664  0955  067B               	xorwf	__MenuNav,w
  9665  0956  047C               	iorwf	__MenuNav+1,w
  9666  0957  1D03               	btfss	3,2
  9667  0958  2962               	goto	l4605
  9668  0959  3001               	movlw	1
  9669  095A  1683               	bsf	3,5	;RP0=1, select bank1
  9670  095B  1303               	bcf	3,6	;RP1=0, select bank1
  9671  095C  07B4               	addwf	__settingTimeImpDO1^(0+128),f
  9672  095D  1803               	skipnc
  9673  095E  0AB5               	incf	(__settingTimeImpDO1+1)^(0+128),f
  9674  095F  3000               	movlw	0
  9675  0960  07B5               	addwf	(__settingTimeImpDO1+1)^(0+128),f
  9676  0961  29F2               	goto	l4573
  9677  0962                     l4605:
  9678                           
  9679                           ;menu.c: 45: else if(_MenuNav == 230) _settingTimerOnDO2++;
  9680  0962  30E6               	movlw	230
  9681  0963  067B               	xorwf	__MenuNav,w
  9682  0964  047C               	iorwf	__MenuNav+1,w
  9683  0965  1D03               	btfss	3,2
  9684  0966  2970               	goto	l4609
  9685  0967  3001               	movlw	1
  9686  0968  1683               	bsf	3,5	;RP0=1, select bank1
  9687  0969  1303               	bcf	3,6	;RP1=0, select bank1
  9688  096A  07B2               	addwf	__settingTimerOnDO2^(0+128),f
  9689  096B  1803               	skipnc
  9690  096C  0AB3               	incf	(__settingTimerOnDO2+1)^(0+128),f
  9691  096D  3000               	movlw	0
  9692  096E  07B3               	addwf	(__settingTimerOnDO2+1)^(0+128),f
  9693  096F  29F2               	goto	l4573
  9694  0970                     l4609:
  9695                           
  9696                           ;menu.c: 46: else if(_MenuNav == 240) _settingTimerOffDO2++;
  9697  0970  30F0               	movlw	240
  9698  0971  067B               	xorwf	__MenuNav,w
  9699  0972  047C               	iorwf	__MenuNav+1,w
  9700  0973  1D03               	btfss	3,2
  9701  0974  297E               	goto	l4613
  9702  0975  3001               	movlw	1
  9703  0976  1683               	bsf	3,5	;RP0=1, select bank1
  9704  0977  1303               	bcf	3,6	;RP1=0, select bank1
  9705  0978  07B0               	addwf	__settingTimerOffDO2^(0+128),f
  9706  0979  1803               	skipnc
  9707  097A  0AB1               	incf	(__settingTimerOffDO2+1)^(0+128),f
  9708  097B  3000               	movlw	0
  9709  097C  07B1               	addwf	(__settingTimerOffDO2+1)^(0+128),f
  9710  097D  29F2               	goto	l4573
  9711  097E                     l4613:
  9712                           
  9713                           ;menu.c: 47: else if(_MenuNav >= (short int)((_tempDigit + _SubMenuArr[_firstCell][_seco
      +                          ndCell]) - 1))
  9714  097E  3006               	movlw	6
  9715  097F  1283               	bcf	3,5	;RP0=0, select bank0
  9716  0980  1303               	bcf	3,6	;RP1=0, select bank0
  9717  0981  00CA               	movwf	??_fMenuStrip
  9718  0982  084A               	movf	??_fMenuStrip,w
  9719  0983  00A9               	movwf	___bmul@multiplicand
  9720  0984  1683               	bsf	3,5	;RP0=1, select bank1
  9721  0985  083D               	movf	__firstCell^(0+128),w
  9722  0986  160A  158A  2479  120A  158A  	fcall	___bmul
  9723  098B  3E90               	addlw	(low (__SubMenuArr| (0+256)))& (0+255)
  9724  098C  1683               	bsf	3,5	;RP0=1, select bank1
  9725  098D  073C               	addwf	__secondCell^(0+128),w
  9726  098E  1283               	bcf	3,5	;RP0=0, select bank0
  9727  098F  00CB               	movwf	??_fMenuStrip+1
  9728  0990  084B               	movf	??_fMenuStrip+1,w
  9729  0991  0084               	movwf	4
  9730  0992  1783               	bsf	3,7	;select IRP bank3
  9731  0993  0800               	movf	0,w
  9732  0994  1683               	bsf	3,5	;RP0=1, select bank1
  9733  0995  072A               	addwf	__tempDigit^(0+128),w
  9734  0996  1283               	bcf	3,5	;RP0=0, select bank0
  9735  0997  00CC               	movwf	??_fMenuStrip+2
  9736  0998  1683               	bsf	3,5	;RP0=1, select bank1
  9737  0999  082B               	movf	(__tempDigit+1)^(0+128),w
  9738  099A  1803               	skipnc
  9739  099B  0A2B               	incf	(__tempDigit+1)^(0+128),w
  9740  099C  1283               	bcf	3,5	;RP0=0, select bank0
  9741  099D  00CD               	movwf	??_fMenuStrip+3
  9742  099E  084C               	movf	??_fMenuStrip+2,w
  9743  099F  3EFF               	addlw	255
  9744  09A0  00CE               	movwf	??_fMenuStrip+4
  9745  09A1  084D               	movf	??_fMenuStrip+3,w
  9746  09A2  1803               	skipnc
  9747  09A3  3E01               	addlw	1
  9748  09A4  3EFF               	addlw	255
  9749  09A5  00CF               	movwf	??_fMenuStrip+5
  9750  09A6  087C               	movf	__MenuNav+1,w
  9751  09A7  3A80               	xorlw	128
  9752  09A8  00D0               	movwf	??_fMenuStrip+6
  9753  09A9  084F               	movf	??_fMenuStrip+5,w
  9754  09AA  3A80               	xorlw	128
  9755  09AB  0250               	subwf	??_fMenuStrip+6,w
  9756  09AC  1D03               	skipz
  9757  09AD  29B0               	goto	u5435
  9758  09AE  084E               	movf	??_fMenuStrip+4,w
  9759  09AF  027B               	subwf	__MenuNav,w
  9760  09B0                     u5435:
  9761  09B0  1C03               	skipc
  9762  09B1  2937               	goto	l4595
  9763                           
  9764                           ;menu.c: 48: _MenuNav = _tempDigit;
  9765  09B2  1683               	bsf	3,5	;RP0=1, select bank1
  9766  09B3  1303               	bcf	3,6	;RP1=0, select bank1
  9767  09B4  082B               	movf	(__tempDigit+1)^(0+128),w
  9768  09B5  00FC               	movwf	__MenuNav+1
  9769  09B6  082A               	movf	__tempDigit^(0+128),w
  9770  09B7  29F1               	goto	L10
  9771  09B8                     l4619:
  9772                           
  9773                           ;menu.c: 51: else if(_MenuNav >= 1000) _MenuNav = _MenuNav;
  9774  09B8  087C               	movf	__MenuNav+1,w
  9775  09B9  3A80               	xorlw	128
  9776  09BA  00FF               	movwf	127
  9777  09BB  3083               	movlw	131
  9778  09BC  027F               	subwf	127,w
  9779  09BD  1D03               	skipz
  9780  09BE  29C1               	goto	u5445
  9781  09BF  30E8               	movlw	232
  9782  09C0  027B               	subwf	__MenuNav,w
  9783  09C1                     u5445:
  9784  09C1  1803               	btfsc	3,0
  9785  09C2  29F2               	goto	l4573
  9786  09C3  2937               	goto	l4595
  9787  09C4                     l4629:
  9788                           
  9789                           ;menu.c: 56: else if(flMenuStrip == 0x08 && flSwitchButton == 0){
  9790  09C4  3008               	movlw	8
  9791  09C5  063E               	xorwf	_flMenuStrip^(0+128),w
  9792  09C6  1903               	btfsc	3,2
  9793  09C7  187A               	btfsc	_flSwitchButton/(0+8),_flSwitchButton& (0+7)
  9794  09C8  29F4               	goto	l4643
  9795                           
  9796                           ;menu.c: 57: if(_MenuNav > 1 && _MenuNav <= 1000) {
  9797  09C9  087C               	movf	__MenuNav+1,w
  9798  09CA  3A80               	xorlw	128
  9799  09CB  00FF               	movwf	127
  9800  09CC  3080               	movlw	128
  9801  09CD  027F               	subwf	127,w
  9802  09CE  1D03               	skipz
  9803  09CF  29D2               	goto	u5475
  9804  09D0  3002               	movlw	2
  9805  09D1  027B               	subwf	__MenuNav,w
  9806  09D2                     u5475:
  9807  09D2  1C03               	skipc
  9808  09D3  29F2               	goto	l4573
  9809  09D4  087C               	movf	__MenuNav+1,w
  9810  09D5  3A80               	xorlw	128
  9811  09D6  00FF               	movwf	127
  9812  09D7  3083               	movlw	131
  9813  09D8  027F               	subwf	127,w
  9814  09D9  1D03               	skipz
  9815  09DA  29DD               	goto	u5485
  9816  09DB  30E9               	movlw	233
  9817  09DC  027B               	subwf	__MenuNav,w
  9818  09DD                     u5485:
  9819  09DD  1803               	skipnc
  9820  09DE  29F2               	goto	l4573
  9821                           
  9822                           ;menu.c: 58: _MenuNav *= 10;
  9823  09DF  300A               	movlw	10
  9824  09E0  1283               	bcf	3,5	;RP0=0, select bank0
  9825  09E1  1303               	bcf	3,6	;RP1=0, select bank0
  9826  09E2  00A0               	movwf	___wmul@multiplier
  9827  09E3  3000               	movlw	0
  9828  09E4  00A1               	movwf	___wmul@multiplier+1
  9829  09E5  087C               	movf	__MenuNav+1,w
  9830  09E6  00A3               	movwf	___wmul@multiplicand+1
  9831  09E7  087B               	movf	__MenuNav,w
  9832  09E8  00A2               	movwf	___wmul@multiplicand
  9833  09E9  160A  158A  2504  120A  158A  	fcall	___wmul
  9834  09EE  0821               	movf	?___wmul+1,w
  9835  09EF  00FC               	movwf	__MenuNav+1
  9836  09F0  0820               	movf	?___wmul,w
  9837  09F1                     L10:
  9838  09F1  00FB               	movwf	__MenuNav
  9839  09F2                     l4573:
  9840                           
  9841                           ;menu.c: 32: flSwitchButton = 1;
  9842  09F2  147A               	bsf	_flSwitchButton/(0+8),_flSwitchButton& (0+7)
  9843                           
  9844                           ;menu.c: 33: flClearLCD = 0;
  9845  09F3  10FA               	bcf	_flClearLCD/(0+8),_flClearLCD& (0+7)
  9846  09F4                     l4643:
  9847                           
  9848                           ;menu.c: 63: };menu.c: 65: if(_MenuNav >= 100){
  9849  09F4  087C               	movf	__MenuNav+1,w
  9850  09F5  3A80               	xorlw	128
  9851  09F6  00FF               	movwf	127
  9852  09F7  3080               	movlw	128
  9853  09F8  027F               	subwf	127,w
  9854  09F9  1D03               	skipz
  9855  09FA  29FD               	goto	u5495
  9856  09FB  3064               	movlw	100
  9857  09FC  027B               	subwf	__MenuNav,w
  9858  09FD                     u5495:
  9859  09FD  1C03               	skipc
  9860  09FE  2A6F               	goto	l4647
  9861                           
  9862                           ;menu.c: 66: _firstCell = (unsigned char)(_MenuNav / 100 - 2);
  9863  09FF  3064               	movlw	100
  9864  0A00  1283               	bcf	3,5	;RP0=0, select bank0
  9865  0A01  1303               	bcf	3,6	;RP1=0, select bank0
  9866  0A02  00A0               	movwf	___awdiv@divisor
  9867  0A03  3000               	movlw	0
  9868  0A04  00A1               	movwf	___awdiv@divisor+1
  9869  0A05  087C               	movf	__MenuNav+1,w
  9870  0A06  00A3               	movwf	___awdiv@dividend+1
  9871  0A07  087B               	movf	__MenuNav,w
  9872  0A08  00A2               	movwf	___awdiv@dividend
  9873  0A09  160A  118A  221A  120A  158A  	fcall	___awdiv
  9874  0A0E  0820               	movf	?___awdiv,w
  9875  0A0F  3EFE               	addlw	254
  9876  0A10  00CA               	movwf	??_fMenuStrip
  9877  0A11  084A               	movf	??_fMenuStrip,w
  9878  0A12  1683               	bsf	3,5	;RP0=1, select bank1
  9879  0A13  00BD               	movwf	__firstCell^(0+128)
  9880                           
  9881                           ;menu.c: 67: _secondCell = (unsigned char)(_MenuNav / 10 % 10);
  9882  0A14  300A               	movlw	10
  9883  0A15  1283               	bcf	3,5	;RP0=0, select bank0
  9884  0A16  00A9               	movwf	___awmod@divisor
  9885  0A17  3000               	movlw	0
  9886  0A18  00AA               	movwf	___awmod@divisor+1
  9887  0A19  300A               	movlw	10
  9888  0A1A  00A0               	movwf	___awdiv@divisor
  9889  0A1B  3000               	movlw	0
  9890  0A1C  00A1               	movwf	___awdiv@divisor+1
  9891  0A1D  087C               	movf	__MenuNav+1,w
  9892  0A1E  00A3               	movwf	___awdiv@dividend+1
  9893  0A1F  087B               	movf	__MenuNav,w
  9894  0A20  00A2               	movwf	___awdiv@dividend
  9895  0A21  160A  118A  221A  120A  158A  	fcall	___awdiv
  9896  0A26  0821               	movf	?___awdiv+1,w
  9897  0A27  00AC               	movwf	___awmod@dividend+1
  9898  0A28  0820               	movf	?___awdiv,w
  9899  0A29  00AB               	movwf	___awmod@dividend
  9900  0A2A  160A  158A  2717  120A  158A  	fcall	___awmod
  9901  0A2F  0829               	movf	?___awmod,w
  9902  0A30  00CA               	movwf	??_fMenuStrip
  9903  0A31  084A               	movf	??_fMenuStrip,w
  9904  0A32  1683               	bsf	3,5	;RP0=1, select bank1
  9905  0A33  00BC               	movwf	__secondCell^(0+128)
  9906                           
  9907                           ;menu.c: 68: _tempDigit = (unsigned short int)(((_firstCell + 2) * 100) + (_secondCell *
      +                           10));
  9908  0A34  083D               	movf	__firstCell^(0+128),w
  9909  0A35  1283               	bcf	3,5	;RP0=0, select bank0
  9910  0A36  00CA               	movwf	??_fMenuStrip
  9911  0A37  01CB               	clrf	??_fMenuStrip+1
  9912  0A38  084A               	movf	??_fMenuStrip,w
  9913  0A39  00A0               	movwf	___wmul@multiplier
  9914  0A3A  084B               	movf	??_fMenuStrip+1,w
  9915  0A3B  00A1               	movwf	___wmul@multiplier+1
  9916  0A3C  3064               	movlw	100
  9917  0A3D  00A2               	movwf	___wmul@multiplicand
  9918  0A3E  3000               	movlw	0
  9919  0A3F  00A3               	movwf	___wmul@multiplicand+1
  9920  0A40  160A  158A  2504  120A  158A  	fcall	___wmul
  9921  0A45  0820               	movf	?___wmul,w
  9922  0A46  00CC               	movwf	??_fMenuStrip+2
  9923  0A47  0821               	movf	?___wmul+1,w
  9924  0A48  00CD               	movwf	??_fMenuStrip+3
  9925  0A49  1683               	bsf	3,5	;RP0=1, select bank1
  9926  0A4A  083C               	movf	__secondCell^(0+128),w
  9927  0A4B  1283               	bcf	3,5	;RP0=0, select bank0
  9928  0A4C  00CE               	movwf	??_fMenuStrip+4
  9929  0A4D  01CF               	clrf	??_fMenuStrip+5
  9930  0A4E  084E               	movf	??_fMenuStrip+4,w
  9931  0A4F  00A0               	movwf	___wmul@multiplier
  9932  0A50  084F               	movf	??_fMenuStrip+5,w
  9933  0A51  00A1               	movwf	___wmul@multiplier+1
  9934  0A52  300A               	movlw	10
  9935  0A53  00A2               	movwf	___wmul@multiplicand
  9936  0A54  3000               	movlw	0
  9937  0A55  00A3               	movwf	___wmul@multiplicand+1
  9938  0A56  160A  158A  2504  120A  158A  	fcall	___wmul
  9939  0A5B  0820               	movf	?___wmul,w
  9940  0A5C  074C               	addwf	??_fMenuStrip+2,w
  9941  0A5D  00D0               	movwf	??_fMenuStrip+6
  9942  0A5E  0821               	movf	?___wmul+1,w
  9943  0A5F  1803               	skipnc
  9944  0A60  0A21               	incf	?___wmul+1,w
  9945  0A61  074D               	addwf	??_fMenuStrip+3,w
  9946  0A62  00D1               	movwf	??_fMenuStrip+7
  9947  0A63  0850               	movf	??_fMenuStrip+6,w
  9948  0A64  3EC8               	addlw	200
  9949  0A65  1683               	bsf	3,5	;RP0=1, select bank1
  9950  0A66  00AA               	movwf	__tempDigit^(0+128)
  9951  0A67  1283               	bcf	3,5	;RP0=0, select bank0
  9952  0A68  0851               	movf	??_fMenuStrip+7,w
  9953  0A69  1803               	skipnc
  9954  0A6A  3E01               	addlw	1
  9955  0A6B  3E00               	addlw	0
  9956  0A6C  1683               	bsf	3,5	;RP0=1, select bank1
  9957  0A6D  00AB               	movwf	(__tempDigit+1)^(0+128)
  9958                           
  9959                           ;menu.c: 69: }
  9960  0A6E  2AAB               	goto	l4651
  9961  0A6F                     l4647:
  9962                           
  9963                           ;menu.c: 70: else if(_MenuNav >= 10){
  9964  0A6F  087C               	movf	__MenuNav+1,w
  9965  0A70  3A80               	xorlw	128
  9966  0A71  00FF               	movwf	127
  9967  0A72  3080               	movlw	128
  9968  0A73  027F               	subwf	127,w
  9969  0A74  1D03               	skipz
  9970  0A75  2A78               	goto	u5505
  9971  0A76  300A               	movlw	10
  9972  0A77  027B               	subwf	__MenuNav,w
  9973  0A78                     u5505:
  9974  0A78  1C03               	skipc
  9975  0A79  2AAB               	goto	l4651
  9976                           
  9977                           ;menu.c: 71: _cellTwoDigit = (unsigned char)(_MenuNav / 10 - 1);
  9978  0A7A  300A               	movlw	10
  9979  0A7B  1283               	bcf	3,5	;RP0=0, select bank0
  9980  0A7C  1303               	bcf	3,6	;RP1=0, select bank0
  9981  0A7D  00A0               	movwf	___awdiv@divisor
  9982  0A7E  3000               	movlw	0
  9983  0A7F  00A1               	movwf	___awdiv@divisor+1
  9984  0A80  087C               	movf	__MenuNav+1,w
  9985  0A81  00A3               	movwf	___awdiv@dividend+1
  9986  0A82  087B               	movf	__MenuNav,w
  9987  0A83  00A2               	movwf	___awdiv@dividend
  9988  0A84  160A  118A  221A  120A  158A  	fcall	___awdiv
  9989  0A89  0820               	movf	?___awdiv,w
  9990  0A8A  3EFF               	addlw	255
  9991  0A8B  00CA               	movwf	??_fMenuStrip
  9992  0A8C  084A               	movf	??_fMenuStrip,w
  9993  0A8D  1683               	bsf	3,5	;RP0=1, select bank1
  9994  0A8E  00BB               	movwf	__cellTwoDigit^(0+128)
  9995                           
  9996                           ;menu.c: 72: _tempTwoDigit = (unsigned char)(_MenuNav / 10 * 10);
  9997  0A8F  300A               	movlw	10
  9998  0A90  1283               	bcf	3,5	;RP0=0, select bank0
  9999  0A91  00CA               	movwf	??_fMenuStrip
 10000  0A92  084A               	movf	??_fMenuStrip,w
 10001  0A93  00A9               	movwf	___bmul@multiplicand
 10002  0A94  087C               	movf	__MenuNav+1,w
 10003  0A95  00A3               	movwf	___awdiv@dividend+1
 10004  0A96  087B               	movf	__MenuNav,w
 10005  0A97  00A2               	movwf	___awdiv@dividend
 10006  0A98  300A               	movlw	10
 10007  0A99  00A0               	movwf	___awdiv@divisor
 10008  0A9A  3000               	movlw	0
 10009  0A9B  00A1               	movwf	___awdiv@divisor+1
 10010  0A9C  160A  118A  221A  120A  158A  	fcall	___awdiv
 10011  0AA1  0820               	movf	?___awdiv,w
 10012  0AA2  160A  158A  2479  120A  158A  	fcall	___bmul
 10013  0AA7  00CB               	movwf	??_fMenuStrip+1
 10014  0AA8  084B               	movf	??_fMenuStrip+1,w
 10015  0AA9  1683               	bsf	3,5	;RP0=1, select bank1
 10016  0AAA  00BA               	movwf	__tempTwoDigit^(0+128)
 10017  0AAB                     l4651:
 10018                           
 10019                           ;menu.c: 73: };menu.c: 75: if(flClearLCD == 0) LCD_clear();
 10020  0AAB  18FA               	btfsc	_flClearLCD/(0+8),_flClearLCD& (0+7)
 10021  0AAC  2F1E               	goto	l4805
 10022  0AAD  160A  158A  248B  120A  158A  	fcall	_LCD_clear
 10023  0AB2  2F1E               	goto	l4805
 10024  0AB3                     l4655:
 10025                           
 10026                           ;menu.c: 91: sprintf(str, "%16s", "Íàñòðîéêè");
 10027  0AB3  30DF               	movlw	low (STR_4| (0+32768))
 10028  0AB4  1283               	bcf	3,5	;RP0=0, select bank0
 10029  0AB5  1303               	bcf	3,6	;RP1=0, select bank0
 10030  0AB6  00AE               	movwf	sprintf@f
 10031  0AB7  3091               	movlw	high (STR_4| (0+32768))
 10032  0AB8  00AF               	movwf	sprintf@f+1
 10033  0AB9  3075               	movlw	low (STR_5| (0+32768))
 10034  0ABA  00B0               	movwf	low ((?_sprintf| 0+2))
 10035  0ABB  3091               	movlw	high (STR_5| (0+32768))
 10036  0ABC  00B1               	movwf	(low ((?_sprintf| 0+2))+1)
 10037  0ABD  30C2               	movlw	(low (_str| (0+256)))& (0+255)
 10038  0ABE  120A  118A  2042  120A  158A  	fcall	_sprintf
 10039                           
 10040                           ;menu.c: 95: break;
 10041  0AC3  2FD4               	goto	l4807
 10042  0AC4                     l4657:
 10043                           
 10044                           ;menu.c: 97: sprintf(str, "%16s", "ÄÎ1-Èìï/ïîñò");
 10045  0AC4  30DF               	movlw	low (STR_4| (0+32768))
 10046  0AC5  1283               	bcf	3,5	;RP0=0, select bank0
 10047  0AC6  1303               	bcf	3,6	;RP1=0, select bank0
 10048  0AC7  00AE               	movwf	sprintf@f
 10049  0AC8  3091               	movlw	high (STR_4| (0+32768))
 10050  0AC9  00AF               	movwf	sprintf@f+1
 10051  0ACA  301F               	movlw	low (STR_7| (0+32768))
 10052  0ACB  00B0               	movwf	low ((?_sprintf| 0+2))
 10053  0ACC  3091               	movlw	high (STR_7| (0+32768))
 10054  0ACD  00B1               	movwf	(low ((?_sprintf| 0+2))+1)
 10055  0ACE  30C2               	movlw	(low (_str| (0+256)))& (0+255)
 10056  0ACF  120A  118A  2042  120A  158A  	fcall	_sprintf
 10057                           
 10058                           ;menu.c: 98: break;
 10059  0AD4  2FD4               	goto	l4807
 10060  0AD5                     l4659:
 10061                           
 10062                           ;menu.c: 100: sprintf(str2, "%s", "Èìïóëüñ");
 10063  0AD5  30F8               	movlw	low (STR_8| (0+32768))
 10064  0AD6  1283               	bcf	3,5	;RP0=0, select bank0
 10065  0AD7  1303               	bcf	3,6	;RP1=0, select bank0
 10066  0AD8  00AE               	movwf	sprintf@f
 10067  0AD9  3091               	movlw	high (STR_8| (0+32768))
 10068  0ADA  00AF               	movwf	sprintf@f+1
 10069  0ADB  30AE               	movlw	low (STR_9| (0+32768))
 10070  0ADC  00B0               	movwf	low ((?_sprintf| 0+2))
 10071  0ADD  3091               	movlw	high (STR_9| (0+32768))
 10072  0ADE  00B1               	movwf	(low ((?_sprintf| 0+2))+1)
 10073  0ADF  30B2               	movlw	(low (_str2| (0+256)))& (0+255)
 10074  0AE0  120A  118A  2042  120A  158A  	fcall	_sprintf
 10075                           
 10076                           ;menu.c: 101: if(_settingsBit & (1 << 1))
 10077  0AE5  1683               	bsf	3,5	;RP0=1, select bank1
 10078  0AE6  1CC4               	btfss	__settingsBit^(0+128),1
 10079  0AE7  2FD4               	goto	l4807
 10080                           
 10081                           ;menu.c: 102: strcat(str2, (unsigned char*)'*');
 10082  0AE8  302A               	movlw	42
 10083  0AE9  1283               	bcf	3,5	;RP0=0, select bank0
 10084  0AEA  00A0               	movwf	strcat@from
 10085  0AEB  3080               	movlw	128
 10086  0AEC  00A1               	movwf	strcat@from+1
 10087  0AED  30B2               	movlw	(low (_str2| (0+256)))& (0+255)
 10088  0AEE  160A  158A  2572  120A  158A  	fcall	_strcat
 10089  0AF3  2FD4               	goto	l4807
 10090  0AF4                     l4665:
 10091                           
 10092                           ;menu.c: 105: _settingTimeImpDO1 = 0;
 10093  0AF4  1683               	bsf	3,5	;RP0=1, select bank1
 10094  0AF5  1303               	bcf	3,6	;RP1=0, select bank1
 10095  0AF6  01B4               	clrf	__settingTimeImpDO1^(0+128)
 10096  0AF7  01B5               	clrf	(__settingTimeImpDO1+1)^(0+128)
 10097                           
 10098                           ;menu.c: 106: ((_settingTimeImpDO1) |= 1UL << (0));
 10099  0AF8  1434               	bsf	__settingTimeImpDO1^(0+128),0
 10100                           
 10101                           ;menu.c: 107: ((_settingsBit) |= 1UL << (1));
 10102  0AF9  14C4               	bsf	__settingsBit^(0+128),1
 10103                           
 10104                           ;menu.c: 108: _MenuNav = 200;
 10105  0AFA  30C8               	movlw	200
 10106  0AFB  2C61               	goto	L16
 10107  0AFC                     l4673:	
 10108                           ;menu.c: 109: break;
 10109                           
 10110                           
 10111                           ;menu.c: 111: sprintf(str2, "%s", "Ïîñòîÿííûé");
 10112  0AFC  30F8               	movlw	low (STR_8| (0+32768))
 10113  0AFD  1283               	bcf	3,5	;RP0=0, select bank0
 10114  0AFE  1303               	bcf	3,6	;RP1=0, select bank0
 10115  0AFF  00AE               	movwf	sprintf@f
 10116  0B00  3091               	movlw	high (STR_8| (0+32768))
 10117  0B01  00AF               	movwf	sprintf@f+1
 10118  0B02  306A               	movlw	low (STR_11| (0+32768))
 10119  0B03  00B0               	movwf	low ((?_sprintf| 0+2))
 10120  0B04  3091               	movlw	high (STR_11| (0+32768))
 10121  0B05  00B1               	movwf	(low ((?_sprintf| 0+2))+1)
 10122  0B06  30B2               	movlw	(low (_str2| (0+256)))& (0+255)
 10123  0B07  120A  118A  2042  120A  158A  	fcall	_sprintf
 10124                           
 10125                           ;menu.c: 112: if(!(_settingsBit & (1 << 1)))
 10126  0B0C  1683               	bsf	3,5	;RP0=1, select bank1
 10127  0B0D  18C4               	btfsc	__settingsBit^(0+128),1
 10128  0B0E  2FD4               	goto	l4807
 10129                           
 10130                           ;menu.c: 113: strcat(str2, (unsigned char*)'*');
 10131  0B0F  302A               	movlw	42
 10132  0B10  1283               	bcf	3,5	;RP0=0, select bank0
 10133  0B11  00A0               	movwf	strcat@from
 10134  0B12  3080               	movlw	128
 10135  0B13  00A1               	movwf	strcat@from+1
 10136  0B14  30B2               	movlw	(low (_str2| (0+256)))& (0+255)
 10137  0B15  160A  158A  2572  120A  158A  	fcall	_strcat
 10138  0B1A  2FD4               	goto	l4807
 10139  0B1B                     l4679:
 10140                           
 10141                           ;menu.c: 116: ((_settingsBit) &= ~(1UL << (1)));
 10142  0B1B  30FD               	movlw	253
 10143  0B1C  1283               	bcf	3,5	;RP0=0, select bank0
 10144  0B1D  1303               	bcf	3,6	;RP1=0, select bank0
 10145  0B1E  00CA               	movwf	??_fMenuStrip
 10146  0B1F  084A               	movf	??_fMenuStrip,w
 10147  0B20  1683               	bsf	3,5	;RP0=1, select bank1
 10148  0B21  05C4               	andwf	__settingsBit^(0+128),f
 10149                           
 10150                           ;menu.c: 117: _MenuNav = 201;
 10151  0B22  30C9               	movlw	201
 10152  0B23  2C61               	goto	L16
 10153  0B24                     l4683:	
 10154                           ;menu.c: 118: break;
 10155                           
 10156                           
 10157                           ;menu.c: 120: sprintf(str, "%16s", "ÄÎ1-Âðåìÿ èìï");
 10158  0B24  30DF               	movlw	low (STR_4| (0+32768))
 10159  0B25  1283               	bcf	3,5	;RP0=0, select bank0
 10160  0B26  1303               	bcf	3,6	;RP1=0, select bank0
 10161  0B27  00AE               	movwf	sprintf@f
 10162  0B28  3091               	movlw	high (STR_4| (0+32768))
 10163  0B29  00AF               	movwf	sprintf@f+1
 10164  0B2A  30F6               	movlw	low (STR_13| (0+32768))
 10165  0B2B  00B0               	movwf	low ((?_sprintf| 0+2))
 10166  0B2C  3090               	movlw	high (STR_13| (0+32768))
 10167  0B2D  00B1               	movwf	(low ((?_sprintf| 0+2))+1)
 10168  0B2E  30C2               	movlw	(low (_str| (0+256)))& (0+255)
 10169  0B2F  120A  118A  2042  120A  158A  	fcall	_sprintf
 10170                           
 10171                           ;menu.c: 121: break;
 10172  0B34  2FD4               	goto	l4807
 10173  0B35                     l4685:
 10174                           
 10175                           ;menu.c: 123: sprintf(str2, "%4d ñåê.", _settingTimeImpDO1);
 10176  0B35  3093               	movlw	low (STR_14| (0+32768))
 10177  0B36  1283               	bcf	3,5	;RP0=0, select bank0
 10178  0B37  1303               	bcf	3,6	;RP1=0, select bank0
 10179  0B38  00AE               	movwf	sprintf@f
 10180  0B39  3091               	movlw	high (STR_14| (0+32768))
 10181  0B3A  00AF               	movwf	sprintf@f+1
 10182  0B3B  1683               	bsf	3,5	;RP0=1, select bank1
 10183  0B3C  0835               	movf	(__settingTimeImpDO1+1)^(0+128),w
 10184  0B3D  1283               	bcf	3,5	;RP0=0, select bank0
 10185  0B3E  00B1               	movwf	?_sprintf+3
 10186  0B3F  1683               	bsf	3,5	;RP0=1, select bank1
 10187  0B40  0834               	movf	__settingTimeImpDO1^(0+128),w
 10188  0B41  1283               	bcf	3,5	;RP0=0, select bank0
 10189  0B42  00B0               	movwf	?_sprintf+2
 10190  0B43  30B2               	movlw	(low (_str2| (0+256)))& (0+255)
 10191  0B44  120A  118A  2042  120A  158A  	fcall	_sprintf
 10192                           
 10193                           ;menu.c: 124: break;
 10194  0B49  2FD4               	goto	l4807
 10195  0B4A                     l4687:
 10196                           
 10197                           ;menu.c: 127: _MenuNav = 210;
 10198  0B4A  30D2               	movlw	210
 10199  0B4B  2C61               	goto	L16
 10200  0B4C                     l4689:	
 10201                           ;menu.c: 128: break;
 10202                           
 10203                           
 10204                           ;menu.c: 130: sprintf(str, "%16s", "ÄÎ2-Âêë òàéìåð");
 10205  0B4C  30DF               	movlw	low (STR_4| (0+32768))
 10206  0B4D  1283               	bcf	3,5	;RP0=0, select bank0
 10207  0B4E  1303               	bcf	3,6	;RP1=0, select bank0
 10208  0B4F  00AE               	movwf	sprintf@f
 10209  0B50  3091               	movlw	high (STR_4| (0+32768))
 10210  0B51  00AF               	movwf	sprintf@f+1
 10211  0B52  30D8               	movlw	low (STR_16| (0+32768))
 10212  0B53  00B0               	movwf	low ((?_sprintf| 0+2))
 10213  0B54  3090               	movlw	high (STR_16| (0+32768))
 10214  0B55  00B1               	movwf	(low ((?_sprintf| 0+2))+1)
 10215  0B56  30C2               	movlw	(low (_str| (0+256)))& (0+255)
 10216  0B57  120A  118A  2042  120A  158A  	fcall	_sprintf
 10217                           
 10218                           ;menu.c: 131: break;
 10219  0B5C  2FD4               	goto	l4807
 10220  0B5D                     l4691:
 10221                           
 10222                           ;menu.c: 133: sprintf(str2, "%s", "Äà");
 10223  0B5D  30F8               	movlw	low (STR_8| (0+32768))
 10224  0B5E  1283               	bcf	3,5	;RP0=0, select bank0
 10225  0B5F  1303               	bcf	3,6	;RP1=0, select bank0
 10226  0B60  00AE               	movwf	sprintf@f
 10227  0B61  3091               	movlw	high (STR_8| (0+32768))
 10228  0B62  00AF               	movwf	sprintf@f+1
 10229  0B63  30F5               	movlw	low (STR_18| (0+32768))
 10230  0B64  00B0               	movwf	low ((?_sprintf| 0+2))
 10231  0B65  3091               	movlw	high (STR_18| (0+32768))
 10232  0B66  00B1               	movwf	(low ((?_sprintf| 0+2))+1)
 10233  0B67  30B2               	movlw	(low (_str2| (0+256)))& (0+255)
 10234  0B68  120A  118A  2042  120A  158A  	fcall	_sprintf
 10235                           
 10236                           ;menu.c: 134: if(_settingsBit & (1 << 3))
 10237  0B6D  1683               	bsf	3,5	;RP0=1, select bank1
 10238  0B6E  1DC4               	btfss	__settingsBit^(0+128),3
 10239  0B6F  2FD4               	goto	l4807
 10240                           
 10241                           ;menu.c: 135: strcat(str2, (unsigned char*)'*');
 10242  0B70  302A               	movlw	42
 10243  0B71  1283               	bcf	3,5	;RP0=0, select bank0
 10244  0B72  00A0               	movwf	strcat@from
 10245  0B73  3080               	movlw	128
 10246  0B74  00A1               	movwf	strcat@from+1
 10247  0B75  30B2               	movlw	(low (_str2| (0+256)))& (0+255)
 10248  0B76  160A  158A  2572  120A  158A  	fcall	_strcat
 10249  0B7B  2FD4               	goto	l4807
 10250  0B7C                     l4697:
 10251                           
 10252                           ;menu.c: 138: if(_settingTimerOnDO2 == 0 || _settingTimerOffDO2 == 0)
 10253  0B7C  1683               	bsf	3,5	;RP0=1, select bank1
 10254  0B7D  1303               	bcf	3,6	;RP1=0, select bank1
 10255  0B7E  0832               	movf	__settingTimerOnDO2^(0+128),w
 10256  0B7F  0433               	iorwf	(__settingTimerOnDO2+1)^(0+128),w
 10257  0B80  1903               	btfsc	3,2
 10258  0B81  2B86               	goto	l4701
 10259  0B82  0830               	movf	__settingTimerOffDO2^(0+128),w
 10260  0B83  0431               	iorwf	(__settingTimerOffDO2+1)^(0+128),w
 10261  0B84  1D03               	btfss	3,2
 10262  0B85  2B8E               	goto	l4703
 10263  0B86                     l4701:
 10264                           
 10265                           ;menu.c: 139: {;menu.c: 140: _settingTimerOnDO2 = 5;
 10266  0B86  3005               	movlw	5
 10267  0B87  00B2               	movwf	__settingTimerOnDO2^(0+128)
 10268  0B88  3000               	movlw	0
 10269  0B89  00B3               	movwf	(__settingTimerOnDO2^(0+128)+1)
 10270                           
 10271                           ;menu.c: 141: _settingTimerOffDO2 = 5;
 10272  0B8A  3005               	movlw	5
 10273  0B8B  00B0               	movwf	__settingTimerOffDO2^(0+128)
 10274  0B8C  3000               	movlw	0
 10275  0B8D  00B1               	movwf	(__settingTimerOffDO2^(0+128)+1)
 10276  0B8E                     l4703:
 10277                           
 10278                           ;menu.c: 142: };menu.c: 143: ((_settingsBit) |= 1UL << (3));
 10279  0B8E  15C4               	bsf	__settingsBit^(0+128),3
 10280                           
 10281                           ;menu.c: 144: _MenuNav = 220;
 10282  0B8F  30DC               	movlw	220
 10283  0B90  2C61               	goto	L16
 10284  0B91                     l4705:	
 10285                           ;menu.c: 145: break;
 10286                           
 10287                           
 10288                           ;menu.c: 147: sprintf(str2, "%s", "Íåò");
 10289  0B91  30F8               	movlw	low (STR_8| (0+32768))
 10290  0B92  1283               	bcf	3,5	;RP0=0, select bank0
 10291  0B93  1303               	bcf	3,6	;RP1=0, select bank0
 10292  0B94  00AE               	movwf	sprintf@f
 10293  0B95  3091               	movlw	high (STR_8| (0+32768))
 10294  0B96  00AF               	movwf	sprintf@f+1
 10295  0B97  30E9               	movlw	low (STR_20| (0+32768))
 10296  0B98  00B0               	movwf	low ((?_sprintf| 0+2))
 10297  0B99  3091               	movlw	high (STR_20| (0+32768))
 10298  0B9A  00B1               	movwf	(low ((?_sprintf| 0+2))+1)
 10299  0B9B  30B2               	movlw	(low (_str2| (0+256)))& (0+255)
 10300  0B9C  120A  118A  2042  120A  158A  	fcall	_sprintf
 10301                           
 10302                           ;menu.c: 148: if(!(_settingsBit & (1 << 3)))
 10303  0BA1  1683               	bsf	3,5	;RP0=1, select bank1
 10304  0BA2  19C4               	btfsc	__settingsBit^(0+128),3
 10305  0BA3  2FD4               	goto	l4807
 10306                           
 10307                           ;menu.c: 149: strcat(str2, (unsigned char*)'*');
 10308  0BA4  302A               	movlw	42
 10309  0BA5  1283               	bcf	3,5	;RP0=0, select bank0
 10310  0BA6  00A0               	movwf	strcat@from
 10311  0BA7  3080               	movlw	128
 10312  0BA8  00A1               	movwf	strcat@from+1
 10313  0BA9  30B2               	movlw	(low (_str2| (0+256)))& (0+255)
 10314  0BAA  160A  158A  2572  120A  158A  	fcall	_strcat
 10315  0BAF  2FD4               	goto	l4807
 10316  0BB0                     l4711:
 10317                           
 10318                           ;menu.c: 152: ((_settingsBit) &= ~(1UL << (3)));
 10319  0BB0  30F7               	movlw	247
 10320  0BB1  1283               	bcf	3,5	;RP0=0, select bank0
 10321  0BB2  1303               	bcf	3,6	;RP1=0, select bank0
 10322  0BB3  00CA               	movwf	??_fMenuStrip
 10323  0BB4  084A               	movf	??_fMenuStrip,w
 10324  0BB5  1683               	bsf	3,5	;RP0=1, select bank1
 10325  0BB6  05C4               	andwf	__settingsBit^(0+128),f
 10326                           
 10327                           ;menu.c: 153: _MenuNav = 221;
 10328  0BB7  30DD               	movlw	221
 10329  0BB8  2C61               	goto	L16
 10330  0BB9                     l4715:	
 10331                           ;menu.c: 154: break;
 10332                           
 10333                           
 10334                           ;menu.c: 156: sprintf(str, "%16s", "ÄÎ2-Òàéìåð âêë");
 10335  0BB9  30DF               	movlw	low (STR_4| (0+32768))
 10336  0BBA  1283               	bcf	3,5	;RP0=0, select bank0
 10337  0BBB  1303               	bcf	3,6	;RP1=0, select bank0
 10338  0BBC  00AE               	movwf	sprintf@f
 10339  0BBD  3091               	movlw	high (STR_4| (0+32768))
 10340  0BBE  00AF               	movwf	sprintf@f+1
 10341  0BBF  30C9               	movlw	low (STR_22| (0+32768))
 10342  0BC0  00B0               	movwf	low ((?_sprintf| 0+2))
 10343  0BC1  3090               	movlw	high (STR_22| (0+32768))
 10344  0BC2  00B1               	movwf	(low ((?_sprintf| 0+2))+1)
 10345  0BC3  30C2               	movlw	(low (_str| (0+256)))& (0+255)
 10346  0BC4  120A  118A  2042  120A  158A  	fcall	_sprintf
 10347                           
 10348                           ;menu.c: 157: break;
 10349  0BC9  2FD4               	goto	l4807
 10350  0BCA                     l4717:
 10351                           
 10352                           ;menu.c: 159: sprintf(str2, "%4d ìèí.", _settingTimerOnDO2);
 10353  0BCA  309C               	movlw	low (STR_23| (0+32768))
 10354  0BCB  1283               	bcf	3,5	;RP0=0, select bank0
 10355  0BCC  1303               	bcf	3,6	;RP1=0, select bank0
 10356  0BCD  00AE               	movwf	sprintf@f
 10357  0BCE  3091               	movlw	high (STR_23| (0+32768))
 10358  0BCF  00AF               	movwf	sprintf@f+1
 10359  0BD0  1683               	bsf	3,5	;RP0=1, select bank1
 10360  0BD1  0833               	movf	(__settingTimerOnDO2+1)^(0+128),w
 10361  0BD2  1283               	bcf	3,5	;RP0=0, select bank0
 10362  0BD3  00B1               	movwf	?_sprintf+3
 10363  0BD4  1683               	bsf	3,5	;RP0=1, select bank1
 10364  0BD5  0832               	movf	__settingTimerOnDO2^(0+128),w
 10365  0BD6  1283               	bcf	3,5	;RP0=0, select bank0
 10366  0BD7  00B0               	movwf	?_sprintf+2
 10367  0BD8  30B2               	movlw	(low (_str2| (0+256)))& (0+255)
 10368  0BD9  120A  118A  2042  120A  158A  	fcall	_sprintf
 10369                           
 10370                           ;menu.c: 160: break;
 10371  0BDE  2FD4               	goto	l4807
 10372  0BDF                     l4719:
 10373                           
 10374                           ;menu.c: 166: sprintf(str, "%16s", "ÄÎ2-Òàéìåð âûêë");
 10375  0BDF  30DF               	movlw	low (STR_4| (0+32768))
 10376  0BE0  1283               	bcf	3,5	;RP0=0, select bank0
 10377  0BE1  1303               	bcf	3,6	;RP1=0, select bank0
 10378  0BE2  00AE               	movwf	sprintf@f
 10379  0BE3  3091               	movlw	high (STR_4| (0+32768))
 10380  0BE4  00AF               	movwf	sprintf@f+1
 10381  0BE5  3099               	movlw	low (STR_25| (0+32768))
 10382  0BE6  00B0               	movwf	low ((?_sprintf| 0+2))
 10383  0BE7  3090               	movlw	high (STR_25| (0+32768))
 10384  0BE8  00B1               	movwf	(low ((?_sprintf| 0+2))+1)
 10385  0BE9  30C2               	movlw	(low (_str| (0+256)))& (0+255)
 10386  0BEA  120A  118A  2042  120A  158A  	fcall	_sprintf
 10387                           
 10388                           ;menu.c: 167: break;
 10389  0BEF  2FD4               	goto	l4807
 10390  0BF0                     l4721:
 10391                           
 10392                           ;menu.c: 169: sprintf(str2, "%4d ìèí.", _settingTimerOffDO2);
 10393  0BF0  309C               	movlw	low (STR_23| (0+32768))
 10394  0BF1  1283               	bcf	3,5	;RP0=0, select bank0
 10395  0BF2  1303               	bcf	3,6	;RP1=0, select bank0
 10396  0BF3  00AE               	movwf	sprintf@f
 10397  0BF4  3091               	movlw	high (STR_23| (0+32768))
 10398  0BF5  00AF               	movwf	sprintf@f+1
 10399  0BF6  1683               	bsf	3,5	;RP0=1, select bank1
 10400  0BF7  0831               	movf	(__settingTimerOffDO2+1)^(0+128),w
 10401  0BF8  1283               	bcf	3,5	;RP0=0, select bank0
 10402  0BF9  00B1               	movwf	?_sprintf+3
 10403  0BFA  1683               	bsf	3,5	;RP0=1, select bank1
 10404  0BFB  0830               	movf	__settingTimerOffDO2^(0+128),w
 10405  0BFC  1283               	bcf	3,5	;RP0=0, select bank0
 10406  0BFD  00B0               	movwf	?_sprintf+2
 10407  0BFE  30B2               	movlw	(low (_str2| (0+256)))& (0+255)
 10408  0BFF  120A  118A  2042  120A  158A  	fcall	_sprintf
 10409                           
 10410                           ;menu.c: 170: break;
 10411  0C04  2FD4               	goto	l4807
 10412  0C05                     l4723:
 10413                           
 10414                           ;menu.c: 176: sprintf(str, "%16s", "ÄÎ2-Âêë ïî òåìï");
 10415  0C05  30DF               	movlw	low (STR_4| (0+32768))
 10416  0C06  1283               	bcf	3,5	;RP0=0, select bank0
 10417  0C07  1303               	bcf	3,6	;RP1=0, select bank0
 10418  0C08  00AE               	movwf	sprintf@f
 10419  0C09  3091               	movlw	high (STR_4| (0+32768))
 10420  0C0A  00AF               	movwf	sprintf@f+1
 10421  0C0B  30A9               	movlw	low (STR_28| (0+32768))
 10422  0C0C  00B0               	movwf	low ((?_sprintf| 0+2))
 10423  0C0D  3090               	movlw	high (STR_28| (0+32768))
 10424  0C0E  00B1               	movwf	(low ((?_sprintf| 0+2))+1)
 10425  0C0F  30C2               	movlw	(low (_str| (0+256)))& (0+255)
 10426  0C10  120A  118A  2042  120A  158A  	fcall	_sprintf
 10427                           
 10428                           ;menu.c: 177: break;
 10429  0C15  2FD4               	goto	l4807
 10430  0C16                     l4725:
 10431                           
 10432                           ;menu.c: 179: sprintf(str2, "%s", "Äà");
 10433  0C16  30F8               	movlw	low (STR_8| (0+32768))
 10434  0C17  1283               	bcf	3,5	;RP0=0, select bank0
 10435  0C18  1303               	bcf	3,6	;RP1=0, select bank0
 10436  0C19  00AE               	movwf	sprintf@f
 10437  0C1A  3091               	movlw	high (STR_8| (0+32768))
 10438  0C1B  00AF               	movwf	sprintf@f+1
 10439  0C1C  30F5               	movlw	low (STR_18| (0+32768))
 10440  0C1D  00B0               	movwf	low ((?_sprintf| 0+2))
 10441  0C1E  3091               	movlw	high (STR_18| (0+32768))
 10442  0C1F  00B1               	movwf	(low ((?_sprintf| 0+2))+1)
 10443  0C20  30B2               	movlw	(low (_str2| (0+256)))& (0+255)
 10444  0C21  120A  118A  2042  120A  158A  	fcall	_sprintf
 10445                           
 10446                           ;menu.c: 180: if(_settingsBit & (1 << 4))
 10447  0C26  1683               	bsf	3,5	;RP0=1, select bank1
 10448  0C27  1E44               	btfss	__settingsBit^(0+128),4
 10449  0C28  2FD4               	goto	l4807
 10450                           
 10451                           ;menu.c: 181: strcat(str2, (unsigned char*)'*');
 10452  0C29  302A               	movlw	42
 10453  0C2A  1283               	bcf	3,5	;RP0=0, select bank0
 10454  0C2B  00A0               	movwf	strcat@from
 10455  0C2C  3080               	movlw	128
 10456  0C2D  00A1               	movwf	strcat@from+1
 10457  0C2E  30B2               	movlw	(low (_str2| (0+256)))& (0+255)
 10458  0C2F  160A  158A  2572  120A  158A  	fcall	_strcat
 10459  0C34  2FD4               	goto	l4807
 10460  0C35                     l646:	
 10461                           ;menu.c: 183: case 2500:
 10462                           
 10463                           
 10464                           ;menu.c: 184: ((_settingsBit) |= 1UL << (4));
 10465  0C35  1683               	bsf	3,5	;RP0=1, select bank1
 10466  0C36  1303               	bcf	3,6	;RP1=0, select bank1
 10467  0C37  1644               	bsf	__settingsBit^(0+128),4
 10468                           
 10469                           ;menu.c: 185: _MenuNav = 250;
 10470  0C38  30FA               	movlw	250
 10471  0C39  2C61               	goto	L16
 10472  0C3A                     l4733:	
 10473                           ;menu.c: 186: break;
 10474                           
 10475                           
 10476                           ;menu.c: 188: sprintf(str2, "%s", "Íåò");
 10477  0C3A  30F8               	movlw	low (STR_8| (0+32768))
 10478  0C3B  1283               	bcf	3,5	;RP0=0, select bank0
 10479  0C3C  1303               	bcf	3,6	;RP1=0, select bank0
 10480  0C3D  00AE               	movwf	sprintf@f
 10481  0C3E  3091               	movlw	high (STR_8| (0+32768))
 10482  0C3F  00AF               	movwf	sprintf@f+1
 10483  0C40  30E9               	movlw	low (STR_20| (0+32768))
 10484  0C41  00B0               	movwf	low ((?_sprintf| 0+2))
 10485  0C42  3091               	movlw	high (STR_20| (0+32768))
 10486  0C43  00B1               	movwf	(low ((?_sprintf| 0+2))+1)
 10487  0C44  30B2               	movlw	(low (_str2| (0+256)))& (0+255)
 10488  0C45  120A  118A  2042  120A  158A  	fcall	_sprintf
 10489                           
 10490                           ;menu.c: 189: if(!(_settingsBit & (1 << 4)))
 10491  0C4A  1683               	bsf	3,5	;RP0=1, select bank1
 10492  0C4B  1A44               	btfsc	__settingsBit^(0+128),4
 10493  0C4C  2FD4               	goto	l4807
 10494                           
 10495                           ;menu.c: 190: strcat(str2, (unsigned char*)'*');
 10496  0C4D  302A               	movlw	42
 10497  0C4E  1283               	bcf	3,5	;RP0=0, select bank0
 10498  0C4F  00A0               	movwf	strcat@from
 10499  0C50  3080               	movlw	128
 10500  0C51  00A1               	movwf	strcat@from+1
 10501  0C52  30B2               	movlw	(low (_str2| (0+256)))& (0+255)
 10502  0C53  160A  158A  2572  120A  158A  	fcall	_strcat
 10503  0C58  2FD4               	goto	l4807
 10504  0C59                     l4739:
 10505                           
 10506                           ;menu.c: 193: ((_settingsBit) &= ~(1UL << (4)));
 10507  0C59  30EF               	movlw	239
 10508  0C5A  1283               	bcf	3,5	;RP0=0, select bank0
 10509  0C5B  1303               	bcf	3,6	;RP1=0, select bank0
 10510  0C5C  00CA               	movwf	??_fMenuStrip
 10511  0C5D  084A               	movf	??_fMenuStrip,w
 10512  0C5E  1683               	bsf	3,5	;RP0=1, select bank1
 10513  0C5F  05C4               	andwf	__settingsBit^(0+128),f
 10514                           
 10515                           ;menu.c: 194: _MenuNav = 251;
 10516  0C60  30FB               	movlw	251
 10517  0C61                     L16:
 10518  0C61  00FB               	movwf	__MenuNav
 10519  0C62  3000               	movlw	0
 10520  0C63  2EC8               	goto	L19
 10521  0C64                     l4743:	
 10522                           ;menu.c: 195: break;
 10523                           
 10524                           
 10525                           ;menu.c: 197: sprintf(str, "%16s", "Ïîêàçàíèÿ");
 10526  0C64  30DF               	movlw	low (STR_4| (0+32768))
 10527  0C65  1283               	bcf	3,5	;RP0=0, select bank0
 10528  0C66  1303               	bcf	3,6	;RP1=0, select bank0
 10529  0C67  00AE               	movwf	sprintf@f
 10530  0C68  3091               	movlw	high (STR_4| (0+32768))
 10531  0C69  00AF               	movwf	sprintf@f+1
 10532  0C6A  307F               	movlw	low (STR_34| (0+32768))
 10533  0C6B  00B0               	movwf	low ((?_sprintf| 0+2))
 10534  0C6C  3091               	movlw	high (STR_34| (0+32768))
 10535  0C6D  00B1               	movwf	(low ((?_sprintf| 0+2))+1)
 10536  0C6E  30C2               	movlw	(low (_str| (0+256)))& (0+255)
 10537  0C6F  120A  118A  2042  120A  158A  	fcall	_sprintf
 10538                           
 10539                           ;menu.c: 201: break;
 10540  0C74  2FD4               	goto	l4807
 10541  0C75                     l4745:
 10542                           
 10543                           ;menu.c: 203: sprintf(str, "%16s", "Àíàëîã. ââîä");
 10544  0C75  30DF               	movlw	low (STR_4| (0+32768))
 10545  0C76  1283               	bcf	3,5	;RP0=0, select bank0
 10546  0C77  1303               	bcf	3,6	;RP1=0, select bank0
 10547  0C78  00AE               	movwf	sprintf@f
 10548  0C79  3091               	movlw	high (STR_4| (0+32768))
 10549  0C7A  00AF               	movwf	sprintf@f+1
 10550  0C7B  3012               	movlw	low (STR_36| (0+32768))
 10551  0C7C  00B0               	movwf	low ((?_sprintf| 0+2))
 10552  0C7D  3091               	movlw	high (STR_36| (0+32768))
 10553  0C7E  00B1               	movwf	(low ((?_sprintf| 0+2))+1)
 10554  0C7F  30C2               	movlw	(low (_str| (0+256)))& (0+255)
 10555  0C80  120A  118A  2042  120A  158A  	fcall	_sprintf
 10556                           
 10557                           ;menu.c: 204: break;
 10558  0C85  2FD4               	goto	l4807
 10559  0C86                     l4747:
 10560                           
 10561                           ;menu.c: 206: sprintf(str2, "%3s%3u  %3s%3u", "Àí1:", Analog.AI1, "Aí2:", Analog.AI2);
 10562  0C86  30E7               	movlw	low (STR_37| (0+32768))
 10563  0C87  1283               	bcf	3,5	;RP0=0, select bank0
 10564  0C88  1303               	bcf	3,6	;RP1=0, select bank0
 10565  0C89  00AE               	movwf	sprintf@f
 10566  0C8A  3090               	movlw	high (STR_37| (0+32768))
 10567  0C8B  00AF               	movwf	sprintf@f+1
 10568  0C8C  30D5               	movlw	low (STR_38| (0+32768))
 10569  0C8D  00B0               	movwf	low ((?_sprintf| 0+2))
 10570  0C8E  3091               	movlw	high (STR_38| (0+32768))
 10571  0C8F  00B1               	movwf	(low ((?_sprintf| 0+2))+1)
 10572  0C90  1683               	bsf	3,5	;RP0=1, select bank1
 10573  0C91  0825               	movf	(_Analog^(0+128)+1),w
 10574  0C92  1283               	bcf	3,5	;RP0=0, select bank0
 10575  0C93  00CA               	movwf	??_fMenuStrip
 10576  0C94  01CB               	clrf	??_fMenuStrip+1
 10577  0C95  084A               	movf	??_fMenuStrip,w
 10578  0C96  00B2               	movwf	?_sprintf+4
 10579  0C97  084B               	movf	??_fMenuStrip+1,w
 10580  0C98  00B3               	movwf	?_sprintf+5
 10581  0C99  30DA               	movlw	low (STR_39| (0+32768))
 10582  0C9A  00B4               	movwf	low ((?_sprintf| 0+6))
 10583  0C9B  3091               	movlw	high (STR_39| (0+32768))
 10584  0C9C  00B5               	movwf	(low ((?_sprintf| 0+6))+1)
 10585  0C9D  1683               	bsf	3,5	;RP0=1, select bank1
 10586  0C9E  0826               	movf	(_Analog^(0+128)+2),w
 10587  0C9F  1283               	bcf	3,5	;RP0=0, select bank0
 10588  0CA0  00CC               	movwf	??_fMenuStrip+2
 10589  0CA1  01CD               	clrf	??_fMenuStrip+3
 10590  0CA2  084C               	movf	??_fMenuStrip+2,w
 10591  0CA3  00B6               	movwf	?_sprintf+8
 10592  0CA4  084D               	movf	??_fMenuStrip+3,w
 10593  0CA5  00B7               	movwf	?_sprintf+9
 10594  0CA6  30B2               	movlw	(low (_str2| (0+256)))& (0+255)
 10595  0CA7  120A  118A  2042  120A  158A  	fcall	_sprintf
 10596                           
 10597                           ;menu.c: 207: break;
 10598  0CAC  2FD4               	goto	l4807
 10599  0CAD                     l4749:
 10600                           
 10601                           ;menu.c: 211: sprintf(str, "%16s", "Öèôð. ââîä");
 10602  0CAD  30DF               	movlw	low (STR_4| (0+32768))
 10603  0CAE  1283               	bcf	3,5	;RP0=0, select bank0
 10604  0CAF  1303               	bcf	3,6	;RP1=0, select bank0
 10605  0CB0  00AE               	movwf	sprintf@f
 10606  0CB1  3091               	movlw	high (STR_4| (0+32768))
 10607  0CB2  00AF               	movwf	sprintf@f+1
 10608  0CB3  305F               	movlw	low (STR_41| (0+32768))
 10609  0CB4  00B0               	movwf	low ((?_sprintf| 0+2))
 10610  0CB5  3091               	movlw	high (STR_41| (0+32768))
 10611  0CB6  00B1               	movwf	(low ((?_sprintf| 0+2))+1)
 10612  0CB7  30C2               	movlw	(low (_str| (0+256)))& (0+255)
 10613  0CB8  120A  118A  2042  120A  158A  	fcall	_sprintf
 10614                           
 10615                           ;menu.c: 212: break;
 10616  0CBD  2FD4               	goto	l4807
 10617  0CBE                     l4751:
 10618                           
 10619                           ;menu.c: 214: sprintf(str2, "%12s%d%d%d%d", "Ä.âõîäû:",RB3,RB4,RB5,RB6);
 10620  0CBE  302C               	movlw	low (STR_42| (0+32768))
 10621  0CBF  1283               	bcf	3,5	;RP0=0, select bank0
 10622  0CC0  1303               	bcf	3,6	;RP1=0, select bank0
 10623  0CC1  00AE               	movwf	sprintf@f
 10624  0CC2  3091               	movlw	high (STR_42| (0+32768))
 10625  0CC3  00AF               	movwf	sprintf@f+1
 10626  0CC4  30A5               	movlw	low (STR_43| (0+32768))
 10627  0CC5  00B0               	movwf	low ((?_sprintf| 0+2))
 10628  0CC6  3091               	movlw	high (STR_43| (0+32768))
 10629  0CC7  00B1               	movwf	(low ((?_sprintf| 0+2))+1)
 10630  0CC8  1003               	clrc
 10631  0CC9  1986               	btfsc	6,3	;volatile
 10632  0CCA  1403               	setc
 10633  0CCB  3000               	movlw	0
 10634  0CCC  1803               	skipnc
 10635  0CCD  3001               	movlw	1
 10636  0CCE  00CA               	movwf	??_fMenuStrip
 10637  0CCF  01CB               	clrf	??_fMenuStrip+1
 10638  0CD0  084A               	movf	??_fMenuStrip,w
 10639  0CD1  00B2               	movwf	?_sprintf+4
 10640  0CD2  084B               	movf	??_fMenuStrip+1,w
 10641  0CD3  00B3               	movwf	?_sprintf+5
 10642  0CD4  1003               	clrc
 10643  0CD5  1A06               	btfsc	6,4	;volatile
 10644  0CD6  1403               	setc
 10645  0CD7  3000               	movlw	0
 10646  0CD8  1803               	skipnc
 10647  0CD9  3001               	movlw	1
 10648  0CDA  00CC               	movwf	??_fMenuStrip+2
 10649  0CDB  01CD               	clrf	??_fMenuStrip+3
 10650  0CDC  084C               	movf	??_fMenuStrip+2,w
 10651  0CDD  00B4               	movwf	?_sprintf+6
 10652  0CDE  084D               	movf	??_fMenuStrip+3,w
 10653  0CDF  00B5               	movwf	?_sprintf+7
 10654  0CE0  1003               	clrc
 10655  0CE1  1A86               	btfsc	6,5	;volatile
 10656  0CE2  1403               	setc
 10657  0CE3  3000               	movlw	0
 10658  0CE4  1803               	skipnc
 10659  0CE5  3001               	movlw	1
 10660  0CE6  00CE               	movwf	??_fMenuStrip+4
 10661  0CE7  01CF               	clrf	??_fMenuStrip+5
 10662  0CE8  084E               	movf	??_fMenuStrip+4,w
 10663  0CE9  00B6               	movwf	?_sprintf+8
 10664  0CEA  084F               	movf	??_fMenuStrip+5,w
 10665  0CEB  00B7               	movwf	?_sprintf+9
 10666  0CEC  1003               	clrc
 10667  0CED  1B06               	btfsc	6,6	;volatile
 10668  0CEE  1403               	setc
 10669  0CEF  3000               	movlw	0
 10670  0CF0  1803               	skipnc
 10671  0CF1  3001               	movlw	1
 10672  0CF2  00D0               	movwf	??_fMenuStrip+6
 10673  0CF3  01D1               	clrf	??_fMenuStrip+7
 10674  0CF4  0850               	movf	??_fMenuStrip+6,w
 10675  0CF5  00B8               	movwf	?_sprintf+10
 10676  0CF6  0851               	movf	??_fMenuStrip+7,w
 10677  0CF7  00B9               	movwf	?_sprintf+11
 10678  0CF8  30B2               	movlw	(low (_str2| (0+256)))& (0+255)
 10679  0CF9  120A  118A  2042  120A  158A  	fcall	_sprintf
 10680                           
 10681                           ;menu.c: 215: break;
 10682  0CFE  2FD4               	goto	l4807
 10683  0CFF                     l4753:
 10684                           
 10685                           ;menu.c: 217: _MenuNav /= 10;
 10686  0CFF  300A               	movlw	10
 10687  0D00  1283               	bcf	3,5	;RP0=0, select bank0
 10688  0D01  1303               	bcf	3,6	;RP1=0, select bank0
 10689  0D02  00A0               	movwf	___awdiv@divisor
 10690  0D03  3000               	movlw	0
 10691  0D04  00A1               	movwf	___awdiv@divisor+1
 10692  0D05  087C               	movf	__MenuNav+1,w
 10693  0D06  00A3               	movwf	___awdiv@dividend+1
 10694  0D07  087B               	movf	__MenuNav,w
 10695  0D08  00A2               	movwf	___awdiv@dividend
 10696  0D09  160A  118A  221A  120A  158A  	fcall	___awdiv
 10697  0D0E  0821               	movf	?___awdiv+1,w
 10698  0D0F  00FC               	movwf	__MenuNav+1
 10699  0D10  0820               	movf	?___awdiv,w
 10700  0D11  00FB               	movwf	__MenuNav
 10701                           
 10702                           ;menu.c: 218: break;
 10703  0D12  2FD4               	goto	l4807
 10704  0D13                     l4755:
 10705                           
 10706                           ;menu.c: 220: sprintf(str, "%16s", "Öèôð. âûâîä");
 10707  0D13  30DF               	movlw	low (STR_4| (0+32768))
 10708  0D14  1283               	bcf	3,5	;RP0=0, select bank0
 10709  0D15  1303               	bcf	3,6	;RP1=0, select bank0
 10710  0D16  00AE               	movwf	sprintf@f
 10711  0D17  3091               	movlw	high (STR_4| (0+32768))
 10712  0D18  00AF               	movwf	sprintf@f+1
 10713  0D19  3053               	movlw	low (STR_45| (0+32768))
 10714  0D1A  00B0               	movwf	low ((?_sprintf| 0+2))
 10715  0D1B  3091               	movlw	high (STR_45| (0+32768))
 10716  0D1C  00B1               	movwf	(low ((?_sprintf| 0+2))+1)
 10717  0D1D  30C2               	movlw	(low (_str| (0+256)))& (0+255)
 10718  0D1E  120A  118A  2042  120A  158A  	fcall	_sprintf
 10719                           
 10720                           ;menu.c: 221: break;
 10721  0D23  2FD4               	goto	l4807
 10722  0D24                     l4757:
 10723                           
 10724                           ;menu.c: 223: sprintf(str2, "%12s%d%d%d%d", "Ä.âûõîäû:",_tempPinDO&0x08?1:0,_tempPinDO&0
      +                          x04?1:0,_tempPinDO&0x02?1:0,_tempPinDO&0x01?1:0);
 10725  0D24  302C               	movlw	low (STR_42| (0+32768))
 10726  0D25  1283               	bcf	3,5	;RP0=0, select bank0
 10727  0D26  1303               	bcf	3,6	;RP1=0, select bank0
 10728  0D27  00AE               	movwf	sprintf@f
 10729  0D28  3091               	movlw	high (STR_42| (0+32768))
 10730  0D29  00AF               	movwf	sprintf@f+1
 10731  0D2A  3089               	movlw	low (STR_47| (0+32768))
 10732  0D2B  00B0               	movwf	low ((?_sprintf| 0+2))
 10733  0D2C  3091               	movlw	high (STR_47| (0+32768))
 10734  0D2D  00B1               	movwf	(low ((?_sprintf| 0+2))+1)
 10735  0D2E  1683               	bsf	3,5	;RP0=1, select bank1
 10736  0D2F  1DC3               	btfss	__tempPinDO^(0+128),3
 10737  0D30  2D33               	goto	u5600
 10738  0D31  3001               	movlw	1
 10739  0D32  2D34               	goto	u5610
 10740  0D33                     u5600:
 10741  0D33  3000               	movlw	0
 10742  0D34                     u5610:
 10743  0D34  1283               	bcf	3,5	;RP0=0, select bank0
 10744  0D35  00CA               	movwf	??_fMenuStrip
 10745  0D36  01CB               	clrf	??_fMenuStrip+1
 10746  0D37  084A               	movf	??_fMenuStrip,w
 10747  0D38  00B2               	movwf	?_sprintf+4
 10748  0D39  084B               	movf	??_fMenuStrip+1,w
 10749  0D3A  00B3               	movwf	?_sprintf+5
 10750  0D3B  1683               	bsf	3,5	;RP0=1, select bank1
 10751  0D3C  1D43               	btfss	__tempPinDO^(0+128),2
 10752  0D3D  2D40               	goto	u5620
 10753  0D3E  3001               	movlw	1
 10754  0D3F  2D41               	goto	u5630
 10755  0D40                     u5620:
 10756  0D40  3000               	movlw	0
 10757  0D41                     u5630:
 10758  0D41  1283               	bcf	3,5	;RP0=0, select bank0
 10759  0D42  00CC               	movwf	??_fMenuStrip+2
 10760  0D43  01CD               	clrf	??_fMenuStrip+3
 10761  0D44  084C               	movf	??_fMenuStrip+2,w
 10762  0D45  00B4               	movwf	?_sprintf+6
 10763  0D46  084D               	movf	??_fMenuStrip+3,w
 10764  0D47  00B5               	movwf	?_sprintf+7
 10765  0D48  1683               	bsf	3,5	;RP0=1, select bank1
 10766  0D49  1CC3               	btfss	__tempPinDO^(0+128),1
 10767  0D4A  2D4D               	goto	u5640
 10768  0D4B  3001               	movlw	1
 10769  0D4C  2D4E               	goto	u5650
 10770  0D4D                     u5640:
 10771  0D4D  3000               	movlw	0
 10772  0D4E                     u5650:
 10773  0D4E  1283               	bcf	3,5	;RP0=0, select bank0
 10774  0D4F  00CE               	movwf	??_fMenuStrip+4
 10775  0D50  01CF               	clrf	??_fMenuStrip+5
 10776  0D51  084E               	movf	??_fMenuStrip+4,w
 10777  0D52  00B6               	movwf	?_sprintf+8
 10778  0D53  084F               	movf	??_fMenuStrip+5,w
 10779  0D54  00B7               	movwf	?_sprintf+9
 10780  0D55  1683               	bsf	3,5	;RP0=1, select bank1
 10781  0D56  1C43               	btfss	__tempPinDO^(0+128),0
 10782  0D57  2D5A               	goto	u5660
 10783  0D58  3001               	movlw	1
 10784  0D59  2D5B               	goto	u5670
 10785  0D5A                     u5660:
 10786  0D5A  3000               	movlw	0
 10787  0D5B                     u5670:
 10788  0D5B  1283               	bcf	3,5	;RP0=0, select bank0
 10789  0D5C  00D0               	movwf	??_fMenuStrip+6
 10790  0D5D  01D1               	clrf	??_fMenuStrip+7
 10791  0D5E  0850               	movf	??_fMenuStrip+6,w
 10792  0D5F  00B8               	movwf	?_sprintf+10
 10793  0D60  0851               	movf	??_fMenuStrip+7,w
 10794  0D61  00B9               	movwf	?_sprintf+11
 10795  0D62  30B2               	movlw	(low (_str2| (0+256)))& (0+255)
 10796  0D63  120A  118A  2042  120A  158A  	fcall	_sprintf
 10797                           
 10798                           ;menu.c: 224: break;
 10799  0D68  2FD4               	goto	l4807
 10800  0D69                     l4761:
 10801                           
 10802                           ;menu.c: 229: sprintf(str, "%16s", "Ïàìÿòü");
 10803  0D69  30DF               	movlw	low (STR_4| (0+32768))
 10804  0D6A  1283               	bcf	3,5	;RP0=0, select bank0
 10805  0D6B  1303               	bcf	3,6	;RP1=0, select bank0
 10806  0D6C  00AE               	movwf	sprintf@f
 10807  0D6D  3091               	movlw	high (STR_4| (0+32768))
 10808  0D6E  00AF               	movwf	sprintf@f+1
 10809  0D6F  30BD               	movlw	low (STR_49| (0+32768))
 10810  0D70  00B0               	movwf	low ((?_sprintf| 0+2))
 10811  0D71  3091               	movlw	high (STR_49| (0+32768))
 10812  0D72  00B1               	movwf	(low ((?_sprintf| 0+2))+1)
 10813  0D73  30C2               	movlw	(low (_str| (0+256)))& (0+255)
 10814  0D74  120A  118A  2042  120A  158A  	fcall	_sprintf
 10815                           
 10816                           ;menu.c: 232: break;
 10817  0D79  2FD4               	goto	l4807
 10818  0D7A                     l4763:
 10819                           
 10820                           ;menu.c: 234: sprintf(str, "%16s", "Ñîõð.òåê.íàñòð.");
 10821  0D7A  30DF               	movlw	low (STR_4| (0+32768))
 10822  0D7B  1283               	bcf	3,5	;RP0=0, select bank0
 10823  0D7C  1303               	bcf	3,6	;RP1=0, select bank0
 10824  0D7D  00AE               	movwf	sprintf@f
 10825  0D7E  3091               	movlw	high (STR_4| (0+32768))
 10826  0D7F  00AF               	movwf	sprintf@f+1
 10827  0D80  30B9               	movlw	low (STR_51| (0+32768))
 10828  0D81  00B0               	movwf	low ((?_sprintf| 0+2))
 10829  0D82  3090               	movlw	high (STR_51| (0+32768))
 10830  0D83  00B1               	movwf	(low ((?_sprintf| 0+2))+1)
 10831  0D84  30C2               	movlw	(low (_str| (0+256)))& (0+255)
 10832  0D85  120A  118A  2042  120A  158A  	fcall	_sprintf
 10833                           
 10834                           ;menu.c: 235: break;
 10835  0D8A  2FD4               	goto	l4807
 10836  0D8B                     l4765:
 10837                           
 10838                           ;menu.c: 237: sprintf(str2, "%s", "Äà");
 10839  0D8B  30F8               	movlw	low (STR_8| (0+32768))
 10840  0D8C  1283               	bcf	3,5	;RP0=0, select bank0
 10841  0D8D  1303               	bcf	3,6	;RP1=0, select bank0
 10842  0D8E  00AE               	movwf	sprintf@f
 10843  0D8F  3091               	movlw	high (STR_8| (0+32768))
 10844  0D90  00AF               	movwf	sprintf@f+1
 10845  0D91  30F5               	movlw	low (STR_18| (0+32768))
 10846  0D92  00B0               	movwf	low ((?_sprintf| 0+2))
 10847  0D93  3091               	movlw	high (STR_18| (0+32768))
 10848  0D94  00B1               	movwf	(low ((?_sprintf| 0+2))+1)
 10849  0D95  30B2               	movlw	(low (_str2| (0+256)))& (0+255)
 10850  0D96  120A  118A  2042  120A  158A  	fcall	_sprintf
 10851                           
 10852                           ;menu.c: 238: if(flUpdate)
 10853  0D9B  1D7A               	btfss	_flUpdate/(0+8),_flUpdate& (0+7)
 10854  0D9C  2FD4               	goto	l4807
 10855                           
 10856                           ;menu.c: 239: strcat(str2, (unsigned char*)'*');
 10857  0D9D  302A               	movlw	42
 10858  0D9E  00A0               	movwf	strcat@from
 10859  0D9F  3080               	movlw	128
 10860  0DA0  00A1               	movwf	strcat@from+1
 10861  0DA1  30B2               	movlw	(low (_str2| (0+256)))& (0+255)
 10862  0DA2  160A  158A  2572  120A  158A  	fcall	_strcat
 10863  0DA7  2FD4               	goto	l4807
 10864  0DA8                     l664:	
 10865                           ;menu.c: 241: case 4000:
 10866                           
 10867                           
 10868                           ;menu.c: 242: flUpdate = 1;
 10869  0DA8  157A               	bsf	_flUpdate/(0+8),_flUpdate& (0+7)
 10870                           
 10871                           ;menu.c: 243: SPI_Write(0,_settingsBit);
 10872  0DA9  3000               	movlw	0
 10873  0DAA  1283               	bcf	3,5	;RP0=0, select bank0
 10874  0DAB  1303               	bcf	3,6	;RP1=0, select bank0
 10875  0DAC  00A6               	movwf	SPI_Write@address
 10876  0DAD  00A7               	movwf	SPI_Write@address+1
 10877  0DAE  1683               	bsf	3,5	;RP0=1, select bank1
 10878  0DAF  0844               	movf	__settingsBit^(0+128),w
 10879  0DB0  1283               	bcf	3,5	;RP0=0, select bank0
 10880  0DB1  00CA               	movwf	??_fMenuStrip
 10881  0DB2  084A               	movf	??_fMenuStrip,w
 10882  0DB3  00A8               	movwf	SPI_Write@data
 10883  0DB4  120A  118A  27CB  120A  158A  	fcall	_SPI_Write
 10884                           
 10885                           ;menu.c: 244: SPI_Write(1,_settingTimeImpDO1>>8);
 10886  0DB9  3001               	movlw	1
 10887  0DBA  00A6               	movwf	SPI_Write@address
 10888  0DBB  3000               	movlw	0
 10889  0DBC  00A7               	movwf	SPI_Write@address+1
 10890  0DBD  1683               	bsf	3,5	;RP0=1, select bank1
 10891  0DBE  0835               	movf	(__settingTimeImpDO1^(0+128)+1),w
 10892  0DBF  1283               	bcf	3,5	;RP0=0, select bank0
 10893  0DC0  00CA               	movwf	??_fMenuStrip
 10894  0DC1  084A               	movf	??_fMenuStrip,w
 10895  0DC2  00A8               	movwf	SPI_Write@data
 10896  0DC3  120A  118A  27CB  120A  158A  	fcall	_SPI_Write
 10897                           
 10898                           ;menu.c: 245: SPI_Write(2,_settingTimeImpDO1);
 10899  0DC8  3002               	movlw	2
 10900  0DC9  00A6               	movwf	SPI_Write@address
 10901  0DCA  3000               	movlw	0
 10902  0DCB  00A7               	movwf	SPI_Write@address+1
 10903  0DCC  1683               	bsf	3,5	;RP0=1, select bank1
 10904  0DCD  0834               	movf	__settingTimeImpDO1^(0+128),w
 10905  0DCE  1283               	bcf	3,5	;RP0=0, select bank0
 10906  0DCF  00CA               	movwf	??_fMenuStrip
 10907  0DD0  084A               	movf	??_fMenuStrip,w
 10908  0DD1  00A8               	movwf	SPI_Write@data
 10909  0DD2  120A  118A  27CB  120A  158A  	fcall	_SPI_Write
 10910                           
 10911                           ;menu.c: 246: SPI_Write(3,_settingTimerOnDO2>>8);
 10912  0DD7  3003               	movlw	3
 10913  0DD8  00A6               	movwf	SPI_Write@address
 10914  0DD9  3000               	movlw	0
 10915  0DDA  00A7               	movwf	SPI_Write@address+1
 10916  0DDB  1683               	bsf	3,5	;RP0=1, select bank1
 10917  0DDC  0833               	movf	(__settingTimerOnDO2^(0+128)+1),w
 10918  0DDD  1283               	bcf	3,5	;RP0=0, select bank0
 10919  0DDE  00CA               	movwf	??_fMenuStrip
 10920  0DDF  084A               	movf	??_fMenuStrip,w
 10921  0DE0  00A8               	movwf	SPI_Write@data
 10922  0DE1  120A  118A  27CB  120A  158A  	fcall	_SPI_Write
 10923                           
 10924                           ;menu.c: 247: SPI_Write(4,_settingTimerOnDO2);
 10925  0DE6  3004               	movlw	4
 10926  0DE7  00A6               	movwf	SPI_Write@address
 10927  0DE8  3000               	movlw	0
 10928  0DE9  00A7               	movwf	SPI_Write@address+1
 10929  0DEA  1683               	bsf	3,5	;RP0=1, select bank1
 10930  0DEB  0832               	movf	__settingTimerOnDO2^(0+128),w
 10931  0DEC  1283               	bcf	3,5	;RP0=0, select bank0
 10932  0DED  00CA               	movwf	??_fMenuStrip
 10933  0DEE  084A               	movf	??_fMenuStrip,w
 10934  0DEF  00A8               	movwf	SPI_Write@data
 10935  0DF0  120A  118A  27CB  120A  158A  	fcall	_SPI_Write
 10936                           
 10937                           ;menu.c: 248: SPI_Write(5,_settingTimerOffDO2>>8);
 10938  0DF5  3005               	movlw	5
 10939  0DF6  00A6               	movwf	SPI_Write@address
 10940  0DF7  3000               	movlw	0
 10941  0DF8  00A7               	movwf	SPI_Write@address+1
 10942  0DF9  1683               	bsf	3,5	;RP0=1, select bank1
 10943  0DFA  0831               	movf	(__settingTimerOffDO2^(0+128)+1),w
 10944  0DFB  1283               	bcf	3,5	;RP0=0, select bank0
 10945  0DFC  00CA               	movwf	??_fMenuStrip
 10946  0DFD  084A               	movf	??_fMenuStrip,w
 10947  0DFE  00A8               	movwf	SPI_Write@data
 10948  0DFF  120A  118A  27CB  120A  158A  	fcall	_SPI_Write
 10949                           
 10950                           ;menu.c: 249: SPI_Write(6,_settingTimerOffDO2);
 10951  0E04  3006               	movlw	6
 10952  0E05  00A6               	movwf	SPI_Write@address
 10953  0E06  3000               	movlw	0
 10954  0E07  00A7               	movwf	SPI_Write@address+1
 10955  0E08  1683               	bsf	3,5	;RP0=1, select bank1
 10956  0E09  0830               	movf	__settingTimerOffDO2^(0+128),w
 10957  0E0A  1283               	bcf	3,5	;RP0=0, select bank0
 10958  0E0B  00CA               	movwf	??_fMenuStrip
 10959  0E0C  084A               	movf	??_fMenuStrip,w
 10960  0E0D  00A8               	movwf	SPI_Write@data
 10961  0E0E  120A  118A  27CB  120A  158A  	fcall	_SPI_Write
 10962                           
 10963                           ;menu.c: 250: _MenuNav = 400;
 10964  0E13  3090               	movlw	144
 10965  0E14  2EC6               	goto	L20
 10966  0E15                     l4775:	
 10967                           ;menu.c: 251: break;
 10968                           
 10969                           
 10970                           ;menu.c: 253: sprintf(str, "%16s", "Ñáðîñ íàñòð. ÎÇÓ");
 10971  0E15  30DF               	movlw	low (STR_4| (0+32768))
 10972  0E16  1283               	bcf	3,5	;RP0=0, select bank0
 10973  0E17  1303               	bcf	3,6	;RP1=0, select bank0
 10974  0E18  00AE               	movwf	sprintf@f
 10975  0E19  3091               	movlw	high (STR_4| (0+32768))
 10976  0E1A  00AF               	movwf	sprintf@f+1
 10977  0E1B  3077               	movlw	low (STR_55| (0+32768))
 10978  0E1C  00B0               	movwf	low ((?_sprintf| 0+2))
 10979  0E1D  3090               	movlw	high (STR_55| (0+32768))
 10980  0E1E  00B1               	movwf	(low ((?_sprintf| 0+2))+1)
 10981  0E1F  30C2               	movlw	(low (_str| (0+256)))& (0+255)
 10982  0E20  120A  118A  2042  120A  158A  	fcall	_sprintf
 10983                           
 10984                           ;menu.c: 254: break;
 10985  0E25  2FD4               	goto	l4807
 10986  0E26                     l4777:
 10987                           
 10988                           ;menu.c: 256: sprintf(str, "%16s", "Äà");
 10989  0E26  30DF               	movlw	low (STR_4| (0+32768))
 10990  0E27  1283               	bcf	3,5	;RP0=0, select bank0
 10991  0E28  1303               	bcf	3,6	;RP1=0, select bank0
 10992  0E29  00AE               	movwf	sprintf@f
 10993  0E2A  3091               	movlw	high (STR_4| (0+32768))
 10994  0E2B  00AF               	movwf	sprintf@f+1
 10995  0E2C  30F5               	movlw	low (STR_18| (0+32768))
 10996  0E2D  00B0               	movwf	low ((?_sprintf| 0+2))
 10997  0E2E  3091               	movlw	high (STR_18| (0+32768))
 10998  0E2F  00B1               	movwf	(low ((?_sprintf| 0+2))+1)
 10999  0E30  30C2               	movlw	(low (_str| (0+256)))& (0+255)
 11000  0E31  120A  118A  2042  120A  158A  	fcall	_sprintf
 11001                           
 11002                           ;menu.c: 257: if(flUpdate)
 11003  0E36  1D7A               	btfss	_flUpdate/(0+8),_flUpdate& (0+7)
 11004  0E37  2FD4               	goto	l4807
 11005                           
 11006                           ;menu.c: 258: strcat(str2, (unsigned char*)'*');
 11007  0E38  302A               	movlw	42
 11008  0E39  00A0               	movwf	strcat@from
 11009  0E3A  3080               	movlw	128
 11010  0E3B  00A1               	movwf	strcat@from+1
 11011  0E3C  30B2               	movlw	(low (_str2| (0+256)))& (0+255)
 11012  0E3D  160A  158A  2572  120A  158A  	fcall	_strcat
 11013  0E42  2FD4               	goto	l4807
 11014  0E43                     l668:	
 11015                           ;menu.c: 260: case 4100:
 11016                           
 11017                           
 11018                           ;menu.c: 261: flUpdate = 1;
 11019  0E43  157A               	bsf	_flUpdate/(0+8),_flUpdate& (0+7)
 11020                           
 11021                           ;menu.c: 262: _settingsBit = 0;
 11022  0E44  1683               	bsf	3,5	;RP0=1, select bank1
 11023  0E45  1303               	bcf	3,6	;RP1=0, select bank1
 11024  0E46  01C4               	clrf	__settingsBit^(0+128)
 11025                           
 11026                           ;menu.c: 263: _settingTimeImpDO1 = 0;
 11027  0E47  01B4               	clrf	__settingTimeImpDO1^(0+128)
 11028  0E48  01B5               	clrf	(__settingTimeImpDO1+1)^(0+128)
 11029                           
 11030                           ;menu.c: 264: _settingTimerOnDO2 = 0;
 11031  0E49  01B2               	clrf	__settingTimerOnDO2^(0+128)
 11032  0E4A  01B3               	clrf	(__settingTimerOnDO2+1)^(0+128)
 11033                           
 11034                           ;menu.c: 265: _settingTimerOffDO2 = 0;
 11035  0E4B  01B0               	clrf	__settingTimerOffDO2^(0+128)
 11036  0E4C  01B1               	clrf	(__settingTimerOffDO2+1)^(0+128)
 11037                           
 11038                           ;menu.c: 266: _MenuNav = 410;
 11039  0E4D  309A               	movlw	154
 11040  0E4E  2EC6               	goto	L20
 11041  0E4F                     l4787:	
 11042                           ;menu.c: 267: break;
 11043                           
 11044                           
 11045                           ;menu.c: 269: sprintf(str, "%16s", "Ñáðîñ íàñòð. ÏÇÓ");
 11046  0E4F  30DF               	movlw	low (STR_4| (0+32768))
 11047  0E50  1283               	bcf	3,5	;RP0=0, select bank0
 11048  0E51  1303               	bcf	3,6	;RP1=0, select bank0
 11049  0E52  00AE               	movwf	sprintf@f
 11050  0E53  3091               	movlw	high (STR_4| (0+32768))
 11051  0E54  00AF               	movwf	sprintf@f+1
 11052  0E55  3088               	movlw	low (STR_59| (0+32768))
 11053  0E56  00B0               	movwf	low ((?_sprintf| 0+2))
 11054  0E57  3090               	movlw	high (STR_59| (0+32768))
 11055  0E58  00B1               	movwf	(low ((?_sprintf| 0+2))+1)
 11056  0E59  30C2               	movlw	(low (_str| (0+256)))& (0+255)
 11057  0E5A  120A  118A  2042  120A  158A  	fcall	_sprintf
 11058                           
 11059                           ;menu.c: 270: break;
 11060  0E5F  2FD4               	goto	l4807
 11061  0E60                     l4789:
 11062                           
 11063                           ;menu.c: 272: sprintf(str, "%16s", "Äà");
 11064  0E60  30DF               	movlw	low (STR_4| (0+32768))
 11065  0E61  1283               	bcf	3,5	;RP0=0, select bank0
 11066  0E62  1303               	bcf	3,6	;RP1=0, select bank0
 11067  0E63  00AE               	movwf	sprintf@f
 11068  0E64  3091               	movlw	high (STR_4| (0+32768))
 11069  0E65  00AF               	movwf	sprintf@f+1
 11070  0E66  30F5               	movlw	low (STR_18| (0+32768))
 11071  0E67  00B0               	movwf	low ((?_sprintf| 0+2))
 11072  0E68  3091               	movlw	high (STR_18| (0+32768))
 11073  0E69  00B1               	movwf	(low ((?_sprintf| 0+2))+1)
 11074  0E6A  30C2               	movlw	(low (_str| (0+256)))& (0+255)
 11075  0E6B  120A  118A  2042  120A  158A  	fcall	_sprintf
 11076                           
 11077                           ;menu.c: 273: if(flUpdate)
 11078  0E70  1D7A               	btfss	_flUpdate/(0+8),_flUpdate& (0+7)
 11079  0E71  2FD4               	goto	l4807
 11080                           
 11081                           ;menu.c: 274: strcat(str2, (unsigned char*)'*');
 11082  0E72  302A               	movlw	42
 11083  0E73  00A0               	movwf	strcat@from
 11084  0E74  3080               	movlw	128
 11085  0E75  00A1               	movwf	strcat@from+1
 11086  0E76  30B2               	movlw	(low (_str2| (0+256)))& (0+255)
 11087  0E77  160A  158A  2572  120A  158A  	fcall	_strcat
 11088  0E7C  2FD4               	goto	l4807
 11089  0E7D                     l672:	
 11090                           ;menu.c: 276: case 4200:
 11091                           
 11092                           
 11093                           ;menu.c: 277: flUpdate = 1;
 11094  0E7D  157A               	bsf	_flUpdate/(0+8),_flUpdate& (0+7)
 11095                           
 11096                           ;menu.c: 279: SPI_Write(0,0);
 11097  0E7E  3000               	movlw	0
 11098  0E7F  1283               	bcf	3,5	;RP0=0, select bank0
 11099  0E80  1303               	bcf	3,6	;RP1=0, select bank0
 11100  0E81  00A6               	movwf	SPI_Write@address
 11101  0E82  00A7               	movwf	SPI_Write@address+1
 11102  0E83  01A8               	clrf	SPI_Write@data
 11103  0E84  120A  118A  27CB  120A  158A  	fcall	_SPI_Write
 11104                           
 11105                           ;menu.c: 280: SPI_Write(1,0);
 11106  0E89  3001               	movlw	1
 11107  0E8A  00A6               	movwf	SPI_Write@address
 11108  0E8B  3000               	movlw	0
 11109  0E8C  00A7               	movwf	SPI_Write@address+1
 11110  0E8D  01A8               	clrf	SPI_Write@data
 11111  0E8E  120A  118A  27CB  120A  158A  	fcall	_SPI_Write
 11112                           
 11113                           ;menu.c: 281: SPI_Write(2,0);
 11114  0E93  3002               	movlw	2
 11115  0E94  00A6               	movwf	SPI_Write@address
 11116  0E95  3000               	movlw	0
 11117  0E96  00A7               	movwf	SPI_Write@address+1
 11118  0E97  01A8               	clrf	SPI_Write@data
 11119  0E98  120A  118A  27CB  120A  158A  	fcall	_SPI_Write
 11120                           
 11121                           ;menu.c: 282: SPI_Write(3,0);
 11122  0E9D  3003               	movlw	3
 11123  0E9E  00A6               	movwf	SPI_Write@address
 11124  0E9F  3000               	movlw	0
 11125  0EA0  00A7               	movwf	SPI_Write@address+1
 11126  0EA1  01A8               	clrf	SPI_Write@data
 11127  0EA2  120A  118A  27CB  120A  158A  	fcall	_SPI_Write
 11128                           
 11129                           ;menu.c: 283: SPI_Write(4,0);
 11130  0EA7  3004               	movlw	4
 11131  0EA8  00A6               	movwf	SPI_Write@address
 11132  0EA9  3000               	movlw	0
 11133  0EAA  00A7               	movwf	SPI_Write@address+1
 11134  0EAB  01A8               	clrf	SPI_Write@data
 11135  0EAC  120A  118A  27CB  120A  158A  	fcall	_SPI_Write
 11136                           
 11137                           ;menu.c: 284: SPI_Write(5,0);
 11138  0EB1  3005               	movlw	5
 11139  0EB2  00A6               	movwf	SPI_Write@address
 11140  0EB3  3000               	movlw	0
 11141  0EB4  00A7               	movwf	SPI_Write@address+1
 11142  0EB5  01A8               	clrf	SPI_Write@data
 11143  0EB6  120A  118A  27CB  120A  158A  	fcall	_SPI_Write
 11144                           
 11145                           ;menu.c: 285: SPI_Write(6,0);
 11146  0EBB  3006               	movlw	6
 11147  0EBC  00A6               	movwf	SPI_Write@address
 11148  0EBD  3000               	movlw	0
 11149  0EBE  00A7               	movwf	SPI_Write@address+1
 11150  0EBF  01A8               	clrf	SPI_Write@data
 11151  0EC0  120A  118A  27CB  120A  158A  	fcall	_SPI_Write
 11152                           
 11153                           ;menu.c: 287: _MenuNav = 420;
 11154  0EC5  30A4               	movlw	164
 11155  0EC6                     L20:
 11156  0EC6  00FB               	movwf	__MenuNav
 11157  0EC7  3001               	movlw	1
 11158  0EC8                     L19:
 11159  0EC8  00FC               	movwf	__MenuNav+1
 11160                           
 11161                           ;menu.c: 288: break;
 11162  0EC9  2FD4               	goto	l4807
 11163  0ECA                     l4799:
 11164                           
 11165                           ;menu.c: 290: sprintf(str, "%4s%3d %5s%3d", "Òâí:", temperatureAI1, "Òíàð:", temperature
      +                          AI2);
 11166  0ECA  3004               	movlw	low (STR_62| (0+32768))
 11167  0ECB  1283               	bcf	3,5	;RP0=0, select bank0
 11168  0ECC  1303               	bcf	3,6	;RP1=0, select bank0
 11169  0ECD  00AE               	movwf	sprintf@f
 11170  0ECE  3091               	movlw	high (STR_62| (0+32768))
 11171  0ECF  00AF               	movwf	sprintf@f+1
 11172  0ED0  30D0               	movlw	low (STR_63| (0+32768))
 11173  0ED1  00B0               	movwf	low ((?_sprintf| 0+2))
 11174  0ED2  3091               	movlw	high (STR_63| (0+32768))
 11175  0ED3  00B1               	movwf	(low ((?_sprintf| 0+2))+1)
 11176  0ED4  1683               	bsf	3,5	;RP0=1, select bank1
 11177  0ED5  0839               	movf	_temperatureAI1^(0+128),w
 11178  0ED6  1283               	bcf	3,5	;RP0=0, select bank0
 11179  0ED7  00B2               	movwf	?_sprintf+4
 11180  0ED8  01B3               	clrf	?_sprintf+5
 11181  0ED9  1BB2               	btfsc	?_sprintf+4,7
 11182  0EDA  03B3               	decf	?_sprintf+5,f
 11183  0EDB  30CA               	movlw	low (STR_64| (0+32768))
 11184  0EDC  00B4               	movwf	low ((?_sprintf| 0+6))
 11185  0EDD  3091               	movlw	high (STR_64| (0+32768))
 11186  0EDE  00B5               	movwf	(low ((?_sprintf| 0+6))+1)
 11187  0EDF  1683               	bsf	3,5	;RP0=1, select bank1
 11188  0EE0  0838               	movf	_temperatureAI2^(0+128),w
 11189  0EE1  1283               	bcf	3,5	;RP0=0, select bank0
 11190  0EE2  00B6               	movwf	?_sprintf+8
 11191  0EE3  01B7               	clrf	?_sprintf+9
 11192  0EE4  1BB6               	btfsc	?_sprintf+8,7
 11193  0EE5  03B7               	decf	?_sprintf+9,f
 11194  0EE6  30C2               	movlw	(low (_str| (0+256)))& (0+255)
 11195  0EE7  120A  118A  2042  120A  158A  	fcall	_sprintf
 11196                           
 11197                           ;menu.c: 293: sprintf(str2, "%3s%4s%5s%4s", "ÄÓ:", LCD_StringOnOff((const unsigned char)
      +                          _tempPinDO,3u),"ÍÀÃÐ:",LCD_StringOnOff((const unsigned char)_tempPinDO,4u));
 11198  0EEC  3039               	movlw	low (STR_65| (0+32768))
 11199  0EED  00AE               	movwf	sprintf@f
 11200  0EEE  3091               	movlw	high (STR_65| (0+32768))
 11201  0EEF  00AF               	movwf	sprintf@f+1
 11202  0EF0  30ED               	movlw	low (STR_66| (0+32768))
 11203  0EF1  00B0               	movwf	low ((?_sprintf| 0+2))
 11204  0EF2  3091               	movlw	high (STR_66| (0+32768))
 11205  0EF3  00B1               	movwf	(low ((?_sprintf| 0+2))+1)
 11206  0EF4  3003               	movlw	3
 11207  0EF5  00CA               	movwf	??_fMenuStrip
 11208  0EF6  084A               	movf	??_fMenuStrip,w
 11209  0EF7  00A0               	movwf	LCD_StringOnOff@numb
 11210  0EF8  1683               	bsf	3,5	;RP0=1, select bank1
 11211  0EF9  0843               	movf	__tempPinDO^(0+128),w
 11212  0EFA  160A  158A  24B6  120A  158A  	fcall	_LCD_StringOnOff
 11213  0EFF  0820               	movf	?_LCD_StringOnOff,w
 11214  0F00  00B2               	movwf	low ((?_sprintf| 0+4))
 11215  0F01  0821               	movf	?_LCD_StringOnOff+1,w
 11216  0F02  00B3               	movwf	(low ((?_sprintf| 0+4))+1)
 11217  0F03  30C4               	movlw	low (STR_67| (0+32768))
 11218  0F04  00B4               	movwf	low ((?_sprintf| 0+6))
 11219  0F05  3091               	movlw	high (STR_67| (0+32768))
 11220  0F06  00B5               	movwf	(low ((?_sprintf| 0+6))+1)
 11221  0F07  3004               	movlw	4
 11222  0F08  00CB               	movwf	??_fMenuStrip+1
 11223  0F09  084B               	movf	??_fMenuStrip+1,w
 11224  0F0A  00A0               	movwf	LCD_StringOnOff@numb
 11225  0F0B  1683               	bsf	3,5	;RP0=1, select bank1
 11226  0F0C  0843               	movf	__tempPinDO^(0+128),w
 11227  0F0D  160A  158A  24B6  120A  158A  	fcall	_LCD_StringOnOff
 11228  0F12  0820               	movf	?_LCD_StringOnOff,w
 11229  0F13  00B6               	movwf	low ((?_sprintf| 0+8))
 11230  0F14  0821               	movf	?_LCD_StringOnOff+1,w
 11231  0F15  00B7               	movwf	(low ((?_sprintf| 0+8))+1)
 11232  0F16  30B2               	movlw	(low (_str2| (0+256)))& (0+255)
 11233  0F17  120A  118A  2042  120A  158A  	fcall	_sprintf
 11234                           
 11235                           ;menu.c: 297: flClearLCD = 1;
 11236  0F1C  14FA               	bsf	_flClearLCD/(0+8),_flClearLCD& (0+7)
 11237                           
 11238                           ;menu.c: 298: break;
 11239  0F1D  2FD4               	goto	l4807
 11240  0F1E                     l4805:
 11241                           
 11242                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 9 sub-sw
      +                          itches
 11243                           ; Switch size 1, requested type "simple"
 11244                           ; Number of cases is 9, Range of values is 0 to 16
 11245                           ; switch strategies available:
 11246                           ; Name         Instructions Cycles
 11247                           ; simple_byte           28    15 (average)
 11248                           ; direct_byte           59     8 (fixed)
 11249                           ; jumptable            260     6 (fixed)
 11250                           ;	Chosen strategy is simple_byte
 11251  0F1E  087C               	movf	__MenuNav+1,w
 11252  0F1F  3A00               	xorlw	0	; case 0
 11253  0F20  1903               	skipnz
 11254  0F21  2F3B               	goto	l5413
 11255  0F22  3A01               	xorlw	1	; case 1
 11256  0F23  1903               	skipnz
 11257  0F24  2F85               	goto	l5415
 11258  0F25  3A06               	xorlw	6	; case 7
 11259  0F26  1903               	skipnz
 11260  0F27  2F99               	goto	l5417
 11261  0F28  3A0F               	xorlw	15	; case 8
 11262  0F29  1903               	skipnz
 11263  0F2A  2FA1               	goto	l5419
 11264  0F2B  3A01               	xorlw	1	; case 9
 11265  0F2C  1903               	skipnz
 11266  0F2D  2FAF               	goto	l5421
 11267  0F2E  3A02               	xorlw	2	; case 11
 11268  0F2F  1903               	skipnz
 11269  0F30  2FBA               	goto	l5423
 11270  0F31  3A07               	xorlw	7	; case 12
 11271  0F32  1903               	skipnz
 11272  0F33  2FBF               	goto	l5425
 11273  0F34  3A03               	xorlw	3	; case 15
 11274  0F35  1903               	skipnz
 11275  0F36  2FC7               	goto	l5427
 11276  0F37  3A1F               	xorlw	31	; case 16
 11277  0F38  1903               	skipnz
 11278  0F39  2FCC               	goto	l5429
 11279  0F3A  2ECA               	goto	l4799
 11280  0F3B                     l5413:
 11281                           
 11282                           ; Switch size 1, requested type "simple"
 11283                           ; Number of cases is 24, Range of values is 2 to 251
 11284                           ; switch strategies available:
 11285                           ; Name         Instructions Cycles
 11286                           ; simple_byte           73    37 (average)
 11287                           ; jumptable            263     9 (fixed)
 11288                           ;	Chosen strategy is simple_byte
 11289  0F3B  087B               	movf	__MenuNav,w
 11290  0F3C  3A02               	xorlw	2	; case 2
 11291  0F3D  1903               	skipnz
 11292  0F3E  2AB3               	goto	l4655
 11293  0F3F  3A01               	xorlw	1	; case 3
 11294  0F40  1903               	skipnz
 11295  0F41  2C64               	goto	l4743
 11296  0F42  3A07               	xorlw	7	; case 4
 11297  0F43  1903               	skipnz
 11298  0F44  2D69               	goto	l4761
 11299  0F45  3A10               	xorlw	16	; case 20
 11300  0F46  1903               	skipnz
 11301  0F47  2AC4               	goto	l4657
 11302  0F48  3A01               	xorlw	1	; case 21
 11303  0F49  1903               	skipnz
 11304  0F4A  2B24               	goto	l4683
 11305  0F4B  3A03               	xorlw	3	; case 22
 11306  0F4C  1903               	skipnz
 11307  0F4D  2B4C               	goto	l4689
 11308  0F4E  3A01               	xorlw	1	; case 23
 11309  0F4F  1903               	skipnz
 11310  0F50  2BB9               	goto	l4715
 11311  0F51  3A0F               	xorlw	15	; case 24
 11312  0F52  1903               	skipnz
 11313  0F53  2BDF               	goto	l4719
 11314  0F54  3A01               	xorlw	1	; case 25
 11315  0F55  1903               	skipnz
 11316  0F56  2C05               	goto	l4723
 11317  0F57  3A07               	xorlw	7	; case 30
 11318  0F58  1903               	skipnz
 11319  0F59  2C75               	goto	l4745
 11320  0F5A  3A01               	xorlw	1	; case 31
 11321  0F5B  1903               	skipnz
 11322  0F5C  2CAD               	goto	l4749
 11323  0F5D  3A3F               	xorlw	63	; case 32
 11324  0F5E  1903               	skipnz
 11325  0F5F  2D13               	goto	l4755
 11326  0F60  3A08               	xorlw	8	; case 40
 11327  0F61  1903               	skipnz
 11328  0F62  2D7A               	goto	l4763
 11329  0F63  3A01               	xorlw	1	; case 41
 11330  0F64  1903               	skipnz
 11331  0F65  2E15               	goto	l4775
 11332  0F66  3A03               	xorlw	3	; case 42
 11333  0F67  1903               	skipnz
 11334  0F68  2E4F               	goto	l4787
 11335  0F69  3AE2               	xorlw	226	; case 200
 11336  0F6A  1903               	skipnz
 11337  0F6B  2AD5               	goto	l4659
 11338  0F6C  3A01               	xorlw	1	; case 201
 11339  0F6D  1903               	skipnz
 11340  0F6E  2AFC               	goto	l4673
 11341  0F6F  3A1B               	xorlw	27	; case 210
 11342  0F70  1903               	skipnz
 11343  0F71  2B35               	goto	l4685
 11344  0F72  3A0E               	xorlw	14	; case 220
 11345  0F73  1903               	skipnz
 11346  0F74  2B5D               	goto	l4691
 11347  0F75  3A01               	xorlw	1	; case 221
 11348  0F76  1903               	skipnz
 11349  0F77  2B91               	goto	l4705
 11350  0F78  3A3B               	xorlw	59	; case 230
 11351  0F79  1903               	skipnz
 11352  0F7A  2BCA               	goto	l4717
 11353  0F7B  3A16               	xorlw	22	; case 240
 11354  0F7C  1903               	skipnz
 11355  0F7D  2BF0               	goto	l4721
 11356  0F7E  3A0A               	xorlw	10	; case 250
 11357  0F7F  1903               	skipnz
 11358  0F80  2C16               	goto	l4725
 11359  0F81  3A01               	xorlw	1	; case 251
 11360  0F82  1903               	skipnz
 11361  0F83  2C3A               	goto	l4733
 11362  0F84  2ECA               	goto	l4799
 11363  0F85                     l5415:
 11364                           
 11365                           ; Switch size 1, requested type "simple"
 11366                           ; Number of cases is 6, Range of values is 44 to 164
 11367                           ; switch strategies available:
 11368                           ; Name         Instructions Cycles
 11369                           ; simple_byte           19    10 (average)
 11370                           ; jumptable            263     9 (fixed)
 11371                           ;	Chosen strategy is simple_byte
 11372  0F85  087B               	movf	__MenuNav,w
 11373  0F86  3A2C               	xorlw	44	; case 44
 11374  0F87  1903               	skipnz
 11375  0F88  2C86               	goto	l4747
 11376  0F89  3A1A               	xorlw	26	; case 54
 11377  0F8A  1903               	skipnz
 11378  0F8B  2CBE               	goto	l4751
 11379  0F8C  3A76               	xorlw	118	; case 64
 11380  0F8D  1903               	skipnz
 11381  0F8E  2D24               	goto	l4757
 11382  0F8F  3AD0               	xorlw	208	; case 144
 11383  0F90  1903               	skipnz
 11384  0F91  2D8B               	goto	l4765
 11385  0F92  3A0A               	xorlw	10	; case 154
 11386  0F93  1903               	skipnz
 11387  0F94  2E26               	goto	l4777
 11388  0F95  3A3E               	xorlw	62	; case 164
 11389  0F96  1903               	skipnz
 11390  0F97  2E60               	goto	l4789
 11391  0F98  2ECA               	goto	l4799
 11392  0F99                     l5417:
 11393                           
 11394                           ; Switch size 1, requested type "simple"
 11395                           ; Number of cases is 2, Range of values is 208 to 218
 11396                           ; switch strategies available:
 11397                           ; Name         Instructions Cycles
 11398                           ; simple_byte            7     4 (average)
 11399                           ; direct_byte           44    11 (fixed)
 11400                           ; jumptable            263     9 (fixed)
 11401                           ;	Chosen strategy is simple_byte
 11402  0F99  087B               	movf	__MenuNav,w
 11403  0F9A  3AD0               	xorlw	208	; case 208
 11404  0F9B  1903               	skipnz
 11405  0F9C  2AF4               	goto	l4665
 11406  0F9D  3A0A               	xorlw	10	; case 218
 11407  0F9E  1903               	skipnz
 11408  0F9F  2B1B               	goto	l4679
 11409  0FA0  2ECA               	goto	l4799
 11410  0FA1                     l5419:
 11411                           
 11412                           ; Switch size 1, requested type "simple"
 11413                           ; Number of cases is 4, Range of values is 52 to 252
 11414                           ; switch strategies available:
 11415                           ; Name         Instructions Cycles
 11416                           ; simple_byte           13     7 (average)
 11417                           ; jumptable            263     9 (fixed)
 11418                           ;	Chosen strategy is simple_byte
 11419  0FA1  087B               	movf	__MenuNav,w
 11420  0FA2  3A34               	xorlw	52	; case 52
 11421  0FA3  1903               	skipnz
 11422  0FA4  2B4A               	goto	l4687
 11423  0FA5  3AAC               	xorlw	172	; case 152
 11424  0FA6  1903               	skipnz
 11425  0FA7  2B7C               	goto	l4697
 11426  0FA8  3A3A               	xorlw	58	; case 162
 11427  0FA9  1903               	skipnz
 11428  0FAA  2BB0               	goto	l4711
 11429  0FAB  3A5E               	xorlw	94	; case 252
 11430  0FAC  1903               	skipnz
 11431  0FAD  2FD4               	goto	l4807
 11432  0FAE  2ECA               	goto	l4799
 11433  0FAF                     l5421:
 11434                           
 11435                           ; Switch size 1, requested type "simple"
 11436                           ; Number of cases is 3, Range of values is 96 to 206
 11437                           ; switch strategies available:
 11438                           ; Name         Instructions Cycles
 11439                           ; simple_byte           10     6 (average)
 11440                           ; jumptable            263     9 (fixed)
 11441                           ;	Chosen strategy is simple_byte
 11442  0FAF  087B               	movf	__MenuNav,w
 11443  0FB0  3A60               	xorlw	96	; case 96
 11444  0FB1  1903               	skipnz
 11445  0FB2  2FD4               	goto	l4807
 11446  0FB3  3AA4               	xorlw	164	; case 196
 11447  0FB4  1903               	skipnz
 11448  0FB5  2C35               	goto	l646
 11449  0FB6  3A0A               	xorlw	10	; case 206
 11450  0FB7  1903               	skipnz
 11451  0FB8  2C59               	goto	l4739
 11452  0FB9  2ECA               	goto	l4799
 11453  0FBA                     l5423:
 11454                           
 11455                           ; Switch size 1, requested type "simple"
 11456                           ; Number of cases is 1, Range of values is 184 to 184
 11457                           ; switch strategies available:
 11458                           ; Name         Instructions Cycles
 11459                           ; simple_byte            4     3 (average)
 11460                           ; direct_byte           14    11 (fixed)
 11461                           ; jumptable            263     9 (fixed)
 11462                           ;	Chosen strategy is simple_byte
 11463  0FBA  087B               	movf	__MenuNav,w
 11464  0FBB  3AB8               	xorlw	184	; case 184
 11465  0FBC  1903               	skipnz
 11466  0FBD  2FD4               	goto	l4807
 11467  0FBE  2ECA               	goto	l4799
 11468  0FBF                     l5425:
 11469                           
 11470                           ; Switch size 1, requested type "simple"
 11471                           ; Number of cases is 2, Range of values is 28 to 128
 11472                           ; switch strategies available:
 11473                           ; Name         Instructions Cycles
 11474                           ; simple_byte            7     4 (average)
 11475                           ; jumptable            263     9 (fixed)
 11476                           ;	Chosen strategy is simple_byte
 11477  0FBF  087B               	movf	__MenuNav,w
 11478  0FC0  3A1C               	xorlw	28	; case 28
 11479  0FC1  1903               	skipnz
 11480  0FC2  2CFF               	goto	l4753
 11481  0FC3  3A9C               	xorlw	156	; case 128
 11482  0FC4  1903               	skipnz
 11483  0FC5  2CFF               	goto	l4753
 11484  0FC6  2ECA               	goto	l4799
 11485  0FC7                     l5427:
 11486                           
 11487                           ; Switch size 1, requested type "simple"
 11488                           ; Number of cases is 1, Range of values is 160 to 160
 11489                           ; switch strategies available:
 11490                           ; Name         Instructions Cycles
 11491                           ; simple_byte            4     3 (average)
 11492                           ; direct_byte           14    11 (fixed)
 11493                           ; jumptable            263     9 (fixed)
 11494                           ;	Chosen strategy is simple_byte
 11495  0FC7  087B               	movf	__MenuNav,w
 11496  0FC8  3AA0               	xorlw	160	; case 160
 11497  0FC9  1903               	skipnz
 11498  0FCA  2DA8               	goto	l664
 11499  0FCB  2ECA               	goto	l4799
 11500  0FCC                     l5429:
 11501                           
 11502                           ; Switch size 1, requested type "simple"
 11503                           ; Number of cases is 2, Range of values is 4 to 104
 11504                           ; switch strategies available:
 11505                           ; Name         Instructions Cycles
 11506                           ; simple_byte            7     4 (average)
 11507                           ; jumptable            263     9 (fixed)
 11508                           ;	Chosen strategy is simple_byte
 11509  0FCC  087B               	movf	__MenuNav,w
 11510  0FCD  3A04               	xorlw	4	; case 4
 11511  0FCE  1903               	skipnz
 11512  0FCF  2E43               	goto	l668
 11513  0FD0  3A6C               	xorlw	108	; case 104
 11514  0FD1  1903               	skipnz
 11515  0FD2  2E7D               	goto	l672
 11516  0FD3  2ECA               	goto	l4799
 11517  0FD4                     l4807:
 11518                           
 11519                           ;menu.c: 305: LCD_SetPos(0,0);
 11520  0FD4  1283               	bcf	3,5	;RP0=0, select bank0
 11521  0FD5  1303               	bcf	3,6	;RP1=0, select bank0
 11522  0FD6  01AC               	clrf	LCD_SetPos@y
 11523  0FD7  3000               	movlw	0
 11524  0FD8  160A  158A  24CF  120A  158A  	fcall	_LCD_SetPos
 11525                           
 11526                           ;menu.c: 306: LCD_string((char*)str);
 11527  0FDD  30C2               	movlw	(low (_str| (0+256)))& (0+255)
 11528  0FDE  1283               	bcf	3,5	;RP0=0, select bank0
 11529  0FDF  1303               	bcf	3,6	;RP1=0, select bank0
 11530  0FE0  00AE               	movwf	LCD_string@st
 11531  0FE1  3001               	movlw	1
 11532  0FE2  00AF               	movwf	LCD_string@st+1
 11533  0FE3  160A  158A  27B1  120A  158A  	fcall	_LCD_string
 11534                           
 11535                           ;menu.c: 307: LCD_SetPos(0,1);
 11536  0FE8  01AC               	clrf	LCD_SetPos@y
 11537  0FE9  0AAC               	incf	LCD_SetPos@y,f
 11538  0FEA  3000               	movlw	0
 11539  0FEB  160A  158A  24CF  120A  158A  	fcall	_LCD_SetPos
 11540                           
 11541                           ;menu.c: 308: LCD_string((char*)str2);
 11542  0FF0  30B2               	movlw	(low (_str2| (0+256)))& (0+255)
 11543  0FF1  1283               	bcf	3,5	;RP0=0, select bank0
 11544  0FF2  1303               	bcf	3,6	;RP1=0, select bank0
 11545  0FF3  00AE               	movwf	LCD_string@st
 11546  0FF4  3001               	movlw	1
 11547  0FF5  00AF               	movwf	LCD_string@st+1
 11548  0FF6  160A  158A  27B1  120A  158A  	fcall	_LCD_string
 11549                           
 11550                           ;menu.c: 311: fEraseString(str2);
 11551  0FFB  30B2               	movlw	(low (_str2| (0+256)))& (0+255)
 11552  0FFC  160A  158A  2422   	fcall	_fEraseString
 11553  0FFF  0008               	return
 11554  1000                     __end_of_fMenuStrip:

Data Sizes:
    Strings     388
    Constant    101
    Data        36
    BSS         73
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     10      14
    BANK0            80     80      80
    BANK1            80     34      75
    BANK3            96      0      66
    BANK2            96      0       0

Pointer List with Targets:

    strcat@from	PTR const unsigned char  size(2) Largest target is 8192
		 -> ROM(CODE[8192]), 

    strcat@to	PTR unsigned char  size(1) Largest target is 16
		 -> str2(BANK3[16]), 

    strcat@cp	PTR unsigned char  size(1) Largest target is 16
		 -> str2(BANK3[16]), 

    frexp@eptr	PTR int  size(1) Largest target is 2
		 -> log@exponent(BANK1[2]), 

    eval_poly@d	PTR const  size(2) Largest target is 27
		 -> log@coeff(CODE[27]), 

    sprintf@cp	PTR const unsigned char  size(2) Largest target is 17
		 -> STR_68(CODE[7]), ?_sprintf(BANK0[2]), STR_67(CODE[6]), STR_66(CODE[4]), 
		 -> STR_64(CODE[6]), STR_63(CODE[5]), STR_61(CODE[3]), STR_59(CODE[17]), 
		 -> STR_57(CODE[3]), STR_55(CODE[17]), STR_53(CODE[3]), STR_51(CODE[16]), 
		 -> STR_49(CODE[7]), STR_47(CODE[10]), STR_45(CODE[12]), STR_43(CODE[9]), 
		 -> STR_41(CODE[11]), STR_39(CODE[5]), STR_38(CODE[5]), STR_36(CODE[13]), 
		 -> STR_34(CODE[10]), STR_32(CODE[4]), STR_30(CODE[3]), STR_28(CODE[16]), 
		 -> STR_25(CODE[16]), STR_22(CODE[15]), STR_20(CODE[4]), STR_18(CODE[3]), 
		 -> STR_16(CODE[15]), STR_13(CODE[14]), STR_11(CODE[11]), STR_9(CODE[8]), 
		 -> STR_7(CODE[13]), STR_5(CODE[10]), STR_3(CODE[5]), STR_2(CODE[4]), 

    sprintf@f	PTR const unsigned char  size(2) Largest target is 15
		 -> STR_65(CODE[13]), STR_62(CODE[14]), STR_60(CODE[5]), STR_58(CODE[5]), 
		 -> STR_56(CODE[5]), STR_54(CODE[5]), STR_52(CODE[3]), STR_50(CODE[5]), 
		 -> STR_48(CODE[5]), STR_46(CODE[13]), STR_44(CODE[5]), STR_42(CODE[13]), 
		 -> STR_40(CODE[5]), STR_37(CODE[15]), STR_35(CODE[5]), STR_33(CODE[5]), 
		 -> STR_31(CODE[3]), STR_29(CODE[3]), STR_27(CODE[5]), STR_26(CODE[9]), 
		 -> STR_24(CODE[5]), STR_23(CODE[9]), STR_21(CODE[5]), STR_19(CODE[3]), 
		 -> STR_17(CODE[3]), STR_15(CODE[5]), STR_14(CODE[9]), STR_12(CODE[5]), 
		 -> STR_10(CODE[3]), STR_8(CODE[3]), STR_6(CODE[5]), STR_4(CODE[5]), 

    sprintf@sp	PTR unsigned char  size(1) Largest target is 16
		 -> str2(BANK3[16]), str(BANK3[16]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    sp__strcat	PTR unsigned char  size(1) Largest target is 16
		 -> str2(BANK3[16]), 

    sp__LCD_StringOnOff	PTR unsigned char  size(2) Largest target is 5
		 -> STR_3(CODE[5]), STR_2(CODE[4]), 

    LCD_string@st	PTR unsigned char  size(2) Largest target is 16
		 -> str2(BANK3[16]), str(BANK3[16]), STR_1(CODE[13]), 

    fEraseString@string	PTR unsigned char  size(1) Largest target is 16
		 -> str2(BANK3[16]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _linkup in COMMON

    _linkup->i1___lwmod

Critical Paths under _main in BANK0

    _rTemperature->___awtoft
    _rThermistor->___fttol
    ___lbtoft->___ftpack
    ___fttol->___ftdiv
    ___ftdiv->_eval_poly
    _log->___awtoft
    _eval_poly->___ftadd
    ___ftmul->___ftpack
    ___ftmul->___ftpack
    ___ftadd->___ftmul
    ___awtoft->_rThermistor
    _fMenuStrip->_sprintf
    _sprintf->___lwmod
    ___lwmod->___lwdiv
    ___bmul->___awdiv
    ___awmod->___awdiv
    _SPI_Write->_SPI_notRDY
    _LCD_string->_LCD_SetPos
    _LCD_SetPos->_sendbyte
    _SPI_Read->_SPI_notRDY
    _SPI_notRDY->_SPI_ReadStatus
    _SPI_ReadStatus->_SPI_ReadByte
    _SPI_ReadByte->_SPI_WriteByte
    _LCD_init->_LCD_clear
    _LCD_clear->_sendbyte
    _sendbyte->_sendhalfbyte
    _sendhalfbyte->_fShiftData

Critical Paths under _linkup in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_rTemperature
    _rTemperature->_log
    _rThermistor->___fttol
    _log->___awtoft
    ___awtoft->_rThermistor

Critical Paths under _linkup in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _linkup in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _linkup in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 4     4      0   58926
                                             30 BANK1      4     4      0
                         _LCD_SetPos
                           _LCD_init
                         _LCD_string
                           _SPI_Read
                          _SPI_Write
                           _SPI_init
                               _fACP
                         _fMenuStrip
                         _fShiftData
                               _init
                       _rTemperature
 ---------------------------------------------------------------------------------
 (1) _rTemperature                                        10    10      0   36750
                                             20 BANK1     10    10      0
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                            ___fttol
                                _log
                        _rThermistor
 ---------------------------------------------------------------------------------
 (2) _rThermistor                                          6     4      2   11463
                                             76 BANK0      2     0      2
                                              6 BANK1      4     4      0
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___fttol
                           ___lbtoft
 ---------------------------------------------------------------------------------
 (3) ___lbtoft                                             8     5      3    2008
                                              8 BANK0      8     5      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) ___fttol                                             14    10      4     358
                                             68 BANK0      8     4      4
                                              0 BANK1      6     6      0
                             ___bmul (ARG)
                            ___ftadd (ARG)
                            ___ftdiv (ARG)
                             ___ftge (ARG)
                            ___ftmul (ARG)
                           ___ftpack (ARG)
                          _eval_poly (ARG)
                              _frexp (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftdiv                                             16    10      6    2692
                                             52 BANK0     16    10      6
                             ___bmul (ARG)
                            ___ftadd (ARG)
                             ___ftge (ARG)
                            ___ftmul (ARG)
                           ___ftpack
                           ___ftpack (ARG)
                           ___lbtoft (ARG)
                          _eval_poly (ARG)
                              _frexp (ARG)
 ---------------------------------------------------------------------------------
 (2) _log                                                  6     3      3   16399
                                             14 BANK1      6     3      3
                           ___awtoft
                            ___ftadd
                            ___ftdiv (ARG)
                             ___ftge
                            ___ftmul
                            ___fttol (ARG)
                          _eval_poly
                              _frexp
                        _rThermistor (ARG)
 ---------------------------------------------------------------------------------
 (3) _frexp                                                6     2      4     330
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (3) _eval_poly                                           15     8      7    6946
                                             37 BANK0     15     8      7
                             ___bmul
                            ___ftadd
                            ___ftmul
 ---------------------------------------------------------------------------------
 (3) ___ftmul                                             16    10      6    2818
                                              8 BANK0     16    10      6
                           ___ftpack
                           ___ftpack (ARG)
                              _frexp (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftadd                                             13     7      6    3542
                                             24 BANK0     13     7      6
                             ___bmul (ARG)
                            ___ftmul (ARG)
                           ___ftpack
                           ___ftpack (ARG)
                           ___lbtoft (ARG)
                              _frexp (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftge                                               6     0      6     322
                                              0 BANK0      6     0      6
 ---------------------------------------------------------------------------------
 (3) ___awtoft                                             6     3      3    2183
                                             78 BANK0      2     2      0
                                             10 BANK1      4     1      3
                            ___ftadd (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                           ___ftpack
                            ___fttol (ARG)
                        _rThermistor (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftpack                                             8     3      5    1986
                                              0 BANK0      8     3      5
 ---------------------------------------------------------------------------------
 (1) _init                                                 2     2      0       0
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _fMenuStrip                                           8     8      0   14873
                                             42 BANK0      8     8      0
                         _LCD_SetPos
                    _LCD_StringOnOff
                          _LCD_clear
                         _LCD_string
                          _SPI_Write
                            ___awdiv
                            ___awmod
                             ___bmul
                             ___wmul
                       _fEraseString
                            _sprintf
                             _strcat
 ---------------------------------------------------------------------------------
 (2) _strcat                                               5     3      2     818
                                              0 BANK0      5     3      2
 ---------------------------------------------------------------------------------
 (2) _sprintf                                             32    20     12    5390
                                             14 BANK0     28    16     12
                    _LCD_StringOnOff (ARG)
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
 ---------------------------------------------------------------------------------
 (3) _isdigit                                              2     2      0      68
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4    1050
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (3) ___lwmod                                              6     2      4     373
                                              8 BANK0      6     2      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              8     4      4     268
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (2) _fEraseString                                         1     1      0      49
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (4) ___bmul                                               4     3      1     249
                                              9 BANK0      4     3      1
                            ___awdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___awmod                                              7     3      4     402
                                              9 BANK0      7     3      4
                            ___awdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              9     5      4    1254
                                              0 BANK0      9     5      4
 ---------------------------------------------------------------------------------
 (2) _SPI_Write                                            5     2      3    1920
                                              6 BANK0      5     2      3
                      _SPI_WriteByte
                         _SPI_notRDY
 ---------------------------------------------------------------------------------
 (2) _LCD_string                                           5     3      2    1965
                                             14 BANK0      5     3      2
                         _LCD_SetPos
                           _sendbyte
 ---------------------------------------------------------------------------------
 (3) _LCD_SetPos                                           2     1      1     952
                                             12 BANK0      2     1      1
                           _sendbyte
 ---------------------------------------------------------------------------------
 (2) _LCD_StringOnOff                                      3     2      1     150
                                              0 BANK0      3     2      1
 ---------------------------------------------------------------------------------
 (1) _fACP                                                 2     2      0       0
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _SPI_init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _SPI_Read                                             6     4      2     746
                                              6 BANK0      6     4      2
                       _SPI_ReadByte
                      _SPI_WriteByte
                         _SPI_notRDY
 ---------------------------------------------------------------------------------
 (3) _SPI_notRDY                                           2     2      0     112
                                              4 BANK0      2     2      0
                     _SPI_ReadStatus
 ---------------------------------------------------------------------------------
 (4) _SPI_ReadStatus                                       2     2      0      89
                                              2 BANK0      2     2      0
                       _SPI_ReadByte
                      _SPI_WriteByte
 ---------------------------------------------------------------------------------
 (5) _SPI_ReadByte                                         1     1      0      44
                                              1 BANK0      1     1      0
                      _SPI_WriteByte
 ---------------------------------------------------------------------------------
 (5) _SPI_WriteByte                                        1     1      0      22
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _LCD_init                                             2     2      0    1557
                                             14 BANK0      2     2      0
                          _LCD_clear
                           _sendbyte
                       _sendhalfbyte
 ---------------------------------------------------------------------------------
 (2) _LCD_clear                                            2     2      0     674
                                             12 BANK0      2     2      0
                           _sendbyte
 ---------------------------------------------------------------------------------
 (3) _sendbyte                                             4     3      1     674
                                              8 BANK0      4     3      1
                       _sendhalfbyte
 ---------------------------------------------------------------------------------
 (4) _sendhalfbyte                                         2     2      0     209
                                              6 BANK0      2     2      0
                         _fShiftData
 ---------------------------------------------------------------------------------
 (1) _fShiftData                                           6     6      0      95
                                              0 BANK0      6     6      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _linkup                                               4     4      0     263
                                              6 COMMON     4     4      0
            _fInterruptRecieveDevice
                          i1___lwmod
 ---------------------------------------------------------------------------------
 (8) i1___lwmod                                            6     2      4     263
                                              0 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (8) _fInterruptRecieveDevice                              2     2      0       0
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _LCD_SetPos
     _sendbyte
       _sendhalfbyte
         _fShiftData
   _LCD_init
     _LCD_clear
       _sendbyte
     _sendbyte
     _sendhalfbyte
   _LCD_string
     _LCD_SetPos
     _sendbyte
   _SPI_Read
     _SPI_ReadByte
       _SPI_WriteByte
     _SPI_WriteByte
     _SPI_notRDY
       _SPI_ReadStatus
         _SPI_ReadByte
         _SPI_WriteByte
   _SPI_Write
     _SPI_WriteByte
     _SPI_notRDY
   _SPI_init
   _fACP
   _fMenuStrip
     _LCD_SetPos
     _LCD_StringOnOff
     _LCD_clear
     _LCD_string
     _SPI_Write
     ___awdiv
     ___awmod
       ___awdiv (ARG)
     ___bmul
       ___awdiv (ARG)
     ___wmul
     _fEraseString
     _sprintf
       _LCD_StringOnOff (ARG)
       ___lwdiv (ARG)
       ___lwmod (ARG)
         ___lwdiv (ARG)
       ___wmul (ARG)
       _isdigit (ARG)
     _strcat
   _fShiftData
   _init
   _rTemperature
     ___awtoft
       ___ftadd (ARG)
         ___bmul (ARG)
         ___ftmul (ARG)
           ___ftpack
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
         _frexp (ARG)
       ___ftdiv (ARG)
         ___bmul (ARG)
         ___ftadd (ARG)
         ___ftge (ARG)
         ___ftmul (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___lbtoft (ARG)
         _eval_poly (ARG)
           ___bmul
           ___ftadd
           ___ftmul
         _frexp (ARG)
       ___ftmul (ARG)
       ___ftpack (ARG)
       ___fttol (ARG)
         ___bmul (ARG)
         ___ftadd (ARG)
         ___ftdiv (ARG)
         ___ftge (ARG)
         ___ftmul (ARG)
         ___ftpack (ARG)
         _eval_poly (ARG)
         _frexp (ARG)
       _rThermistor (ARG)
         ___ftadd
         ___ftdiv
         ___ftmul
         ___fttol
         ___lbtoft
     ___ftadd
     ___ftdiv
     ___fttol
     _log
       ___awtoft
       ___ftadd
       ___ftdiv (ARG)
       ___ftge (ARG)
       ___ftmul (ARG)
       ___fttol (ARG)
       _eval_poly (ARG)
       _frexp (ARG)
       _rThermistor (ARG)
     _rThermistor

 _linkup (ROOT)
   _fInterruptRecieveDevice
   i1___lwmod

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK3               60      0      42      10       68.8%
BITBANK3            60      0       0       9        0.0%
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               60      0       0      12        0.0%
BITBANK2            60      0       0      11        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50     22      4B       8       93.8%
BITBANK1            50      0       1       7        1.2%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50     50      50       5      100.0%
BITBANK0            50      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      A       E       1      100.0%
BITCOMMON            E      0       1       0        7.1%
CODE                 0      0       0       0        0.0%
DATA                 0      0      EB       6        0.0%
ABS                  0      0      EB       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%


Microchip Technology PIC Macro Assembler V2.32 build 20210201212658 
Symbol Table                                                                                   Thu Dec 09 14:11:08 2021

               ??_LCD_StringOnOff 0021                                 pc 0002                    ___bmul@product 002B  
                     ?_LCD_SetPos 002C                       _SSPSTATbits 0094                      ___awdiv@sign 0026  
                    ?_rThermistor 006C                                fsr 0004               ___wmul@multiplicand 0022  
                      _SPI_notRDY 1C40                      ___ftadd@exp1 0044                      ___ftadd@exp2 0043  
                    ___ftadd@sign 0042                     ?_rTemperature 0070                               l200 03D9  
                 SPI_Read@address 0026                               l210 040F                               l212 040A  
                             l205 03F9                               l209 03FE                               l170 1FA8  
                             l164 1F74                               l181 0333                               l190 038F  
                             l167 1F8E                               l194 03AA                               l189 03A4  
                             l358 1CE8                               l720 1C2B                               l814 1D0E  
                             l646 0C35                               l672 0E7D                               l664 0DA8  
                             l683 1EEF                               l668 0E43                               l685 1EF3  
                             l686 1EF4                               l792 013A                               l777 015D  
                             l799 01B8                               _RB3 0033                               _RB4 0034  
                             _RB5 0035                               _RB6 0036                               _log 0635  
                             fsr0 0004                               _str 01C2                               indf 0000  
                    ___awmod@sign 002F                       ?_LCD_string 002E                      ___ftdiv@cntr 005E  
                    ___ftdiv@sign 0063                              l1033 1318                              l1034 1320  
                            l1026 1303                              l1117 152A                              l1057 05D6  
                            l4011 1D8B                              l4005 1D77                              l4103 1F2E  
                            l4007 1D81                              l4023 0659                              l4105 1F3C  
                            l4113 1F55                              l3401 1308                              l4053 122F  
                            l4117 1F5D                              l4109 1F4A                              l3501 05E8  
                            l4029 066A                              l5005 027A                              l5013 02A0  
                            l3423 120D                              l4071 125B                              l4063 1237  
                            l4047 1224                              l5103 03ED                              l5111 03EF  
                            l3361 1E78                              l4065 1245                              l3441 1C82  
                            l3505 05FA                              l4075 1266                              l4091 1F21  
                            l3515 061D                              l3531 0744                              l5123 0405  
                            l3357 1E6F                              l3437 1C7C                              l3605 1D06  
                            l4501 046C                              l3525 072E                              l5029 0341  
                            l3359 1E76                              l4079 126E                              l4095 1F28  
                            l3391 12ED                              l3383 12D5                              l3455 0557  
                            l5063 0383                              l4513 04D2                              l4521 04DC  
                            l3625 1D51                              l3465 056D                              l3561 078F  
                            l3553 0777                              l3641 1587                              l5081 03B0  
                            l4451 1D9E                              l4507 049F                              l4515 04D6  
                            l3387 12DC                              l3483 059C                              l3459 055E  
                            l3811 14C2                              l3635 1571                              l3715 1514  
                            l5059 037B                              l3821 1FCF                              l5421 0FAF  
                            l5413 0F3B                              l4701 0B86                              l4613 097E  
                            l4605 0962                              l3389 12E8                              l3485 05A8  
                            l3477 0587                              l3565 079F                              l3549 0767  
                            l3725 153D                              l3717 1526                              l3583 1CE0  
                            l3831 1FB2                              l3911 00EC                              l5423 0FBA  
                            l5415 0F85                              l4711 0BB0                              l4703 0B8E  
                            l3399 1316                              l3495 05C6                              l3487 05AD  
                            l3663 15CF                              l5087 03BC                              l4457 1DB0  
                            l3577 1CD1                              l3921 00FD                              l3905 00D4  
                            l5425 0FBF                              l5417 0F99                              l4721 0BF0  
                            l4705 0B91                              l4609 0970                              l4561 0890  
                            l4537 083E                              l4529 04F4                              l3497 05D2  
                            l3489 05B1                              l3657 15B0                              l3729 154B  
                            l5097 03C7                              l3579 1CD8                              l3835 07CB  
                            l3755 082E                              l3747 080A                              l3771 1E30  
                            l3923 0114                              l3915 00FB                              l5427 0FC7  
                            l5419 0FA1                              l4723 0C05                              l4715 0BB9  
                            l4651 0AAB                              l4619 09B8                              l4555 087E  
                            l4539 0844                              l4643 09F4                              l3675 1DDA  
                            l3829 1FF7                              l3749 0818                              l3773 1E3E  
                            l3781 1E57                              l3909 00D6                              l3933 013C  
                            l5429 0FCC                              l4733 0C3A                              l4725 0C16  
                            l4717 0BCA                              l4805 0F1E                              l4629 09C4  
                            l4549 086C                              l4573 09F2                              l3693 14D9  
                            l4477 1754                              l3871 1CCA                              l3847 07E6  
                            l3759 0839                              l3599 1C55                              l4751 0CBE  
                            l4743 0C64                              l4719 0BDF                              l4807 0FD4  
                            l4655 0AB3                              l4647 0A6F                              l4567 08C8  
                            l4495 0425                              l4399 141D                              l3679 1DE9  
                            l3777 1E4C                              l3961 01AA                              l3945 0177  
                            l3929 012D                              l4761 0D69                              l4753 0CFF  
                            l4745 0C75                              l4673 0AFC                              l4665 0AF4  
                            l4657 0AC4                              l4577 08D4                              l3793 1EA6  
                            l3697 14E3                              l3971 01D1                              l3955 0185  
                            l3883 006D                              l4763 0D7A                              l4755 0D13  
                            l4747 0C86                              l4739 0C59                              l4691 0B5D  
                            l4683 0B24                              l4659 0AD5                              l4595 0937  
                            l4587 08F6                              l4499 0458                              l3973 01D5  
                            l3949 0183                              l4765 0D8B                              l4757 0D24  
                            l4749 0CAD                              l4685 0B35                              l4597 093E  
                            ?_log 00D6                              l4775 0E15                              l4687 0B4A  
                            l4679 0B1B                              l3993 01FD                              l3985 01F9  
                            l3969 01CD                              l3897 00BF                              l3889 0082  
                            l4777 0E26                              l4697 0B7C                              l4689 0B4C  
                            l3979 01EA                              l3995 0047                              l4787 0E4F  
                            l3997 0240                              l4789 0E60                              l4799 0ECA  
                            STR_1 1146                              STR_2 11F1                              STR_3 11E4  
                            STR_4 11DF                              STR_5 1175                              STR_6 11DF  
                            STR_7 111F                              STR_8 11F8                              STR_9 11AE  
                            u4005 1515                              u3215 1EE1                              u4105 0825  
                            u3235 1EF9                              u4115 082F                              u3315 12E1  
                            u4035 1530                              u3335 12FC                              u4145 1E33  
                            u5105 0456                              u4075 080D                              u5115 0475  
                            u3355 130F                              u4165 1E44                              u5205 0513  
                            u5125 049D                              u4095 0819                              u4175 1E4D  
                            u4335 00F2                              u5215 084D                              u5135 04A8  
                            u3535 0588                              u4264 1CBE                              u4265 1CBC  
                            u4425 01BF                              u5305 08D1                              u5225 0858  
                            u5145 04D0                              u3625 05C7                              u3395 1327  
                            u6035 02CA                              u3565 059D                              u3725 0778  
                            u6045 02F3                              u5335 08E5                              u5175 04EA  
                            u5095 042E                              u3735 0780                              u6055 031C  
                            u5600 0D33                              u4385 01A0                              u5505 0A78  
                            u5345 08F0                              u5185 04FD                              u3905 15C2  
                            u5610 0D34                              u4555 123A                              u3835 1D0F  
                            u5435 09B0                              u5355 08FF                              u5195 0508  
                            u3595 05B2                              u3915 15D0                              u5620 0D40  
                            u3845 1D16                              u5445 09C1                              u5365 090A  
                            u6165 0399                              u5630 0D41                              u4575 1246  
                            u4655 1F31                              u5375 092A                              u5295 089E  
                            u3775 07A0                              u5640 0D4D                              u4585 1252  
                            u5385 0947                              u3785 07A8                              u6265 03D3  
                            u6417 033B                              u5650 0D4E                              u6507 137D  
                            u4595 125C                              u4675 1F42                              u5475 09D2  
                            u5395 0952                              u6427 1438                              u5660 0D5A  
                            u6517 1390                              u6437 1F6D                              u4685 1F4B  
                            u5485 09DD                              u6285 03E5                              u5670 0D5B  
                            u6527 13B1                              u6447 1F87                              u5495 09FD  
                            u3895 15B1                              u3975 14EB                              u6537 1C9A  
                            u6457 1FA1                              u6547 1E90                              u6467 133F  
                            u6477 134F                              u6487 135E                              u6497 136D  
                            _TMR0 0001                              _TMR2 0011                              _cACP 00C7  
                            _fACP 1F62                              _main 0245                      ___ftpack@arg 0020  
                            _init 13B6                      ___ftpack@exp 0023                              _str2 01B2  
                            btemp 007E                              log@x 00D6                              start 000E  
          __end_of_SPI_ReadStatus 1C68                __size_of_LCD_clear 0015                     _SPI_WriteByte 1C28  
               ___bmul@multiplier 002C                      ___ftmul@cntr 0036                      ___ftmul@sign 0037  
                    ___fttol@exp1 00CD                             ??_log 00D9                      ___fttol@lval 00C9  
                     LCD_SetPos@x 002D                       LCD_SetPos@y 002C                             ?_fACP 0070  
                __end_of_LCD_init 13B6                    ??_rTemperature 0070                             ?_main 0070  
                           ?_init 0070                   __end_of___awdiv 1273                             _ADRES 001E  
                 __end_of___ftadd 0635                             STR_10 11F8                             STR_11 116A  
                           STR_12 11DF                             STR_20 11E9                             STR_21 11DF  
                           STR_13 10F6                             STR_30 11F5                             STR_14 1193  
                           STR_22 10C9                             STR_31 11F8                             STR_15 11DF  
                           STR_23 119C                             STR_32 11E9                             STR_40 11DF  
                           STR_24 11DF                             STR_16 10D8                             STR_17 11F8  
                           STR_33 11DF                             STR_41 115F                             STR_25 1099  
                           STR_26 119C                             STR_50 11DF                             STR_18 11F5  
                           STR_34 117F                             STR_42 112C                             STR_19 11F8  
                           STR_35 11DF                             STR_27 11DF                             STR_43 11A5  
                           STR_51 10B9                             STR_52 11F8                             STR_60 11DF  
                           STR_44 11DF                             STR_36 1112                             STR_28 10A9  
                 __end_of___awmod 1F62                             STR_61 11F5                             STR_53 11F5  
                           STR_29 11F8                             STR_45 1153                             STR_37 10E7  
                           STR_46 112C                             STR_54 11DF                             STR_38 11D5  
                           STR_62 1104                             STR_39 11DA                             STR_63 11D0  
                           STR_47 1189                             STR_55 1077                             STR_56 11DF  
                           STR_48 11DF                             STR_64 11CA                             STR_57 11F5  
                           STR_49 11BD                             STR_65 1139                             STR_58 11DF  
                           STR_66 11ED                             STR_67 11C4                             STR_59 1088  
                           STR_68 11B6                   __end_of___ftdiv 15F3                   __end_of___ftmul 07CB  
                 ___awdiv@divisor 0020                   __end_of___fttol 155B                   __end_of___lwdiv 083E  
                           i1l161 1745                             i1l146 16CC                             i1l441 1622  
                 __end_of___lwmod 1E5C                             i1l442 161F                             i1l445 162F  
                           i1l455 167D                             i1l447 1670                             i1l439 1608  
                           i1l448 1661                   ___awdiv@counter 0025                             _TMR1H 000F  
                           _TMR1L 000E                             _SPBRG 0099                             _PORTA 0005  
                           _PORTB 0006                             _PORTC 0007                             _cTMR0 00C1  
                           _flDO1 03D5                i1___lwmod@dividend 0072                __settingTimeImpDO1 00B4  
                   ___awtoft@sign 00D5                             __hour 0750                   __end_of_dpowers 105C  
                SPI_ReadByte@data 0021                             _frexp 1E94                             _errno 00A8  
                  _SPI_Write$1300 0029                   __end_of_isdigit 1C57                     ___ftpack@sign 0024  
                __end_of_SPI_Read 1DCB                    __pbitbssCOMMON 03D0                             pclath 000A  
                __end_of_SPI_init 1CB6               __size_of_LCD_SetPos 001A                __settingTimerOnDO2 00B2  
                           status 0003                             wtemp0 007E                   __end_of_sprintf 0245  
                    rThermistor@A 00CE                __size_of_SPI_Write 0034                __size_ofi1___lwmod 0032  
                 ?_SPI_ReadStatus 0070                      SPI_Read@data 002B                    ?_SPI_WriteByte 0070  
                    __end_of_fACP 1FB1                   __initialization 0011                       log@exponent 00DA  
             __size_of_LCD_string 004F                      __end_of_main 041B                     __cellTwoDigit 00BB  
                    __end_of_init 143E                fShiftData@shiftVar 0022                            ??_fACP 0020  
                     ?_SPI_notRDY 0070                      __flashSecond 0751                            ??_main 00E6  
                   ___fttol@sign1 00C8                            ??_init 0020                 __end_of_LCD_clear 1CA0  
                     LCD_string@i 0032                            ?_frexp 0020                  SPI_Write@address 0026  
                ___awdiv@dividend 0022                  __end_of___awtoft 1D72                  __end_of___ftpack 1339  
                __end_of___lbtoft 1D04                            i1l4155 161B                            i1l4229 1695  
                          i1l4183 1650                            i1l4189 165D                            i1l4915 16BD  
                          __100ms 0754                            i1l4919 16C3                            i1l4873 1DFE  
                          i1l4875 1E0C                            i1l4883 1E25                            i1l4971 1730  
                          i1l4947 1708                            i1l4965 1726                            i1l4949 170A  
                          i1l4879 1E1A                            i1l4983 1743                            i1l4959 171C  
                          i1l4895 16A8                            i1l4977 173D                            __250ms 0753  
                          __500ms 0752                            u572_25 1E01                            u574_25 1E12  
                          u575_25 1E1B                            u655_27 1699                            _SHRIFT 1012  
             LCD_StringOnOff@numb 0020                            _SSPBUF 0013                            _Analog 00A4  
                          ___bmul 1C79                            ___ftge 1DCB                            ___wmul 1D04  
                       ??___awdiv 0024                         ??___ftadd 003E                         ??___awmod 002D  
                       ??___ftdiv 005A                            _arrCmd 00A0                         ??___ftmul 002E  
                       ??___fttol 0068                         ??___lwdiv 0024                         ??___lwmod 002C  
                    __countSecond 00B6                            _linkup 169F                  ___awdiv@quotient 0027  
                 ___awmod@divisor 0029                   ___awmod@counter 002E                            _strcat 1D72  
            __size_of_rThermistor 005A             ___ftmul@f3_as_product 0033                 __end_of_SPI_Write 07FF  
                __end_of_sendbyte 121A                      __pdataCOMMON 007B                 __end_ofi1___lwmod 1E2A  
                       ??_isdigit 0020                            saved_w 007E               __settingTimerOffDO2 00B0  
                       ??_sprintf 003A                        _fMenuStrip 041B                   _LCD_StringOnOff 1CB6  
                __end_oflog@coeff 1077           __end_of__initialization 003E                        ___ftadd@f1 0038  
                      ___ftadd@f2 003B                   ??_SPI_WriteByte 0020              __end_of_rTemperature 1800  
                      ___ftge@ff1 0020                        ___ftge@ff2 0023               __size_of_SPI_notRDY 0009  
                       ?_LCD_init 0070                      eval_poly@res 0051                        ___ftdiv@f1 0057  
                      ___ftdiv@f2 0054                        ___ftdiv@f3 005F                        _fShiftData 1ED4  
                      ___awtoft@c 00D2                        ___lbtoft@c 002F               ___bmul@multiplicand 0029  
                      ___ftmul@f1 0028                        ___ftmul@f2 002B                        ___fttol@f1 0064  
                  __pcstackCOMMON 0070                      __pidataBANK3 1D25                      ??_LCD_SetPos 002D  
                   __end_of_frexp 1ED4                         ?_SPI_Read 0026          ?_fInterruptRecieveDevice 0070  
                       ?_SPI_init 0070                        _flClearLCD 03D1              rTemperature@analogAI 00E5  
                  _OPTION_REGbits 0081                 LCD_StringOnOff@st 0022                      ??_LCD_string 0030  
                      __firstCell 00BD                           ??_frexp 0024                      sprintf@width 0046  
                      __pbssBANK1 00A0                        __pbssBANK3 01B2                        _flModeStep 007D  
              __size_of_eval_poly 008B                  LCD_string@symbol 0031                __end_of_LCD_SetPos 1CE9  
                      ??_LCD_init 002E                      LCD_string@st 002E                        __pmaintext 0245  
                         ?___bmul 0029                           ?___ftge 0020                        __tempDigit 00AA  
                      __tempPinDO 00C3                           ?___wmul 0020                __end_of_LCD_string 2000  
                      __pintentry 0004                           ?_linkup 0070                         ?___awtoft 00D2  
                       ?___ftpack 0020                         ?___lbtoft 0028                        ??_SPI_Read 0028  
                         ?_strcat 0020                        ??_SPI_init 0020                     ?_sendhalfbyte 0070  
                         _GO_DONE 00FA           __end_of_LCD_StringOnOff 1CCF                       ?_fMenuStrip 0070  
                      __stringtab 1000                  ??_SPI_ReadStatus 0022                       ?_fShiftData 0070  
                   SPI_Write@data 0028                         ?_sendbyte 0028   __end_of_fInterruptRecieveDevice 169F  
                 __size_of___bmul 0012                   __size_of___ftge 002D                           ___awdiv 121A  
                         ___ftadd 0530                           ___awmod 1F17                           ___ftdiv 155B  
                 __size_of___wmul 0021                           ___ftmul 0718                           ___fttol 14C9  
               SPI_WriteByte@data 0020                      __settingsBit 00C4                           ___lwdiv 0802  
                         ___lwmod 1E2A                  SPI_notRDY@notRDY 0025                           _carrCmd 00BF  
                   ?_fEraseString 0070                        ??___awtoft 006E                        ??___ftpack 0025  
                      ??___lbtoft 002B                 __end_of_eval_poly 14C9                           __minute 03D6  
                    ??_SPI_notRDY 0024                           __second 03D7                   __size_of_linkup 00AF  
                         __ptext1 174E                           __ptext2 1273                           __ptext3 1CE9  
                         __ptext4 14C9                           __ptext5 155B                           __ptext6 0635  
                  ??_sendhalfbyte 0026                           __ptext7 1E94                           __ptext8 143E  
                         __ptext9 0718                       __SubMenuArr 0190                   __size_of_strcat 002C  
                       _T1CONbits 0010                           _counter 00C6                           _dpowers 1052  
                       _T2CONbits 0012                      __size_of_log 00E3                           _isdigit 1C49  
                ___awmod@dividend 002B                 __countTMR2trigger 00C5                           _sprintf 0042  
           __size_of_rTemperature 00B2                           clrloop0 1C30                         _LCD_clear 1C8B  
            end_of_initialization 003E                __end_of_SPI_notRDY 1C49                        ??_sendbyte 0029  
                       _RCSTAbits 0018                           psplit$0 210041  
                  _flSwitchButton 03D0                      __pstringtext 1000                    ??_fEraseString 0020  
             __size_of_fMenuStrip 0BE5           fShiftData@shiftVariable 0023                         _PORTAbits 0005  
                       _PORTBbits 0006                      _rTemperature 174E               __size_of_fShiftData 0043  
                       _TRISAbits 0085                         _TRISBbits 0086                  ?_LCD_StringOnOff 0020  
                       _TRISCbits 0087                         _SPI_Write 07CB                         i1___lwmod 1DF8  
                      ?_LCD_clear 0070                       ___ftdiv@exp 0062                         _TXSTAbits 0098  
                  __end_of_SHRIFT 1052                     ?_SPI_ReadByte 0070                 __size_of_LCD_init 007D  
                     ___ftmul@exp 0032                    __end_of___bmul 1C8B                    __end_of___ftge 1DF8  
                   ??_rThermistor 006E                    __end_of___wmul 1D25               rThermistor@analogAI 00D1  
                   __pidataCOMMON 0800                 i1___lwmod@divisor 0070                     __pbitbssBANK1 0750  
               i1___lwmod@counter 0075                    __end_of_linkup 174E                 __size_of_SPI_Read 002D  
                  __end_of_strcat 1D9E               start_initialization 0011                 __size_of_SPI_init 0016  
                      eval_poly@d 0048                        eval_poly@n 004A                        eval_poly@x 0045  
                   sendhalfbyte@c 0027                       __end_of_log 0718                        ?_SPI_Write 0026  
                      ?i1___lwmod 0070  __size_of_fInterruptRecieveDevice 00AC                        frexp@value 0020  
            __end_of_sendhalfbyte 1E94                    ??_SPI_ReadByte 0021             __end_of_SPI_WriteByte 1C2F  
                        ??___bmul 002A                          ??___ftge 0026                          ??___wmul 0024  
                      init_fetch0 1C68                       fShiftData@i 0025                       __pdataBANK3 0190  
                _flStopBitRecieve 03D3                          ??_linkup 0076                          ??_strcat 0022  
               __size_of___awtoft 002B                 __size_of___ftpack 006C                fEraseString@string 0020  
               __size_of___lbtoft 001B                       _flMenuStrip 00BE                         _cQuantity 00C0  
                     __pbssCOMMON 007D               __end_of_rThermistor 12CD                         ___latbits 0002  
                   __pcstackBANK0 0020                     __pcstackBANK1 00C8                      _isdigit$1558 0020  
                    ??_fMenuStrip 004A                       ??_LCD_clear 002C                    _temperatureAI1 00B9  
                  _temperatureAI2 00B8              __end_of_fEraseString 1C28                 _rTemperature$1770 00DF  
               _rTemperature$1771 00E2                 _rTemperature$1769 00DC                       sprintf@flag 0040  
                     sprintf@prec 003D                       __secondCell 00BC                      ??_fShiftData 0020  
                ___lwdiv@dividend 0022                         __timerDO1 00AE                         __timerDO2 00AC  
                        ?___awdiv 0020                          ?___ftadd 0038                          ?___awmod 0029  
               __size_of_sendbyte 001E                          ?___ftdiv 0054                          ?___ftmul 0028  
                        ?___fttol 0064                          ?___lwdiv 0020                          ?___lwmod 0028  
              __end_of_fMenuStrip 1000                          ?_isdigit 0070                         _eval_poly 143E  
            SPI_ReadStatus@status 0023                        sendbyte@hb 002A                __end_of_fShiftData 1F17  
                     ??_SPI_Write 0029                  ___lwdiv@quotient 0025                       ??i1___lwmod 0074  
                      pnum$text15 0021                          ?_sprintf 002E                    __size_of_frexp 0040  
               interrupt_function 0004                    ___wmul@product 0024                          _LCD_init 1339  
                       clear_ram0 1C2F                          _PIE1bits 008C                          _PIE2bits 008D  
                        _PIR1bits 000C                     __tempTwoDigit 00BA                       _rThermistor 1273  
                       main@SPI_i 00E9                          _SPI_Read 1D9E                        _ADCON0bits 001F  
                     __stringbase 1012                        _ADCON1bits 009F                 ___wmul@multiplier 0020  
                        _SPI_init 1CA0                        ?_eval_poly 0045              __end_of_SPI_ReadByte 1C40  
         _fInterruptRecieveDevice 15F3             __size_of_sendhalfbyte 0038                         frexp@eptr 0023  
                        __MenuArr 01A8                          __MenuNav 007B           __size_of_SPI_ReadStatus 0011  
                    sendbyte@mode 0028                  __size_of___awdiv 0059                  __size_of___ftadd 0105  
                __size_of___awmod 004B                  __size_of___ftdiv 0098                  __size_of___ftmul 00B3  
                __size_of___fttol 0092                  __size_of___lwdiv 003C                  __size_of___lwmod 0032  
                        ___awtoft 1D47                          ___ftpack 12CD                          ___lbtoft 1CE9  
              __end_of__stringtab 1012                      _sendhalfbyte 1E5C                        sprintf@len 0042  
                      sprintf@val 0044                        strcat@from 0020                  __size_of_isdigit 000E  
                        _flUpdate 03D2             __size_of_fEraseString 0006                   ___lwdiv@divisor 0020  
                 ___lwdiv@counter 0027                          __ptext10 0530                          __ptext11 1DCB  
                        __ptext20 1E2A                          __ptext12 1D47                          __ptext21 0802  
                        __ptext13 12CD                          __ptext30 1F62                          __ptext22 1C22  
                        __ptext14 13B6                          __ptext31 1CA0                          __ptext23 1C79  
                        __ptext15 041B                          __ptext40 1E5C                          __ptext32 1D9E  
                        __ptext24 1F17                          __ptext16 1D72                          __ptext41 1ED4  
                        __ptext33 1C40                          __ptext25 121A                          __ptext17 0042  
                        __ptext42 169F                          __ptext34 1C57                          __ptext26 07CB  
                        __ptext18 1C49                          __ptext43 1DF8                          __ptext35 1C37  
                        __ptext27 1FB1                          __ptext19 1D04                          __ptext44 15F3  
                        __ptext36 1C28                          __ptext28 1CCF                          __ptext37 1339  
                        __ptext29 1CB6                          __ptext38 1C8B                          __ptext39 11FC  
                __size_of_sprintf 0203                     __size_of_fACP 004F                         sendbyte@c 002B  
        __size_of_LCD_StringOnOff 0019                     __size_of_main 01D6                     __size_of_init 0088  
                        _sendbyte 11FC                 _flStartBitRecieve 03D4                        _LCD_SetPos 1CCF  
                    _fEraseString 1C22                pnum$text15_split_1 0041                          log@coeff 105C  
                      _INTCONbits 000B                       ??_eval_poly 004C         ??_fInterruptRecieveDevice 0070  
                      _LCD_string 1FB1                          init_ram0 1C6C                          isdigit@c 0021  
                        intlevel1 0000                         sprintf@ap 0041                         sprintf@cp 003E  
                       sprintf@sp 0049                  ___lwmod@dividend 002A                         stringcode 100A  
           __size_of_SPI_ReadByte 0009                          sprintf@c 0048                          sprintf@f 002E  
                        strcat@cp 0023                          strcat@to 0024                   ___lwmod@divisor 0028  
                 ___lwmod@counter 002D                          stringtab 1000            __size_of_SPI_WriteByte 0007  
                      _TMR0_Value 00C2                     _SPI_Read$1303 0029                        _SSPCONbits 0014  
                    _SPI_ReadByte 1C37                    _SPI_ReadStatus 1C57  

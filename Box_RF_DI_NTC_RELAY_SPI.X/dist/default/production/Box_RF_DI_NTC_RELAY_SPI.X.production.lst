

Microchip MPLAB XC8 Assembler V2.32 build 20210201212658 
                                                                                               Tue Dec 07 19:23:04 2021

Microchip MPLAB XC8 C Compiler v2.32 (Free license) build 20210201212658 Og9 
     1                           	processor	16F76
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	idataCOMMON,global,class=CODE,delta=2,noexec
     5                           	psect	idataBANK3,global,class=CODE,delta=2,noexec
     6                           	psect	stringtext,global,reloc=256,class=STRCODE,delta=2,noexec
     7                           	psect	cinit,global,class=CODE,merge=1,delta=2
     8                           	psect	bitbssCOMMON,global,bit,class=COMMON,space=1,delta=1,noexec
     9                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1,noexec
    10                           	psect	dataCOMMON,global,class=COMMON,space=1,delta=1,noexec
    11                           	psect	bitbssBANK1,global,bit,class=BANK1,space=1,delta=1,noexec
    12                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,noexec
    13                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1,noexec
    14                           	psect	dataBANK3,global,class=BANK3,space=1,delta=1,noexec
    15                           	psect	inittext,global,class=CODE,delta=2
    16                           	psect	clrtext,global,class=CODE,delta=2
    17                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
    18                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
    19                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    20                           	psect	maintext,global,class=CODE,split=1,delta=2
    21                           	psect	text1,local,class=CODE,merge=1,delta=2
    22                           	psect	text2,local,class=CODE,merge=1,delta=2
    23                           	psect	text3,local,class=CODE,merge=1,delta=2,group=2
    24                           	psect	text4,local,class=CODE,merge=1,delta=2,group=2
    25                           	psect	text5,local,class=CODE,merge=1,delta=2,group=2
    26                           	psect	text6,local,class=CODE,merge=1,delta=2,group=3
    27                           	psect	text7,local,class=CODE,merge=1,delta=2,group=3
    28                           	psect	text8,local,class=CODE,merge=1,delta=2,group=3
    29                           	psect	text9,local,class=CODE,merge=1,delta=2,group=2
    30                           	psect	text10,local,class=CODE,merge=1,delta=2,group=2
    31                           	psect	text11,local,class=CODE,merge=1,delta=2,group=2
    32                           	psect	text12,local,class=CODE,merge=1,delta=2,group=2
    33                           	psect	text13,local,class=CODE,merge=1,delta=2,group=2
    34                           	psect	text14,local,class=CODE,merge=1,delta=2
    35                           	psect	text15,local,class=CODE,merge=1,delta=2
    36                           	psect	text16,local,class=CODE,merge=1,delta=2,group=3
    37                           	psect	text17,local,class=CODE,merge=1,delta=2,group=1
    38                           	psect	text18,local,class=CODE,merge=1,delta=2,group=3
    39                           	psect	text19,local,class=CODE,merge=1,delta=2,group=2
    40                           	psect	text20,local,class=CODE,merge=1,delta=2,group=2
    41                           	psect	text21,local,class=CODE,merge=1,delta=2,group=2
    42                           	psect	text22,local,class=CODE,merge=1,delta=2
    43                           	psect	text23,local,class=CODE,merge=1,delta=2,group=2
    44                           	psect	text24,local,class=CODE,merge=1,delta=2,group=2
    45                           	psect	text25,local,class=CODE,merge=1,delta=2,group=2
    46                           	psect	text26,local,class=CODE,merge=1,delta=2
    47                           	psect	text27,local,class=CODE,merge=1,delta=2
    48                           	psect	text28,local,class=CODE,merge=1,delta=2
    49                           	psect	text29,local,class=CODE,merge=1,delta=2
    50                           	psect	text30,local,class=CODE,merge=1,delta=2
    51                           	psect	text31,local,class=CODE,merge=1,delta=2
    52                           	psect	text32,local,class=CODE,merge=1,delta=2
    53                           	psect	text33,local,class=CODE,merge=1,delta=2
    54                           	psect	text34,local,class=CODE,merge=1,delta=2
    55                           	psect	text35,local,class=CODE,merge=1,delta=2
    56                           	psect	text36,local,class=CODE,merge=1,delta=2
    57                           	psect	text37,local,class=CODE,merge=1,delta=2
    58                           	psect	text38,local,class=CODE,merge=1,delta=2
    59                           	psect	text39,local,class=CODE,merge=1,delta=2
    60                           	psect	text40,local,class=CODE,merge=1,delta=2
    61                           	psect	text41,local,class=CODE,merge=1,delta=2
    62                           	psect	text42,local,class=CODE,merge=1,delta=2
    63                           	psect	intentry,global,class=CODE,delta=2
    64                           	psect	text43,local,class=CODE,merge=1,delta=2
    65                           	psect	text44,local,class=CODE,merge=1,delta=2
    66                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    67                           	psect	text15_split_1,local,class=CODE,merge=1,delta=2
    68                           	dabs	1,0x7E,2
    69  0000                     
    70                           ; Version 2.20
    71                           ; Generated 12/02/2020 GMT
    72                           ; 
    73                           ; Copyright Â© 2020, Microchip Technology Inc. and its subsidiaries ("Microchip")
    74                           ; All rights reserved.
    75                           ; 
    76                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    77                           ; 
    78                           ; Redistribution and use in source and binary forms, with or without modification, are
    79                           ; permitted provided that the following conditions are met:
    80                           ; 
    81                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    82                           ;        conditions and the following disclaimer.
    83                           ; 
    84                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    85                           ;        of conditions and the following disclaimer in the documentation and/or other
    86                           ;        materials provided with the distribution.
    87                           ; 
    88                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    89                           ;        software without specific prior written permission.
    90                           ; 
    91                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    92                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    93                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    94                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    95                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    96                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    97                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    98                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    99                           ; 
   100                           ; 
   101                           ; Code-generator required, PIC16F76 Definitions
   102                           ; 
   103                           ; SFR Addresses
   104  0000                     	;# 
   105  0001                     	;# 
   106  0002                     	;# 
   107  0003                     	;# 
   108  0004                     	;# 
   109  0005                     	;# 
   110  0006                     	;# 
   111  0007                     	;# 
   112  000A                     	;# 
   113  000B                     	;# 
   114  000C                     	;# 
   115  000D                     	;# 
   116  000E                     	;# 
   117  000E                     	;# 
   118  000F                     	;# 
   119  0010                     	;# 
   120  0011                     	;# 
   121  0012                     	;# 
   122  0013                     	;# 
   123  0014                     	;# 
   124  0015                     	;# 
   125  0015                     	;# 
   126  0016                     	;# 
   127  0017                     	;# 
   128  0018                     	;# 
   129  0019                     	;# 
   130  001A                     	;# 
   131  001B                     	;# 
   132  001B                     	;# 
   133  001C                     	;# 
   134  001D                     	;# 
   135  001E                     	;# 
   136  001F                     	;# 
   137  0081                     	;# 
   138  0085                     	;# 
   139  0086                     	;# 
   140  0087                     	;# 
   141  008C                     	;# 
   142  008D                     	;# 
   143  008E                     	;# 
   144  0092                     	;# 
   145  0093                     	;# 
   146  0094                     	;# 
   147  0098                     	;# 
   148  0099                     	;# 
   149  009F                     	;# 
   150  010C                     	;# 
   151  010D                     	;# 
   152  010E                     	;# 
   153  010F                     	;# 
   154  018C                     	;# 
   155  0000                     	;# 
   156  0001                     	;# 
   157  0002                     	;# 
   158  0003                     	;# 
   159  0004                     	;# 
   160  0005                     	;# 
   161  0006                     	;# 
   162  0007                     	;# 
   163  000A                     	;# 
   164  000B                     	;# 
   165  000C                     	;# 
   166  000D                     	;# 
   167  000E                     	;# 
   168  000E                     	;# 
   169  000F                     	;# 
   170  0010                     	;# 
   171  0011                     	;# 
   172  0012                     	;# 
   173  0013                     	;# 
   174  0014                     	;# 
   175  0015                     	;# 
   176  0015                     	;# 
   177  0016                     	;# 
   178  0017                     	;# 
   179  0018                     	;# 
   180  0019                     	;# 
   181  001A                     	;# 
   182  001B                     	;# 
   183  001B                     	;# 
   184  001C                     	;# 
   185  001D                     	;# 
   186  001E                     	;# 
   187  001F                     	;# 
   188  0081                     	;# 
   189  0085                     	;# 
   190  0086                     	;# 
   191  0087                     	;# 
   192  008C                     	;# 
   193  008D                     	;# 
   194  008E                     	;# 
   195  0092                     	;# 
   196  0093                     	;# 
   197  0094                     	;# 
   198  0098                     	;# 
   199  0099                     	;# 
   200  009F                     	;# 
   201  010C                     	;# 
   202  010D                     	;# 
   203  010E                     	;# 
   204  010F                     	;# 
   205  018C                     	;# 
   206  0000                     	;# 
   207  0001                     	;# 
   208  0002                     	;# 
   209  0003                     	;# 
   210  0004                     	;# 
   211  0005                     	;# 
   212  0006                     	;# 
   213  0007                     	;# 
   214  000A                     	;# 
   215  000B                     	;# 
   216  000C                     	;# 
   217  000D                     	;# 
   218  000E                     	;# 
   219  000E                     	;# 
   220  000F                     	;# 
   221  0010                     	;# 
   222  0011                     	;# 
   223  0012                     	;# 
   224  0013                     	;# 
   225  0014                     	;# 
   226  0015                     	;# 
   227  0015                     	;# 
   228  0016                     	;# 
   229  0017                     	;# 
   230  0018                     	;# 
   231  0019                     	;# 
   232  001A                     	;# 
   233  001B                     	;# 
   234  001B                     	;# 
   235  001C                     	;# 
   236  001D                     	;# 
   237  001E                     	;# 
   238  001F                     	;# 
   239  0081                     	;# 
   240  0085                     	;# 
   241  0086                     	;# 
   242  0087                     	;# 
   243  008C                     	;# 
   244  008D                     	;# 
   245  008E                     	;# 
   246  0092                     	;# 
   247  0093                     	;# 
   248  0094                     	;# 
   249  0098                     	;# 
   250  0099                     	;# 
   251  009F                     	;# 
   252  010C                     	;# 
   253  010D                     	;# 
   254  010E                     	;# 
   255  010F                     	;# 
   256  018C                     	;# 
   257  0000                     	;# 
   258  0001                     	;# 
   259  0002                     	;# 
   260  0003                     	;# 
   261  0004                     	;# 
   262  0005                     	;# 
   263  0006                     	;# 
   264  0007                     	;# 
   265  000A                     	;# 
   266  000B                     	;# 
   267  000C                     	;# 
   268  000D                     	;# 
   269  000E                     	;# 
   270  000E                     	;# 
   271  000F                     	;# 
   272  0010                     	;# 
   273  0011                     	;# 
   274  0012                     	;# 
   275  0013                     	;# 
   276  0014                     	;# 
   277  0015                     	;# 
   278  0015                     	;# 
   279  0016                     	;# 
   280  0017                     	;# 
   281  0018                     	;# 
   282  0019                     	;# 
   283  001A                     	;# 
   284  001B                     	;# 
   285  001B                     	;# 
   286  001C                     	;# 
   287  001D                     	;# 
   288  001E                     	;# 
   289  001F                     	;# 
   290  0081                     	;# 
   291  0085                     	;# 
   292  0086                     	;# 
   293  0087                     	;# 
   294  008C                     	;# 
   295  008D                     	;# 
   296  008E                     	;# 
   297  0092                     	;# 
   298  0093                     	;# 
   299  0094                     	;# 
   300  0098                     	;# 
   301  0099                     	;# 
   302  009F                     	;# 
   303  010C                     	;# 
   304  010D                     	;# 
   305  010E                     	;# 
   306  010F                     	;# 
   307  018C                     	;# 
   308  0000                     	;# 
   309  0001                     	;# 
   310  0002                     	;# 
   311  0003                     	;# 
   312  0004                     	;# 
   313  0005                     	;# 
   314  0006                     	;# 
   315  0007                     	;# 
   316  000A                     	;# 
   317  000B                     	;# 
   318  000C                     	;# 
   319  000D                     	;# 
   320  000E                     	;# 
   321  000E                     	;# 
   322  000F                     	;# 
   323  0010                     	;# 
   324  0011                     	;# 
   325  0012                     	;# 
   326  0013                     	;# 
   327  0014                     	;# 
   328  0015                     	;# 
   329  0015                     	;# 
   330  0016                     	;# 
   331  0017                     	;# 
   332  0018                     	;# 
   333  0019                     	;# 
   334  001A                     	;# 
   335  001B                     	;# 
   336  001B                     	;# 
   337  001C                     	;# 
   338  001D                     	;# 
   339  001E                     	;# 
   340  001F                     	;# 
   341  0081                     	;# 
   342  0085                     	;# 
   343  0086                     	;# 
   344  0087                     	;# 
   345  008C                     	;# 
   346  008D                     	;# 
   347  008E                     	;# 
   348  0092                     	;# 
   349  0093                     	;# 
   350  0094                     	;# 
   351  0098                     	;# 
   352  0099                     	;# 
   353  009F                     	;# 
   354  010C                     	;# 
   355  010D                     	;# 
   356  010E                     	;# 
   357  010F                     	;# 
   358  018C                     	;# 
   359  0000                     	;# 
   360  0001                     	;# 
   361  0002                     	;# 
   362  0003                     	;# 
   363  0004                     	;# 
   364  0005                     	;# 
   365  0006                     	;# 
   366  0007                     	;# 
   367  000A                     	;# 
   368  000B                     	;# 
   369  000C                     	;# 
   370  000D                     	;# 
   371  000E                     	;# 
   372  000E                     	;# 
   373  000F                     	;# 
   374  0010                     	;# 
   375  0011                     	;# 
   376  0012                     	;# 
   377  0013                     	;# 
   378  0014                     	;# 
   379  0015                     	;# 
   380  0015                     	;# 
   381  0016                     	;# 
   382  0017                     	;# 
   383  0018                     	;# 
   384  0019                     	;# 
   385  001A                     	;# 
   386  001B                     	;# 
   387  001B                     	;# 
   388  001C                     	;# 
   389  001D                     	;# 
   390  001E                     	;# 
   391  001F                     	;# 
   392  0081                     	;# 
   393  0085                     	;# 
   394  0086                     	;# 
   395  0087                     	;# 
   396  008C                     	;# 
   397  008D                     	;# 
   398  008E                     	;# 
   399  0092                     	;# 
   400  0093                     	;# 
   401  0094                     	;# 
   402  0098                     	;# 
   403  0099                     	;# 
   404  009F                     	;# 
   405  010C                     	;# 
   406  010D                     	;# 
   407  010E                     	;# 
   408  010F                     	;# 
   409  018C                     	;# 
   410  0000                     	;# 
   411  0001                     	;# 
   412  0002                     	;# 
   413  0003                     	;# 
   414  0004                     	;# 
   415  0005                     	;# 
   416  0006                     	;# 
   417  0007                     	;# 
   418  000A                     	;# 
   419  000B                     	;# 
   420  000C                     	;# 
   421  000D                     	;# 
   422  000E                     	;# 
   423  000E                     	;# 
   424  000F                     	;# 
   425  0010                     	;# 
   426  0011                     	;# 
   427  0012                     	;# 
   428  0013                     	;# 
   429  0014                     	;# 
   430  0015                     	;# 
   431  0015                     	;# 
   432  0016                     	;# 
   433  0017                     	;# 
   434  0018                     	;# 
   435  0019                     	;# 
   436  001A                     	;# 
   437  001B                     	;# 
   438  001B                     	;# 
   439  001C                     	;# 
   440  001D                     	;# 
   441  001E                     	;# 
   442  001F                     	;# 
   443  0081                     	;# 
   444  0085                     	;# 
   445  0086                     	;# 
   446  0087                     	;# 
   447  008C                     	;# 
   448  008D                     	;# 
   449  008E                     	;# 
   450  0092                     	;# 
   451  0093                     	;# 
   452  0094                     	;# 
   453  0098                     	;# 
   454  0099                     	;# 
   455  009F                     	;# 
   456  010C                     	;# 
   457  010D                     	;# 
   458  010E                     	;# 
   459  010F                     	;# 
   460  018C                     	;# 
   461  0000                     	;# 
   462  0001                     	;# 
   463  0002                     	;# 
   464  0003                     	;# 
   465  0004                     	;# 
   466  0005                     	;# 
   467  0006                     	;# 
   468  0007                     	;# 
   469  000A                     	;# 
   470  000B                     	;# 
   471  000C                     	;# 
   472  000D                     	;# 
   473  000E                     	;# 
   474  000E                     	;# 
   475  000F                     	;# 
   476  0010                     	;# 
   477  0011                     	;# 
   478  0012                     	;# 
   479  0013                     	;# 
   480  0014                     	;# 
   481  0015                     	;# 
   482  0015                     	;# 
   483  0016                     	;# 
   484  0017                     	;# 
   485  0018                     	;# 
   486  0019                     	;# 
   487  001A                     	;# 
   488  001B                     	;# 
   489  001B                     	;# 
   490  001C                     	;# 
   491  001D                     	;# 
   492  001E                     	;# 
   493  001F                     	;# 
   494  0081                     	;# 
   495  0085                     	;# 
   496  0086                     	;# 
   497  0087                     	;# 
   498  008C                     	;# 
   499  008D                     	;# 
   500  008E                     	;# 
   501  0092                     	;# 
   502  0093                     	;# 
   503  0094                     	;# 
   504  0098                     	;# 
   505  0099                     	;# 
   506  009F                     	;# 
   507  010C                     	;# 
   508  010D                     	;# 
   509  010E                     	;# 
   510  010F                     	;# 
   511  018C                     	;# 
   512                           
   513                           	psect	idataCOMMON
   514  07FE                     __pidataCOMMON:
   515                           
   516                           ;initializer for __MenuNav
   517  07FE  3401               	retlw	1
   518  07FF  3400               	retlw	0
   519                           
   520                           	psect	idataBANK3
   521  11F8                     __pidataBANK3:
   522                           
   523                           ;initializer for __SubMenuArr
   524  11F8  3402               	retlw	2
   525  11F9  3401               	retlw	1
   526  11FA  3402               	retlw	2
   527  11FB  3401               	retlw	1
   528  11FC  3401               	retlw	1
   529  11FD  3402               	retlw	2
   530  11FE  3401               	retlw	1
   531  11FF  3401               	retlw	1
   532  1200  3401               	retlw	1
   533  1201  3400               	retlw	0
   534  1202  3400               	retlw	0
   535  1203  3400               	retlw	0
   536  1204  3401               	retlw	1
   537  1205  3401               	retlw	1
   538  1206  3401               	retlw	1
   539  1207  3400               	retlw	0
   540  1208  3400               	retlw	0
   541  1209  3400               	retlw	0
   542  120A  3400               	retlw	0
   543  120B  3400               	retlw	0
   544  120C  3400               	retlw	0
   545  120D  3400               	retlw	0
   546  120E  3400               	retlw	0
   547  120F  3400               	retlw	0
   548                           
   549                           ;initializer for __MenuArr
   550  1210  3404               	retlw	4
   551  1211  3406               	retlw	6
   552  1212  3403               	retlw	3
   553  1213  3403               	retlw	3
   554  1214  3400               	retlw	0
   555  1215  3400               	retlw	0
   556  1216  3400               	retlw	0
   557  1217  3400               	retlw	0
   558  1218  3400               	retlw	0
   559  1219  3400               	retlw	0
   560                           
   561                           	psect	stringtext
   562  1000                     __pstringtext:
   563  1000                     stringtab:
   564  1000                     __stringtab:
   565                           
   566                           ;	String table - string pointers are 2 bytes each
   567  1000  1BFF               	btfsc	btemp+1,7
   568  1001  280A               	ljmp	stringcode
   569  1002  1383               	bcf	3,7
   570  1003  187F               	btfsc	btemp+1,0
   571  1004  1783               	bsf	3,7
   572  1005  0800               	movf	0,w
   573  1006  0A84               	incf	4,f
   574  1007  1903               	skipnz
   575  1008  0AFF               	incf	btemp+1,f
   576  1009  0008               	return
   577  100A                     stringcode:
   578  100A  087F               	movf	btemp+1,w
   579  100B  397F               	andlw	127
   580  100C  008A               	movwf	10
   581  100D  0804               	movf	4,w
   582  100E  0A84               	incf	4,f
   583  100F  1903               	skipnz
   584  1010  0AFF               	incf	btemp+1,f
   585  1011  0082               	movwf	2
   586  1012                     __stringbase:
   587  1012                     __end_of__stringtab:
   588  1012                     _SHRIFT:
   589  1012  3441               	retlw	65
   590  1013  34A0               	retlw	160
   591  1014  3442               	retlw	66
   592  1015  34A1               	retlw	161
   593  1016  34E0               	retlw	224
   594  1017  3445               	retlw	69
   595  1018  34A3               	retlw	163
   596  1019  34A4               	retlw	164
   597  101A  34A5               	retlw	165
   598  101B  34A6               	retlw	166
   599  101C  344B               	retlw	75
   600  101D  34A7               	retlw	167
   601  101E  344D               	retlw	77
   602  101F  3448               	retlw	72
   603  1020  344F               	retlw	79
   604  1021  34A8               	retlw	168
   605  1022  3450               	retlw	80
   606  1023  3443               	retlw	67
   607  1024  3454               	retlw	84
   608  1025  34A9               	retlw	169
   609  1026  34AA               	retlw	170
   610  1027  3458               	retlw	88
   611  1028  34E1               	retlw	225
   612  1029  34AB               	retlw	171
   613  102A  34AC               	retlw	172
   614  102B  34E2               	retlw	226
   615  102C  34AD               	retlw	173
   616  102D  34AE               	retlw	174
   617  102E  3462               	retlw	98
   618  102F  34AF               	retlw	175
   619  1030  34B0               	retlw	176
   620  1031  34B1               	retlw	177
   621  1032  3461               	retlw	97
   622  1033  34B2               	retlw	178
   623  1034  34B3               	retlw	179
   624  1035  34B4               	retlw	180
   625  1036  34E3               	retlw	227
   626  1037  3465               	retlw	101
   627  1038  34B6               	retlw	182
   628  1039  34B7               	retlw	183
   629  103A  34B8               	retlw	184
   630  103B  34B9               	retlw	185
   631  103C  34BA               	retlw	186
   632  103D  34BB               	retlw	187
   633  103E  34BC               	retlw	188
   634  103F  34BD               	retlw	189
   635  1040  346F               	retlw	111
   636  1041  34BE               	retlw	190
   637  1042  3470               	retlw	112
   638  1043  3463               	retlw	99
   639  1044  34BF               	retlw	191
   640  1045  3479               	retlw	121
   641  1046  34E4               	retlw	228
   642  1047  3478               	retlw	120
   643  1048  34E5               	retlw	229
   644  1049  34C0               	retlw	192
   645  104A  34C1               	retlw	193
   646  104B  34E6               	retlw	230
   647  104C  34C2               	retlw	194
   648  104D  34C3               	retlw	195
   649  104E  34C4               	retlw	196
   650  104F  34C5               	retlw	197
   651  1050  34C6               	retlw	198
   652  1051  34C7               	retlw	199
   653  1052                     __end_of_SHRIFT:
   654  1052                     _dpowers:
   655  1052  3401               	retlw	1
   656  1053  3400               	retlw	0
   657  1054  340A               	retlw	10
   658  1055  3400               	retlw	0
   659  1056  3464               	retlw	100
   660  1057  3400               	retlw	0
   661  1058  34E8               	retlw	232
   662  1059  3403               	retlw	3
   663  105A  3410               	retlw	16
   664  105B  3427               	retlw	39
   665  105C                     __end_of_dpowers:
   666  105C                     log@coeff:
   667  105C  3400               	retlw	0
   668  105D  3400               	retlw	0
   669  105E  3400               	retlw	0
   670  105F  3400               	retlw	0
   671  1060  3480               	retlw	128
   672  1061  343F               	retlw	63
   673  1062  34F0               	retlw	240
   674  1063  34FF               	retlw	255
   675  1064  34BE               	retlw	190
   676  1065  34E2               	retlw	226
   677  1066  34A9               	retlw	169
   678  1067  343E               	retlw	62
   679  1068  3483               	retlw	131
   680  1069  3476               	retlw	118
   681  106A  34BE               	retlw	190
   682  106B  34AE               	retlw	174
   683  106C  342B               	retlw	43
   684  106D  343E               	retlw	62
   685  106E  343C               	retlw	60
   686  106F  34C3               	retlw	195
   687  1070  34BD               	retlw	189
   688  1071  34D2               	retlw	210
   689  1072  3413               	retlw	19
   690  1073  343D               	retlw	61
   691  1074  3478               	retlw	120
   692  1075  34D3               	retlw	211
   693  1076  34BB               	retlw	187
   694  1077                     __end_oflog@coeff:
   695  0013                     _SSPBUF	set	19
   696  0005                     _PORTAbits	set	5
   697  000E                     _TMR1L	set	14
   698  000F                     _TMR1H	set	15
   699  0006                     _PORTBbits	set	6
   700  0018                     _RCSTAbits	set	24
   701  0014                     _SSPCONbits	set	20
   702  0011                     _TMR2	set	17
   703  0012                     _T2CONbits	set	18
   704  0007                     _PORTC	set	7
   705  0006                     _PORTB	set	6
   706  0005                     _PORTA	set	5
   707  001E                     _ADRES	set	30
   708  001F                     _ADCON0bits	set	31
   709  000C                     _PIR1bits	set	12
   710  0010                     _T1CONbits	set	16
   711  0001                     _TMR0	set	1
   712  000B                     _INTCONbits	set	11
   713  0036                     _RB6	set	54
   714  0035                     _RB5	set	53
   715  0034                     _RB4	set	52
   716  0033                     _RB3	set	51
   717  00FA                     _GO_DONE	set	250
   718  009F                     _ADCON1bits	set	159
   719  0099                     _SPBRG	set	153
   720  0098                     _TXSTAbits	set	152
   721  0094                     _SSPSTATbits	set	148
   722  008D                     _PIE2bits	set	141
   723  0081                     _OPTION_REGbits	set	129
   724  0087                     _TRISCbits	set	135
   725  0086                     _TRISBbits	set	134
   726  0085                     _TRISAbits	set	133
   727  008C                     _PIE1bits	set	140
   728  1077                     STR_55:
   729  1077  34D1               	retlw	-47
   730  1078  34E1               	retlw	-31
   731  1079  34F0               	retlw	-16
   732  107A  34EE               	retlw	-18
   733  107B  34F1               	retlw	-15
   734  107C  3420               	retlw	32	;' '
   735  107D  34ED               	retlw	-19
   736  107E  34E0               	retlw	-32
   737  107F  34F1               	retlw	-15
   738  1080  34F2               	retlw	-14
   739  1081  34F0               	retlw	-16
   740  1082  342E               	retlw	46	;'.'
   741  1083  3420               	retlw	32	;' '
   742  1084  34CE               	retlw	-50
   743  1085  34C7               	retlw	-57
   744  1086  34D3               	retlw	-45
   745  1087  3400               	retlw	0
   746  1088                     STR_59:
   747  1088  34D1               	retlw	-47
   748  1089  34E1               	retlw	-31
   749  108A  34F0               	retlw	-16
   750  108B  34EE               	retlw	-18
   751  108C  34F1               	retlw	-15
   752  108D  3420               	retlw	32	;' '
   753  108E  34ED               	retlw	-19
   754  108F  34E0               	retlw	-32
   755  1090  34F1               	retlw	-15
   756  1091  34F2               	retlw	-14
   757  1092  34F0               	retlw	-16
   758  1093  342E               	retlw	46	;'.'
   759  1094  3420               	retlw	32	;' '
   760  1095  34CF               	retlw	-49
   761  1096  34C7               	retlw	-57
   762  1097  34D3               	retlw	-45
   763  1098  3400               	retlw	0
   764  1099                     STR_62:
   765  1099  34D2               	retlw	-46
   766  109A  34E2               	retlw	-30
   767  109B  34ED               	retlw	-19
   768  109C  343A               	retlw	58	;':'
   769  109D  3425               	retlw	37	;'%'
   770  109E  3433               	retlw	51	;'3'
   771  109F  3464               	retlw	100	;'d'
   772  10A0  3420               	retlw	32	;' '
   773  10A1  34D2               	retlw	-46
   774  10A2  34ED               	retlw	-19
   775  10A3  34E0               	retlw	-32
   776  10A4  34F0               	retlw	-16
   777  10A5  343A               	retlw	58	;':'
   778  10A6  3425               	retlw	37	;'%'
   779  10A7  3433               	retlw	51	;'3'
   780  10A8  3464               	retlw	100	;'d'
   781  10A9  3400               	retlw	0
   782  10AA                     STR_25:
   783  10AA  34C4               	retlw	-60
   784  10AB  34CE               	retlw	-50
   785  10AC  3432               	retlw	50	;'2'
   786  10AD  342D               	retlw	45	;'-'
   787  10AE  34D2               	retlw	-46
   788  10AF  34E0               	retlw	-32
   789  10B0  34E9               	retlw	-23
   790  10B1  34EC               	retlw	-20
   791  10B2  34E5               	retlw	-27
   792  10B3  34F0               	retlw	-16
   793  10B4  3420               	retlw	32	;' '
   794  10B5  34E2               	retlw	-30
   795  10B6  34FB               	retlw	-5
   796  10B7  34EA               	retlw	-22
   797  10B8  34EB               	retlw	-21
   798  10B9  3400               	retlw	0
   799  10BA                     STR_28:
   800  10BA  34C4               	retlw	-60
   801  10BB  34CE               	retlw	-50
   802  10BC  3432               	retlw	50	;'2'
   803  10BD  342D               	retlw	45	;'-'
   804  10BE  34C2               	retlw	-62
   805  10BF  34EA               	retlw	-22
   806  10C0  34EB               	retlw	-21
   807  10C1  3420               	retlw	32	;' '
   808  10C2  34EF               	retlw	-17
   809  10C3  34EE               	retlw	-18
   810  10C4  3420               	retlw	32	;' '
   811  10C5  34F2               	retlw	-14
   812  10C6  34E5               	retlw	-27
   813  10C7  34EC               	retlw	-20
   814  10C8  34EF               	retlw	-17
   815  10C9  3400               	retlw	0
   816  10CA                     STR_51:
   817  10CA  34D1               	retlw	-47
   818  10CB  34EE               	retlw	-18
   819  10CC  34F5               	retlw	-11
   820  10CD  34F0               	retlw	-16
   821  10CE  342E               	retlw	46	;'.'
   822  10CF  34F2               	retlw	-14
   823  10D0  34E5               	retlw	-27
   824  10D1  34EA               	retlw	-22
   825  10D2  342E               	retlw	46	;'.'
   826  10D3  34ED               	retlw	-19
   827  10D4  34E0               	retlw	-32
   828  10D5  34F1               	retlw	-15
   829  10D6  34F2               	retlw	-14
   830  10D7  34F0               	retlw	-16
   831  10D8  342E               	retlw	46	;'.'
   832  10D9  3400               	retlw	0
   833  10DA                     STR_22:
   834  10DA  34C4               	retlw	-60
   835  10DB  34CE               	retlw	-50
   836  10DC  3432               	retlw	50	;'2'
   837  10DD  342D               	retlw	45	;'-'
   838  10DE  34D2               	retlw	-46
   839  10DF  34E0               	retlw	-32
   840  10E0  34E9               	retlw	-23
   841  10E1  34EC               	retlw	-20
   842  10E2  34E5               	retlw	-27
   843  10E3  34F0               	retlw	-16
   844  10E4  3420               	retlw	32	;' '
   845  10E5  34E2               	retlw	-30
   846  10E6  34EA               	retlw	-22
   847  10E7  34EB               	retlw	-21
   848  10E8  3400               	retlw	0
   849  10E9                     STR_16:
   850  10E9  34C4               	retlw	-60
   851  10EA  34CE               	retlw	-50
   852  10EB  3432               	retlw	50	;'2'
   853  10EC  342D               	retlw	45	;'-'
   854  10ED  34C2               	retlw	-62
   855  10EE  34EA               	retlw	-22
   856  10EF  34EB               	retlw	-21
   857  10F0  3420               	retlw	32	;' '
   858  10F1  34F2               	retlw	-14
   859  10F2  34E0               	retlw	-32
   860  10F3  34E9               	retlw	-23
   861  10F4  34EC               	retlw	-20
   862  10F5  34E5               	retlw	-27
   863  10F6  34F0               	retlw	-16
   864  10F7  3400               	retlw	0
   865  10F8                     STR_37:
   866  10F8  3425               	retlw	37	;'%'
   867  10F9  3433               	retlw	51	;'3'
   868  10FA  3473               	retlw	115	;'s'
   869  10FB  3425               	retlw	37	;'%'
   870  10FC  3433               	retlw	51	;'3'
   871  10FD  3475               	retlw	117	;'u'
   872  10FE  3420               	retlw	32	;' '
   873  10FF  3420               	retlw	32	;' '
   874  1100  3425               	retlw	37	;'%'
   875  1101  3433               	retlw	51	;'3'
   876  1102  3473               	retlw	115	;'s'
   877  1103  3425               	retlw	37	;'%'
   878  1104  3433               	retlw	51	;'3'
   879  1105  3475               	retlw	117	;'u'
   880  1106  3400               	retlw	0
   881  1107                     STR_13:
   882  1107  34C4               	retlw	-60
   883  1108  34CE               	retlw	-50
   884  1109  3431               	retlw	49	;'1'
   885  110A  342D               	retlw	45	;'-'
   886  110B  34C2               	retlw	-62
   887  110C  34F0               	retlw	-16
   888  110D  34E5               	retlw	-27
   889  110E  34EC               	retlw	-20
   890  110F  34FF               	retlw	-1
   891  1110  3420               	retlw	32	;' '
   892  1111  34E8               	retlw	-24
   893  1112  34EC               	retlw	-20
   894  1113  34EF               	retlw	-17
   895  1114  3400               	retlw	0
   896  1115                     STR_36:
   897  1115  34C0               	retlw	-64
   898  1116  34ED               	retlw	-19
   899  1117  34E0               	retlw	-32
   900  1118  34EB               	retlw	-21
   901  1119  34EE               	retlw	-18
   902  111A  34E3               	retlw	-29
   903  111B  342E               	retlw	46	;'.'
   904  111C  3420               	retlw	32	;' '
   905  111D  34E2               	retlw	-30
   906  111E  34E2               	retlw	-30
   907  111F  34EE               	retlw	-18
   908  1120  34E4               	retlw	-28
   909  1121  3400               	retlw	0
   910  1122                     STR_7:
   911  1122  34C4               	retlw	-60
   912  1123  34CE               	retlw	-50
   913  1124  3431               	retlw	49	;'1'
   914  1125  342D               	retlw	45	;'-'
   915  1126  34C8               	retlw	-56
   916  1127  34EC               	retlw	-20
   917  1128  34EF               	retlw	-17
   918  1129  342F               	retlw	47	;'/'
   919  112A  34EF               	retlw	-17
   920  112B  34EE               	retlw	-18
   921  112C  34F1               	retlw	-15
   922  112D  34F2               	retlw	-14
   923  112E  3400               	retlw	0
   924  112F                     STR_42:
   925  112F  3425               	retlw	37	;'%'
   926  1130  3431               	retlw	49	;'1'
   927  1131  3432               	retlw	50	;'2'
   928  1132  3473               	retlw	115	;'s'
   929  1133  3425               	retlw	37	;'%'
   930  1134  3464               	retlw	100	;'d'
   931  1135  3425               	retlw	37	;'%'
   932  1136  3464               	retlw	100	;'d'
   933  1137  3425               	retlw	37	;'%'
   934  1138  3464               	retlw	100	;'d'
   935  1139  3425               	retlw	37	;'%'
   936  113A  3464               	retlw	100	;'d'
   937  113B  3400               	retlw	0
   938  113C                     STR_63:
   939  113C  3425               	retlw	37	;'%'
   940  113D  3433               	retlw	51	;'3'
   941  113E  3473               	retlw	115	;'s'
   942  113F  3425               	retlw	37	;'%'
   943  1140  3434               	retlw	52	;'4'
   944  1141  3473               	retlw	115	;'s'
   945  1142  3425               	retlw	37	;'%'
   946  1143  3435               	retlw	53	;'5'
   947  1144  3473               	retlw	115	;'s'
   948  1145  3425               	retlw	37	;'%'
   949  1146  3434               	retlw	52	;'4'
   950  1147  3475               	retlw	117	;'u'
   951  1148  3400               	retlw	0
   952  1149                     STR_1:
   953  1149  34C7               	retlw	-57
   954  114A  34E0               	retlw	-32
   955  114B  34E3               	retlw	-29
   956  114C  34F0               	retlw	-16
   957  114D  34F3               	retlw	-13
   958  114E  34E7               	retlw	-25
   959  114F  34EA               	retlw	-22
   960  1150  34E0               	retlw	-32
   961  1151  342E               	retlw	46	;'.'
   962  1152  342E               	retlw	46	;'.'
   963  1153  342E               	retlw	46	;'.'
   964  1154  342E               	retlw	46	;'.'
   965  1155  3400               	retlw	0
   966  1156                     STR_45:
   967  1156  34D6               	retlw	-42
   968  1157  34E8               	retlw	-24
   969  1158  34F4               	retlw	-12
   970  1159  34F0               	retlw	-16
   971  115A  342E               	retlw	46	;'.'
   972  115B  3420               	retlw	32	;' '
   973  115C  34E2               	retlw	-30
   974  115D  34FB               	retlw	-5
   975  115E  34E2               	retlw	-30
   976  115F  34EE               	retlw	-18
   977  1160  34E4               	retlw	-28
   978  1161  3400               	retlw	0
   979  1162                     STR_41:
   980  1162  34D6               	retlw	-42
   981  1163  34E8               	retlw	-24
   982  1164  34F4               	retlw	-12
   983  1165  34F0               	retlw	-16
   984  1166  342E               	retlw	46	;'.'
   985  1167  3420               	retlw	32	;' '
   986  1168  34E2               	retlw	-30
   987  1169  34E2               	retlw	-30
   988  116A  34EE               	retlw	-18
   989  116B  34E4               	retlw	-28
   990  116C  3400               	retlw	0
   991  116D                     STR_11:
   992  116D  34CF               	retlw	-49
   993  116E  34EE               	retlw	-18
   994  116F  34F1               	retlw	-15
   995  1170  34F2               	retlw	-14
   996  1171  34EE               	retlw	-18
   997  1172  34FF               	retlw	-1
   998  1173  34ED               	retlw	-19
   999  1174  34ED               	retlw	-19
  1000  1175  34FB               	retlw	-5
  1001  1176  34E9               	retlw	-23
  1002  1177  3400               	retlw	0
  1003  1178                     STR_5:
  1004  1178  34CD               	retlw	-51
  1005  1179  34E0               	retlw	-32
  1006  117A  34F1               	retlw	-15
  1007  117B  34F2               	retlw	-14
  1008  117C  34F0               	retlw	-16
  1009  117D  34EE               	retlw	-18
  1010  117E  34E9               	retlw	-23
  1011  117F  34EA               	retlw	-22
  1012  1180  34E8               	retlw	-24
  1013  1181  3400               	retlw	0
  1014  1182                     STR_34:
  1015  1182  34CF               	retlw	-49
  1016  1183  34EE               	retlw	-18
  1017  1184  34EA               	retlw	-22
  1018  1185  34E0               	retlw	-32
  1019  1186  34E7               	retlw	-25
  1020  1187  34E0               	retlw	-32
  1021  1188  34ED               	retlw	-19
  1022  1189  34E8               	retlw	-24
  1023  118A  34FF               	retlw	-1
  1024  118B  3400               	retlw	0
  1025  118C                     STR_47:
  1026  118C  34C4               	retlw	-60
  1027  118D  342E               	retlw	46	;'.'
  1028  118E  34E2               	retlw	-30
  1029  118F  34FB               	retlw	-5
  1030  1190  34F5               	retlw	-11
  1031  1191  34EE               	retlw	-18
  1032  1192  34E4               	retlw	-28
  1033  1193  34FB               	retlw	-5
  1034  1194  343A               	retlw	58	;':'
  1035  1195  3400               	retlw	0
  1036  1196                     STR_14:
  1037  1196  3425               	retlw	37	;'%'
  1038  1197  3434               	retlw	52	;'4'
  1039  1198  3464               	retlw	100	;'d'
  1040  1199  3420               	retlw	32	;' '
  1041  119A  34F1               	retlw	-15
  1042  119B  34E5               	retlw	-27
  1043  119C  34EA               	retlw	-22
  1044  119D  342E               	retlw	46	;'.'
  1045  119E  3400               	retlw	0
  1046  119F                     STR_23:
  1047  119F  3425               	retlw	37	;'%'
  1048  11A0  3434               	retlw	52	;'4'
  1049  11A1  3464               	retlw	100	;'d'
  1050  11A2  3420               	retlw	32	;' '
  1051  11A3  34EC               	retlw	-20
  1052  11A4  34E8               	retlw	-24
  1053  11A5  34ED               	retlw	-19
  1054  11A6  342E               	retlw	46	;'.'
  1055  11A7  3400               	retlw	0
  1056  11A8                     STR_43:
  1057  11A8  34C4               	retlw	-60
  1058  11A9  342E               	retlw	46	;'.'
  1059  11AA  34E2               	retlw	-30
  1060  11AB  34F5               	retlw	-11
  1061  11AC  34EE               	retlw	-18
  1062  11AD  34E4               	retlw	-28
  1063  11AE  34FB               	retlw	-5
  1064  11AF  343A               	retlw	58	;':'
  1065  11B0  3400               	retlw	0
  1066  11B1                     STR_9:
  1067  11B1  34C8               	retlw	-56
  1068  11B2  34EC               	retlw	-20
  1069  11B3  34EF               	retlw	-17
  1070  11B4  34F3               	retlw	-13
  1071  11B5  34EB               	retlw	-21
  1072  11B6  34FC               	retlw	-4
  1073  11B7  34F1               	retlw	-15
  1074  11B8  3400               	retlw	0
  1075  11B9                     STR_66:
  1076  11B9  3428               	retlw	40	;'('
  1077  11BA  346E               	retlw	110	;'n'
  1078  11BB  3475               	retlw	117	;'u'
  1079  11BC  346C               	retlw	108	;'l'
  1080  11BD  346C               	retlw	108	;'l'
  1081  11BE  3429               	retlw	41	;')'
  1082  11BF  3400               	retlw	0
  1083  11C0                     STR_49:
  1084  11C0  34CF               	retlw	-49
  1085  11C1  34E0               	retlw	-32
  1086  11C2  34EC               	retlw	-20
  1087  11C3  34FF               	retlw	-1
  1088  11C4  34F2               	retlw	-14
  1089  11C5  34FC               	retlw	-4
  1090  11C6  3400               	retlw	0
  1091  11C7                     STR_65:
  1092  11C7  34CD               	retlw	-51
  1093  11C8  34C0               	retlw	-64
  1094  11C9  34C3               	retlw	-61
  1095  11CA  34D0               	retlw	-48
  1096  11CB  343A               	retlw	58	;':'
  1097  11CC  3400               	retlw	0
  1098  11CD                     STR_38:
  1099  11CD  34C0               	retlw	-64
  1100  11CE  34ED               	retlw	-19
  1101  11CF  3431               	retlw	49	;'1'
  1102  11D0  343A               	retlw	58	;':'
  1103  11D1  3400               	retlw	0
  1104  11D2                     STR_39:
  1105  11D2  3441               	retlw	65	;'A'
  1106  11D3  34ED               	retlw	-19
  1107  11D4  3432               	retlw	50	;'2'
  1108  11D5  343A               	retlw	58	;':'
  1109  11D6  3400               	retlw	0
  1110  11D7                     STR_4:
  1111  11D7  3425               	retlw	37	;'%'
  1112  11D8  3431               	retlw	49	;'1'
  1113  11D9  3436               	retlw	54	;'6'
  1114  11DA  3473               	retlw	115	;'s'
  1115  11DB  3400               	retlw	0
  1116  11DC                     STR_3:
  1117  11DC  34C2               	retlw	-62
  1118  11DD  34FB               	retlw	-5
  1119  11DE  34EA               	retlw	-22
  1120  11DF  34EB               	retlw	-21
  1121  11E0  3400               	retlw	0
  1122  11E1                     STR_20:
  1123  11E1  34CD               	retlw	-51
  1124  11E2  34E5               	retlw	-27
  1125  11E3  34F2               	retlw	-14
  1126  11E4  3400               	retlw	0
  1127  11E5                     STR_64:
  1128  11E5  34C4               	retlw	-60
  1129  11E6  34D3               	retlw	-45
  1130  11E7  343A               	retlw	58	;':'
  1131  11E8  3400               	retlw	0
  1132  11E9                     STR_2:
  1133  11E9  34C2               	retlw	-62
  1134  11EA  34EA               	retlw	-22
  1135  11EB  34EB               	retlw	-21
  1136  11EC  3400               	retlw	0
  1137  11ED                     STR_18:
  1138  11ED  34C4               	retlw	-60
  1139  11EE  34E0               	retlw	-32
  1140  11EF  3400               	retlw	0
  1141  11F0                     STR_8:
  1142  11F0  3425               	retlw	37	;'%'
  1143  11F1  3473               	retlw	115	;'s'
  1144  11F2  3400               	retlw	0
  1145  11ED                     
  1146                           	psect	cinit
  1147  0011                     start_initialization:	
  1148                           ; #config settings
  1149                           
  1150  0011                     __initialization:
  1151                           
  1152                           ; Initialize objects allocated to BANK3
  1153  0011  1783               	bsf	3,7	;select IRP bank2
  1154  0012  30B2               	movlw	low (__pdataBANK3+34)
  1155  0013  00FD               	movwf	btemp+-1
  1156  0014  3011               	movlw	high __pidataBANK3
  1157  0015  00FE               	movwf	btemp
  1158  0016  30F8               	movlw	low __pidataBANK3
  1159  0017  00FF               	movwf	btemp+1
  1160  0018  3090               	movlw	low __pdataBANK3
  1161  0019  0084               	movwf	4
  1162  001A  160A  158A  23E6  120A  118A  	fcall	init_ram0
  1163                           
  1164                           ; Initialize objects allocated to COMMON
  1165  001F  120A  118A  27FE  120A  118A  	fcall	__pidataCOMMON	;fetch initializer
  1166  0024  00FB               	movwf	__pdataCOMMON& (0+127)
  1167  0025  120A  118A  27FF  120A  118A  	fcall	__pidataCOMMON+1	;fetch initializer
  1168  002A  00FC               	movwf	(__pdataCOMMON+1)& (0+127)
  1169                           
  1170                           ; Clear objects allocated to BANK3
  1171  002B  30B2               	movlw	low __pbssBANK3
  1172  002C  0084               	movwf	4
  1173  002D  30D2               	movlw	low (__pbssBANK3+32)
  1174  002E  160A  158A  23B7  120A  118A  	fcall	clear_ram0
  1175                           
  1176                           ; Clear objects allocated to BANK1
  1177  0033  1383               	bcf	3,7	;select IRP bank0
  1178  0034  30A0               	movlw	low __pbssBANK1
  1179  0035  0084               	movwf	4
  1180  0036  30C8               	movlw	low (__pbssBANK1+40)
  1181  0037  160A  158A  23B7   	fcall	clear_ram0
  1182                           
  1183                           ; Clear objects allocated to BITBANK1
  1184  003A  1683               	bsf	3,5	;RP0=1, select bank1
  1185  003B  01EB               	clrf	(__pbitbssBANK1/(0+8))& (0+127)
  1186                           
  1187                           ; Clear objects allocated to COMMON
  1188  003C  01FD               	clrf	__pbssCOMMON& (0+127)
  1189                           
  1190                           ; Clear objects allocated to BITCOMMON
  1191  003D  01FA               	clrf	(__pbitbssCOMMON/(0+8))& (0+127)
  1192  003E                     end_of_initialization:	
  1193                           ;End of C runtime variable initialization code
  1194                           
  1195  003E                     __end_of__initialization:
  1196  003E  0183               	clrf	3
  1197  003F  120A  118A  2842   	ljmp	_main	;jump to C main() function
  1198                           
  1199                           	psect	bitbssCOMMON
  1200  03D0                     __pbitbssCOMMON:
  1201  03D0                     _flSwitchButton:
  1202  03D0                     	ds	1
  1203  03D1                     _flClearLCD:
  1204  03D1                     	ds	1
  1205  03D2                     _flUpdate:
  1206  03D2                     	ds	1
  1207  03D3                     _flStopBitRecieve:
  1208  03D3                     	ds	1
  1209  03D4                     _flStartBitRecieve:
  1210  03D4                     	ds	1
  1211  03D5                     _flDO1:
  1212  03D5                     	ds	1
  1213  03D6                     __minute:
  1214  03D6                     	ds	1
  1215  03D7                     __second:
  1216  03D7                     	ds	1
  1217                           
  1218                           	psect	bssCOMMON
  1219  007D                     __pbssCOMMON:
  1220  007D                     _flModeStep:
  1221  007D                     	ds	1
  1222                           
  1223                           	psect	dataCOMMON
  1224  007B                     __pdataCOMMON:
  1225  007B                     __MenuNav:
  1226  007B                     	ds	2
  1227                           
  1228                           	psect	bitbssBANK1
  1229  0758                     __pbitbssBANK1:
  1230  0758                     __hour:
  1231  0758                     	ds	1
  1232  0759                     __flashSecond:
  1233  0759                     	ds	1
  1234  075A                     __500ms:
  1235  075A                     	ds	1
  1236  075B                     __250ms:
  1237  075B                     	ds	1
  1238  075C                     __100ms:
  1239  075C                     	ds	1
  1240                           
  1241                           	psect	bssBANK1
  1242  00A0                     __pbssBANK1:
  1243  00A0                     _arrCmd:
  1244  00A0                     	ds	4
  1245  00A4                     _Analog:
  1246  00A4                     	ds	4
  1247  00A8                     _errno:
  1248  00A8                     	ds	2
  1249  00AA                     __tempDigit:
  1250  00AA                     	ds	2
  1251  00AC                     __timerDO2:
  1252  00AC                     	ds	2
  1253  00AE                     __timerDO1:
  1254  00AE                     	ds	2
  1255  00B0                     __settingTimerOffDO2:
  1256  00B0                     	ds	2
  1257  00B2                     __settingTimerOnDO2:
  1258  00B2                     	ds	2
  1259  00B4                     __settingTimeImpDO1:
  1260  00B4                     	ds	2
  1261  00B6                     __countSecond:
  1262  00B6                     	ds	2
  1263  00B8                     _temperatureAI2:
  1264  00B8                     	ds	1
  1265  00B9                     _temperatureAI1:
  1266  00B9                     	ds	1
  1267  00BA                     __tempTwoDigit:
  1268  00BA                     	ds	1
  1269  00BB                     __cellTwoDigit:
  1270  00BB                     	ds	1
  1271  00BC                     __secondCell:
  1272  00BC                     	ds	1
  1273  00BD                     __firstCell:
  1274  00BD                     	ds	1
  1275  00BE                     _flMenuStrip:
  1276  00BE                     	ds	1
  1277  00BF                     _carrCmd:
  1278  00BF                     	ds	1
  1279  00C0                     _cQuantity:
  1280  00C0                     	ds	1
  1281  00C1                     _cTMR0:
  1282  00C1                     	ds	1
  1283  00C2                     _TMR0_Value:
  1284  00C2                     	ds	1
  1285  00C3                     __tempPinDO:
  1286  00C3                     	ds	1
  1287  00C4                     __settingsBit:
  1288  00C4                     	ds	1
  1289  00C5                     __countTMR2trigger:
  1290  00C5                     	ds	1
  1291  00C6                     _counter:
  1292  00C6                     	ds	1
  1293  00C7                     _cACP:
  1294  00C7                     	ds	1
  1295                           
  1296                           	psect	bssBANK3
  1297  01B2                     __pbssBANK3:
  1298  01B2                     _str2:
  1299  01B2                     	ds	16
  1300  01C2                     _str:
  1301  01C2                     	ds	16
  1302                           
  1303                           	psect	dataBANK3
  1304  0190                     __pdataBANK3:
  1305  0190                     __SubMenuArr:
  1306  0190                     	ds	24
  1307  01A8                     __MenuArr:
  1308  01A8                     	ds	10
  1309                           
  1310                           	psect	inittext
  1311  1BE2                     init_fetch0:	
  1312                           ;	Called with low address in FSR and high address in W
  1313                           
  1314  1BE2  087E               	movf	126,w
  1315  1BE3  008A               	movwf	10
  1316  1BE4  087F               	movf	127,w
  1317  1BE5  0082               	movwf	2
  1318  1BE6                     init_ram0:	
  1319                           ;Called with:
  1320                           ;	high address of idata address in btemp 
  1321                           ;	low address of idata address in btemp+1 
  1322                           ;	low address of data in FSR
  1323                           ;	high address + 1 of data in btemp-1
  1324                           
  1325  1BE6  23E2  160A  158A   	fcall	init_fetch0
  1326  1BE9  0080               	movwf	0
  1327  1BEA  0A84               	incf	4,f
  1328  1BEB  0804               	movf	4,w
  1329  1BEC  067D               	xorwf	125,w
  1330  1BED  1903               	btfsc	3,2
  1331  1BEE  3400               	retlw	0
  1332  1BEF  0AFF               	incf	127,f
  1333  1BF0  1903               	btfsc	3,2
  1334  1BF1  0AFE               	incf	126,f
  1335  1BF2  2BE6               	goto	init_ram0
  1336                           
  1337                           	psect	clrtext
  1338  1BB7                     clear_ram0:	
  1339                           ;	Called with FSR containing the base address, and
  1340                           ;	W with the last address+1
  1341                           
  1342  1BB7  0064               	clrwdt	;clear the watchdog before getting into this loop
  1343  1BB8                     clrloop0:
  1344  1BB8  0180               	clrf	0	;clear RAM location pointed to by FSR
  1345  1BB9  0A84               	incf	4,f	;increment pointer
  1346  1BBA  0604               	xorwf	4,w	;XOR with final address
  1347  1BBB  1903               	btfsc	3,2	;have we reached the end yet?
  1348  1BBC  3400               	retlw	0	;all done for this memory range, return
  1349  1BBD  0604               	xorwf	4,w	;XOR again to restore value
  1350  1BBE  2BB8               	goto	clrloop0	;do the next byte
  1351                           
  1352                           	psect	cstackBANK1
  1353  00C8                     __pcstackBANK1:
  1354  00C8                     ___fttol@sign1:
  1355                           
  1356                           ; 1 bytes @ 0x0
  1357  00C8                     	ds	1
  1358  00C9                     ___fttol@lval:
  1359                           
  1360                           ; 4 bytes @ 0x1
  1361  00C9                     	ds	4
  1362  00CD                     ___fttol@exp1:
  1363                           
  1364                           ; 1 bytes @ 0x5
  1365  00CD                     	ds	1
  1366  00CE                     rThermistor@A:
  1367                           
  1368                           ; 3 bytes @ 0x6
  1369  00CE                     	ds	3
  1370  00D1                     rThermistor@analogAI:
  1371                           
  1372                           ; 1 bytes @ 0x9
  1373  00D1                     	ds	1
  1374  00D2                     ?___awtoft:
  1375  00D2                     ___awtoft@c:	
  1376                           ; 3 bytes @ 0xA
  1377                           
  1378                           
  1379                           ; 2 bytes @ 0xA
  1380  00D2                     	ds	3
  1381  00D5                     ___awtoft@sign:
  1382                           
  1383                           ; 1 bytes @ 0xD
  1384  00D5                     	ds	1
  1385  00D6                     ?_log:
  1386  00D6                     log@x:	
  1387                           ; 3 bytes @ 0xE
  1388                           
  1389                           
  1390                           ; 3 bytes @ 0xE
  1391  00D6                     	ds	3
  1392  00D9                     ??_log:
  1393                           
  1394                           ; 1 bytes @ 0x11
  1395  00D9                     	ds	1
  1396  00DA                     log@exponent:
  1397                           
  1398                           ; 2 bytes @ 0x12
  1399  00DA                     	ds	2
  1400  00DC                     _rTemperature$1806:
  1401                           
  1402                           ; 3 bytes @ 0x14
  1403  00DC                     	ds	3
  1404  00DF                     _rTemperature$1807:
  1405                           
  1406                           ; 3 bytes @ 0x17
  1407  00DF                     	ds	3
  1408  00E2                     _rTemperature$1808:
  1409                           
  1410                           ; 3 bytes @ 0x1A
  1411  00E2                     	ds	3
  1412  00E5                     rTemperature@analogAI:
  1413                           
  1414                           ; 1 bytes @ 0x1D
  1415  00E5                     	ds	1
  1416  00E6                     ??_main:
  1417                           
  1418                           ; 1 bytes @ 0x1E
  1419  00E6                     	ds	4
  1420  00EA                     main@SPI_i:
  1421                           
  1422                           ; 1 bytes @ 0x22
  1423  00EA                     	ds	1
  1424                           
  1425                           	psect	cstackCOMMON
  1426  0070                     __pcstackCOMMON:
  1427  0070                     ?_isdigit:
  1428  0070                     ?_fInterruptRecieveDevice:	
  1429                           ; 1 bit 
  1430                           
  1431  0070                     ??_fInterruptRecieveDevice:	
  1432                           ; 1 bytes @ 0x0
  1433                           
  1434  0070                     ?_init:	
  1435                           ; 1 bytes @ 0x0
  1436                           
  1437  0070                     ?_SPI_init:	
  1438                           ; 1 bytes @ 0x0
  1439                           
  1440  0070                     ?_LCD_init:	
  1441                           ; 1 bytes @ 0x0
  1442                           
  1443  0070                     ?_fShiftData:	
  1444                           ; 1 bytes @ 0x0
  1445                           
  1446  0070                     ?_rTemperature:	
  1447                           ; 1 bytes @ 0x0
  1448                           
  1449  0070                     ?_fMenuStrip:	
  1450                           ; 1 bytes @ 0x0
  1451                           
  1452  0070                     ?_sendhalfbyte:	
  1453                           ; 1 bytes @ 0x0
  1454                           
  1455  0070                     ?_LCD_clear:	
  1456                           ; 1 bytes @ 0x0
  1457                           
  1458  0070                     ?_SPI_notRDY:	
  1459                           ; 1 bytes @ 0x0
  1460                           
  1461  0070                     ?_linkup:	
  1462                           ; 1 bytes @ 0x0
  1463                           
  1464  0070                     ?_fACP:	
  1465                           ; 1 bytes @ 0x0
  1466                           
  1467  0070                     ?_main:	
  1468                           ; 1 bytes @ 0x0
  1469                           
  1470  0070                     ?_fEraseString:	
  1471                           ; 1 bytes @ 0x0
  1472                           
  1473  0070                     ?_SPI_WriteByte:	
  1474                           ; 1 bytes @ 0x0
  1475                           
  1476  0070                     ?_SPI_ReadByte:	
  1477                           ; 1 bytes @ 0x0
  1478                           
  1479  0070                     ?_SPI_ReadStatus:	
  1480                           ; 1 bytes @ 0x0
  1481                           
  1482  0070                     ?i1___lwmod:	
  1483                           ; 1 bytes @ 0x0
  1484                           
  1485  0070                     i1___lwmod@divisor:	
  1486                           ; 2 bytes @ 0x0
  1487                           
  1488                           
  1489                           ; 2 bytes @ 0x0
  1490  0070                     	ds	2
  1491  0072                     i1___lwmod@dividend:
  1492                           
  1493                           ; 2 bytes @ 0x2
  1494  0072                     	ds	2
  1495  0074                     ??i1___lwmod:
  1496                           
  1497                           ; 1 bytes @ 0x4
  1498  0074                     	ds	1
  1499  0075                     i1___lwmod@counter:
  1500                           
  1501                           ; 1 bytes @ 0x5
  1502  0075                     	ds	1
  1503  0076                     ??_linkup:
  1504                           
  1505                           ; 1 bytes @ 0x6
  1506  0076                     	ds	4
  1507                           
  1508                           	psect	cstackBANK0
  1509  0020                     __pcstackBANK0:
  1510  0020                     ?___ftge:
  1511  0020                     ??_init:	
  1512                           ; 1 bit 
  1513                           
  1514  0020                     ??_SPI_init:	
  1515                           ; 1 bytes @ 0x0
  1516                           
  1517  0020                     ??_fShiftData:	
  1518                           ; 1 bytes @ 0x0
  1519                           
  1520  0020                     ?_strcat:	
  1521                           ; 1 bytes @ 0x0
  1522                           
  1523  0020                     ??_isdigit:	
  1524                           ; 1 bytes @ 0x0
  1525                           
  1526  0020                     ??_fACP:	
  1527                           ; 1 bytes @ 0x0
  1528                           
  1529  0020                     ??_fEraseString:	
  1530                           ; 1 bytes @ 0x0
  1531                           
  1532  0020                     ??_SPI_WriteByte:	
  1533                           ; 1 bytes @ 0x0
  1534                           
  1535  0020                     ?_LCD_StringOnOff:	
  1536                           ; 1 bytes @ 0x0
  1537                           
  1538  0020                     ?___wmul:	
  1539                           ; 2 bytes @ 0x0
  1540                           
  1541  0020                     ?___awdiv:	
  1542                           ; 2 bytes @ 0x0
  1543                           
  1544  0020                     ?___lwdiv:	
  1545                           ; 2 bytes @ 0x0
  1546                           
  1547  0020                     ?___ftpack:	
  1548                           ; 2 bytes @ 0x0
  1549                           
  1550  0020                     ?_frexp:	
  1551                           ; 3 bytes @ 0x0
  1552                           
  1553  0020                     fEraseString@string:	
  1554                           ; 3 bytes @ 0x0
  1555                           
  1556  0020                     LCD_StringOnOff@numb:	
  1557                           ; 1 bytes @ 0x0
  1558                           
  1559  0020                     SPI_WriteByte@data:	
  1560                           ; 1 bytes @ 0x0
  1561                           
  1562  0020                     _isdigit$1582:	
  1563                           ; 1 bytes @ 0x0
  1564                           
  1565  0020                     ___wmul@multiplier:	
  1566                           ; 1 bytes @ 0x0
  1567                           
  1568  0020                     ___awdiv@divisor:	
  1569                           ; 2 bytes @ 0x0
  1570                           
  1571  0020                     ___lwdiv@divisor:	
  1572                           ; 2 bytes @ 0x0
  1573                           
  1574  0020                     strcat@from:	
  1575                           ; 2 bytes @ 0x0
  1576                           
  1577  0020                     ___ftpack@arg:	
  1578                           ; 2 bytes @ 0x0
  1579                           
  1580  0020                     ___ftge@ff1:	
  1581                           ; 3 bytes @ 0x0
  1582                           
  1583  0020                     frexp@value:	
  1584                           ; 3 bytes @ 0x0
  1585                           
  1586                           
  1587                           ; 3 bytes @ 0x0
  1588  0020                     	ds	1
  1589  0021                     ??_LCD_StringOnOff:
  1590  0021                     ??_SPI_ReadByte:	
  1591                           ; 1 bytes @ 0x1
  1592                           
  1593  0021                     SPI_ReadByte@data:	
  1594                           ; 1 bytes @ 0x1
  1595                           
  1596  0021                     isdigit@c:	
  1597                           ; 1 bytes @ 0x1
  1598                           
  1599                           
  1600                           ; 1 bytes @ 0x1
  1601  0021                     	ds	1
  1602  0022                     ??_strcat:
  1603  0022                     ??_SPI_ReadStatus:	
  1604                           ; 1 bytes @ 0x2
  1605                           
  1606  0022                     LCD_StringOnOff@st:	
  1607                           ; 1 bytes @ 0x2
  1608                           
  1609  0022                     fShiftData@shiftVar:	
  1610                           ; 1 bytes @ 0x2
  1611                           
  1612  0022                     ___wmul@multiplicand:	
  1613                           ; 1 bytes @ 0x2
  1614                           
  1615  0022                     ___awdiv@dividend:	
  1616                           ; 2 bytes @ 0x2
  1617                           
  1618  0022                     ___lwdiv@dividend:	
  1619                           ; 2 bytes @ 0x2
  1620                           
  1621                           
  1622                           ; 2 bytes @ 0x2
  1623  0022                     	ds	1
  1624  0023                     SPI_ReadStatus@status:
  1625  0023                     ___ftpack@exp:	
  1626                           ; 1 bytes @ 0x3
  1627                           
  1628  0023                     frexp@eptr:	
  1629                           ; 1 bytes @ 0x3
  1630                           
  1631  0023                     strcat@cp:	
  1632                           ; 1 bytes @ 0x3
  1633                           
  1634  0023                     fShiftData@shiftVariable:	
  1635                           ; 1 bytes @ 0x3
  1636                           
  1637  0023                     ___ftge@ff2:	
  1638                           ; 2 bytes @ 0x3
  1639                           
  1640                           
  1641                           ; 3 bytes @ 0x3
  1642  0023                     	ds	1
  1643  0024                     ??_SPI_notRDY:
  1644  0024                     ??_frexp:	
  1645                           ; 1 bytes @ 0x4
  1646                           
  1647  0024                     ??___wmul:	
  1648                           ; 1 bytes @ 0x4
  1649                           
  1650  0024                     ??___awdiv:	
  1651                           ; 1 bytes @ 0x4
  1652                           
  1653  0024                     ??___lwdiv:	
  1654                           ; 1 bytes @ 0x4
  1655                           
  1656  0024                     ___ftpack@sign:	
  1657                           ; 1 bytes @ 0x4
  1658                           
  1659  0024                     strcat@to:	
  1660                           ; 1 bytes @ 0x4
  1661                           
  1662  0024                     ___wmul@product:	
  1663                           ; 1 bytes @ 0x4
  1664                           
  1665                           
  1666                           ; 2 bytes @ 0x4
  1667  0024                     	ds	1
  1668  0025                     ??___ftpack:
  1669  0025                     fShiftData@i:	
  1670                           ; 1 bytes @ 0x5
  1671                           
  1672  0025                     SPI_notRDY@notRDY:	
  1673                           ; 1 bytes @ 0x5
  1674                           
  1675  0025                     ___awdiv@counter:	
  1676                           ; 1 bytes @ 0x5
  1677                           
  1678  0025                     ___lwdiv@quotient:	
  1679                           ; 1 bytes @ 0x5
  1680                           
  1681                           
  1682                           ; 2 bytes @ 0x5
  1683  0025                     	ds	1
  1684  0026                     ?_SPI_Read:
  1685  0026                     ?_SPI_Write:	
  1686                           ; 1 bytes @ 0x6
  1687                           
  1688  0026                     ??_sendhalfbyte:	
  1689                           ; 1 bytes @ 0x6
  1690                           
  1691  0026                     ??___ftge:	
  1692                           ; 1 bytes @ 0x6
  1693                           
  1694  0026                     ___awdiv@sign:	
  1695                           ; 1 bytes @ 0x6
  1696                           
  1697  0026                     SPI_Write@address:	
  1698                           ; 1 bytes @ 0x6
  1699                           
  1700  0026                     SPI_Read@address:	
  1701                           ; 4 bytes @ 0x6
  1702                           
  1703                           
  1704                           ; 4 bytes @ 0x6
  1705  0026                     	ds	1
  1706  0027                     sendhalfbyte@c:
  1707  0027                     ___lwdiv@counter:	
  1708                           ; 1 bytes @ 0x7
  1709                           
  1710  0027                     ___awdiv@quotient:	
  1711                           ; 1 bytes @ 0x7
  1712                           
  1713                           
  1714                           ; 2 bytes @ 0x7
  1715  0027                     	ds	1
  1716  0028                     ?_sendbyte:
  1717  0028                     ?___lwmod:	
  1718                           ; 1 bytes @ 0x8
  1719                           
  1720  0028                     ?___ftmul:	
  1721                           ; 2 bytes @ 0x8
  1722                           
  1723  0028                     ?___lbtoft:	
  1724                           ; 3 bytes @ 0x8
  1725                           
  1726  0028                     sendbyte@mode:	
  1727                           ; 3 bytes @ 0x8
  1728                           
  1729  0028                     ___lwmod@divisor:	
  1730                           ; 1 bytes @ 0x8
  1731                           
  1732  0028                     ___ftmul@f1:	
  1733                           ; 2 bytes @ 0x8
  1734                           
  1735                           
  1736                           ; 3 bytes @ 0x8
  1737  0028                     	ds	1
  1738  0029                     ??_sendbyte:
  1739  0029                     ?___bmul:	
  1740                           ; 1 bytes @ 0x9
  1741                           
  1742  0029                     ?___awmod:	
  1743                           ; 1 bytes @ 0x9
  1744                           
  1745  0029                     ___bmul@multiplicand:	
  1746                           ; 2 bytes @ 0x9
  1747                           
  1748  0029                     ___awmod@divisor:	
  1749                           ; 1 bytes @ 0x9
  1750                           
  1751                           
  1752                           ; 2 bytes @ 0x9
  1753  0029                     	ds	1
  1754  002A                     ??_SPI_Read:
  1755  002A                     ??___bmul:	
  1756                           ; 1 bytes @ 0xA
  1757                           
  1758  002A                     sendbyte@hb:	
  1759                           ; 1 bytes @ 0xA
  1760                           
  1761  002A                     SPI_Write@data:	
  1762                           ; 1 bytes @ 0xA
  1763                           
  1764  002A                     ___lwmod@dividend:	
  1765                           ; 1 bytes @ 0xA
  1766                           
  1767                           
  1768                           ; 2 bytes @ 0xA
  1769  002A                     	ds	1
  1770  002B                     ??_SPI_Write:
  1771  002B                     ??___lbtoft:	
  1772                           ; 1 bytes @ 0xB
  1773                           
  1774  002B                     sendbyte@c:	
  1775                           ; 1 bytes @ 0xB
  1776                           
  1777  002B                     ___bmul@product:	
  1778                           ; 1 bytes @ 0xB
  1779                           
  1780  002B                     _SPI_Write$1324:	
  1781                           ; 1 bytes @ 0xB
  1782                           
  1783  002B                     _SPI_Read$1327:	
  1784                           ; 2 bytes @ 0xB
  1785                           
  1786  002B                     ___awmod@dividend:	
  1787                           ; 2 bytes @ 0xB
  1788                           
  1789  002B                     ___ftmul@f2:	
  1790                           ; 2 bytes @ 0xB
  1791                           
  1792                           
  1793                           ; 3 bytes @ 0xB
  1794  002B                     	ds	1
  1795  002C                     ?_LCD_SetPos:
  1796  002C                     ??_LCD_clear:	
  1797                           ; 1 bytes @ 0xC
  1798                           
  1799  002C                     ??___lwmod:	
  1800                           ; 1 bytes @ 0xC
  1801                           
  1802  002C                     LCD_SetPos@y:	
  1803                           ; 1 bytes @ 0xC
  1804                           
  1805  002C                     ___bmul@multiplier:	
  1806                           ; 1 bytes @ 0xC
  1807                           
  1808                           
  1809                           ; 1 bytes @ 0xC
  1810  002C                     	ds	1
  1811  002D                     ??_LCD_SetPos:
  1812  002D                     ??___awmod:	
  1813                           ; 1 bytes @ 0xD
  1814                           
  1815  002D                     LCD_SetPos@x:	
  1816                           ; 1 bytes @ 0xD
  1817                           
  1818  002D                     SPI_Read@data:	
  1819                           ; 1 bytes @ 0xD
  1820                           
  1821  002D                     ___lwmod@counter:	
  1822                           ; 1 bytes @ 0xD
  1823                           
  1824                           
  1825                           ; 1 bytes @ 0xD
  1826  002D                     	ds	1
  1827  002E                     ??_LCD_init:
  1828  002E                     ?_LCD_string:	
  1829                           ; 1 bytes @ 0xE
  1830                           
  1831  002E                     ??___ftmul:	
  1832                           ; 1 bytes @ 0xE
  1833                           
  1834  002E                     ?_sprintf:	
  1835                           ; 1 bytes @ 0xE
  1836                           
  1837  002E                     ___awmod@counter:	
  1838                           ; 2 bytes @ 0xE
  1839                           
  1840  002E                     LCD_string@st:	
  1841                           ; 1 bytes @ 0xE
  1842                           
  1843  002E                     sprintf@f:	
  1844                           ; 2 bytes @ 0xE
  1845                           
  1846                           
  1847                           ; 2 bytes @ 0xE
  1848  002E                     	ds	1
  1849  002F                     ___awmod@sign:
  1850  002F                     ___lbtoft@c:	
  1851                           ; 1 bytes @ 0xF
  1852                           
  1853                           
  1854                           ; 1 bytes @ 0xF
  1855  002F                     	ds	1
  1856  0030                     ??_LCD_string:
  1857                           
  1858                           ; 1 bytes @ 0x10
  1859  0030                     	ds	1
  1860  0031                     LCD_string@symbol:
  1861                           
  1862                           ; 1 bytes @ 0x11
  1863  0031                     	ds	1
  1864  0032                     LCD_string@i:
  1865  0032                     ___ftmul@exp:	
  1866                           ; 1 bytes @ 0x12
  1867                           
  1868                           
  1869                           ; 1 bytes @ 0x12
  1870  0032                     	ds	1
  1871  0033                     ___ftmul@f3_as_product:
  1872                           
  1873                           ; 3 bytes @ 0x13
  1874  0033                     	ds	3
  1875  0036                     ___ftmul@cntr:
  1876                           
  1877                           ; 1 bytes @ 0x16
  1878  0036                     	ds	1
  1879  0037                     ___ftmul@sign:
  1880                           
  1881                           ; 1 bytes @ 0x17
  1882  0037                     	ds	1
  1883  0038                     ?___ftadd:
  1884  0038                     ___ftadd@f1:	
  1885                           ; 3 bytes @ 0x18
  1886                           
  1887                           
  1888                           ; 3 bytes @ 0x18
  1889  0038                     	ds	2
  1890  003A                     ??_sprintf:
  1891                           
  1892                           ; 1 bytes @ 0x1A
  1893  003A                     	ds	1
  1894  003B                     ___ftadd@f2:
  1895                           
  1896                           ; 3 bytes @ 0x1B
  1897  003B                     	ds	2
  1898  003D                     sprintf@prec:
  1899                           
  1900                           ; 1 bytes @ 0x1D
  1901  003D                     	ds	1
  1902  003E                     ??___ftadd:
  1903  003E                     sprintf@cp:	
  1904                           ; 1 bytes @ 0x1E
  1905                           
  1906                           
  1907                           ; 2 bytes @ 0x1E
  1908  003E                     	ds	2
  1909  0040                     sprintf@flag:
  1910                           
  1911                           ; 1 bytes @ 0x20
  1912  0040                     	ds	1
  1913  0041                     sprintf@ap:
  1914                           
  1915                           ; 1 bytes @ 0x21
  1916  0041                     	ds	1
  1917  0042                     ___ftadd@sign:
  1918  0042                     sprintf@len:	
  1919                           ; 1 bytes @ 0x22
  1920                           
  1921                           
  1922                           ; 2 bytes @ 0x22
  1923  0042                     	ds	1
  1924  0043                     ___ftadd@exp2:
  1925                           
  1926                           ; 1 bytes @ 0x23
  1927  0043                     	ds	1
  1928  0044                     ___ftadd@exp1:
  1929  0044                     sprintf@val:	
  1930                           ; 1 bytes @ 0x24
  1931                           
  1932                           
  1933                           ; 2 bytes @ 0x24
  1934  0044                     	ds	1
  1935  0045                     ?_eval_poly:
  1936  0045                     eval_poly@x:	
  1937                           ; 3 bytes @ 0x25
  1938                           
  1939                           
  1940                           ; 3 bytes @ 0x25
  1941  0045                     	ds	1
  1942  0046                     sprintf@width:
  1943                           
  1944                           ; 2 bytes @ 0x26
  1945  0046                     	ds	2
  1946  0048                     sprintf@c:
  1947  0048                     eval_poly@d:	
  1948                           ; 1 bytes @ 0x28
  1949                           
  1950                           
  1951                           ; 2 bytes @ 0x28
  1952  0048                     	ds	1
  1953  0049                     sprintf@sp:
  1954                           
  1955                           ; 1 bytes @ 0x29
  1956  0049                     	ds	1
  1957  004A                     ??_fMenuStrip:
  1958  004A                     eval_poly@n:	
  1959                           ; 1 bytes @ 0x2A
  1960                           
  1961                           
  1962                           ; 2 bytes @ 0x2A
  1963  004A                     	ds	2
  1964  004C                     ??_eval_poly:
  1965                           
  1966                           ; 1 bytes @ 0x2C
  1967  004C                     	ds	5
  1968  0051                     eval_poly@res:
  1969                           
  1970                           ; 3 bytes @ 0x31
  1971  0051                     	ds	3
  1972  0054                     ?___ftdiv:
  1973  0054                     ___ftdiv@f2:	
  1974                           ; 3 bytes @ 0x34
  1975                           
  1976                           
  1977                           ; 3 bytes @ 0x34
  1978  0054                     	ds	3
  1979  0057                     ___ftdiv@f1:
  1980                           
  1981                           ; 3 bytes @ 0x37
  1982  0057                     	ds	3
  1983  005A                     ??___ftdiv:
  1984                           
  1985                           ; 1 bytes @ 0x3A
  1986  005A                     	ds	4
  1987  005E                     ___ftdiv@cntr:
  1988                           
  1989                           ; 1 bytes @ 0x3E
  1990  005E                     	ds	1
  1991  005F                     ___ftdiv@f3:
  1992                           
  1993                           ; 3 bytes @ 0x3F
  1994  005F                     	ds	3
  1995  0062                     ___ftdiv@exp:
  1996                           
  1997                           ; 1 bytes @ 0x42
  1998  0062                     	ds	1
  1999  0063                     ___ftdiv@sign:
  2000                           
  2001                           ; 1 bytes @ 0x43
  2002  0063                     	ds	1
  2003  0064                     ?___fttol:
  2004  0064                     ___fttol@f1:	
  2005                           ; 4 bytes @ 0x44
  2006                           
  2007                           
  2008                           ; 3 bytes @ 0x44
  2009  0064                     	ds	4
  2010  0068                     ??___fttol:
  2011                           
  2012                           ; 1 bytes @ 0x48
  2013  0068                     	ds	4
  2014  006C                     ?_rThermistor:
  2015                           
  2016                           ; 2 bytes @ 0x4C
  2017  006C                     	ds	2
  2018  006E                     ??_rThermistor:
  2019  006E                     ??___awtoft:	
  2020                           ; 1 bytes @ 0x4E
  2021                           
  2022                           
  2023                           ; 1 bytes @ 0x4E
  2024  006E                     	ds	2
  2025  0070                     ??_rTemperature:
  2026                           
  2027                           	psect	maintext
  2028  0042                     __pmaintext:	
  2029                           ; 1 bytes @ 0x50
  2030 ;;
  2031 ;;Main: autosize = 0, tempsize = 4, incstack = 0, save=0
  2032 ;;
  2033 ;; *************** function _main *****************
  2034 ;; Defined at:
  2035 ;;		line 94 in file "newmain.c"
  2036 ;; Parameters:    Size  Location     Type
  2037 ;;		None
  2038 ;; Auto vars:     Size  Location     Type
  2039 ;;  SPI_i           1   34[BANK1 ] unsigned char 
  2040 ;; Return value:  Size  Location     Type
  2041 ;;                  1    wreg      void 
  2042 ;; Registers used:
  2043 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2044 ;; Tracked objects:
  2045 ;;		On entry : B00/0
  2046 ;;		On exit  : 300/100
  2047 ;;		Unchanged: 0/0
  2048 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2049 ;;      Params:         0       0       0       0       0
  2050 ;;      Locals:         0       0       1       0       0
  2051 ;;      Temps:          0       0       4       0       0
  2052 ;;      Totals:         0       0       5       0       0
  2053 ;;Total ram usage:        5 bytes
  2054 ;; Hardware stack levels required when called: 8
  2055 ;; This function calls:
  2056 ;;		_LCD_SetPos
  2057 ;;		_LCD_init
  2058 ;;		_LCD_string
  2059 ;;		_SPI_Read
  2060 ;;		_SPI_Write
  2061 ;;		_SPI_init
  2062 ;;		_fACP
  2063 ;;		_fMenuStrip
  2064 ;;		_fShiftData
  2065 ;;		_init
  2066 ;;		_rTemperature
  2067 ;; This function is called by:
  2068 ;;		Startup code after reset
  2069 ;; This function uses a non-reentrant model
  2070 ;;
  2071                           
  2072                           
  2073                           ;psect for function _main
  2074  0042                     _main:
  2075                           
  2076                           ;newmain.c: 95: init();
  2077                           
  2078                           ;incstack = 0
  2079                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2080  0042  160A  118A  23B6  120A  118A  	fcall	_init
  2081                           
  2082                           ;newmain.c: 96: SPI_init();
  2083  0047  160A  158A  241A  120A  118A  	fcall	_SPI_init
  2084                           
  2085                           ;newmain.c: 97: LCD_init();
  2086  004C  160A  118A  2339  120A  118A  	fcall	_LCD_init
  2087                           
  2088                           ;newmain.c: 98: fShiftData(0x00);
  2089  0051  3000               	movlw	0
  2090  0052  160A  158A  26D4  120A  118A  	fcall	_fShiftData
  2091                           
  2092                           ;newmain.c: 99: LCD_SetPos(0,0);
  2093  0057  01AC               	clrf	LCD_SetPos@y
  2094  0058  3000               	movlw	0
  2095  0059  160A  158A  2449  120A  118A  	fcall	_LCD_SetPos
  2096                           
  2097                           ;newmain.c: 100: LCD_string((char*)"Çàãðóçêà....");
  2098  005E  3049               	movlw	low (STR_1| (0+32768))
  2099  005F  1283               	bcf	3,5	;RP0=0, select bank0
  2100  0060  1303               	bcf	3,6	;RP1=0, select bank0
  2101  0061  00AE               	movwf	LCD_string@st
  2102  0062  3091               	movlw	high (STR_1| (0+32768))
  2103  0063  00AF               	movwf	LCD_string@st+1
  2104  0064  160A  158A  27B1  120A  118A  	fcall	_LCD_string
  2105                           
  2106                           ;newmain.c: 102: if(SPI_Read(100) == 0xFF)
  2107  0069  3000               	movlw	0
  2108  006A  00A9               	movwf	SPI_Read@address+3
  2109  006B  3000               	movlw	0
  2110  006C  00A8               	movwf	SPI_Read@address+2
  2111  006D  3000               	movlw	0
  2112  006E  00A7               	movwf	SPI_Read@address+1
  2113  006F  3064               	movlw	100
  2114  0070  00A6               	movwf	SPI_Read@address
  2115  0071  160A  158A  25DD  120A  118A  	fcall	_SPI_Read
  2116  0076  3AFF               	xorlw	255
  2117  0077  1D03               	skipz
  2118  0078  28AF               	goto	l5050
  2119                           
  2120                           ;newmain.c: 103: {;newmain.c: 104: for(unsigned char SPI_i = 0; SPI_i < 100; SPI_i++)
  2121  0079  1683               	bsf	3,5	;RP0=1, select bank1
  2122  007A  01EA               	clrf	main@SPI_i^(0+128)
  2123  007B                     l5042:
  2124                           
  2125                           ;newmain.c: 105: SPI_Write(SPI_i,0x00);
  2126  007B  086A               	movf	main@SPI_i^(0+128),w
  2127  007C  00E6               	movwf	??_main^(0+128)
  2128  007D  01E7               	clrf	(??_main^(0+128)+1)
  2129  007E  01E8               	clrf	(??_main^(0+128)+2)
  2130  007F  01E9               	clrf	(??_main^(0+128)+3)
  2131  0080  0869               	movf	(??_main+3)^(0+128),w
  2132  0081  1283               	bcf	3,5	;RP0=0, select bank0
  2133  0082  00A9               	movwf	SPI_Write@address+3
  2134  0083  1683               	bsf	3,5	;RP0=1, select bank1
  2135  0084  0868               	movf	(??_main+2)^(0+128),w
  2136  0085  1283               	bcf	3,5	;RP0=0, select bank0
  2137  0086  00A8               	movwf	SPI_Write@address+2
  2138  0087  1683               	bsf	3,5	;RP0=1, select bank1
  2139  0088  0867               	movf	(??_main+1)^(0+128),w
  2140  0089  1283               	bcf	3,5	;RP0=0, select bank0
  2141  008A  00A7               	movwf	SPI_Write@address+1
  2142  008B  1683               	bsf	3,5	;RP0=1, select bank1
  2143  008C  0866               	movf	??_main^(0+128),w
  2144  008D  1283               	bcf	3,5	;RP0=0, select bank0
  2145  008E  00A6               	movwf	SPI_Write@address
  2146  008F  01AA               	clrf	SPI_Write@data
  2147  0090  160A  158A  2693  120A  118A  	fcall	_SPI_Write
  2148  0095  3001               	movlw	1
  2149  0096  1683               	bsf	3,5	;RP0=1, select bank1
  2150  0097  00E6               	movwf	??_main^(0+128)
  2151  0098  0866               	movf	??_main^(0+128),w
  2152  0099  07EA               	addwf	main@SPI_i^(0+128),f
  2153  009A  3064               	movlw	100
  2154  009B  026A               	subwf	main@SPI_i^(0+128),w
  2155  009C  1C03               	skipc
  2156  009D  287B               	goto	l5042
  2157                           
  2158                           ;newmain.c: 106: SPI_Write(100,0x01);
  2159  009E  3000               	movlw	0
  2160  009F  1283               	bcf	3,5	;RP0=0, select bank0
  2161  00A0  00A9               	movwf	SPI_Write@address+3
  2162  00A1  3000               	movlw	0
  2163  00A2  00A8               	movwf	SPI_Write@address+2
  2164  00A3  3000               	movlw	0
  2165  00A4  00A7               	movwf	SPI_Write@address+1
  2166  00A5  3064               	movlw	100
  2167  00A6  00A6               	movwf	SPI_Write@address
  2168  00A7  01AA               	clrf	SPI_Write@data
  2169  00A8  0AAA               	incf	SPI_Write@data,f
  2170  00A9  160A  158A  2693  120A  118A  	fcall	_SPI_Write
  2171                           
  2172                           ;newmain.c: 107: }
  2173  00AE  2963               	goto	l181
  2174  00AF                     l5050:
  2175                           
  2176                           ;newmain.c: 108: else if(SPI_Read(100) == 0x01)
  2177  00AF  3000               	movlw	0
  2178  00B0  00A9               	movwf	SPI_Read@address+3
  2179  00B1  3000               	movlw	0
  2180  00B2  00A8               	movwf	SPI_Read@address+2
  2181  00B3  3000               	movlw	0
  2182  00B4  00A7               	movwf	SPI_Read@address+1
  2183  00B5  3064               	movlw	100
  2184  00B6  00A6               	movwf	SPI_Read@address
  2185  00B7  160A  158A  25DD  120A  118A  	fcall	_SPI_Read
  2186  00BC  3A01               	xorlw	1
  2187  00BD  1D03               	skipz
  2188  00BE  2963               	goto	l181
  2189                           
  2190                           ;newmain.c: 109: {;newmain.c: 110: _settingsBit = SPI_Read(0);
  2191  00BF  3000               	movlw	0
  2192  00C0  00A9               	movwf	SPI_Read@address+3
  2193  00C1  3000               	movlw	0
  2194  00C2  00A8               	movwf	SPI_Read@address+2
  2195  00C3  3000               	movlw	0
  2196  00C4  00A7               	movwf	SPI_Read@address+1
  2197  00C5  3000               	movlw	0
  2198  00C6  00A6               	movwf	SPI_Read@address
  2199  00C7  160A  158A  25DD  120A  118A  	fcall	_SPI_Read
  2200  00CC  1683               	bsf	3,5	;RP0=1, select bank1
  2201  00CD  00E6               	movwf	??_main^(0+128)
  2202  00CE  0866               	movf	??_main^(0+128),w
  2203  00CF  00C4               	movwf	__settingsBit^(0+128)
  2204                           
  2205                           ;newmain.c: 112: _settingTimeImpDO1 = SPI_Read(1);
  2206  00D0  3000               	movlw	0
  2207  00D1  1283               	bcf	3,5	;RP0=0, select bank0
  2208  00D2  00A9               	movwf	SPI_Read@address+3
  2209  00D3  3000               	movlw	0
  2210  00D4  00A8               	movwf	SPI_Read@address+2
  2211  00D5  3000               	movlw	0
  2212  00D6  00A7               	movwf	SPI_Read@address+1
  2213  00D7  3001               	movlw	1
  2214  00D8  00A6               	movwf	SPI_Read@address
  2215  00D9  160A  158A  25DD  120A  118A  	fcall	_SPI_Read
  2216  00DE  1683               	bsf	3,5	;RP0=1, select bank1
  2217  00DF  00E6               	movwf	??_main^(0+128)
  2218  00E0  01E7               	clrf	(??_main^(0+128)+1)
  2219  00E1  0866               	movf	??_main^(0+128),w
  2220  00E2  00B4               	movwf	__settingTimeImpDO1^(0+128)
  2221  00E3  0867               	movf	(??_main+1)^(0+128),w
  2222  00E4  00B5               	movwf	(__settingTimeImpDO1+1)^(0+128)
  2223                           
  2224                           ;newmain.c: 113: _settingTimeImpDO1 <<=8;
  2225  00E5  3008               	movlw	8
  2226  00E6                     u6035:
  2227  00E6  1003               	clrc
  2228  00E7  0DB4               	rlf	__settingTimeImpDO1^(0+128),f
  2229  00E8  0DB5               	rlf	(__settingTimeImpDO1+1)^(0+128),f
  2230  00E9  3EFF               	addlw	-1
  2231  00EA  1D03               	skipz
  2232  00EB  28E6               	goto	u6035
  2233                           
  2234                           ;newmain.c: 114: _settingTimeImpDO1 |= SPI_Read(2);
  2235  00EC  3000               	movlw	0
  2236  00ED  1283               	bcf	3,5	;RP0=0, select bank0
  2237  00EE  00A9               	movwf	SPI_Read@address+3
  2238  00EF  3000               	movlw	0
  2239  00F0  00A8               	movwf	SPI_Read@address+2
  2240  00F1  3000               	movlw	0
  2241  00F2  00A7               	movwf	SPI_Read@address+1
  2242  00F3  3002               	movlw	2
  2243  00F4  00A6               	movwf	SPI_Read@address
  2244  00F5  160A  158A  25DD  120A  118A  	fcall	_SPI_Read
  2245  00FA  1683               	bsf	3,5	;RP0=1, select bank1
  2246  00FB  00E6               	movwf	??_main^(0+128)
  2247  00FC  01E7               	clrf	(??_main^(0+128)+1)
  2248  00FD  0866               	movf	??_main^(0+128),w
  2249  00FE  04B4               	iorwf	__settingTimeImpDO1^(0+128),f
  2250  00FF  0867               	movf	(??_main+1)^(0+128),w
  2251  0100  04B5               	iorwf	(__settingTimeImpDO1+1)^(0+128),f
  2252                           
  2253                           ;newmain.c: 116: _settingTimerOnDO2 = SPI_Read(3);
  2254  0101  3000               	movlw	0
  2255  0102  1283               	bcf	3,5	;RP0=0, select bank0
  2256  0103  00A9               	movwf	SPI_Read@address+3
  2257  0104  3000               	movlw	0
  2258  0105  00A8               	movwf	SPI_Read@address+2
  2259  0106  3000               	movlw	0
  2260  0107  00A7               	movwf	SPI_Read@address+1
  2261  0108  3003               	movlw	3
  2262  0109  00A6               	movwf	SPI_Read@address
  2263  010A  160A  158A  25DD  120A  118A  	fcall	_SPI_Read
  2264  010F  1683               	bsf	3,5	;RP0=1, select bank1
  2265  0110  00E6               	movwf	??_main^(0+128)
  2266  0111  01E7               	clrf	(??_main^(0+128)+1)
  2267  0112  0866               	movf	??_main^(0+128),w
  2268  0113  00B2               	movwf	__settingTimerOnDO2^(0+128)
  2269  0114  0867               	movf	(??_main+1)^(0+128),w
  2270  0115  00B3               	movwf	(__settingTimerOnDO2+1)^(0+128)
  2271                           
  2272                           ;newmain.c: 117: _settingTimerOnDO2 <<=8;
  2273  0116  3008               	movlw	8
  2274  0117                     u6045:
  2275  0117  1003               	clrc
  2276  0118  0DB2               	rlf	__settingTimerOnDO2^(0+128),f
  2277  0119  0DB3               	rlf	(__settingTimerOnDO2+1)^(0+128),f
  2278  011A  3EFF               	addlw	-1
  2279  011B  1D03               	skipz
  2280  011C  2917               	goto	u6045
  2281                           
  2282                           ;newmain.c: 118: _settingTimerOnDO2 |= SPI_Read(4);
  2283  011D  3000               	movlw	0
  2284  011E  1283               	bcf	3,5	;RP0=0, select bank0
  2285  011F  00A9               	movwf	SPI_Read@address+3
  2286  0120  3000               	movlw	0
  2287  0121  00A8               	movwf	SPI_Read@address+2
  2288  0122  3000               	movlw	0
  2289  0123  00A7               	movwf	SPI_Read@address+1
  2290  0124  3004               	movlw	4
  2291  0125  00A6               	movwf	SPI_Read@address
  2292  0126  160A  158A  25DD  120A  118A  	fcall	_SPI_Read
  2293  012B  1683               	bsf	3,5	;RP0=1, select bank1
  2294  012C  00E6               	movwf	??_main^(0+128)
  2295  012D  01E7               	clrf	(??_main^(0+128)+1)
  2296  012E  0866               	movf	??_main^(0+128),w
  2297  012F  04B2               	iorwf	__settingTimerOnDO2^(0+128),f
  2298  0130  0867               	movf	(??_main+1)^(0+128),w
  2299  0131  04B3               	iorwf	(__settingTimerOnDO2+1)^(0+128),f
  2300                           
  2301                           ;newmain.c: 120: _settingTimerOffDO2 = SPI_Read(5);
  2302  0132  3000               	movlw	0
  2303  0133  1283               	bcf	3,5	;RP0=0, select bank0
  2304  0134  00A9               	movwf	SPI_Read@address+3
  2305  0135  3000               	movlw	0
  2306  0136  00A8               	movwf	SPI_Read@address+2
  2307  0137  3000               	movlw	0
  2308  0138  00A7               	movwf	SPI_Read@address+1
  2309  0139  3005               	movlw	5
  2310  013A  00A6               	movwf	SPI_Read@address
  2311  013B  160A  158A  25DD  120A  118A  	fcall	_SPI_Read
  2312  0140  1683               	bsf	3,5	;RP0=1, select bank1
  2313  0141  00E6               	movwf	??_main^(0+128)
  2314  0142  01E7               	clrf	(??_main^(0+128)+1)
  2315  0143  0866               	movf	??_main^(0+128),w
  2316  0144  00B0               	movwf	__settingTimerOffDO2^(0+128)
  2317  0145  0867               	movf	(??_main+1)^(0+128),w
  2318  0146  00B1               	movwf	(__settingTimerOffDO2+1)^(0+128)
  2319                           
  2320                           ;newmain.c: 121: _settingTimerOffDO2 <<=8;
  2321  0147  3008               	movlw	8
  2322  0148                     u6055:
  2323  0148  1003               	clrc
  2324  0149  0DB0               	rlf	__settingTimerOffDO2^(0+128),f
  2325  014A  0DB1               	rlf	(__settingTimerOffDO2+1)^(0+128),f
  2326  014B  3EFF               	addlw	-1
  2327  014C  1D03               	skipz
  2328  014D  2948               	goto	u6055
  2329                           
  2330                           ;newmain.c: 122: _settingTimerOffDO2 |= SPI_Read(6);
  2331  014E  3000               	movlw	0
  2332  014F  1283               	bcf	3,5	;RP0=0, select bank0
  2333  0150  00A9               	movwf	SPI_Read@address+3
  2334  0151  3000               	movlw	0
  2335  0152  00A8               	movwf	SPI_Read@address+2
  2336  0153  3000               	movlw	0
  2337  0154  00A7               	movwf	SPI_Read@address+1
  2338  0155  3006               	movlw	6
  2339  0156  00A6               	movwf	SPI_Read@address
  2340  0157  160A  158A  25DD  120A  118A  	fcall	_SPI_Read
  2341  015C  1683               	bsf	3,5	;RP0=1, select bank1
  2342  015D  00E6               	movwf	??_main^(0+128)
  2343  015E  01E7               	clrf	(??_main^(0+128)+1)
  2344  015F  0866               	movf	??_main^(0+128),w
  2345  0160  04B0               	iorwf	__settingTimerOffDO2^(0+128),f
  2346  0161  0867               	movf	(??_main+1)^(0+128),w
  2347  0162  04B1               	iorwf	(__settingTimerOffDO2+1)^(0+128),f
  2348  0163                     l181:
  2349                           
  2350                           ;newmain.c: 123: };newmain.c: 124: _delay((unsigned long)((500)*(8000000/4000.0)));
  2351  0163  3006               	movlw	6
  2352  0164  1683               	bsf	3,5	;RP0=1, select bank1
  2353  0165  1303               	bcf	3,6	;RP1=0, select bank1
  2354  0166  00E8               	movwf	(??_main^(0+128)+2)
  2355  0167  3013               	movlw	19
  2356  0168  00E7               	movwf	(??_main^(0+128)+1)
  2357  0169  30AD               	movlw	173
  2358  016A  00E6               	movwf	??_main^(0+128)
  2359  016B                     u6417:
  2360  016B  0BE6               	decfsz	??_main^(0+128),f
  2361  016C  296B               	goto	u6417
  2362  016D  0BE7               	decfsz	(??_main^(0+128)+1),f
  2363  016E  296B               	goto	u6417
  2364  016F  0BE8               	decfsz	(??_main^(0+128)+2),f
  2365  0170  296B               	goto	u6417
  2366  0171                     l5066:
  2367                           
  2368                           ;newmain.c: 128: _second = 0;
  2369  0171  13FA               	bcf	__second/(0+8),__second& (0+7)
  2370                           
  2371                           ;newmain.c: 129: _100ms = 0;
  2372  0172  1683               	bsf	3,5	;RP0=1, select bank1
  2373  0173  1303               	bcf	3,6	;RP1=0, select bank1
  2374  0174  126B               	bcf	(__100ms/(0+8))^(0+128),__100ms& (0+7)
  2375                           
  2376                           ;newmain.c: 130: _minute = 0;
  2377  0175  137A               	bcf	__minute/(0+8),__minute& (0+7)
  2378                           
  2379                           ;newmain.c: 131: _hour = 0;
  2380  0176  106B               	bcf	(__hour/(0+8))^(0+128),__hour& (0+7)
  2381                           
  2382                           ;newmain.c: 134: fACP();
  2383  0177  160A  158A  2762  120A  118A  	fcall	_fACP
  2384                           
  2385                           ;newmain.c: 135: temperatureAI1 = rTemperature(Analog.AI1);
  2386  017C  0825               	movf	(_Analog^(0+128)+1),w
  2387  017D  160A  118A  274E  120A  118A  	fcall	_rTemperature
  2388  0182  1683               	bsf	3,5	;RP0=1, select bank1
  2389  0183  00E6               	movwf	??_main^(0+128)
  2390  0184  0866               	movf	??_main^(0+128),w
  2391  0185  00B9               	movwf	_temperatureAI1^(0+128)
  2392                           
  2393                           ;newmain.c: 136: temperatureAI2 = rTemperature(Analog.AI2);
  2394  0186  0826               	movf	(_Analog^(0+128)+2),w
  2395  0187  160A  118A  274E  120A  118A  	fcall	_rTemperature
  2396  018C  1683               	bsf	3,5	;RP0=1, select bank1
  2397  018D  00E6               	movwf	??_main^(0+128)
  2398  018E  0866               	movf	??_main^(0+128),w
  2399  018F  00B8               	movwf	_temperatureAI2^(0+128)
  2400                           
  2401                           ;newmain.c: 137: fMenuStrip();
  2402  0190  120A  118A  244E  120A  118A  	fcall	_fMenuStrip
  2403                           
  2404                           ;newmain.c: 138: if(flStopBitRecieve)
  2405  0195  1DFA               	btfss	_flStopBitRecieve/(0+8),_flStopBitRecieve& (0+7)
  2406  0196  29B3               	goto	l5100
  2407                           
  2408                           ;newmain.c: 139: {;newmain.c: 140: if(arrCmd[0] == 0xF0 && arrCmd[1] == 0x00 && arrCmd[3
      +                          ] == 0x0F)
  2409  0197  30F0               	movlw	240
  2410  0198  1683               	bsf	3,5	;RP0=1, select bank1
  2411  0199  0620               	xorwf	_arrCmd^(0+128),w
  2412  019A  1D03               	btfss	3,2
  2413  019B  29B3               	goto	l5100
  2414  019C  0821               	movf	(_arrCmd^(0+128)+1),w
  2415  019D  1D03               	btfss	3,2
  2416  019E  29B3               	goto	l5100
  2417  019F  300F               	movlw	15
  2418  01A0  0623               	xorwf	(_arrCmd^(0+128)+3),w
  2419  01A1  1D03               	btfss	3,2
  2420  01A2  29B3               	goto	l5100
  2421                           
  2422                           ;newmain.c: 141: {;newmain.c: 142: if(arrCmd[2] == 0x11 && flDO1 == 0)
  2423  01A3  3011               	movlw	17
  2424  01A4  0622               	xorwf	(_arrCmd^(0+128)+2),w
  2425  01A5  1903               	btfsc	3,2
  2426  01A6  1AFA               	btfsc	_flDO1/(0+8),_flDO1& (0+7)
  2427  01A7  29AB               	goto	l5096
  2428                           
  2429                           ;newmain.c: 143: {;newmain.c: 144: ((_tempPinDO) |= 1UL << (3));
  2430  01A8  15C3               	bsf	__tempPinDO^(0+128),3
  2431                           
  2432                           ;newmain.c: 145: flDO1 = 1;
  2433  01A9  16FA               	bsf	_flDO1/(0+8),_flDO1& (0+7)
  2434                           
  2435                           ;newmain.c: 146: }
  2436  01AA  29B3               	goto	l5100
  2437  01AB                     l5096:
  2438                           
  2439                           ;newmain.c: 147: else if(arrCmd[2] == 0x22)
  2440  01AB  3022               	movlw	34
  2441  01AC  0622               	xorwf	(_arrCmd^(0+128)+2),w
  2442  01AD  1D03               	btfss	3,2
  2443  01AE  29B3               	goto	l5100
  2444                           
  2445                           ;newmain.c: 148: {;newmain.c: 149: ((_tempPinDO) &= ~(1UL << (3)));
  2446  01AF  30F7               	movlw	247
  2447  01B0  00E6               	movwf	??_main^(0+128)
  2448  01B1  0866               	movf	??_main^(0+128),w
  2449  01B2  05C3               	andwf	__tempPinDO^(0+128),f
  2450  01B3                     l5100:
  2451                           
  2452                           ;newmain.c: 150: };newmain.c: 151: };newmain.c: 152: };newmain.c: 154: if((_settingsBit 
      +                          & (1 << 1)) && (_tempPinDO & (1 << 3)))
  2453  01B3  1683               	bsf	3,5	;RP0=1, select bank1
  2454  01B4  18C4               	btfsc	__settingsBit^(0+128),1
  2455  01B5  1DC3               	btfss	__tempPinDO^(0+128),3
  2456  01B6  29D4               	goto	l189
  2457                           
  2458                           ;newmain.c: 155: {;newmain.c: 156: if(_second) _timerDO1++;
  2459  01B7  1FFA               	btfss	__second/(0+8),__second& (0+7)
  2460  01B8  29BF               	goto	l190
  2461  01B9  3001               	movlw	1
  2462  01BA  07AE               	addwf	__timerDO1^(0+128),f
  2463  01BB  1803               	skipnc
  2464  01BC  0AAF               	incf	(__timerDO1+1)^(0+128),f
  2465  01BD  3000               	movlw	0
  2466  01BE  07AF               	addwf	(__timerDO1+1)^(0+128),f
  2467  01BF                     l190:
  2468                           
  2469                           ;newmain.c: 157: if(_timerDO1 > (short int)(_settingTimeImpDO1))
  2470  01BF  0835               	movf	(__settingTimeImpDO1+1)^(0+128),w
  2471  01C0  3A80               	xorlw	128
  2472  01C1  00E6               	movwf	??_main^(0+128)
  2473  01C2  082F               	movf	(__timerDO1+1)^(0+128),w
  2474  01C3  3A80               	xorlw	128
  2475  01C4  0266               	subwf	??_main^(0+128),w
  2476  01C5  1D03               	skipz
  2477  01C6  29C9               	goto	u6165
  2478  01C7  082E               	movf	__timerDO1^(0+128),w
  2479  01C8  0234               	subwf	__settingTimeImpDO1^(0+128),w
  2480  01C9                     u6165:
  2481  01C9  1803               	skipnc
  2482  01CA  29E0               	goto	l5118
  2483                           
  2484                           ;newmain.c: 158: {;newmain.c: 159: ((_tempPinDO) &= ~(1UL << (3)));
  2485  01CB  30F7               	movlw	247
  2486  01CC  1683               	bsf	3,5	;RP0=1, select bank1
  2487  01CD  1303               	bcf	3,6	;RP1=0, select bank1
  2488  01CE  00E6               	movwf	??_main^(0+128)
  2489  01CF  0866               	movf	??_main^(0+128),w
  2490  01D0  05C3               	andwf	__tempPinDO^(0+128),f
  2491                           
  2492                           ;newmain.c: 160: _timerDO1 = 0;
  2493  01D1  01AE               	clrf	__timerDO1^(0+128)
  2494  01D2  01AF               	clrf	(__timerDO1+1)^(0+128)
  2495  01D3  29E0               	goto	l5118
  2496  01D4                     l189:
  2497                           
  2498                           ;newmain.c: 163: else if(!(_settingsBit & (1 << 1)))
  2499  01D4  18C4               	btfsc	__settingsBit^(0+128),1
  2500  01D5  29E0               	goto	l5118
  2501                           
  2502                           ;newmain.c: 164: {;newmain.c: 165: if(_tempPinDO & (1 << 3))
  2503  01D6  1DC3               	btfss	__tempPinDO^(0+128),3
  2504  01D7  29DA               	goto	l194
  2505                           
  2506                           ;newmain.c: 166: ((_tempPinDO) |= 1UL << (3));
  2507  01D8  15C3               	bsf	__tempPinDO^(0+128),3
  2508  01D9  29E0               	goto	l5118
  2509  01DA                     l194:
  2510                           
  2511                           ;newmain.c: 167: else if (!(_tempPinDO & (1 << 3)))
  2512  01DA  19C3               	btfsc	__tempPinDO^(0+128),3
  2513  01DB  29E0               	goto	l5118
  2514                           
  2515                           ;newmain.c: 168: ((_tempPinDO) &= ~(1UL << (3)));
  2516  01DC  30F7               	movlw	247
  2517  01DD  00E6               	movwf	??_main^(0+128)
  2518  01DE  0866               	movf	??_main^(0+128),w
  2519  01DF  05C3               	andwf	__tempPinDO^(0+128),f
  2520  01E0                     l5118:
  2521                           
  2522                           ;newmain.c: 169: };newmain.c: 171: if(_settingsBit & (1 << 3))
  2523  01E0  1683               	bsf	3,5	;RP0=1, select bank1
  2524  01E1  1303               	bcf	3,6	;RP1=0, select bank1
  2525  01E2  1DC4               	btfss	__settingsBit^(0+128),3
  2526  01E3  2A1F               	goto	l5148
  2527                           
  2528                           ;newmain.c: 172: {;newmain.c: 173: if(_minute) _timerDO2++;
  2529  01E4  1F7A               	btfss	__minute/(0+8),__minute& (0+7)
  2530  01E5  29EC               	goto	l5124
  2531  01E6  3001               	movlw	1
  2532  01E7  07AC               	addwf	__timerDO2^(0+128),f
  2533  01E8  1803               	skipnc
  2534  01E9  0AAD               	incf	(__timerDO2+1)^(0+128),f
  2535  01EA  3000               	movlw	0
  2536  01EB  07AD               	addwf	(__timerDO2+1)^(0+128),f
  2537  01EC                     l5124:
  2538                           
  2539                           ;newmain.c: 174: if((_settingsBit & (1 << 4)) && temperatureAI2 <= 20 && !(_tempPinDO & 
      +                          (1 << 4))){
  2540  01EC  1E44               	btfss	__settingsBit^(0+128),4
  2541  01ED  29F7               	goto	l5134
  2542  01EE  0838               	movf	_temperatureAI2^(0+128),w
  2543  01EF  3A80               	xorlw	128
  2544  01F0  3E6B               	addlw	-149
  2545  01F1  1C03               	btfss	3,0
  2546  01F2  1A43               	btfsc	__tempPinDO^(0+128),4
  2547  01F3  29F7               	goto	l5134
  2548                           
  2549                           ;newmain.c: 175: ((_tempPinDO) |= 1UL << (4));
  2550  01F4  1643               	bsf	__tempPinDO^(0+128),4
  2551                           
  2552                           ;newmain.c: 176: _timerDO2 = 0;
  2553  01F5  01AC               	clrf	__timerDO2^(0+128)
  2554  01F6  01AD               	clrf	(__timerDO2+1)^(0+128)
  2555  01F7                     l5134:
  2556                           
  2557                           ;newmain.c: 177: };newmain.c: 178: if(!(_tempPinDO & (1 << 4)))
  2558  01F7  1A43               	btfsc	__tempPinDO^(0+128),4
  2559  01F8  2A09               	goto	l200
  2560                           
  2561                           ;newmain.c: 179: {;newmain.c: 180: if(_timerDO2 >= (short int)(_settingTimerOnDO2))
  2562  01F9  082D               	movf	(__timerDO2+1)^(0+128),w
  2563  01FA  3A80               	xorlw	128
  2564  01FB  00E6               	movwf	??_main^(0+128)
  2565  01FC  0833               	movf	(__settingTimerOnDO2+1)^(0+128),w
  2566  01FD  3A80               	xorlw	128
  2567  01FE  0266               	subwf	??_main^(0+128),w
  2568  01FF  1D03               	skipz
  2569  0200  2A03               	goto	u6265
  2570  0201  0832               	movf	__settingTimerOnDO2^(0+128),w
  2571  0202  022C               	subwf	__timerDO2^(0+128),w
  2572  0203                     u6265:
  2573  0203  1C03               	skipc
  2574  0204  2A1F               	goto	l5148
  2575                           
  2576                           ;newmain.c: 181: {;newmain.c: 182: ((_tempPinDO) |= 1UL << (4));
  2577  0205  1683               	bsf	3,5	;RP0=1, select bank1
  2578  0206  1303               	bcf	3,6	;RP1=0, select bank1
  2579  0207  1643               	bsf	__tempPinDO^(0+128),4
  2580  0208  2A1D               	goto	l5140
  2581  0209                     l200:
  2582                           
  2583                           ;newmain.c: 186: else if(_tempPinDO & (1 << 4))
  2584  0209  1E43               	btfss	__tempPinDO^(0+128),4
  2585  020A  2A1F               	goto	l5148
  2586                           
  2587                           ;newmain.c: 187: {;newmain.c: 188: if(_timerDO2 >= (short int)(_settingTimerOffDO2))
  2588  020B  082D               	movf	(__timerDO2+1)^(0+128),w
  2589  020C  3A80               	xorlw	128
  2590  020D  00E6               	movwf	??_main^(0+128)
  2591  020E  0831               	movf	(__settingTimerOffDO2+1)^(0+128),w
  2592  020F  3A80               	xorlw	128
  2593  0210  0266               	subwf	??_main^(0+128),w
  2594  0211  1D03               	skipz
  2595  0212  2A15               	goto	u6285
  2596  0213  0830               	movf	__settingTimerOffDO2^(0+128),w
  2597  0214  022C               	subwf	__timerDO2^(0+128),w
  2598  0215                     u6285:
  2599  0215  1C03               	skipc
  2600  0216  2A1F               	goto	l5148
  2601                           
  2602                           ;newmain.c: 189: {;newmain.c: 190: ((_tempPinDO) &= ~(1UL << (4)));
  2603  0217  30EF               	movlw	239
  2604  0218  1683               	bsf	3,5	;RP0=1, select bank1
  2605  0219  1303               	bcf	3,6	;RP1=0, select bank1
  2606  021A  00E6               	movwf	??_main^(0+128)
  2607  021B  0866               	movf	??_main^(0+128),w
  2608  021C  05C3               	andwf	__tempPinDO^(0+128),f
  2609  021D                     l5140:
  2610                           
  2611                           ;newmain.c: 183: _timerDO2 = 0;
  2612  021D  01AC               	clrf	__timerDO2^(0+128)
  2613  021E  01AD               	clrf	(__timerDO2+1)^(0+128)
  2614  021F                     l5148:
  2615                           
  2616                           ;newmain.c: 192: };newmain.c: 193: };newmain.c: 194: };newmain.c: 197: if((RB3 && RB4) &
      +                          & (!(_tempPinDO & (1 << 5))))
  2617  021F  1283               	bcf	3,5	;RP0=0, select bank0
  2618  0220  1303               	bcf	3,6	;RP1=0, select bank0
  2619  0221  1986               	btfsc	6,3	;volatile
  2620  0222  1E06               	btfss	6,4	;volatile
  2621  0223  2A29               	goto	l205
  2622  0224  1683               	bsf	3,5	;RP0=1, select bank1
  2623  0225  1AC3               	btfsc	__tempPinDO^(0+128),5
  2624  0226  2A29               	goto	l205
  2625                           
  2626                           ;newmain.c: 198: ((_tempPinDO) |= 1UL << (5));
  2627  0227  16C3               	bsf	__tempPinDO^(0+128),5
  2628  0228  2A35               	goto	l5160
  2629  0229                     l205:
  2630                           
  2631                           ;newmain.c: 199: else if (!(RB3 && RB4) && (_tempPinDO & (1 << 5)))
  2632  0229  1283               	bcf	3,5	;RP0=0, select bank0
  2633  022A  1D86               	btfss	6,3	;volatile
  2634  022B  2A2E               	goto	l209
  2635  022C  1A06               	btfsc	6,4	;volatile
  2636  022D  2A35               	goto	l5160
  2637  022E                     l209:
  2638  022E  1683               	bsf	3,5	;RP0=1, select bank1
  2639  022F  1EC3               	btfss	__tempPinDO^(0+128),5
  2640  0230  2A35               	goto	l5160
  2641                           
  2642                           ;newmain.c: 200: ((_tempPinDO) &= ~(1UL << (5)));
  2643  0231  30DF               	movlw	223
  2644  0232  00E6               	movwf	??_main^(0+128)
  2645  0233  0866               	movf	??_main^(0+128),w
  2646  0234  05C3               	andwf	__tempPinDO^(0+128),f
  2647  0235                     l5160:
  2648                           
  2649                           ;newmain.c: 203: if((RB5 || RB6) && (!(_tempPinDO & (1 << 6))))
  2650  0235  1283               	bcf	3,5	;RP0=0, select bank0
  2651  0236  1A86               	btfsc	6,5	;volatile
  2652  0237  2A3A               	goto	l212
  2653  0238  1F06               	btfss	6,6	;volatile
  2654  0239  2A3F               	goto	l210
  2655  023A                     l212:
  2656  023A  1683               	bsf	3,5	;RP0=1, select bank1
  2657  023B  1B43               	btfsc	__tempPinDO^(0+128),6
  2658  023C  2A3F               	goto	l210
  2659                           
  2660                           ;newmain.c: 204: ((_tempPinDO) |= 1UL << (6));
  2661  023D  1743               	bsf	__tempPinDO^(0+128),6
  2662  023E  2971               	goto	l5066
  2663  023F                     l210:
  2664                           
  2665                           ;newmain.c: 205: else if (!(RB5 || RB6) && (_tempPinDO & (1 << 6)))
  2666  023F  1283               	bcf	3,5	;RP0=0, select bank0
  2667  0240  1E86               	btfss	6,5	;volatile
  2668  0241  1B06               	btfsc	6,6	;volatile
  2669  0242  2971               	goto	l5066
  2670  0243  1683               	bsf	3,5	;RP0=1, select bank1
  2671  0244  1F43               	btfss	__tempPinDO^(0+128),6
  2672  0245  2971               	goto	l5066
  2673                           
  2674                           ;newmain.c: 206: ((_tempPinDO) &= ~(1UL << (6)));
  2675  0246  30BF               	movlw	191
  2676  0247  00E6               	movwf	??_main^(0+128)
  2677  0248  0866               	movf	??_main^(0+128),w
  2678  0249  05C3               	andwf	__tempPinDO^(0+128),f
  2679  024A  2971               	goto	l5066
  2680  024B                     __end_of_main:
  2681                           
  2682                           	psect	text1
  2683  174E                     __ptext1:	
  2684 ;; *************** function _rTemperature *****************
  2685 ;; Defined at:
  2686 ;;		line 8 in file "temp_ntc.c"
  2687 ;; Parameters:    Size  Location     Type
  2688 ;;  analogAI        1    wreg     unsigned char 
  2689 ;; Auto vars:     Size  Location     Type
  2690 ;;  analogAI        1   29[BANK1 ] unsigned char 
  2691 ;; Return value:  Size  Location     Type
  2692 ;;                  1    wreg      char 
  2693 ;; Registers used:
  2694 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2695 ;; Tracked objects:
  2696 ;;		On entry : 300/100
  2697 ;;		On exit  : 200/0
  2698 ;;		Unchanged: 0/0
  2699 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2700 ;;      Params:         0       0       0       0       0
  2701 ;;      Locals:         0       0      10       0       0
  2702 ;;      Temps:          0       0       0       0       0
  2703 ;;      Totals:         0       0      10       0       0
  2704 ;;Total ram usage:       10 bytes
  2705 ;; Hardware stack levels used: 1
  2706 ;; Hardware stack levels required when called: 6
  2707 ;; This function calls:
  2708 ;;		___awtoft
  2709 ;;		___ftadd
  2710 ;;		___ftdiv
  2711 ;;		___fttol
  2712 ;;		_log
  2713 ;;		_rThermistor
  2714 ;; This function is called by:
  2715 ;;		_main
  2716 ;; This function uses a non-reentrant model
  2717 ;;
  2718                           
  2719                           
  2720                           ;psect for function _rTemperature
  2721  174E                     _rTemperature:
  2722                           
  2723                           ;incstack = 0
  2724                           ; Regs used in _rTemperature: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2725                           ;rTemperature@analogAI stored from wreg
  2726  174E  00E5               	movwf	rTemperature@analogAI^(0+128)
  2727                           
  2728                           ;temp_ntc.c: 9: if(analogAI == 255) return 0;
  2729  174F  0A65               	incf	rTemperature@analogAI^(0+128),w
  2730  1750  1D03               	btfss	3,2
  2731  1751  2F54               	goto	l4514
  2732  1752  3000               	movlw	0
  2733  1753  0008               	return
  2734  1754                     l4514:
  2735                           
  2736                           ;temp_ntc.c: 10: return (1 / ((log(10000.0 / rThermistor(analogAI)) / 3892.48) + (1.0 / 
      +                          (25 + 273.15)))) - 273.15;
  2737  1754  0865               	movf	rTemperature@analogAI^(0+128),w
  2738  1755  160A  118A  2273  160A  118A  	fcall	_rThermistor
  2739  175A  086D               	movf	?_rThermistor+1,w
  2740  175B  1683               	bsf	3,5	;RP0=1, select bank1
  2741  175C  00D3               	movwf	(___awtoft@c+1)^(0+128)
  2742  175D  1283               	bcf	3,5	;RP0=0, select bank0
  2743  175E  086C               	movf	?_rThermistor,w
  2744  175F  1683               	bsf	3,5	;RP0=1, select bank1
  2745  1760  00D2               	movwf	___awtoft@c^(0+128)
  2746  1761  160A  158A  24BD  160A  118A  	fcall	___awtoft
  2747  1766  0852               	movf	?___awtoft^(0+128),w
  2748  1767  00DC               	movwf	_rTemperature$1806^(0+128)
  2749  1768  0853               	movf	(?___awtoft+1)^(0+128),w
  2750  1769  00DD               	movwf	(_rTemperature$1806+1)^(0+128)
  2751  176A  0854               	movf	(?___awtoft+2)^(0+128),w
  2752  176B  00DE               	movwf	(_rTemperature$1806+2)^(0+128)
  2753                           
  2754                           ;temp_ntc.c: 10: return (1 / ((log(10000.0 / rThermistor(analogAI)) / 3892.48) + (1.0 / 
      +                          (25 + 273.15)))) - 273.15;
  2755  176C  3040               	movlw	64
  2756  176D  1283               	bcf	3,5	;RP0=0, select bank0
  2757  176E  00D7               	movwf	___ftdiv@f1
  2758  176F  301C               	movlw	28
  2759  1770  00D8               	movwf	___ftdiv@f1+1
  2760  1771  3046               	movlw	70
  2761  1772  00D9               	movwf	___ftdiv@f1+2
  2762  1773  1683               	bsf	3,5	;RP0=1, select bank1
  2763  1774  085C               	movf	_rTemperature$1806^(0+128),w
  2764  1775  1283               	bcf	3,5	;RP0=0, select bank0
  2765  1776  00D4               	movwf	___ftdiv@f2
  2766  1777  1683               	bsf	3,5	;RP0=1, select bank1
  2767  1778  085D               	movf	(_rTemperature$1806+1)^(0+128),w
  2768  1779  1283               	bcf	3,5	;RP0=0, select bank0
  2769  177A  00D5               	movwf	___ftdiv@f2+1
  2770  177B  1683               	bsf	3,5	;RP0=1, select bank1
  2771  177C  085E               	movf	(_rTemperature$1806+2)^(0+128),w
  2772  177D  1283               	bcf	3,5	;RP0=0, select bank0
  2773  177E  00D6               	movwf	___ftdiv@f2+2
  2774  177F  160A  118A  255B  160A  118A  	fcall	___ftdiv
  2775  1784  0854               	movf	?___ftdiv,w
  2776  1785  1683               	bsf	3,5	;RP0=1, select bank1
  2777  1786  00D6               	movwf	log@x^(0+128)
  2778  1787  1283               	bcf	3,5	;RP0=0, select bank0
  2779  1788  0855               	movf	?___ftdiv+1,w
  2780  1789  1683               	bsf	3,5	;RP0=1, select bank1
  2781  178A  00D7               	movwf	(log@x+1)^(0+128)
  2782  178B  1283               	bcf	3,5	;RP0=0, select bank0
  2783  178C  0856               	movf	?___ftdiv+2,w
  2784  178D  1683               	bsf	3,5	;RP0=1, select bank1
  2785  178E  00D8               	movwf	(log@x+2)^(0+128)
  2786  178F  120A  118A  2668  160A  118A  	fcall	_log
  2787  1794  0856               	movf	?_log^(0+128),w
  2788  1795  00DF               	movwf	_rTemperature$1807^(0+128)
  2789  1796  0857               	movf	(?_log+1)^(0+128),w
  2790  1797  00E0               	movwf	(_rTemperature$1807+1)^(0+128)
  2791  1798  0858               	movf	(?_log+2)^(0+128),w
  2792  1799  00E1               	movwf	(_rTemperature$1807+2)^(0+128)
  2793                           
  2794                           ;temp_ntc.c: 10: return (1 / ((log(10000.0 / rThermistor(analogAI)) / 3892.48) + (1.0 / 
      +                          (25 + 273.15)))) - 273.15;
  2795  179A  085F               	movf	_rTemperature$1807^(0+128),w
  2796  179B  1283               	bcf	3,5	;RP0=0, select bank0
  2797  179C  00D7               	movwf	___ftdiv@f1
  2798  179D  1683               	bsf	3,5	;RP0=1, select bank1
  2799  179E  0860               	movf	(_rTemperature$1807+1)^(0+128),w
  2800  179F  1283               	bcf	3,5	;RP0=0, select bank0
  2801  17A0  00D8               	movwf	___ftdiv@f1+1
  2802  17A1  1683               	bsf	3,5	;RP0=1, select bank1
  2803  17A2  0861               	movf	(_rTemperature$1807+2)^(0+128),w
  2804  17A3  1283               	bcf	3,5	;RP0=0, select bank0
  2805  17A4  00D9               	movwf	___ftdiv@f1+2
  2806  17A5  3048               	movlw	72
  2807  17A6  00D4               	movwf	___ftdiv@f2
  2808  17A7  3073               	movlw	115
  2809  17A8  00D5               	movwf	___ftdiv@f2+1
  2810  17A9  3045               	movlw	69
  2811  17AA  00D6               	movwf	___ftdiv@f2+2
  2812  17AB  160A  118A  255B  160A  118A  	fcall	___ftdiv
  2813  17B0  0854               	movf	?___ftdiv,w
  2814  17B1  00BB               	movwf	___ftadd@f2
  2815  17B2  0855               	movf	?___ftdiv+1,w
  2816  17B3  00BC               	movwf	___ftadd@f2+1
  2817  17B4  0856               	movf	?___ftdiv+2,w
  2818  17B5  00BD               	movwf	___ftadd@f2+2
  2819  17B6  30CF               	movlw	207
  2820  17B7  00B8               	movwf	___ftadd@f1
  2821  17B8  305B               	movlw	91
  2822  17B9  00B9               	movwf	___ftadd@f1+1
  2823  17BA  303B               	movlw	59
  2824  17BB  00BA               	movwf	___ftadd@f1+2
  2825  17BC  120A  118A  2563  160A  118A  	fcall	___ftadd
  2826  17C1  0838               	movf	?___ftadd,w
  2827  17C2  1683               	bsf	3,5	;RP0=1, select bank1
  2828  17C3  00E2               	movwf	_rTemperature$1808^(0+128)
  2829  17C4  1283               	bcf	3,5	;RP0=0, select bank0
  2830  17C5  0839               	movf	?___ftadd+1,w
  2831  17C6  1683               	bsf	3,5	;RP0=1, select bank1
  2832  17C7  00E3               	movwf	(_rTemperature$1808+1)^(0+128)
  2833  17C8  1283               	bcf	3,5	;RP0=0, select bank0
  2834  17C9  083A               	movf	?___ftadd+2,w
  2835  17CA  1683               	bsf	3,5	;RP0=1, select bank1
  2836  17CB  00E4               	movwf	(_rTemperature$1808+2)^(0+128)
  2837                           
  2838                           ;temp_ntc.c: 10: return (1 / ((log(10000.0 / rThermistor(analogAI)) / 3892.48) + (1.0 / 
      +                          (25 + 273.15)))) - 273.15;
  2839  17CC  3000               	movlw	0
  2840  17CD  1283               	bcf	3,5	;RP0=0, select bank0
  2841  17CE  00D7               	movwf	___ftdiv@f1
  2842  17CF  3080               	movlw	128
  2843  17D0  00D8               	movwf	___ftdiv@f1+1
  2844  17D1  303F               	movlw	63
  2845  17D2  00D9               	movwf	___ftdiv@f1+2
  2846  17D3  1683               	bsf	3,5	;RP0=1, select bank1
  2847  17D4  0862               	movf	_rTemperature$1808^(0+128),w
  2848  17D5  1283               	bcf	3,5	;RP0=0, select bank0
  2849  17D6  00D4               	movwf	___ftdiv@f2
  2850  17D7  1683               	bsf	3,5	;RP0=1, select bank1
  2851  17D8  0863               	movf	(_rTemperature$1808+1)^(0+128),w
  2852  17D9  1283               	bcf	3,5	;RP0=0, select bank0
  2853  17DA  00D5               	movwf	___ftdiv@f2+1
  2854  17DB  1683               	bsf	3,5	;RP0=1, select bank1
  2855  17DC  0864               	movf	(_rTemperature$1808+2)^(0+128),w
  2856  17DD  1283               	bcf	3,5	;RP0=0, select bank0
  2857  17DE  00D6               	movwf	___ftdiv@f2+2
  2858  17DF  160A  118A  255B  160A  118A  	fcall	___ftdiv
  2859  17E4  0854               	movf	?___ftdiv,w
  2860  17E5  00BB               	movwf	___ftadd@f2
  2861  17E6  0855               	movf	?___ftdiv+1,w
  2862  17E7  00BC               	movwf	___ftadd@f2+1
  2863  17E8  0856               	movf	?___ftdiv+2,w
  2864  17E9  00BD               	movwf	___ftadd@f2+2
  2865  17EA  3093               	movlw	147
  2866  17EB  00B8               	movwf	___ftadd@f1
  2867  17EC  3088               	movlw	136
  2868  17ED  00B9               	movwf	___ftadd@f1+1
  2869  17EE  30C3               	movlw	195
  2870  17EF  00BA               	movwf	___ftadd@f1+2
  2871  17F0  120A  118A  2563  160A  118A  	fcall	___ftadd
  2872  17F5  0838               	movf	?___ftadd,w
  2873  17F6  00E4               	movwf	___fttol@f1
  2874  17F7  0839               	movf	?___ftadd+1,w
  2875  17F8  00E5               	movwf	___fttol@f1+1
  2876  17F9  083A               	movf	?___ftadd+2,w
  2877  17FA  00E6               	movwf	___fttol@f1+2
  2878  17FB  160A  118A  24C9   	fcall	___fttol
  2879  17FE  0864               	movf	?___fttol,w
  2880  17FF  0008               	return
  2881  1800                     __end_of_rTemperature:
  2882                           
  2883                           	psect	text2
  2884  1273                     __ptext2:	
  2885 ;; *************** function _rThermistor *****************
  2886 ;; Defined at:
  2887 ;;		line 3 in file "temp_ntc.c"
  2888 ;; Parameters:    Size  Location     Type
  2889 ;;  analogAI        1    wreg     unsigned char 
  2890 ;; Auto vars:     Size  Location     Type
  2891 ;;  analogAI        1    9[BANK1 ] unsigned char 
  2892 ;;  A               3    6[BANK1 ] float 
  2893 ;; Return value:  Size  Location     Type
  2894 ;;                  2   76[BANK0 ] short 
  2895 ;; Registers used:
  2896 ;;		wreg, status,2, status,0, pclath, cstack
  2897 ;; Tracked objects:
  2898 ;;		On entry : 300/100
  2899 ;;		On exit  : 300/0
  2900 ;;		Unchanged: 0/0
  2901 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2902 ;;      Params:         0       2       0       0       0
  2903 ;;      Locals:         0       0       4       0       0
  2904 ;;      Temps:          0       0       0       0       0
  2905 ;;      Totals:         0       2       4       0       0
  2906 ;;Total ram usage:        6 bytes
  2907 ;; Hardware stack levels used: 1
  2908 ;; Hardware stack levels required when called: 4
  2909 ;; This function calls:
  2910 ;;		___ftadd
  2911 ;;		___ftdiv
  2912 ;;		___ftmul
  2913 ;;		___fttol
  2914 ;;		___lbtoft
  2915 ;; This function is called by:
  2916 ;;		_rTemperature
  2917 ;; This function uses a non-reentrant model
  2918 ;;
  2919                           
  2920                           
  2921                           ;psect for function _rThermistor
  2922  1273                     _rThermistor:
  2923                           
  2924                           ;incstack = 0
  2925                           ; Regs used in _rThermistor: [wreg+status,2+status,0+pclath+cstack]
  2926                           ;rThermistor@analogAI stored from wreg
  2927  1273  00D1               	movwf	rThermistor@analogAI^(0+128)
  2928                           
  2929                           ;temp_ntc.c: 4: float A = (255.0 / (float)analogAI) - 1.0;
  2930  1274  3000               	movlw	0
  2931  1275  1283               	bcf	3,5	;RP0=0, select bank0
  2932  1276  00B8               	movwf	___ftadd@f1
  2933  1277  3080               	movlw	128
  2934  1278  00B9               	movwf	___ftadd@f1+1
  2935  1279  30BF               	movlw	191
  2936  127A  00BA               	movwf	___ftadd@f1+2
  2937  127B  1683               	bsf	3,5	;RP0=1, select bank1
  2938  127C  0851               	movf	rThermistor@analogAI^(0+128),w
  2939  127D  160A  158A  2463  160A  118A  	fcall	___lbtoft
  2940  1282  0828               	movf	?___lbtoft,w
  2941  1283  00D4               	movwf	___ftdiv@f2
  2942  1284  0829               	movf	?___lbtoft+1,w
  2943  1285  00D5               	movwf	___ftdiv@f2+1
  2944  1286  082A               	movf	?___lbtoft+2,w
  2945  1287  00D6               	movwf	___ftdiv@f2+2
  2946  1288  3000               	movlw	0
  2947  1289  00D7               	movwf	___ftdiv@f1
  2948  128A  307F               	movlw	127
  2949  128B  00D8               	movwf	___ftdiv@f1+1
  2950  128C  3043               	movlw	67
  2951  128D  00D9               	movwf	___ftdiv@f1+2
  2952  128E  160A  118A  255B  160A  118A  	fcall	___ftdiv
  2953  1293  0854               	movf	?___ftdiv,w
  2954  1294  00BB               	movwf	___ftadd@f2
  2955  1295  0855               	movf	?___ftdiv+1,w
  2956  1296  00BC               	movwf	___ftadd@f2+1
  2957  1297  0856               	movf	?___ftdiv+2,w
  2958  1298  00BD               	movwf	___ftadd@f2+2
  2959  1299  120A  118A  2563  160A  118A  	fcall	___ftadd
  2960  129E  0838               	movf	?___ftadd,w
  2961  129F  1683               	bsf	3,5	;RP0=1, select bank1
  2962  12A0  00CE               	movwf	rThermistor@A^(0+128)
  2963  12A1  1283               	bcf	3,5	;RP0=0, select bank0
  2964  12A2  0839               	movf	?___ftadd+1,w
  2965  12A3  1683               	bsf	3,5	;RP0=1, select bank1
  2966  12A4  00CF               	movwf	(rThermistor@A+1)^(0+128)
  2967  12A5  1283               	bcf	3,5	;RP0=0, select bank0
  2968  12A6  083A               	movf	?___ftadd+2,w
  2969  12A7  1683               	bsf	3,5	;RP0=1, select bank1
  2970  12A8  00D0               	movwf	(rThermistor@A+2)^(0+128)
  2971                           
  2972                           ;temp_ntc.c: 5: return A * 10000;
  2973  12A9  084E               	movf	rThermistor@A^(0+128),w
  2974  12AA  1283               	bcf	3,5	;RP0=0, select bank0
  2975  12AB  00AB               	movwf	___ftmul@f2
  2976  12AC  1683               	bsf	3,5	;RP0=1, select bank1
  2977  12AD  084F               	movf	(rThermistor@A+1)^(0+128),w
  2978  12AE  1283               	bcf	3,5	;RP0=0, select bank0
  2979  12AF  00AC               	movwf	___ftmul@f2+1
  2980  12B0  1683               	bsf	3,5	;RP0=1, select bank1
  2981  12B1  0850               	movf	(rThermistor@A+2)^(0+128),w
  2982  12B2  1283               	bcf	3,5	;RP0=0, select bank0
  2983  12B3  00AD               	movwf	___ftmul@f2+2
  2984  12B4  3040               	movlw	64
  2985  12B5  00A8               	movwf	___ftmul@f1
  2986  12B6  301C               	movlw	28
  2987  12B7  00A9               	movwf	___ftmul@f1+1
  2988  12B8  3046               	movlw	70
  2989  12B9  00AA               	movwf	___ftmul@f1+2
  2990  12BA  120A  118A  274B  160A  118A  	fcall	___ftmul
  2991  12BF  0828               	movf	?___ftmul,w
  2992  12C0  00E4               	movwf	___fttol@f1
  2993  12C1  0829               	movf	?___ftmul+1,w
  2994  12C2  00E5               	movwf	___fttol@f1+1
  2995  12C3  082A               	movf	?___ftmul+2,w
  2996  12C4  00E6               	movwf	___fttol@f1+2
  2997  12C5  160A  118A  24C9   	fcall	___fttol
  2998  12C8  0865               	movf	?___fttol+1,w
  2999  12C9  00ED               	movwf	?_rThermistor+1
  3000  12CA  0864               	movf	?___fttol,w
  3001  12CB  00EC               	movwf	?_rThermistor
  3002  12CC  0008               	return
  3003  12CD                     __end_of_rThermistor:
  3004                           
  3005                           	psect	text3
  3006  1C63                     __ptext3:	
  3007 ;; *************** function ___lbtoft *****************
  3008 ;; Defined at:
  3009 ;;		line 27 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\lbtoft.c"
  3010 ;; Parameters:    Size  Location     Type
  3011 ;;  c               1    wreg     unsigned char 
  3012 ;; Auto vars:     Size  Location     Type
  3013 ;;  c               1   15[BANK0 ] unsigned char 
  3014 ;; Return value:  Size  Location     Type
  3015 ;;                  3    8[BANK0 ] float 
  3016 ;; Registers used:
  3017 ;;		wreg, status,2, status,0, pclath, cstack
  3018 ;; Tracked objects:
  3019 ;;		On entry : 300/100
  3020 ;;		On exit  : 300/0
  3021 ;;		Unchanged: 0/0
  3022 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3023 ;;      Params:         0       3       0       0       0
  3024 ;;      Locals:         0       1       0       0       0
  3025 ;;      Temps:          0       4       0       0       0
  3026 ;;      Totals:         0       8       0       0       0
  3027 ;;Total ram usage:        8 bytes
  3028 ;; Hardware stack levels used: 1
  3029 ;; Hardware stack levels required when called: 3
  3030 ;; This function calls:
  3031 ;;		___ftpack
  3032 ;; This function is called by:
  3033 ;;		_rThermistor
  3034 ;; This function uses a non-reentrant model
  3035 ;;
  3036                           
  3037                           
  3038                           ;psect for function ___lbtoft
  3039  1C63                     ___lbtoft:
  3040                           
  3041                           ;incstack = 0
  3042                           ; Regs used in ___lbtoft: [wreg+status,2+status,0+pclath+cstack]
  3043                           ;___lbtoft@c stored from wreg
  3044  1C63  1283               	bcf	3,5	;RP0=0, select bank0
  3045  1C64  00AF               	movwf	___lbtoft@c
  3046  1C65  082F               	movf	___lbtoft@c,w
  3047  1C66  00AB               	movwf	??___lbtoft
  3048  1C67  01AC               	clrf	??___lbtoft+1
  3049  1C68  01AD               	clrf	??___lbtoft+2
  3050  1C69  082B               	movf	??___lbtoft,w
  3051  1C6A  00A0               	movwf	___ftpack@arg
  3052  1C6B  082C               	movf	??___lbtoft+1,w
  3053  1C6C  00A1               	movwf	___ftpack@arg+1
  3054  1C6D  082D               	movf	??___lbtoft+2,w
  3055  1C6E  00A2               	movwf	___ftpack@arg+2
  3056  1C6F  308E               	movlw	142
  3057  1C70  00AE               	movwf	??___lbtoft+3
  3058  1C71  082E               	movf	??___lbtoft+3,w
  3059  1C72  00A3               	movwf	___ftpack@exp
  3060  1C73  01A4               	clrf	___ftpack@sign
  3061  1C74  160A  118A  22CD   	fcall	___ftpack
  3062  1C77  0820               	movf	?___ftpack,w
  3063  1C78  00A8               	movwf	?___lbtoft
  3064  1C79  0821               	movf	?___ftpack+1,w
  3065  1C7A  00A9               	movwf	?___lbtoft+1
  3066  1C7B  0822               	movf	?___ftpack+2,w
  3067  1C7C  00AA               	movwf	?___lbtoft+2
  3068  1C7D  0008               	return
  3069  1C7E                     __end_of___lbtoft:
  3070                           
  3071                           	psect	text4
  3072  14C9                     __ptext4:	
  3073 ;; *************** function ___fttol *****************
  3074 ;; Defined at:
  3075 ;;		line 44 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\fttol.c"
  3076 ;; Parameters:    Size  Location     Type
  3077 ;;  f1              3   68[BANK0 ] float 
  3078 ;; Auto vars:     Size  Location     Type
  3079 ;;  lval            4    1[BANK1 ] unsigned long 
  3080 ;;  exp1            1    5[BANK1 ] unsigned char 
  3081 ;;  sign1           1    0[BANK1 ] unsigned char 
  3082 ;; Return value:  Size  Location     Type
  3083 ;;                  4   68[BANK0 ] long 
  3084 ;; Registers used:
  3085 ;;		wreg, status,2, status,0
  3086 ;; Tracked objects:
  3087 ;;		On entry : 300/0
  3088 ;;		On exit  : 300/0
  3089 ;;		Unchanged: 0/0
  3090 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3091 ;;      Params:         0       4       0       0       0
  3092 ;;      Locals:         0       0       6       0       0
  3093 ;;      Temps:          0       4       0       0       0
  3094 ;;      Totals:         0       8       6       0       0
  3095 ;;Total ram usage:       14 bytes
  3096 ;; Hardware stack levels used: 1
  3097 ;; Hardware stack levels required when called: 2
  3098 ;; This function calls:
  3099 ;;		Nothing
  3100 ;; This function is called by:
  3101 ;;		_rThermistor
  3102 ;;		_rTemperature
  3103 ;; This function uses a non-reentrant model
  3104 ;;
  3105                           
  3106                           
  3107                           ;psect for function ___fttol
  3108  14C9                     ___fttol:
  3109                           
  3110                           ;incstack = 0
  3111                           ; Regs used in ___fttol: [wreg+status,2+status,0]
  3112  14C9  0864               	movf	___fttol@f1,w
  3113  14CA  00E8               	movwf	??___fttol
  3114  14CB  0865               	movf	___fttol@f1+1,w
  3115  14CC  00E9               	movwf	??___fttol+1
  3116  14CD  0866               	movf	___fttol@f1+2,w
  3117  14CE  00EA               	movwf	??___fttol+2
  3118  14CF  1003               	clrc
  3119  14D0  0D69               	rlf	??___fttol+1,w
  3120  14D1  0D6A               	rlf	??___fttol+2,w
  3121  14D2  00EB               	movwf	??___fttol+3
  3122  14D3  086B               	movf	??___fttol+3,w
  3123  14D4  1683               	bsf	3,5	;RP0=1, select bank1
  3124  14D5  00CD               	movwf	___fttol@exp1^(0+128)
  3125  14D6  084D               	movf	___fttol@exp1^(0+128),w
  3126  14D7  1D03               	btfss	3,2
  3127  14D8  2CE3               	goto	l3734
  3128  14D9                     l3730:
  3129  14D9  3000               	movlw	0
  3130  14DA  1283               	bcf	3,5	;RP0=0, select bank0
  3131  14DB  00E7               	movwf	?___fttol+3
  3132  14DC  3000               	movlw	0
  3133  14DD  00E6               	movwf	?___fttol+2
  3134  14DE  3000               	movlw	0
  3135  14DF  00E5               	movwf	?___fttol+1
  3136  14E0  3000               	movlw	0
  3137  14E1  00E4               	movwf	?___fttol
  3138  14E2  0008               	return
  3139  14E3                     l3734:
  3140  14E3  1283               	bcf	3,5	;RP0=0, select bank0
  3141  14E4  0864               	movf	___fttol@f1,w
  3142  14E5  00E8               	movwf	??___fttol
  3143  14E6  0865               	movf	___fttol@f1+1,w
  3144  14E7  00E9               	movwf	??___fttol+1
  3145  14E8  0866               	movf	___fttol@f1+2,w
  3146  14E9  00EA               	movwf	??___fttol+2
  3147  14EA  3017               	movlw	23
  3148  14EB                     u3975:
  3149  14EB  1003               	clrc
  3150  14EC  0CEA               	rrf	??___fttol+2,f
  3151  14ED  0CE9               	rrf	??___fttol+1,f
  3152  14EE  0CE8               	rrf	??___fttol,f
  3153  14EF  3EFF               	addlw	-1
  3154  14F0  1D03               	skipz
  3155  14F1  2CEB               	goto	u3975
  3156  14F2  0868               	movf	??___fttol,w
  3157  14F3  00EB               	movwf	??___fttol+3
  3158  14F4  086B               	movf	??___fttol+3,w
  3159  14F5  1683               	bsf	3,5	;RP0=1, select bank1
  3160  14F6  00C8               	movwf	___fttol@sign1^(0+128)
  3161  14F7  1283               	bcf	3,5	;RP0=0, select bank0
  3162  14F8  17E5               	bsf	___fttol@f1+1,7
  3163  14F9  30FF               	movlw	255
  3164  14FA  05E4               	andwf	___fttol@f1,f
  3165  14FB  30FF               	movlw	255
  3166  14FC  05E5               	andwf	___fttol@f1+1,f
  3167  14FD  3000               	movlw	0
  3168  14FE  05E6               	andwf	___fttol@f1+2,f
  3169  14FF  0864               	movf	___fttol@f1,w
  3170  1500  1683               	bsf	3,5	;RP0=1, select bank1
  3171  1501  00C9               	movwf	___fttol@lval^(0+128)
  3172  1502  1283               	bcf	3,5	;RP0=0, select bank0
  3173  1503  0865               	movf	___fttol@f1+1,w
  3174  1504  1683               	bsf	3,5	;RP0=1, select bank1
  3175  1505  00CA               	movwf	(___fttol@lval^(0+128)+1)
  3176  1506  1283               	bcf	3,5	;RP0=0, select bank0
  3177  1507  0866               	movf	___fttol@f1+2,w
  3178  1508  1683               	bsf	3,5	;RP0=1, select bank1
  3179  1509  00CB               	movwf	(___fttol@lval^(0+128)+2)
  3180  150A  01CC               	clrf	(___fttol@lval^(0+128)+3)
  3181  150B  308E               	movlw	142
  3182  150C  02CD               	subwf	___fttol@exp1^(0+128),f
  3183  150D  1FCD               	btfss	___fttol@exp1^(0+128),7
  3184  150E  2D26               	goto	l3754
  3185  150F  084D               	movf	___fttol@exp1^(0+128),w
  3186  1510  3A80               	xorlw	128
  3187  1511  3E8F               	addlw	143
  3188  1512  1C03               	btfss	3,0
  3189  1513  2CD9               	goto	l3730
  3190  1514                     l3752:
  3191  1514  3001               	movlw	1
  3192  1515                     u4005:
  3193  1515  1003               	clrc
  3194  1516  0CCC               	rrf	(___fttol@lval+3)^(0+128),f
  3195  1517  0CCB               	rrf	(___fttol@lval+2)^(0+128),f
  3196  1518  0CCA               	rrf	(___fttol@lval+1)^(0+128),f
  3197  1519  0CC9               	rrf	___fttol@lval^(0+128),f
  3198  151A  3EFF               	addlw	-1
  3199  151B  1D03               	skipz
  3200  151C  2D15               	goto	u4005
  3201  151D  3001               	movlw	1
  3202  151E  1283               	bcf	3,5	;RP0=0, select bank0
  3203  151F  00E8               	movwf	??___fttol
  3204  1520  0868               	movf	??___fttol,w
  3205  1521  1683               	bsf	3,5	;RP0=1, select bank1
  3206  1522  07CD               	addwf	___fttol@exp1^(0+128),f
  3207  1523  1903               	btfsc	3,2
  3208  1524  2D3D               	goto	l3762
  3209  1525  2D14               	goto	l3752
  3210  1526                     l3754:
  3211  1526  3018               	movlw	24
  3212  1527  024D               	subwf	___fttol@exp1^(0+128),w
  3213  1528  1803               	btfsc	3,0
  3214  1529  2CD9               	goto	l3730
  3215  152A                     l1148:
  3216  152A  084D               	movf	___fttol@exp1^(0+128),w
  3217  152B  1903               	btfsc	3,2
  3218  152C  2D3D               	goto	l3762
  3219  152D  3001               	movlw	1
  3220  152E  1283               	bcf	3,5	;RP0=0, select bank0
  3221  152F  00E8               	movwf	??___fttol
  3222  1530                     u4035:
  3223  1530  1003               	clrc
  3224  1531  1683               	bsf	3,5	;RP0=1, select bank1
  3225  1532  0DC9               	rlf	___fttol@lval^(0+128),f
  3226  1533  0DCA               	rlf	(___fttol@lval+1)^(0+128),f
  3227  1534  0DCB               	rlf	(___fttol@lval+2)^(0+128),f
  3228  1535  0DCC               	rlf	(___fttol@lval+3)^(0+128),f
  3229  1536  1283               	bcf	3,5	;RP0=0, select bank0
  3230  1537  0BE8               	decfsz	??___fttol,f
  3231  1538  2D30               	goto	u4035
  3232  1539  3001               	movlw	1
  3233  153A  1683               	bsf	3,5	;RP0=1, select bank1
  3234  153B  02CD               	subwf	___fttol@exp1^(0+128),f
  3235  153C  2D2A               	goto	l1148
  3236  153D                     l3762:
  3237  153D  0848               	movf	___fttol@sign1^(0+128),w
  3238  153E  1903               	btfsc	3,2
  3239  153F  2D4B               	goto	l3766
  3240  1540  09C9               	comf	___fttol@lval^(0+128),f
  3241  1541  09CA               	comf	(___fttol@lval+1)^(0+128),f
  3242  1542  09CB               	comf	(___fttol@lval+2)^(0+128),f
  3243  1543  09CC               	comf	(___fttol@lval+3)^(0+128),f
  3244  1544  0AC9               	incf	___fttol@lval^(0+128),f
  3245  1545  1903               	skipnz
  3246  1546  0ACA               	incf	(___fttol@lval+1)^(0+128),f
  3247  1547  1903               	skipnz
  3248  1548  0ACB               	incf	(___fttol@lval+2)^(0+128),f
  3249  1549  1903               	skipnz
  3250  154A  0ACC               	incf	(___fttol@lval+3)^(0+128),f
  3251  154B                     l3766:
  3252  154B  084C               	movf	(___fttol@lval+3)^(0+128),w
  3253  154C  1283               	bcf	3,5	;RP0=0, select bank0
  3254  154D  00E7               	movwf	?___fttol+3
  3255  154E  1683               	bsf	3,5	;RP0=1, select bank1
  3256  154F  084B               	movf	(___fttol@lval+2)^(0+128),w
  3257  1550  1283               	bcf	3,5	;RP0=0, select bank0
  3258  1551  00E6               	movwf	?___fttol+2
  3259  1552  1683               	bsf	3,5	;RP0=1, select bank1
  3260  1553  084A               	movf	(___fttol@lval+1)^(0+128),w
  3261  1554  1283               	bcf	3,5	;RP0=0, select bank0
  3262  1555  00E5               	movwf	?___fttol+1
  3263  1556  1683               	bsf	3,5	;RP0=1, select bank1
  3264  1557  0849               	movf	___fttol@lval^(0+128),w
  3265  1558  1283               	bcf	3,5	;RP0=0, select bank0
  3266  1559  00E4               	movwf	?___fttol
  3267  155A  0008               	return
  3268  155B                     __end_of___fttol:
  3269                           
  3270                           	psect	text5
  3271  155B                     __ptext5:	
  3272 ;; *************** function ___ftdiv *****************
  3273 ;; Defined at:
  3274 ;;		line 56 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\ftdiv.c"
  3275 ;; Parameters:    Size  Location     Type
  3276 ;;  f2              3   52[BANK0 ] float 
  3277 ;;  f1              3   55[BANK0 ] float 
  3278 ;; Auto vars:     Size  Location     Type
  3279 ;;  f3              3   63[BANK0 ] float 
  3280 ;;  sign            1   67[BANK0 ] unsigned char 
  3281 ;;  exp             1   66[BANK0 ] unsigned char 
  3282 ;;  cntr            1   62[BANK0 ] unsigned char 
  3283 ;; Return value:  Size  Location     Type
  3284 ;;                  3   52[BANK0 ] float 
  3285 ;; Registers used:
  3286 ;;		wreg, status,2, status,0, pclath, cstack
  3287 ;; Tracked objects:
  3288 ;;		On entry : 300/0
  3289 ;;		On exit  : 300/0
  3290 ;;		Unchanged: 0/0
  3291 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3292 ;;      Params:         0       6       0       0       0
  3293 ;;      Locals:         0       6       0       0       0
  3294 ;;      Temps:          0       4       0       0       0
  3295 ;;      Totals:         0      16       0       0       0
  3296 ;;Total ram usage:       16 bytes
  3297 ;; Hardware stack levels used: 1
  3298 ;; Hardware stack levels required when called: 3
  3299 ;; This function calls:
  3300 ;;		___ftpack
  3301 ;; This function is called by:
  3302 ;;		_rThermistor
  3303 ;;		_rTemperature
  3304 ;; This function uses a non-reentrant model
  3305 ;;
  3306                           
  3307                           
  3308                           ;psect for function ___ftdiv
  3309  155B                     ___ftdiv:
  3310                           
  3311                           ;incstack = 0
  3312                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+pclath+cstack]
  3313  155B  0857               	movf	___ftdiv@f1,w
  3314  155C  00DA               	movwf	??___ftdiv
  3315  155D  0858               	movf	___ftdiv@f1+1,w
  3316  155E  00DB               	movwf	??___ftdiv+1
  3317  155F  0859               	movf	___ftdiv@f1+2,w
  3318  1560  00DC               	movwf	??___ftdiv+2
  3319  1561  1003               	clrc
  3320  1562  0D5B               	rlf	??___ftdiv+1,w
  3321  1563  0D5C               	rlf	??___ftdiv+2,w
  3322  1564  00DD               	movwf	??___ftdiv+3
  3323  1565  085D               	movf	??___ftdiv+3,w
  3324  1566  00E2               	movwf	___ftdiv@exp
  3325  1567  0862               	movf	___ftdiv@exp,w
  3326  1568  1D03               	btfss	3,2
  3327  1569  2D71               	goto	l3672
  3328  156A  3000               	movlw	0
  3329  156B  00D4               	movwf	?___ftdiv
  3330  156C  3000               	movlw	0
  3331  156D  00D5               	movwf	?___ftdiv+1
  3332  156E  3000               	movlw	0
  3333  156F  00D6               	movwf	?___ftdiv+2
  3334  1570  0008               	return
  3335  1571                     l3672:
  3336  1571  0854               	movf	___ftdiv@f2,w
  3337  1572  00DA               	movwf	??___ftdiv
  3338  1573  0855               	movf	___ftdiv@f2+1,w
  3339  1574  00DB               	movwf	??___ftdiv+1
  3340  1575  0856               	movf	___ftdiv@f2+2,w
  3341  1576  00DC               	movwf	??___ftdiv+2
  3342  1577  1003               	clrc
  3343  1578  0D5B               	rlf	??___ftdiv+1,w
  3344  1579  0D5C               	rlf	??___ftdiv+2,w
  3345  157A  00DD               	movwf	??___ftdiv+3
  3346  157B  085D               	movf	??___ftdiv+3,w
  3347  157C  00E3               	movwf	___ftdiv@sign
  3348  157D  0863               	movf	___ftdiv@sign,w
  3349  157E  1D03               	btfss	3,2
  3350  157F  2D87               	goto	l3678
  3351  1580  3000               	movlw	0
  3352  1581  00D4               	movwf	?___ftdiv
  3353  1582  3000               	movlw	0
  3354  1583  00D5               	movwf	?___ftdiv+1
  3355  1584  3000               	movlw	0
  3356  1585  00D6               	movwf	?___ftdiv+2
  3357  1586  0008               	return
  3358  1587                     l3678:
  3359  1587  3000               	movlw	0
  3360  1588  00DF               	movwf	___ftdiv@f3
  3361  1589  3000               	movlw	0
  3362  158A  00E0               	movwf	___ftdiv@f3+1
  3363  158B  3000               	movlw	0
  3364  158C  00E1               	movwf	___ftdiv@f3+2
  3365  158D  3089               	movlw	137
  3366  158E  0763               	addwf	___ftdiv@sign,w
  3367  158F  00DA               	movwf	??___ftdiv
  3368  1590  085A               	movf	??___ftdiv,w
  3369  1591  02E2               	subwf	___ftdiv@exp,f
  3370  1592  0859               	movf	___ftdiv@f1+2,w
  3371  1593  00DA               	movwf	??___ftdiv
  3372  1594  085A               	movf	??___ftdiv,w
  3373  1595  00E3               	movwf	___ftdiv@sign
  3374  1596  0856               	movf	___ftdiv@f2+2,w
  3375  1597  00DA               	movwf	??___ftdiv
  3376  1598  085A               	movf	??___ftdiv,w
  3377  1599  06E3               	xorwf	___ftdiv@sign,f
  3378  159A  3080               	movlw	128
  3379  159B  00DA               	movwf	??___ftdiv
  3380  159C  085A               	movf	??___ftdiv,w
  3381  159D  05E3               	andwf	___ftdiv@sign,f
  3382  159E  17D8               	bsf	___ftdiv@f1+1,7
  3383  159F  30FF               	movlw	255
  3384  15A0  05D7               	andwf	___ftdiv@f1,f
  3385  15A1  30FF               	movlw	255
  3386  15A2  05D8               	andwf	___ftdiv@f1+1,f
  3387  15A3  3000               	movlw	0
  3388  15A4  05D9               	andwf	___ftdiv@f1+2,f
  3389  15A5  17D5               	bsf	___ftdiv@f2+1,7
  3390  15A6  30FF               	movlw	255
  3391  15A7  05D4               	andwf	___ftdiv@f2,f
  3392  15A8  30FF               	movlw	255
  3393  15A9  05D5               	andwf	___ftdiv@f2+1,f
  3394  15AA  3000               	movlw	0
  3395  15AB  05D6               	andwf	___ftdiv@f2+2,f
  3396  15AC  3018               	movlw	24
  3397  15AD  00DA               	movwf	??___ftdiv
  3398  15AE  085A               	movf	??___ftdiv,w
  3399  15AF  00DE               	movwf	___ftdiv@cntr
  3400  15B0                     l3694:
  3401  15B0  3001               	movlw	1
  3402  15B1                     u3895:
  3403  15B1  1003               	clrc
  3404  15B2  0DDF               	rlf	___ftdiv@f3,f
  3405  15B3  0DE0               	rlf	___ftdiv@f3+1,f
  3406  15B4  0DE1               	rlf	___ftdiv@f3+2,f
  3407  15B5  3EFF               	addlw	-1
  3408  15B6  1D03               	skipz
  3409  15B7  2DB1               	goto	u3895
  3410  15B8  0856               	movf	___ftdiv@f2+2,w
  3411  15B9  0259               	subwf	___ftdiv@f1+2,w
  3412  15BA  1D03               	skipz
  3413  15BB  2DC2               	goto	u3905
  3414  15BC  0855               	movf	___ftdiv@f2+1,w
  3415  15BD  0258               	subwf	___ftdiv@f1+1,w
  3416  15BE  1D03               	skipz
  3417  15BF  2DC2               	goto	u3905
  3418  15C0  0854               	movf	___ftdiv@f2,w
  3419  15C1  0257               	subwf	___ftdiv@f1,w
  3420  15C2                     u3905:
  3421  15C2  1C03               	skipc
  3422  15C3  2DCF               	goto	l3700
  3423  15C4  0854               	movf	___ftdiv@f2,w
  3424  15C5  02D7               	subwf	___ftdiv@f1,f
  3425  15C6  0855               	movf	___ftdiv@f2+1,w
  3426  15C7  1C03               	skipc
  3427  15C8  0F55               	incfsz	___ftdiv@f2+1,w
  3428  15C9  02D8               	subwf	___ftdiv@f1+1,f
  3429  15CA  0856               	movf	___ftdiv@f2+2,w
  3430  15CB  1C03               	skipc
  3431  15CC  0A56               	incf	___ftdiv@f2+2,w
  3432  15CD  02D9               	subwf	___ftdiv@f1+2,f
  3433  15CE  145F               	bsf	___ftdiv@f3,0
  3434  15CF                     l3700:
  3435  15CF  3001               	movlw	1
  3436  15D0                     u3915:
  3437  15D0  1003               	clrc
  3438  15D1  0DD7               	rlf	___ftdiv@f1,f
  3439  15D2  0DD8               	rlf	___ftdiv@f1+1,f
  3440  15D3  0DD9               	rlf	___ftdiv@f1+2,f
  3441  15D4  3EFF               	addlw	-1
  3442  15D5  1D03               	skipz
  3443  15D6  2DD0               	goto	u3915
  3444  15D7  3001               	movlw	1
  3445  15D8  02DE               	subwf	___ftdiv@cntr,f
  3446  15D9  1D03               	btfss	3,2
  3447  15DA  2DB0               	goto	l3694
  3448  15DB  085F               	movf	___ftdiv@f3,w
  3449  15DC  00A0               	movwf	___ftpack@arg
  3450  15DD  0860               	movf	___ftdiv@f3+1,w
  3451  15DE  00A1               	movwf	___ftpack@arg+1
  3452  15DF  0861               	movf	___ftdiv@f3+2,w
  3453  15E0  00A2               	movwf	___ftpack@arg+2
  3454  15E1  0862               	movf	___ftdiv@exp,w
  3455  15E2  00DA               	movwf	??___ftdiv
  3456  15E3  085A               	movf	??___ftdiv,w
  3457  15E4  00A3               	movwf	___ftpack@exp
  3458  15E5  0863               	movf	___ftdiv@sign,w
  3459  15E6  00DB               	movwf	??___ftdiv+1
  3460  15E7  085B               	movf	??___ftdiv+1,w
  3461  15E8  00A4               	movwf	___ftpack@sign
  3462  15E9  160A  118A  22CD   	fcall	___ftpack
  3463  15EC  0820               	movf	?___ftpack,w
  3464  15ED  00D4               	movwf	?___ftdiv
  3465  15EE  0821               	movf	?___ftpack+1,w
  3466  15EF  00D5               	movwf	?___ftdiv+1
  3467  15F0  0822               	movf	?___ftpack+2,w
  3468  15F1  00D6               	movwf	?___ftdiv+2
  3469  15F2  0008               	return
  3470  15F3                     __end_of___ftdiv:
  3471                           
  3472                           	psect	text6
  3473  0668                     __ptext6:	
  3474 ;; *************** function _log *****************
  3475 ;; Defined at:
  3476 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\log.c"
  3477 ;; Parameters:    Size  Location     Type
  3478 ;;  x               3   14[BANK1 ] float 
  3479 ;; Auto vars:     Size  Location     Type
  3480 ;;  exponent        2   18[BANK1 ] int 
  3481 ;; Return value:  Size  Location     Type
  3482 ;;                  3   14[BANK1 ] int 
  3483 ;; Registers used:
  3484 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3485 ;; Tracked objects:
  3486 ;;		On entry : 300/100
  3487 ;;		On exit  : 300/100
  3488 ;;		Unchanged: 0/0
  3489 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3490 ;;      Params:         0       0       3       0       0
  3491 ;;      Locals:         0       0       2       0       0
  3492 ;;      Temps:          0       0       1       0       0
  3493 ;;      Totals:         0       0       6       0       0
  3494 ;;Total ram usage:        6 bytes
  3495 ;; Hardware stack levels used: 1
  3496 ;; Hardware stack levels required when called: 5
  3497 ;; This function calls:
  3498 ;;		___awtoft
  3499 ;;		___ftadd
  3500 ;;		___ftge
  3501 ;;		___ftmul
  3502 ;;		_eval_poly
  3503 ;;		_frexp
  3504 ;; This function is called by:
  3505 ;;		_rTemperature
  3506 ;; This function uses a non-reentrant model
  3507 ;;
  3508                           
  3509                           
  3510                           ;psect for function _log
  3511  0668                     _log:
  3512                           
  3513                           ;incstack = 0
  3514                           ; Regs used in _log: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  3515  0668  0856               	movf	log@x^(0+128),w
  3516  0669  1283               	bcf	3,5	;RP0=0, select bank0
  3517  066A  00A0               	movwf	___ftge@ff1
  3518  066B  1683               	bsf	3,5	;RP0=1, select bank1
  3519  066C  0857               	movf	(log@x+1)^(0+128),w
  3520  066D  1283               	bcf	3,5	;RP0=0, select bank0
  3521  066E  00A1               	movwf	___ftge@ff1+1
  3522  066F  1683               	bsf	3,5	;RP0=1, select bank1
  3523  0670  0858               	movf	(log@x+2)^(0+128),w
  3524  0671  1283               	bcf	3,5	;RP0=0, select bank0
  3525  0672  00A2               	movwf	___ftge@ff1+2
  3526  0673  3000               	movlw	0
  3527  0674  00A3               	movwf	___ftge@ff2
  3528  0675  3000               	movlw	0
  3529  0676  00A4               	movwf	___ftge@ff2+1
  3530  0677  3000               	movlw	0
  3531  0678  00A5               	movwf	___ftge@ff2+2
  3532  0679  160A  158A  2514  120A  118A  	fcall	___ftge
  3533  067E  1803               	btfsc	3,0
  3534  067F  2E8C               	goto	l4060
  3535  0680  3021               	movlw	33
  3536  0681  1683               	bsf	3,5	;RP0=1, select bank1
  3537  0682  00A8               	movwf	_errno^(0+128)
  3538  0683  3000               	movlw	0
  3539  0684  00A9               	movwf	(_errno^(0+128)+1)
  3540  0685  3000               	movlw	0
  3541  0686  00D6               	movwf	?_log^(0+128)
  3542  0687  3000               	movlw	0
  3543  0688  00D7               	movwf	(?_log+1)^(0+128)
  3544  0689  3000               	movlw	0
  3545  068A  00D8               	movwf	(?_log+2)^(0+128)
  3546  068B  0008               	return
  3547  068C                     l4060:
  3548  068C  1683               	bsf	3,5	;RP0=1, select bank1
  3549  068D  0858               	movf	(log@x+2)^(0+128),w
  3550  068E  0457               	iorwf	(log@x+1)^(0+128),w
  3551  068F  0456               	iorwf	log@x^(0+128),w
  3552  0690  1D03               	skipz
  3553  0691  2E9D               	goto	l4066
  3554  0692  3022               	movlw	34
  3555  0693  00A8               	movwf	_errno^(0+128)
  3556  0694  3000               	movlw	0
  3557  0695  00A9               	movwf	(_errno^(0+128)+1)
  3558  0696  3000               	movlw	0
  3559  0697  00D6               	movwf	?_log^(0+128)
  3560  0698  3000               	movlw	0
  3561  0699  00D7               	movwf	(?_log+1)^(0+128)
  3562  069A  3000               	movlw	0
  3563  069B  00D8               	movwf	(?_log+2)^(0+128)
  3564  069C  0008               	return
  3565  069D                     l4066:
  3566  069D  3000               	movlw	0
  3567  069E  1283               	bcf	3,5	;RP0=0, select bank0
  3568  069F  00B8               	movwf	___ftadd@f1
  3569  06A0  3080               	movlw	128
  3570  06A1  00B9               	movwf	___ftadd@f1+1
  3571  06A2  30BF               	movlw	191
  3572  06A3  00BA               	movwf	___ftadd@f1+2
  3573  06A4  3000               	movlw	0
  3574  06A5  00A8               	movwf	___ftmul@f1
  3575  06A6  3000               	movlw	0
  3576  06A7  00A9               	movwf	___ftmul@f1+1
  3577  06A8  3040               	movlw	64
  3578  06A9  00AA               	movwf	___ftmul@f1+2
  3579  06AA  30DA               	movlw	(low (log@exponent| 0))& (0+255)
  3580  06AB  1683               	bsf	3,5	;RP0=1, select bank1
  3581  06AC  00D9               	movwf	??_log^(0+128)
  3582  06AD  0859               	movf	??_log^(0+128),w
  3583  06AE  1283               	bcf	3,5	;RP0=0, select bank0
  3584  06AF  00A3               	movwf	frexp@eptr
  3585  06B0  1683               	bsf	3,5	;RP0=1, select bank1
  3586  06B1  0856               	movf	log@x^(0+128),w
  3587  06B2  1283               	bcf	3,5	;RP0=0, select bank0
  3588  06B3  00A0               	movwf	frexp@value
  3589  06B4  1683               	bsf	3,5	;RP0=1, select bank1
  3590  06B5  0857               	movf	(log@x+1)^(0+128),w
  3591  06B6  1283               	bcf	3,5	;RP0=0, select bank0
  3592  06B7  00A1               	movwf	frexp@value+1
  3593  06B8  1683               	bsf	3,5	;RP0=1, select bank1
  3594  06B9  0858               	movf	(log@x+2)^(0+128),w
  3595  06BA  1283               	bcf	3,5	;RP0=0, select bank0
  3596  06BB  00A2               	movwf	frexp@value+2
  3597  06BC  160A  158A  2653  120A  118A  	fcall	_frexp
  3598  06C1  0820               	movf	?_frexp,w
  3599  06C2  00AB               	movwf	___ftmul@f2
  3600  06C3  0821               	movf	?_frexp+1,w
  3601  06C4  00AC               	movwf	___ftmul@f2+1
  3602  06C5  0822               	movf	?_frexp+2,w
  3603  06C6  00AD               	movwf	___ftmul@f2+2
  3604  06C7  120A  118A  274B  120A  118A  	fcall	___ftmul
  3605  06CC  0828               	movf	?___ftmul,w
  3606  06CD  00BB               	movwf	___ftadd@f2
  3607  06CE  0829               	movf	?___ftmul+1,w
  3608  06CF  00BC               	movwf	___ftadd@f2+1
  3609  06D0  082A               	movf	?___ftmul+2,w
  3610  06D1  00BD               	movwf	___ftadd@f2+2
  3611  06D2  120A  118A  2563  120A  118A  	fcall	___ftadd
  3612  06D7  0838               	movf	?___ftadd,w
  3613  06D8  1683               	bsf	3,5	;RP0=1, select bank1
  3614  06D9  00D6               	movwf	log@x^(0+128)
  3615  06DA  1283               	bcf	3,5	;RP0=0, select bank0
  3616  06DB  0839               	movf	?___ftadd+1,w
  3617  06DC  1683               	bsf	3,5	;RP0=1, select bank1
  3618  06DD  00D7               	movwf	(log@x+1)^(0+128)
  3619  06DE  1283               	bcf	3,5	;RP0=0, select bank0
  3620  06DF  083A               	movf	?___ftadd+2,w
  3621  06E0  1683               	bsf	3,5	;RP0=1, select bank1
  3622  06E1  00D8               	movwf	(log@x+2)^(0+128)
  3623  06E2  30FF               	movlw	255
  3624  06E3  07DA               	addwf	log@exponent^(0+128),f
  3625  06E4  1803               	skipnc
  3626  06E5  0ADB               	incf	(log@exponent+1)^(0+128),f
  3627  06E6  30FF               	movlw	255
  3628  06E7  07DB               	addwf	(log@exponent+1)^(0+128),f
  3629  06E8  0856               	movf	log@x^(0+128),w
  3630  06E9  1283               	bcf	3,5	;RP0=0, select bank0
  3631  06EA  00C5               	movwf	eval_poly@x
  3632  06EB  1683               	bsf	3,5	;RP0=1, select bank1
  3633  06EC  0857               	movf	(log@x+1)^(0+128),w
  3634  06ED  1283               	bcf	3,5	;RP0=0, select bank0
  3635  06EE  00C6               	movwf	eval_poly@x+1
  3636  06EF  1683               	bsf	3,5	;RP0=1, select bank1
  3637  06F0  0858               	movf	(log@x+2)^(0+128),w
  3638  06F1  1283               	bcf	3,5	;RP0=0, select bank0
  3639  06F2  00C7               	movwf	eval_poly@x+2
  3640  06F3  305C               	movlw	low (log@coeff| (0+32768))
  3641  06F4  00C8               	movwf	eval_poly@d
  3642  06F5  3090               	movlw	high (log@coeff| (0+32768))
  3643  06F6  00C9               	movwf	eval_poly@d+1
  3644  06F7  3008               	movlw	8
  3645  06F8  00CA               	movwf	eval_poly@n
  3646  06F9  3000               	movlw	0
  3647  06FA  00CB               	movwf	eval_poly@n+1
  3648  06FB  160A  118A  243E  120A  118A  	fcall	_eval_poly
  3649  0700  0845               	movf	?_eval_poly,w
  3650  0701  1683               	bsf	3,5	;RP0=1, select bank1
  3651  0702  00D6               	movwf	log@x^(0+128)
  3652  0703  1283               	bcf	3,5	;RP0=0, select bank0
  3653  0704  0846               	movf	?_eval_poly+1,w
  3654  0705  1683               	bsf	3,5	;RP0=1, select bank1
  3655  0706  00D7               	movwf	(log@x+1)^(0+128)
  3656  0707  1283               	bcf	3,5	;RP0=0, select bank0
  3657  0708  0847               	movf	?_eval_poly+2,w
  3658  0709  1683               	bsf	3,5	;RP0=1, select bank1
  3659  070A  00D8               	movwf	(log@x+2)^(0+128)
  3660  070B  0856               	movf	log@x^(0+128),w
  3661  070C  1283               	bcf	3,5	;RP0=0, select bank0
  3662  070D  00B8               	movwf	___ftadd@f1
  3663  070E  1683               	bsf	3,5	;RP0=1, select bank1
  3664  070F  0857               	movf	(log@x+1)^(0+128),w
  3665  0710  1283               	bcf	3,5	;RP0=0, select bank0
  3666  0711  00B9               	movwf	___ftadd@f1+1
  3667  0712  1683               	bsf	3,5	;RP0=1, select bank1
  3668  0713  0858               	movf	(log@x+2)^(0+128),w
  3669  0714  1283               	bcf	3,5	;RP0=0, select bank0
  3670  0715  00BA               	movwf	___ftadd@f1+2
  3671  0716  3072               	movlw	114
  3672  0717  00A8               	movwf	___ftmul@f1
  3673  0718  3031               	movlw	49
  3674  0719  00A9               	movwf	___ftmul@f1+1
  3675  071A  303F               	movlw	63
  3676  071B  00AA               	movwf	___ftmul@f1+2
  3677  071C  1683               	bsf	3,5	;RP0=1, select bank1
  3678  071D  085B               	movf	(log@exponent+1)^(0+128),w
  3679  071E  00D3               	movwf	(___awtoft@c+1)^(0+128)
  3680  071F  085A               	movf	log@exponent^(0+128),w
  3681  0720  00D2               	movwf	___awtoft@c^(0+128)
  3682  0721  160A  158A  24BD  120A  118A  	fcall	___awtoft
  3683  0726  0852               	movf	?___awtoft^(0+128),w
  3684  0727  1283               	bcf	3,5	;RP0=0, select bank0
  3685  0728  00AB               	movwf	___ftmul@f2
  3686  0729  1683               	bsf	3,5	;RP0=1, select bank1
  3687  072A  0853               	movf	(?___awtoft+1)^(0+128),w
  3688  072B  1283               	bcf	3,5	;RP0=0, select bank0
  3689  072C  00AC               	movwf	___ftmul@f2+1
  3690  072D  1683               	bsf	3,5	;RP0=1, select bank1
  3691  072E  0854               	movf	(?___awtoft+2)^(0+128),w
  3692  072F  1283               	bcf	3,5	;RP0=0, select bank0
  3693  0730  00AD               	movwf	___ftmul@f2+2
  3694  0731  120A  118A  274B  120A  118A  	fcall	___ftmul
  3695  0736  0828               	movf	?___ftmul,w
  3696  0737  00BB               	movwf	___ftadd@f2
  3697  0738  0829               	movf	?___ftmul+1,w
  3698  0739  00BC               	movwf	___ftadd@f2+1
  3699  073A  082A               	movf	?___ftmul+2,w
  3700  073B  00BD               	movwf	___ftadd@f2+2
  3701  073C  120A  118A  2563   	fcall	___ftadd
  3702  073F  0838               	movf	?___ftadd,w
  3703  0740  1683               	bsf	3,5	;RP0=1, select bank1
  3704  0741  00D6               	movwf	?_log^(0+128)
  3705  0742  1283               	bcf	3,5	;RP0=0, select bank0
  3706  0743  0839               	movf	?___ftadd+1,w
  3707  0744  1683               	bsf	3,5	;RP0=1, select bank1
  3708  0745  00D7               	movwf	(?_log+1)^(0+128)
  3709  0746  1283               	bcf	3,5	;RP0=0, select bank0
  3710  0747  083A               	movf	?___ftadd+2,w
  3711  0748  1683               	bsf	3,5	;RP0=1, select bank1
  3712  0749  00D8               	movwf	(?_log+2)^(0+128)
  3713  074A  0008               	return
  3714  074B                     __end_of_log:
  3715                           
  3716                           	psect	text7
  3717  1E53                     __ptext7:	
  3718 ;; *************** function _frexp *****************
  3719 ;; Defined at:
  3720 ;;		line 254 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\frexp.c"
  3721 ;; Parameters:    Size  Location     Type
  3722 ;;  value           3    0[BANK0 ] int 
  3723 ;;  eptr            1    3[BANK0 ] PTR int 
  3724 ;;		 -> log@exponent(2), 
  3725 ;; Auto vars:     Size  Location     Type
  3726 ;;		None
  3727 ;; Return value:  Size  Location     Type
  3728 ;;                  3    0[BANK0 ] PTR int 
  3729 ;; Registers used:
  3730 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1
  3731 ;; Tracked objects:
  3732 ;;		On entry : 300/0
  3733 ;;		On exit  : B00/0
  3734 ;;		Unchanged: 0/0
  3735 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3736 ;;      Params:         0       4       0       0       0
  3737 ;;      Locals:         0       0       0       0       0
  3738 ;;      Temps:          0       2       0       0       0
  3739 ;;      Totals:         0       6       0       0       0
  3740 ;;Total ram usage:        6 bytes
  3741 ;; Hardware stack levels used: 1
  3742 ;; Hardware stack levels required when called: 2
  3743 ;; This function calls:
  3744 ;;		Nothing
  3745 ;; This function is called by:
  3746 ;;		_log
  3747 ;; This function uses a non-reentrant model
  3748 ;;
  3749                           
  3750                           
  3751                           ;psect for function _frexp
  3752  1E53                     _frexp:
  3753                           
  3754                           ;incstack = 0
  3755                           ; Regs used in _frexp: [wreg-fsr0h+status,2+status,0+btemp+1]
  3756  1E53  0822               	movf	frexp@value+2,w
  3757  1E54  0421               	iorwf	frexp@value+1,w
  3758  1E55  0420               	iorwf	frexp@value,w
  3759  1E56  1D03               	skipz
  3760  1E57  2E65               	goto	l3830
  3761  1E58  0823               	movf	frexp@eptr,w
  3762  1E59  0084               	movwf	4
  3763  1E5A  1383               	bcf	3,7	;select IRP bank0
  3764  1E5B  0180               	clrf	0
  3765  1E5C  0A84               	incf	4,f
  3766  1E5D  0180               	clrf	0
  3767  1E5E  3000               	movlw	0
  3768  1E5F  00A0               	movwf	?_frexp
  3769  1E60  3000               	movlw	0
  3770  1E61  00A1               	movwf	?_frexp+1
  3771  1E62  3000               	movlw	0
  3772  1E63  00A2               	movwf	?_frexp+2
  3773  1E64  0008               	return
  3774  1E65                     l3830:
  3775  1E65  0822               	movf	frexp@value+2,w
  3776  1E66  397F               	andlw	127
  3777  1E67  00A4               	movwf	??_frexp
  3778  1E68  01A5               	clrf	??_frexp+1
  3779  1E69  1003               	clrc
  3780  1E6A  0DA4               	rlf	??_frexp,f
  3781  1E6B  0DA5               	rlf	??_frexp+1,f
  3782  1E6C  0823               	movf	frexp@eptr,w
  3783  1E6D  0084               	movwf	4
  3784  1E6E  0824               	movf	??_frexp,w
  3785  1E6F  1383               	bcf	3,7	;select IRP bank0
  3786  1E70  0080               	movwf	0
  3787  1E71  0A84               	incf	4,f
  3788  1E72  0825               	movf	??_frexp+1,w
  3789  1E73  0080               	movwf	0
  3790  1E74  0D21               	rlf	frexp@value+1,w
  3791  1E75  0D21               	rlf	frexp@value+1,w
  3792  1E76  3901               	andlw	1
  3793  1E77  00A4               	movwf	??_frexp
  3794  1E78  01A5               	clrf	??_frexp+1
  3795  1E79  0823               	movf	frexp@eptr,w
  3796  1E7A  0084               	movwf	4
  3797  1E7B  0824               	movf	??_frexp,w
  3798  1E7C  0480               	iorwf	0,f
  3799  1E7D  0A84               	incf	4,f
  3800  1E7E  0825               	movf	??_frexp+1,w
  3801  1E7F  0480               	iorwf	0,f
  3802  1E80  0823               	movf	frexp@eptr,w
  3803  1E81  0084               	movwf	4
  3804  1E82  3082               	movlw	130
  3805  1E83  0780               	addwf	0,f
  3806  1E84  0F84               	incfsz	4,f
  3807  1E85  0800               	movf	0,w
  3808  1E86  1803               	skipnc
  3809  1E87  0A00               	incf	0,w
  3810  1E88  00FF               	movwf	127
  3811  1E89  30FF               	movlw	255
  3812  1E8A  077F               	addwf	127,w
  3813  1E8B  0080               	movwf	0
  3814  1E8C  0384               	decf	4,f
  3815  1E8D  0822               	movf	frexp@value+2,w
  3816  1E8E  3980               	andlw	-128
  3817  1E8F  383F               	iorlw	63
  3818  1E90  00A2               	movwf	frexp@value+2
  3819  1E91  13A1               	bcf	frexp@value+1,7
  3820  1E92  0008               	return
  3821  1E93                     __end_of_frexp:
  3822                           
  3823                           	psect	text8
  3824  143E                     __ptext8:	
  3825 ;; *************** function _eval_poly *****************
  3826 ;; Defined at:
  3827 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\evalpoly.c"
  3828 ;; Parameters:    Size  Location     Type
  3829 ;;  x               3   37[BANK0 ] PTR int 
  3830 ;;  d               2   40[BANK0 ] PTR const 
  3831 ;;		 -> log@coeff(27), 
  3832 ;;  n               2   42[BANK0 ] int 
  3833 ;; Auto vars:     Size  Location     Type
  3834 ;;  res             3   49[BANK0 ] int 
  3835 ;; Return value:  Size  Location     Type
  3836 ;;                  3   37[BANK0 ] int 
  3837 ;; Registers used:
  3838 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3839 ;; Tracked objects:
  3840 ;;		On entry : 300/0
  3841 ;;		On exit  : 300/0
  3842 ;;		Unchanged: 0/0
  3843 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3844 ;;      Params:         0       7       0       0       0
  3845 ;;      Locals:         0       3       0       0       0
  3846 ;;      Temps:          0       5       0       0       0
  3847 ;;      Totals:         0      15       0       0       0
  3848 ;;Total ram usage:       15 bytes
  3849 ;; Hardware stack levels used: 1
  3850 ;; Hardware stack levels required when called: 4
  3851 ;; This function calls:
  3852 ;;		___bmul
  3853 ;;		___ftadd
  3854 ;;		___ftmul
  3855 ;; This function is called by:
  3856 ;;		_log
  3857 ;; This function uses a non-reentrant model
  3858 ;;
  3859                           
  3860                           
  3861                           ;psect for function _eval_poly
  3862  143E                     _eval_poly:
  3863                           
  3864                           ;incstack = 0
  3865                           ; Regs used in _eval_poly: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  3866  143E  3003               	movlw	3
  3867  143F  00CC               	movwf	??_eval_poly
  3868  1440  084C               	movf	??_eval_poly,w
  3869  1441  00A9               	movwf	___bmul@multiplicand
  3870  1442  084A               	movf	eval_poly@n,w
  3871  1443  160A  158A  23F3  160A  118A  	fcall	___bmul
  3872  1448  00CD               	movwf	??_eval_poly+1
  3873  1449  084D               	movf	??_eval_poly+1,w
  3874  144A  0748               	addwf	eval_poly@d,w
  3875  144B  00CF               	movwf	??_eval_poly+3
  3876  144C  0849               	movf	eval_poly@d+1,w
  3877  144D  00CE               	movwf	??_eval_poly+2
  3878  144E  1803               	skipnc
  3879  144F  0ACE               	incf	??_eval_poly+2,f
  3880  1450  1BCD               	btfsc	??_eval_poly+1,7
  3881  1451  03CE               	decf	??_eval_poly+2,f
  3882  1452  084E               	movf	??_eval_poly+2,w
  3883  1453  00D0               	movwf	??_eval_poly+4
  3884  1454  0850               	movf	??_eval_poly+4,w
  3885  1455  00FF               	movwf	127
  3886  1456  084F               	movf	??_eval_poly+3,w
  3887  1457  0084               	movwf	4
  3888  1458  160A  118A  2000  160A  118A  	fcall	stringtab
  3889  145D  00D1               	movwf	eval_poly@res
  3890  145E  160A  118A  2000  160A  118A  	fcall	stringtab
  3891  1463  00D2               	movwf	eval_poly@res+1
  3892  1464  160A  118A  2000  160A  118A  	fcall	stringtab
  3893  1469                     L1:
  3894  1469  00D3               	movwf	eval_poly@res+2
  3895  146A  084A               	movf	eval_poly@n,w
  3896  146B  044B               	iorwf	eval_poly@n+1,w
  3897  146C  1903               	btfsc	3,2
  3898  146D  2CC2               	goto	l3848
  3899  146E  3003               	movlw	3
  3900  146F  00CC               	movwf	??_eval_poly
  3901  1470  084C               	movf	??_eval_poly,w
  3902  1471  00A9               	movwf	___bmul@multiplicand
  3903  1472  30FF               	movlw	255
  3904  1473  07CA               	addwf	eval_poly@n,f
  3905  1474  1803               	skipnc
  3906  1475  0ACB               	incf	eval_poly@n+1,f
  3907  1476  30FF               	movlw	255
  3908  1477  07CB               	addwf	eval_poly@n+1,f
  3909  1478  084A               	movf	eval_poly@n,w
  3910  1479  160A  158A  23F3  160A  118A  	fcall	___bmul
  3911  147E  00CD               	movwf	??_eval_poly+1
  3912  147F  084D               	movf	??_eval_poly+1,w
  3913  1480  0748               	addwf	eval_poly@d,w
  3914  1481  00CF               	movwf	??_eval_poly+3
  3915  1482  0849               	movf	eval_poly@d+1,w
  3916  1483  00CE               	movwf	??_eval_poly+2
  3917  1484  1803               	skipnc
  3918  1485  0ACE               	incf	??_eval_poly+2,f
  3919  1486  1BCD               	btfsc	??_eval_poly+1,7
  3920  1487  03CE               	decf	??_eval_poly+2,f
  3921  1488  084E               	movf	??_eval_poly+2,w
  3922  1489  00D0               	movwf	??_eval_poly+4
  3923  148A  0850               	movf	??_eval_poly+4,w
  3924  148B  00FF               	movwf	127
  3925  148C  084F               	movf	??_eval_poly+3,w
  3926  148D  0084               	movwf	4
  3927  148E  160A  118A  2000  160A  118A  	fcall	stringtab
  3928  1493  00B8               	movwf	___ftadd@f1
  3929  1494  160A  118A  2000  160A  118A  	fcall	stringtab
  3930  1499  00B9               	movwf	___ftadd@f1+1
  3931  149A  160A  118A  2000  160A  118A  	fcall	stringtab
  3932  149F  00BA               	movwf	___ftadd@f1+2
  3933  14A0  0851               	movf	eval_poly@res,w
  3934  14A1  00A8               	movwf	___ftmul@f1
  3935  14A2  0852               	movf	eval_poly@res+1,w
  3936  14A3  00A9               	movwf	___ftmul@f1+1
  3937  14A4  0853               	movf	eval_poly@res+2,w
  3938  14A5  00AA               	movwf	___ftmul@f1+2
  3939  14A6  0845               	movf	eval_poly@x,w
  3940  14A7  00AB               	movwf	___ftmul@f2
  3941  14A8  0846               	movf	eval_poly@x+1,w
  3942  14A9  00AC               	movwf	___ftmul@f2+1
  3943  14AA  0847               	movf	eval_poly@x+2,w
  3944  14AB  00AD               	movwf	___ftmul@f2+2
  3945  14AC  120A  118A  274B  160A  118A  	fcall	___ftmul
  3946  14B1  0828               	movf	?___ftmul,w
  3947  14B2  00BB               	movwf	___ftadd@f2
  3948  14B3  0829               	movf	?___ftmul+1,w
  3949  14B4  00BC               	movwf	___ftadd@f2+1
  3950  14B5  082A               	movf	?___ftmul+2,w
  3951  14B6  00BD               	movwf	___ftadd@f2+2
  3952  14B7  120A  118A  2563  160A  118A  	fcall	___ftadd
  3953  14BC  0838               	movf	?___ftadd,w
  3954  14BD  00D1               	movwf	eval_poly@res
  3955  14BE  0839               	movf	?___ftadd+1,w
  3956  14BF  00D2               	movwf	eval_poly@res+1
  3957  14C0  083A               	movf	?___ftadd+2,w
  3958  14C1  2C69               	goto	L1
  3959  14C2                     l3848:
  3960  14C2  0851               	movf	eval_poly@res,w
  3961  14C3  00C5               	movwf	?_eval_poly
  3962  14C4  0852               	movf	eval_poly@res+1,w
  3963  14C5  00C6               	movwf	?_eval_poly+1
  3964  14C6  0853               	movf	eval_poly@res+2,w
  3965  14C7  00C7               	movwf	?_eval_poly+2
  3966  14C8  0008               	return
  3967  14C9                     __end_of_eval_poly:
  3968                           
  3969                           	psect	text9
  3970  074B                     __ptext9:	
  3971 ;; *************** function ___ftmul *****************
  3972 ;; Defined at:
  3973 ;;		line 62 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\ftmul.c"
  3974 ;; Parameters:    Size  Location     Type
  3975 ;;  f1              3    8[BANK0 ] float 
  3976 ;;  f2              3   11[BANK0 ] float 
  3977 ;; Auto vars:     Size  Location     Type
  3978 ;;  f3_as_produc    3   19[BANK0 ] unsigned um
  3979 ;;  sign            1   23[BANK0 ] unsigned char 
  3980 ;;  cntr            1   22[BANK0 ] unsigned char 
  3981 ;;  exp             1   18[BANK0 ] unsigned char 
  3982 ;; Return value:  Size  Location     Type
  3983 ;;                  3    8[BANK0 ] float 
  3984 ;; Registers used:
  3985 ;;		wreg, status,2, status,0, pclath, cstack
  3986 ;; Tracked objects:
  3987 ;;		On entry : 300/0
  3988 ;;		On exit  : 300/0
  3989 ;;		Unchanged: 0/0
  3990 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3991 ;;      Params:         0       6       0       0       0
  3992 ;;      Locals:         0       6       0       0       0
  3993 ;;      Temps:          0       4       0       0       0
  3994 ;;      Totals:         0      16       0       0       0
  3995 ;;Total ram usage:       16 bytes
  3996 ;; Hardware stack levels used: 1
  3997 ;; Hardware stack levels required when called: 3
  3998 ;; This function calls:
  3999 ;;		___ftpack
  4000 ;; This function is called by:
  4001 ;;		_rThermistor
  4002 ;;		_log
  4003 ;;		_eval_poly
  4004 ;; This function uses a non-reentrant model
  4005 ;;
  4006                           
  4007                           
  4008                           ;psect for function ___ftmul
  4009  074B                     ___ftmul:
  4010                           
  4011                           ;incstack = 0
  4012                           ; Regs used in ___ftmul: [wreg+status,2+status,0+pclath+cstack]
  4013  074B  0828               	movf	___ftmul@f1,w
  4014  074C  00AE               	movwf	??___ftmul
  4015  074D  0829               	movf	___ftmul@f1+1,w
  4016  074E  00AF               	movwf	??___ftmul+1
  4017  074F  082A               	movf	___ftmul@f1+2,w
  4018  0750  00B0               	movwf	??___ftmul+2
  4019  0751  1003               	clrc
  4020  0752  0D2F               	rlf	??___ftmul+1,w
  4021  0753  0D30               	rlf	??___ftmul+2,w
  4022  0754  00B1               	movwf	??___ftmul+3
  4023  0755  0831               	movf	??___ftmul+3,w
  4024  0756  00B2               	movwf	___ftmul@exp
  4025  0757  0832               	movf	___ftmul@exp,w
  4026  0758  1D03               	btfss	3,2
  4027  0759  2F61               	goto	l3562
  4028  075A  3000               	movlw	0
  4029  075B  00A8               	movwf	?___ftmul
  4030  075C  3000               	movlw	0
  4031  075D  00A9               	movwf	?___ftmul+1
  4032  075E  3000               	movlw	0
  4033  075F  00AA               	movwf	?___ftmul+2
  4034  0760  0008               	return
  4035  0761                     l3562:
  4036  0761  082B               	movf	___ftmul@f2,w
  4037  0762  00AE               	movwf	??___ftmul
  4038  0763  082C               	movf	___ftmul@f2+1,w
  4039  0764  00AF               	movwf	??___ftmul+1
  4040  0765  082D               	movf	___ftmul@f2+2,w
  4041  0766  00B0               	movwf	??___ftmul+2
  4042  0767  1003               	clrc
  4043  0768  0D2F               	rlf	??___ftmul+1,w
  4044  0769  0D30               	rlf	??___ftmul+2,w
  4045  076A  00B1               	movwf	??___ftmul+3
  4046  076B  0831               	movf	??___ftmul+3,w
  4047  076C  00B7               	movwf	___ftmul@sign
  4048  076D  0837               	movf	___ftmul@sign,w
  4049  076E  1D03               	btfss	3,2
  4050  076F  2F77               	goto	l3568
  4051  0770  3000               	movlw	0
  4052  0771  00A8               	movwf	?___ftmul
  4053  0772  3000               	movlw	0
  4054  0773  00A9               	movwf	?___ftmul+1
  4055  0774  3000               	movlw	0
  4056  0775  00AA               	movwf	?___ftmul+2
  4057  0776  0008               	return
  4058  0777                     l3568:
  4059  0777  0837               	movf	___ftmul@sign,w
  4060  0778  3E7B               	addlw	123
  4061  0779  00AE               	movwf	??___ftmul
  4062  077A  082E               	movf	??___ftmul,w
  4063  077B  07B2               	addwf	___ftmul@exp,f
  4064  077C  082A               	movf	___ftmul@f1+2,w
  4065  077D  00AE               	movwf	??___ftmul
  4066  077E  082E               	movf	??___ftmul,w
  4067  077F  00B7               	movwf	___ftmul@sign
  4068  0780  082D               	movf	___ftmul@f2+2,w
  4069  0781  00AE               	movwf	??___ftmul
  4070  0782  082E               	movf	??___ftmul,w
  4071  0783  06B7               	xorwf	___ftmul@sign,f
  4072  0784  3080               	movlw	128
  4073  0785  00AE               	movwf	??___ftmul
  4074  0786  082E               	movf	??___ftmul,w
  4075  0787  05B7               	andwf	___ftmul@sign,f
  4076  0788  17A9               	bsf	___ftmul@f1+1,7
  4077  0789  17AC               	bsf	___ftmul@f2+1,7
  4078  078A  30FF               	movlw	255
  4079  078B  05AB               	andwf	___ftmul@f2,f
  4080  078C  30FF               	movlw	255
  4081  078D  05AC               	andwf	___ftmul@f2+1,f
  4082  078E  3000               	movlw	0
  4083  078F  05AD               	andwf	___ftmul@f2+2,f
  4084  0790  3000               	movlw	0
  4085  0791  00B3               	movwf	___ftmul@f3_as_product
  4086  0792  3000               	movlw	0
  4087  0793  00B4               	movwf	___ftmul@f3_as_product+1
  4088  0794  3000               	movlw	0
  4089  0795  00B5               	movwf	___ftmul@f3_as_product+2
  4090  0796  3007               	movlw	7
  4091  0797  00AE               	movwf	??___ftmul
  4092  0798  082E               	movf	??___ftmul,w
  4093  0799  00B6               	movwf	___ftmul@cntr
  4094  079A                     l3586:
  4095  079A  1C28               	btfss	___ftmul@f1,0
  4096  079B  2FAA               	goto	l3590
  4097  079C  082B               	movf	___ftmul@f2,w
  4098  079D  07B3               	addwf	___ftmul@f3_as_product,f
  4099  079E  082C               	movf	___ftmul@f2+1,w
  4100  079F  1103               	clrz
  4101  07A0  1803               	skipnc
  4102  07A1  0A2C               	incf	___ftmul@f2+1,w
  4103  07A2  1D03               	btfss	3,2
  4104  07A3  07B4               	addwf	___ftmul@f3_as_product+1,f
  4105  07A4  082D               	movf	___ftmul@f2+2,w
  4106  07A5  1103               	clrz
  4107  07A6  1803               	skipnc
  4108  07A7  0A2D               	incf	___ftmul@f2+2,w
  4109  07A8  1D03               	btfss	3,2
  4110  07A9  07B5               	addwf	___ftmul@f3_as_product+2,f
  4111  07AA                     l3590:
  4112  07AA  3001               	movlw	1
  4113  07AB                     u3725:
  4114  07AB  1003               	clrc
  4115  07AC  0CAA               	rrf	___ftmul@f1+2,f
  4116  07AD  0CA9               	rrf	___ftmul@f1+1,f
  4117  07AE  0CA8               	rrf	___ftmul@f1,f
  4118  07AF  3EFF               	addlw	-1
  4119  07B0  1D03               	skipz
  4120  07B1  2FAB               	goto	u3725
  4121  07B2  3001               	movlw	1
  4122  07B3                     u3735:
  4123  07B3  1003               	clrc
  4124  07B4  0DAB               	rlf	___ftmul@f2,f
  4125  07B5  0DAC               	rlf	___ftmul@f2+1,f
  4126  07B6  0DAD               	rlf	___ftmul@f2+2,f
  4127  07B7  3EFF               	addlw	-1
  4128  07B8  1D03               	skipz
  4129  07B9  2FB3               	goto	u3735
  4130  07BA  3001               	movlw	1
  4131  07BB  02B6               	subwf	___ftmul@cntr,f
  4132  07BC  1D03               	btfss	3,2
  4133  07BD  2F9A               	goto	l3586
  4134  07BE  3009               	movlw	9
  4135  07BF  00AE               	movwf	??___ftmul
  4136  07C0  082E               	movf	??___ftmul,w
  4137  07C1  00B6               	movwf	___ftmul@cntr
  4138  07C2                     l3598:
  4139  07C2  1C28               	btfss	___ftmul@f1,0
  4140  07C3  2FD2               	goto	l3602
  4141  07C4  082B               	movf	___ftmul@f2,w
  4142  07C5  07B3               	addwf	___ftmul@f3_as_product,f
  4143  07C6  082C               	movf	___ftmul@f2+1,w
  4144  07C7  1103               	clrz
  4145  07C8  1803               	skipnc
  4146  07C9  0A2C               	incf	___ftmul@f2+1,w
  4147  07CA  1D03               	btfss	3,2
  4148  07CB  07B4               	addwf	___ftmul@f3_as_product+1,f
  4149  07CC  082D               	movf	___ftmul@f2+2,w
  4150  07CD  1103               	clrz
  4151  07CE  1803               	skipnc
  4152  07CF  0A2D               	incf	___ftmul@f2+2,w
  4153  07D0  1D03               	btfss	3,2
  4154  07D1  07B5               	addwf	___ftmul@f3_as_product+2,f
  4155  07D2                     l3602:
  4156  07D2  3001               	movlw	1
  4157  07D3                     u3775:
  4158  07D3  1003               	clrc
  4159  07D4  0CAA               	rrf	___ftmul@f1+2,f
  4160  07D5  0CA9               	rrf	___ftmul@f1+1,f
  4161  07D6  0CA8               	rrf	___ftmul@f1,f
  4162  07D7  3EFF               	addlw	-1
  4163  07D8  1D03               	skipz
  4164  07D9  2FD3               	goto	u3775
  4165  07DA  3001               	movlw	1
  4166  07DB                     u3785:
  4167  07DB  1003               	clrc
  4168  07DC  0CB5               	rrf	___ftmul@f3_as_product+2,f
  4169  07DD  0CB4               	rrf	___ftmul@f3_as_product+1,f
  4170  07DE  0CB3               	rrf	___ftmul@f3_as_product,f
  4171  07DF  3EFF               	addlw	-1
  4172  07E0  1D03               	skipz
  4173  07E1  2FDB               	goto	u3785
  4174  07E2  3001               	movlw	1
  4175  07E3  02B6               	subwf	___ftmul@cntr,f
  4176  07E4  1D03               	btfss	3,2
  4177  07E5  2FC2               	goto	l3598
  4178  07E6  0833               	movf	___ftmul@f3_as_product,w
  4179  07E7  00A0               	movwf	___ftpack@arg
  4180  07E8  0834               	movf	___ftmul@f3_as_product+1,w
  4181  07E9  00A1               	movwf	___ftpack@arg+1
  4182  07EA  0835               	movf	___ftmul@f3_as_product+2,w
  4183  07EB  00A2               	movwf	___ftpack@arg+2
  4184  07EC  0832               	movf	___ftmul@exp,w
  4185  07ED  00AE               	movwf	??___ftmul
  4186  07EE  082E               	movf	??___ftmul,w
  4187  07EF  00A3               	movwf	___ftpack@exp
  4188  07F0  0837               	movf	___ftmul@sign,w
  4189  07F1  00AF               	movwf	??___ftmul+1
  4190  07F2  082F               	movf	??___ftmul+1,w
  4191  07F3  00A4               	movwf	___ftpack@sign
  4192  07F4  160A  118A  22CD   	fcall	___ftpack
  4193  07F7  0820               	movf	?___ftpack,w
  4194  07F8  00A8               	movwf	?___ftmul
  4195  07F9  0821               	movf	?___ftpack+1,w
  4196  07FA  00A9               	movwf	?___ftmul+1
  4197  07FB  0822               	movf	?___ftpack+2,w
  4198  07FC  00AA               	movwf	?___ftmul+2
  4199  07FD  0008               	return
  4200  07FE                     __end_of___ftmul:
  4201                           
  4202                           	psect	text10
  4203  0563                     __ptext10:	
  4204 ;; *************** function ___ftadd *****************
  4205 ;; Defined at:
  4206 ;;		line 86 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\ftadd.c"
  4207 ;; Parameters:    Size  Location     Type
  4208 ;;  f1              3   24[BANK0 ] float 
  4209 ;;  f2              3   27[BANK0 ] float 
  4210 ;; Auto vars:     Size  Location     Type
  4211 ;;  exp1            1   36[BANK0 ] unsigned char 
  4212 ;;  exp2            1   35[BANK0 ] unsigned char 
  4213 ;;  sign            1   34[BANK0 ] unsigned char 
  4214 ;; Return value:  Size  Location     Type
  4215 ;;                  3   24[BANK0 ] float 
  4216 ;; Registers used:
  4217 ;;		wreg, status,2, status,0, pclath, cstack
  4218 ;; Tracked objects:
  4219 ;;		On entry : 300/0
  4220 ;;		On exit  : 300/0
  4221 ;;		Unchanged: 0/0
  4222 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4223 ;;      Params:         0       6       0       0       0
  4224 ;;      Locals:         0       3       0       0       0
  4225 ;;      Temps:          0       4       0       0       0
  4226 ;;      Totals:         0      13       0       0       0
  4227 ;;Total ram usage:       13 bytes
  4228 ;; Hardware stack levels used: 1
  4229 ;; Hardware stack levels required when called: 3
  4230 ;; This function calls:
  4231 ;;		___ftpack
  4232 ;; This function is called by:
  4233 ;;		_rThermistor
  4234 ;;		_rTemperature
  4235 ;;		_log
  4236 ;;		_eval_poly
  4237 ;; This function uses a non-reentrant model
  4238 ;;
  4239                           
  4240                           
  4241                           ;psect for function ___ftadd
  4242  0563                     ___ftadd:
  4243                           
  4244                           ;incstack = 0
  4245                           ; Regs used in ___ftadd: [wreg+status,2+status,0+pclath+cstack]
  4246  0563  0838               	movf	___ftadd@f1,w
  4247  0564  00BE               	movwf	??___ftadd
  4248  0565  0839               	movf	___ftadd@f1+1,w
  4249  0566  00BF               	movwf	??___ftadd+1
  4250  0567  083A               	movf	___ftadd@f1+2,w
  4251  0568  00C0               	movwf	??___ftadd+2
  4252  0569  1003               	clrc
  4253  056A  0D3F               	rlf	??___ftadd+1,w
  4254  056B  0D40               	rlf	??___ftadd+2,w
  4255  056C  00C1               	movwf	??___ftadd+3
  4256  056D  0841               	movf	??___ftadd+3,w
  4257  056E  00C4               	movwf	___ftadd@exp1
  4258  056F  083B               	movf	___ftadd@f2,w
  4259  0570  00BE               	movwf	??___ftadd
  4260  0571  083C               	movf	___ftadd@f2+1,w
  4261  0572  00BF               	movwf	??___ftadd+1
  4262  0573  083D               	movf	___ftadd@f2+2,w
  4263  0574  00C0               	movwf	??___ftadd+2
  4264  0575  1003               	clrc
  4265  0576  0D3F               	rlf	??___ftadd+1,w
  4266  0577  0D40               	rlf	??___ftadd+2,w
  4267  0578  00C1               	movwf	??___ftadd+3
  4268  0579  0841               	movf	??___ftadd+3,w
  4269  057A  00C3               	movwf	___ftadd@exp2
  4270  057B  0844               	movf	___ftadd@exp1,w
  4271  057C  1903               	btfsc	3,2
  4272  057D  2D8A               	goto	l3492
  4273  057E  0843               	movf	___ftadd@exp2,w
  4274  057F  0244               	subwf	___ftadd@exp1,w
  4275  0580  1803               	skipnc
  4276  0581  2D91               	goto	l3496
  4277  0582  0843               	movf	___ftadd@exp2,w
  4278  0583  00BE               	movwf	??___ftadd
  4279  0584  0844               	movf	___ftadd@exp1,w
  4280  0585  02BE               	subwf	??___ftadd,f
  4281  0586  3019               	movlw	25
  4282  0587  023E               	subwf	??___ftadd,w
  4283  0588  1C03               	skipc
  4284  0589  2D91               	goto	l3496
  4285  058A                     l3492:
  4286  058A  083B               	movf	___ftadd@f2,w
  4287  058B  00B8               	movwf	?___ftadd
  4288  058C  083C               	movf	___ftadd@f2+1,w
  4289  058D  00B9               	movwf	?___ftadd+1
  4290  058E  083D               	movf	___ftadd@f2+2,w
  4291  058F  00BA               	movwf	?___ftadd+2
  4292  0590  0008               	return
  4293  0591                     l3496:
  4294  0591  0843               	movf	___ftadd@exp2,w
  4295  0592  1903               	btfsc	3,2
  4296  0593  0008               	return
  4297  0594  0844               	movf	___ftadd@exp1,w
  4298  0595  0243               	subwf	___ftadd@exp2,w
  4299  0596  1803               	skipnc
  4300  0597  2DA0               	goto	l3502
  4301  0598  0844               	movf	___ftadd@exp1,w
  4302  0599  00BE               	movwf	??___ftadd
  4303  059A  0843               	movf	___ftadd@exp2,w
  4304  059B  02BE               	subwf	??___ftadd,f
  4305  059C  3019               	movlw	25
  4306  059D  023E               	subwf	??___ftadd,w
  4307  059E  1803               	btfsc	3,0
  4308  059F  0008               	return
  4309  05A0                     l3502:
  4310  05A0  3006               	movlw	6
  4311  05A1  00BE               	movwf	??___ftadd
  4312  05A2  083E               	movf	??___ftadd,w
  4313  05A3  00C2               	movwf	___ftadd@sign
  4314  05A4  1BBA               	btfsc	___ftadd@f1+2,7
  4315  05A5  17C2               	bsf	___ftadd@sign,7
  4316  05A6  1BBD               	btfsc	___ftadd@f2+2,7
  4317  05A7  1742               	bsf	___ftadd@sign,6
  4318  05A8  17B9               	bsf	___ftadd@f1+1,7
  4319  05A9  30FF               	movlw	255
  4320  05AA  05B8               	andwf	___ftadd@f1,f
  4321  05AB  30FF               	movlw	255
  4322  05AC  05B9               	andwf	___ftadd@f1+1,f
  4323  05AD  3000               	movlw	0
  4324  05AE  05BA               	andwf	___ftadd@f1+2,f
  4325  05AF  17BC               	bsf	___ftadd@f2+1,7
  4326  05B0  30FF               	movlw	255
  4327  05B1  05BB               	andwf	___ftadd@f2,f
  4328  05B2  30FF               	movlw	255
  4329  05B3  05BC               	andwf	___ftadd@f2+1,f
  4330  05B4  3000               	movlw	0
  4331  05B5  05BD               	andwf	___ftadd@f2+2,f
  4332  05B6  0843               	movf	___ftadd@exp2,w
  4333  05B7  0244               	subwf	___ftadd@exp1,w
  4334  05B8  1803               	skipnc
  4335  05B9  2DE0               	goto	l3524
  4336  05BA                     l3514:
  4337  05BA  3001               	movlw	1
  4338  05BB                     u3535:
  4339  05BB  1003               	clrc
  4340  05BC  0DBB               	rlf	___ftadd@f2,f
  4341  05BD  0DBC               	rlf	___ftadd@f2+1,f
  4342  05BE  0DBD               	rlf	___ftadd@f2+2,f
  4343  05BF  3EFF               	addlw	-1
  4344  05C0  1D03               	skipz
  4345  05C1  2DBB               	goto	u3535
  4346  05C2  3001               	movlw	1
  4347  05C3  02C3               	subwf	___ftadd@exp2,f
  4348  05C4  0843               	movf	___ftadd@exp2,w
  4349  05C5  0644               	xorwf	___ftadd@exp1,w
  4350  05C6  1903               	skipnz
  4351  05C7  2DDB               	goto	l3522
  4352  05C8  3001               	movlw	1
  4353  05C9  02C2               	subwf	___ftadd@sign,f
  4354  05CA  0842               	movf	___ftadd@sign,w
  4355  05CB  3907               	andlw	7
  4356  05CC  1903               	btfsc	3,2
  4357  05CD  2DDB               	goto	l3522
  4358  05CE  2DBA               	goto	l3514
  4359  05CF                     l3520:
  4360  05CF  3001               	movlw	1
  4361  05D0                     u3565:
  4362  05D0  1003               	clrc
  4363  05D1  0CBA               	rrf	___ftadd@f1+2,f
  4364  05D2  0CB9               	rrf	___ftadd@f1+1,f
  4365  05D3  0CB8               	rrf	___ftadd@f1,f
  4366  05D4  3EFF               	addlw	-1
  4367  05D5  1D03               	skipz
  4368  05D6  2DD0               	goto	u3565
  4369  05D7  3001               	movlw	1
  4370  05D8  00BE               	movwf	??___ftadd
  4371  05D9  083E               	movf	??___ftadd,w
  4372  05DA  07C4               	addwf	___ftadd@exp1,f
  4373  05DB                     l3522:
  4374  05DB  0844               	movf	___ftadd@exp1,w
  4375  05DC  0643               	xorwf	___ftadd@exp2,w
  4376  05DD  1903               	btfsc	3,2
  4377  05DE  2E09               	goto	l1088
  4378  05DF  2DCF               	goto	l3520
  4379  05E0                     l3524:
  4380  05E0  0844               	movf	___ftadd@exp1,w
  4381  05E1  0243               	subwf	___ftadd@exp2,w
  4382  05E2  1803               	skipnc
  4383  05E3  2E09               	goto	l1088
  4384  05E4                     l3526:
  4385  05E4  3001               	movlw	1
  4386  05E5                     u3595:
  4387  05E5  1003               	clrc
  4388  05E6  0DB8               	rlf	___ftadd@f1,f
  4389  05E7  0DB9               	rlf	___ftadd@f1+1,f
  4390  05E8  0DBA               	rlf	___ftadd@f1+2,f
  4391  05E9  3EFF               	addlw	-1
  4392  05EA  1D03               	skipz
  4393  05EB  2DE5               	goto	u3595
  4394  05EC  3001               	movlw	1
  4395  05ED  02C4               	subwf	___ftadd@exp1,f
  4396  05EE  0843               	movf	___ftadd@exp2,w
  4397  05EF  0644               	xorwf	___ftadd@exp1,w
  4398  05F0  1903               	skipnz
  4399  05F1  2E05               	goto	l3534
  4400  05F2  3001               	movlw	1
  4401  05F3  02C2               	subwf	___ftadd@sign,f
  4402  05F4  0842               	movf	___ftadd@sign,w
  4403  05F5  3907               	andlw	7
  4404  05F6  1903               	btfsc	3,2
  4405  05F7  2E05               	goto	l3534
  4406  05F8  2DE4               	goto	l3526
  4407  05F9                     l3532:
  4408  05F9  3001               	movlw	1
  4409  05FA                     u3625:
  4410  05FA  1003               	clrc
  4411  05FB  0CBD               	rrf	___ftadd@f2+2,f
  4412  05FC  0CBC               	rrf	___ftadd@f2+1,f
  4413  05FD  0CBB               	rrf	___ftadd@f2,f
  4414  05FE  3EFF               	addlw	-1
  4415  05FF  1D03               	skipz
  4416  0600  2DFA               	goto	u3625
  4417  0601  3001               	movlw	1
  4418  0602  00BE               	movwf	??___ftadd
  4419  0603  083E               	movf	??___ftadd,w
  4420  0604  07C3               	addwf	___ftadd@exp2,f
  4421  0605                     l3534:
  4422  0605  0844               	movf	___ftadd@exp1,w
  4423  0606  0643               	xorwf	___ftadd@exp2,w
  4424  0607  1D03               	skipz
  4425  0608  2DF9               	goto	l3532
  4426  0609                     l1088:
  4427  0609  1FC2               	btfss	___ftadd@sign,7
  4428  060A  2E1B               	goto	l3538
  4429  060B  30FF               	movlw	255
  4430  060C  06B8               	xorwf	___ftadd@f1,f
  4431  060D  30FF               	movlw	255
  4432  060E  06B9               	xorwf	___ftadd@f1+1,f
  4433  060F  30FF               	movlw	255
  4434  0610  06BA               	xorwf	___ftadd@f1+2,f
  4435  0611  3001               	movlw	1
  4436  0612  07B8               	addwf	___ftadd@f1,f
  4437  0613  3000               	movlw	0
  4438  0614  1803               	skipnc
  4439  0615  3001               	movlw	1
  4440  0616  07B9               	addwf	___ftadd@f1+1,f
  4441  0617  3000               	movlw	0
  4442  0618  1803               	skipnc
  4443  0619  3001               	movlw	1
  4444  061A  07BA               	addwf	___ftadd@f1+2,f
  4445  061B                     l3538:
  4446  061B  1F42               	btfss	___ftadd@sign,6
  4447  061C  2E2D               	goto	l3542
  4448  061D  30FF               	movlw	255
  4449  061E  06BB               	xorwf	___ftadd@f2,f
  4450  061F  30FF               	movlw	255
  4451  0620  06BC               	xorwf	___ftadd@f2+1,f
  4452  0621  30FF               	movlw	255
  4453  0622  06BD               	xorwf	___ftadd@f2+2,f
  4454  0623  3001               	movlw	1
  4455  0624  07BB               	addwf	___ftadd@f2,f
  4456  0625  3000               	movlw	0
  4457  0626  1803               	skipnc
  4458  0627  3001               	movlw	1
  4459  0628  07BC               	addwf	___ftadd@f2+1,f
  4460  0629  3000               	movlw	0
  4461  062A  1803               	skipnc
  4462  062B  3001               	movlw	1
  4463  062C  07BD               	addwf	___ftadd@f2+2,f
  4464  062D                     l3542:
  4465  062D  01C2               	clrf	___ftadd@sign
  4466  062E  0838               	movf	___ftadd@f1,w
  4467  062F  07BB               	addwf	___ftadd@f2,f
  4468  0630  0839               	movf	___ftadd@f1+1,w
  4469  0631  1103               	clrz
  4470  0632  1803               	skipnc
  4471  0633  0A39               	incf	___ftadd@f1+1,w
  4472  0634  1D03               	btfss	3,2
  4473  0635  07BC               	addwf	___ftadd@f2+1,f
  4474  0636  083A               	movf	___ftadd@f1+2,w
  4475  0637  1103               	clrz
  4476  0638  1803               	skipnc
  4477  0639  0A3A               	incf	___ftadd@f1+2,w
  4478  063A  1D03               	btfss	3,2
  4479  063B  07BD               	addwf	___ftadd@f2+2,f
  4480  063C  1FBD               	btfss	___ftadd@f2+2,7
  4481  063D  2E50               	goto	l3552
  4482  063E  30FF               	movlw	255
  4483  063F  06BB               	xorwf	___ftadd@f2,f
  4484  0640  30FF               	movlw	255
  4485  0641  06BC               	xorwf	___ftadd@f2+1,f
  4486  0642  30FF               	movlw	255
  4487  0643  06BD               	xorwf	___ftadd@f2+2,f
  4488  0644  3001               	movlw	1
  4489  0645  07BB               	addwf	___ftadd@f2,f
  4490  0646  3000               	movlw	0
  4491  0647  1803               	skipnc
  4492  0648  3001               	movlw	1
  4493  0649  07BC               	addwf	___ftadd@f2+1,f
  4494  064A  3000               	movlw	0
  4495  064B  1803               	skipnc
  4496  064C  3001               	movlw	1
  4497  064D  07BD               	addwf	___ftadd@f2+2,f
  4498  064E  01C2               	clrf	___ftadd@sign
  4499  064F  0AC2               	incf	___ftadd@sign,f
  4500  0650                     l3552:
  4501  0650  083B               	movf	___ftadd@f2,w
  4502  0651  00A0               	movwf	___ftpack@arg
  4503  0652  083C               	movf	___ftadd@f2+1,w
  4504  0653  00A1               	movwf	___ftpack@arg+1
  4505  0654  083D               	movf	___ftadd@f2+2,w
  4506  0655  00A2               	movwf	___ftpack@arg+2
  4507  0656  0844               	movf	___ftadd@exp1,w
  4508  0657  00BE               	movwf	??___ftadd
  4509  0658  083E               	movf	??___ftadd,w
  4510  0659  00A3               	movwf	___ftpack@exp
  4511  065A  0842               	movf	___ftadd@sign,w
  4512  065B  00BF               	movwf	??___ftadd+1
  4513  065C  083F               	movf	??___ftadd+1,w
  4514  065D  00A4               	movwf	___ftpack@sign
  4515  065E  160A  118A  22CD   	fcall	___ftpack
  4516  0661  0820               	movf	?___ftpack,w
  4517  0662  00B8               	movwf	?___ftadd
  4518  0663  0821               	movf	?___ftpack+1,w
  4519  0664  00B9               	movwf	?___ftadd+1
  4520  0665  0822               	movf	?___ftpack+2,w
  4521  0666  00BA               	movwf	?___ftadd+2
  4522  0667  0008               	return
  4523  0668                     __end_of___ftadd:
  4524                           
  4525                           	psect	text11
  4526  1D14                     __ptext11:	
  4527 ;; *************** function ___ftge *****************
  4528 ;; Defined at:
  4529 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\ftge.c"
  4530 ;; Parameters:    Size  Location     Type
  4531 ;;  ff1             3    0[BANK0 ] float 
  4532 ;;  ff2             3    3[BANK0 ] float 
  4533 ;; Auto vars:     Size  Location     Type
  4534 ;;		None
  4535 ;; Return value:  Size  Location     Type
  4536 ;;		None               void
  4537 ;; Registers used:
  4538 ;;		wreg, status,2, status,0
  4539 ;; Tracked objects:
  4540 ;;		On entry : 300/0
  4541 ;;		On exit  : 300/0
  4542 ;;		Unchanged: 0/0
  4543 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4544 ;;      Params:         0       6       0       0       0
  4545 ;;      Locals:         0       0       0       0       0
  4546 ;;      Temps:          0       0       0       0       0
  4547 ;;      Totals:         0       6       0       0       0
  4548 ;;Total ram usage:        6 bytes
  4549 ;; Hardware stack levels used: 1
  4550 ;; Hardware stack levels required when called: 2
  4551 ;; This function calls:
  4552 ;;		Nothing
  4553 ;; This function is called by:
  4554 ;;		_log
  4555 ;; This function uses a non-reentrant model
  4556 ;;
  4557                           
  4558                           
  4559                           ;psect for function ___ftge
  4560  1D14                     ___ftge:
  4561                           
  4562                           ;incstack = 0
  4563                           ; Regs used in ___ftge: [wreg+status,2+status,0]
  4564  1D14  1FA2               	btfss	___ftge@ff1+2,7
  4565  1D15  2D23               	goto	l3712
  4566  1D16  0820               	movf	___ftge@ff1,w
  4567  1D17  3C00               	sublw	0
  4568  1D18  00A0               	movwf	___ftge@ff1
  4569  1D19  0821               	movf	___ftge@ff1+1,w
  4570  1D1A  1C03               	skipc
  4571  1D1B  0F21               	incfsz	___ftge@ff1+1,w
  4572  1D1C  3C00               	sublw	0
  4573  1D1D  00A1               	movwf	___ftge@ff1+1
  4574  1D1E  0822               	movf	___ftge@ff1+2,w
  4575  1D1F  1C03               	skipc
  4576  1D20  0F22               	incfsz	___ftge@ff1+2,w
  4577  1D21  3C80               	sublw	128
  4578  1D22  00A2               	movwf	___ftge@ff1+2
  4579  1D23                     l3712:
  4580  1D23  1FA5               	btfss	___ftge@ff2+2,7
  4581  1D24  2D32               	goto	l3716
  4582  1D25  0823               	movf	___ftge@ff2,w
  4583  1D26  3C00               	sublw	0
  4584  1D27  00A3               	movwf	___ftge@ff2
  4585  1D28  0824               	movf	___ftge@ff2+1,w
  4586  1D29  1C03               	skipc
  4587  1D2A  0F24               	incfsz	___ftge@ff2+1,w
  4588  1D2B  3C00               	sublw	0
  4589  1D2C  00A4               	movwf	___ftge@ff2+1
  4590  1D2D  0825               	movf	___ftge@ff2+2,w
  4591  1D2E  1C03               	skipc
  4592  1D2F  0F25               	incfsz	___ftge@ff2+2,w
  4593  1D30  3C80               	sublw	128
  4594  1D31  00A5               	movwf	___ftge@ff2+2
  4595  1D32                     l3716:
  4596  1D32  3080               	movlw	128
  4597  1D33  06A2               	xorwf	___ftge@ff1+2,f
  4598  1D34  3080               	movlw	128
  4599  1D35  06A5               	xorwf	___ftge@ff2+2,f
  4600  1D36  0825               	movf	___ftge@ff2+2,w
  4601  1D37  0222               	subwf	___ftge@ff1+2,w
  4602  1D38  1D03               	skipz
  4603  1D39  0008               	return
  4604  1D3A  0824               	movf	___ftge@ff2+1,w
  4605  1D3B  0221               	subwf	___ftge@ff1+1,w
  4606  1D3C  1D03               	skipz
  4607  1D3D  0008               	return
  4608  1D3E  0823               	movf	___ftge@ff2,w
  4609  1D3F  0220               	subwf	___ftge@ff1,w
  4610  1D40  0008               	return
  4611  1D41                     __end_of___ftge:
  4612                           
  4613                           	psect	text12
  4614  1CBD                     __ptext12:	
  4615 ;; *************** function ___awtoft *****************
  4616 ;; Defined at:
  4617 ;;		line 32 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\awtoft.c"
  4618 ;; Parameters:    Size  Location     Type
  4619 ;;  c               2   10[BANK1 ] int 
  4620 ;; Auto vars:     Size  Location     Type
  4621 ;;  sign            1   13[BANK1 ] unsigned char 
  4622 ;; Return value:  Size  Location     Type
  4623 ;;                  3   10[BANK1 ] float 
  4624 ;; Registers used:
  4625 ;;		wreg, status,2, status,0, pclath, cstack
  4626 ;; Tracked objects:
  4627 ;;		On entry : 300/100
  4628 ;;		On exit  : 300/100
  4629 ;;		Unchanged: 0/0
  4630 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4631 ;;      Params:         0       0       3       0       0
  4632 ;;      Locals:         0       0       1       0       0
  4633 ;;      Temps:          0       2       0       0       0
  4634 ;;      Totals:         0       2       4       0       0
  4635 ;;Total ram usage:        6 bytes
  4636 ;; Hardware stack levels used: 1
  4637 ;; Hardware stack levels required when called: 3
  4638 ;; This function calls:
  4639 ;;		___ftpack
  4640 ;; This function is called by:
  4641 ;;		_rTemperature
  4642 ;;		_log
  4643 ;; This function uses a non-reentrant model
  4644 ;;
  4645                           
  4646                           
  4647                           ;psect for function ___awtoft
  4648  1CBD                     ___awtoft:
  4649                           
  4650                           ;incstack = 0
  4651                           ; Regs used in ___awtoft: [wreg+status,2+status,0+pclath+cstack]
  4652  1CBD  01D5               	clrf	___awtoft@sign^(0+128)
  4653  1CBE  1FD3               	btfss	(___awtoft@c+1)^(0+128),7
  4654  1CBF  2CC7               	goto	l3662
  4655  1CC0  09D2               	comf	___awtoft@c^(0+128),f
  4656  1CC1  09D3               	comf	(___awtoft@c+1)^(0+128),f
  4657  1CC2  0AD2               	incf	___awtoft@c^(0+128),f
  4658  1CC3  1903               	skipnz
  4659  1CC4  0AD3               	incf	(___awtoft@c+1)^(0+128),f
  4660  1CC5  01D5               	clrf	___awtoft@sign^(0+128)
  4661  1CC6  0AD5               	incf	___awtoft@sign^(0+128),f
  4662  1CC7                     l3662:
  4663  1CC7  0852               	movf	___awtoft@c^(0+128),w
  4664  1CC8  1283               	bcf	3,5	;RP0=0, select bank0
  4665  1CC9  00A0               	movwf	___ftpack@arg
  4666  1CCA  1683               	bsf	3,5	;RP0=1, select bank1
  4667  1CCB  0853               	movf	(___awtoft@c+1)^(0+128),w
  4668  1CCC  1283               	bcf	3,5	;RP0=0, select bank0
  4669  1CCD  00A1               	movwf	___ftpack@arg+1
  4670  1CCE  01A2               	clrf	___ftpack@arg+2
  4671  1CCF  308E               	movlw	142
  4672  1CD0  00EE               	movwf	??___awtoft
  4673  1CD1  086E               	movf	??___awtoft,w
  4674  1CD2  00A3               	movwf	___ftpack@exp
  4675  1CD3  1683               	bsf	3,5	;RP0=1, select bank1
  4676  1CD4  0855               	movf	___awtoft@sign^(0+128),w
  4677  1CD5  1283               	bcf	3,5	;RP0=0, select bank0
  4678  1CD6  00EF               	movwf	??___awtoft+1
  4679  1CD7  086F               	movf	??___awtoft+1,w
  4680  1CD8  00A4               	movwf	___ftpack@sign
  4681  1CD9  160A  118A  22CD   	fcall	___ftpack
  4682  1CDC  0820               	movf	?___ftpack,w
  4683  1CDD  1683               	bsf	3,5	;RP0=1, select bank1
  4684  1CDE  00D2               	movwf	?___awtoft^(0+128)
  4685  1CDF  1283               	bcf	3,5	;RP0=0, select bank0
  4686  1CE0  0821               	movf	?___ftpack+1,w
  4687  1CE1  1683               	bsf	3,5	;RP0=1, select bank1
  4688  1CE2  00D3               	movwf	(?___awtoft+1)^(0+128)
  4689  1CE3  1283               	bcf	3,5	;RP0=0, select bank0
  4690  1CE4  0822               	movf	?___ftpack+2,w
  4691  1CE5  1683               	bsf	3,5	;RP0=1, select bank1
  4692  1CE6  00D4               	movwf	(?___awtoft+2)^(0+128)
  4693  1CE7  0008               	return
  4694  1CE8                     __end_of___awtoft:
  4695                           
  4696                           	psect	text13
  4697  12CD                     __ptext13:	
  4698 ;; *************** function ___ftpack *****************
  4699 ;; Defined at:
  4700 ;;		line 62 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\float.c"
  4701 ;; Parameters:    Size  Location     Type
  4702 ;;  arg             3    0[BANK0 ] unsigned um
  4703 ;;  exp             1    3[BANK0 ] unsigned char 
  4704 ;;  sign            1    4[BANK0 ] unsigned char 
  4705 ;; Auto vars:     Size  Location     Type
  4706 ;;		None
  4707 ;; Return value:  Size  Location     Type
  4708 ;;                  3    0[BANK0 ] float 
  4709 ;; Registers used:
  4710 ;;		wreg, status,2, status,0
  4711 ;; Tracked objects:
  4712 ;;		On entry : 300/0
  4713 ;;		On exit  : 300/0
  4714 ;;		Unchanged: 0/0
  4715 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4716 ;;      Params:         0       5       0       0       0
  4717 ;;      Locals:         0       0       0       0       0
  4718 ;;      Temps:          0       3       0       0       0
  4719 ;;      Totals:         0       8       0       0       0
  4720 ;;Total ram usage:        8 bytes
  4721 ;; Hardware stack levels used: 1
  4722 ;; Hardware stack levels required when called: 2
  4723 ;; This function calls:
  4724 ;;		Nothing
  4725 ;; This function is called by:
  4726 ;;		___awtoft
  4727 ;;		___ftadd
  4728 ;;		___ftdiv
  4729 ;;		___ftmul
  4730 ;;		___lbtoft
  4731 ;; This function uses a non-reentrant model
  4732 ;;
  4733                           
  4734                           
  4735                           ;psect for function ___ftpack
  4736  12CD                     ___ftpack:
  4737                           
  4738                           ;incstack = 0
  4739                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
  4740  12CD  0823               	movf	___ftpack@exp,w
  4741  12CE  1903               	btfsc	3,2
  4742  12CF  2AD5               	goto	l3420
  4743  12D0  0822               	movf	___ftpack@arg+2,w
  4744  12D1  0421               	iorwf	___ftpack@arg+1,w
  4745  12D2  0420               	iorwf	___ftpack@arg,w
  4746  12D3  1D03               	skipz
  4747  12D4  2AE8               	goto	l3426
  4748  12D5                     l3420:
  4749  12D5  3000               	movlw	0
  4750  12D6  00A0               	movwf	?___ftpack
  4751  12D7  3000               	movlw	0
  4752  12D8  00A1               	movwf	?___ftpack+1
  4753  12D9  3000               	movlw	0
  4754  12DA  00A2               	movwf	?___ftpack+2
  4755  12DB  0008               	return
  4756  12DC                     l3424:
  4757  12DC  3001               	movlw	1
  4758  12DD  00A5               	movwf	??___ftpack
  4759  12DE  0825               	movf	??___ftpack,w
  4760  12DF  07A3               	addwf	___ftpack@exp,f
  4761  12E0  3001               	movlw	1
  4762  12E1                     u3315:
  4763  12E1  1003               	clrc
  4764  12E2  0CA2               	rrf	___ftpack@arg+2,f
  4765  12E3  0CA1               	rrf	___ftpack@arg+1,f
  4766  12E4  0CA0               	rrf	___ftpack@arg,f
  4767  12E5  3EFF               	addlw	-1
  4768  12E6  1D03               	skipz
  4769  12E7  2AE1               	goto	u3315
  4770  12E8                     l3426:
  4771  12E8  30FE               	movlw	254
  4772  12E9  0522               	andwf	___ftpack@arg+2,w
  4773  12EA  1903               	btfsc	3,2
  4774  12EB  2B03               	goto	l1057
  4775  12EC  2ADC               	goto	l3424
  4776  12ED                     l3428:
  4777  12ED  3001               	movlw	1
  4778  12EE  00A5               	movwf	??___ftpack
  4779  12EF  0825               	movf	??___ftpack,w
  4780  12F0  07A3               	addwf	___ftpack@exp,f
  4781  12F1  3001               	movlw	1
  4782  12F2  07A0               	addwf	___ftpack@arg,f
  4783  12F3  3000               	movlw	0
  4784  12F4  1803               	skipnc
  4785  12F5  3001               	movlw	1
  4786  12F6  07A1               	addwf	___ftpack@arg+1,f
  4787  12F7  3000               	movlw	0
  4788  12F8  1803               	skipnc
  4789  12F9  3001               	movlw	1
  4790  12FA  07A2               	addwf	___ftpack@arg+2,f
  4791  12FB  3001               	movlw	1
  4792  12FC                     u3335:
  4793  12FC  1003               	clrc
  4794  12FD  0CA2               	rrf	___ftpack@arg+2,f
  4795  12FE  0CA1               	rrf	___ftpack@arg+1,f
  4796  12FF  0CA0               	rrf	___ftpack@arg,f
  4797  1300  3EFF               	addlw	-1
  4798  1301  1D03               	skipz
  4799  1302  2AFC               	goto	u3335
  4800  1303                     l1057:
  4801  1303  30FF               	movlw	255
  4802  1304  0522               	andwf	___ftpack@arg+2,w
  4803  1305  1903               	btfsc	3,2
  4804  1306  2B16               	goto	l3436
  4805  1307  2AED               	goto	l3428
  4806  1308                     l3438:
  4807  1308  3002               	movlw	2
  4808  1309  0223               	subwf	___ftpack@exp,w
  4809  130A  1C03               	btfss	3,0
  4810  130B  2B18               	goto	l1064
  4811  130C  3001               	movlw	1
  4812  130D  02A3               	subwf	___ftpack@exp,f
  4813  130E  3001               	movlw	1
  4814  130F                     u3355:
  4815  130F  1003               	clrc
  4816  1310  0DA0               	rlf	___ftpack@arg,f
  4817  1311  0DA1               	rlf	___ftpack@arg+1,f
  4818  1312  0DA2               	rlf	___ftpack@arg+2,f
  4819  1313  3EFF               	addlw	-1
  4820  1314  1D03               	skipz
  4821  1315  2B0F               	goto	u3355
  4822  1316                     l3436:
  4823  1316  1FA1               	btfss	___ftpack@arg+1,7
  4824  1317  2B08               	goto	l3438
  4825  1318                     l1064:
  4826  1318  1823               	btfsc	___ftpack@exp,0
  4827  1319  2B20               	goto	l1065
  4828  131A  30FF               	movlw	255
  4829  131B  05A0               	andwf	___ftpack@arg,f
  4830  131C  307F               	movlw	127
  4831  131D  05A1               	andwf	___ftpack@arg+1,f
  4832  131E  30FF               	movlw	255
  4833  131F  05A2               	andwf	___ftpack@arg+2,f
  4834  1320                     l1065:
  4835  1320  1003               	clrc
  4836  1321  0CA3               	rrf	___ftpack@exp,f
  4837  1322  0823               	movf	___ftpack@exp,w
  4838  1323  00A5               	movwf	??___ftpack
  4839  1324  01A6               	clrf	??___ftpack+1
  4840  1325  01A7               	clrf	??___ftpack+2
  4841  1326  3010               	movlw	16
  4842  1327                     u3395:
  4843  1327  1003               	clrc
  4844  1328  0DA5               	rlf	??___ftpack,f
  4845  1329  0DA6               	rlf	??___ftpack+1,f
  4846  132A  0DA7               	rlf	??___ftpack+2,f
  4847  132B  3EFF               	addlw	-1
  4848  132C  1D03               	skipz
  4849  132D  2B27               	goto	u3395
  4850  132E  0825               	movf	??___ftpack,w
  4851  132F  04A0               	iorwf	___ftpack@arg,f
  4852  1330  0826               	movf	??___ftpack+1,w
  4853  1331  04A1               	iorwf	___ftpack@arg+1,f
  4854  1332  0827               	movf	??___ftpack+2,w
  4855  1333  04A2               	iorwf	___ftpack@arg+2,f
  4856  1334  0824               	movf	___ftpack@sign,w
  4857  1335  1903               	btfsc	3,2
  4858  1336  0008               	return
  4859  1337  17A2               	bsf	___ftpack@arg+2,7
  4860  1338  0008               	return
  4861  1339                     __end_of___ftpack:
  4862                           
  4863                           	psect	text14
  4864  13B6                     __ptext14:	
  4865 ;; *************** function _init *****************
  4866 ;; Defined at:
  4867 ;;		line 5 in file "config.c"
  4868 ;; Parameters:    Size  Location     Type
  4869 ;;		None
  4870 ;; Auto vars:     Size  Location     Type
  4871 ;;		None
  4872 ;; Return value:  Size  Location     Type
  4873 ;;                  1    wreg      void 
  4874 ;; Registers used:
  4875 ;;		wreg, status,2
  4876 ;; Tracked objects:
  4877 ;;		On entry : B00/0
  4878 ;;		On exit  : 0/0
  4879 ;;		Unchanged: 0/0
  4880 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4881 ;;      Params:         0       0       0       0       0
  4882 ;;      Locals:         0       0       0       0       0
  4883 ;;      Temps:          0       2       0       0       0
  4884 ;;      Totals:         0       2       0       0       0
  4885 ;;Total ram usage:        2 bytes
  4886 ;; Hardware stack levels used: 1
  4887 ;; Hardware stack levels required when called: 2
  4888 ;; This function calls:
  4889 ;;		Nothing
  4890 ;; This function is called by:
  4891 ;;		_main
  4892 ;; This function uses a non-reentrant model
  4893 ;;
  4894                           
  4895                           
  4896                           ;psect for function _init
  4897  13B6                     _init:
  4898                           
  4899                           ;config.c: 7: TRISAbits.TRISA0 = 1;
  4900                           
  4901                           ;incstack = 0
  4902                           ; Regs used in _init: [wreg+status,2]
  4903  13B6  1683               	bsf	3,5	;RP0=1, select bank1
  4904  13B7  1405               	bsf	5,0	;volatile
  4905                           
  4906                           ;config.c: 8: TRISAbits.TRISA1 = 1;
  4907  13B8  1485               	bsf	5,1	;volatile
  4908                           
  4909                           ;config.c: 9: TRISAbits.TRISA2 = 0;
  4910  13B9  1105               	bcf	5,2	;volatile
  4911                           
  4912                           ;config.c: 10: TRISAbits.TRISA3 = 1;
  4913  13BA  1585               	bsf	5,3	;volatile
  4914                           
  4915                           ;config.c: 11: TRISAbits.TRISA4 = 0;
  4916  13BB  1205               	bcf	5,4	;volatile
  4917                           
  4918                           ;config.c: 12: TRISAbits.TRISA5 = 0;
  4919  13BC  1285               	bcf	5,5	;volatile
  4920                           
  4921                           ;config.c: 14: TRISBbits.TRISB0 = 0;
  4922  13BD  1006               	bcf	6,0	;volatile
  4923                           
  4924                           ;config.c: 15: TRISBbits.TRISB1 = 0;
  4925  13BE  1086               	bcf	6,1	;volatile
  4926                           
  4927                           ;config.c: 16: TRISBbits.TRISB2 = 0;
  4928  13BF  1106               	bcf	6,2	;volatile
  4929                           
  4930                           ;config.c: 17: TRISBbits.TRISB3 = 1;
  4931  13C0  1586               	bsf	6,3	;volatile
  4932                           
  4933                           ;config.c: 18: TRISBbits.TRISB4 = 1;
  4934  13C1  1606               	bsf	6,4	;volatile
  4935                           
  4936                           ;config.c: 19: TRISBbits.TRISB5 = 1;
  4937  13C2  1686               	bsf	6,5	;volatile
  4938                           
  4939                           ;config.c: 20: TRISBbits.TRISB6 = 1;
  4940  13C3  1706               	bsf	6,6	;volatile
  4941                           
  4942                           ;config.c: 21: TRISBbits.TRISB7 = 1;
  4943  13C4  1786               	bsf	6,7	;volatile
  4944                           
  4945                           ;config.c: 23: TRISCbits.TRISC0 = 0;
  4946  13C5  1007               	bcf	7,0	;volatile
  4947                           
  4948                           ;config.c: 24: TRISCbits.TRISC1 = 0;
  4949  13C6  1087               	bcf	7,1	;volatile
  4950                           
  4951                           ;config.c: 25: TRISCbits.TRISC2 = 0;
  4952  13C7  1107               	bcf	7,2	;volatile
  4953                           
  4954                           ;config.c: 26: TRISCbits.TRISC3 = 0;
  4955  13C8  1187               	bcf	7,3	;volatile
  4956                           
  4957                           ;config.c: 27: TRISCbits.TRISC4 = 0;
  4958  13C9  1207               	bcf	7,4	;volatile
  4959                           
  4960                           ;config.c: 28: TRISCbits.TRISC5 = 0;
  4961  13CA  1287               	bcf	7,5	;volatile
  4962                           
  4963                           ;config.c: 29: TRISCbits.TRISC6 = 1;
  4964  13CB  1707               	bsf	7,6	;volatile
  4965                           
  4966                           ;config.c: 30: TRISCbits.TRISC7 = 1;
  4967  13CC  1787               	bsf	7,7	;volatile
  4968                           
  4969                           ;config.c: 32: PORTA = 0x0;
  4970  13CD  1283               	bcf	3,5	;RP0=0, select bank0
  4971  13CE  0185               	clrf	5	;volatile
  4972                           
  4973                           ;config.c: 33: PORTB = 0x0;
  4974  13CF  0186               	clrf	6	;volatile
  4975                           
  4976                           ;config.c: 34: PORTC = 0x0;
  4977  13D0  0187               	clrf	7	;volatile
  4978                           
  4979                           ;config.c: 36: OPTION_REGbits.nRBPU = 1;
  4980  13D1  1683               	bsf	3,5	;RP0=1, select bank1
  4981  13D2  1781               	bsf	1,7	;volatile
  4982                           
  4983                           ;config.c: 37: OPTION_REGbits.INTEDG = 0;
  4984  13D3  1301               	bcf	1,6	;volatile
  4985                           
  4986                           ;config.c: 38: OPTION_REGbits.T0CS = 0;
  4987  13D4  1281               	bcf	1,5	;volatile
  4988                           
  4989                           ;config.c: 39: OPTION_REGbits.T0SE = 0;
  4990  13D5  1201               	bcf	1,4	;volatile
  4991                           
  4992                           ;config.c: 40: OPTION_REGbits.PSA = 0;
  4993  13D6  1181               	bcf	1,3	;volatile
  4994                           
  4995                           ;config.c: 41: OPTION_REGbits.PS2 = 1;
  4996  13D7  1501               	bsf	1,2	;volatile
  4997                           
  4998                           ;config.c: 42: OPTION_REGbits.PS1 = 1;
  4999  13D8  1481               	bsf	1,1	;volatile
  5000                           
  5001                           ;config.c: 43: OPTION_REGbits.PS0 = 1;
  5002  13D9  1401               	bsf	1,0	;volatile
  5003                           
  5004                           ;config.c: 45: INTCONbits.GIE = 1;
  5005  13DA  178B               	bsf	11,7	;volatile
  5006                           
  5007                           ;config.c: 46: INTCONbits.PEIE = 1;
  5008  13DB  170B               	bsf	11,6	;volatile
  5009                           
  5010                           ;config.c: 47: INTCONbits.T0IE = 0;
  5011  13DC  128B               	bcf	11,5	;volatile
  5012                           
  5013                           ;config.c: 48: INTCONbits.INTE = 0;
  5014  13DD  120B               	bcf	11,4	;volatile
  5015                           
  5016                           ;config.c: 49: INTCONbits.RBIE = 1;
  5017  13DE  158B               	bsf	11,3	;volatile
  5018                           
  5019                           ;config.c: 51: PIE1bits.ADIE = 1;
  5020  13DF  170C               	bsf	12,6	;volatile
  5021                           
  5022                           ;config.c: 52: PIE1bits.RCIE = 1;
  5023  13E0  168C               	bsf	12,5	;volatile
  5024                           
  5025                           ;config.c: 53: PIE1bits.TXIE = 0;
  5026  13E1  120C               	bcf	12,4	;volatile
  5027                           
  5028                           ;config.c: 54: PIE1bits.SSPIE = 0;
  5029  13E2  118C               	bcf	12,3	;volatile
  5030                           
  5031                           ;config.c: 55: PIE1bits.TMR2IE = 1;
  5032  13E3  148C               	bsf	12,1	;volatile
  5033                           
  5034                           ;config.c: 56: PIE1bits.TMR1IE = 1;
  5035  13E4  140C               	bsf	12,0	;volatile
  5036                           
  5037                           ;config.c: 58: PIE2bits.CCP2IE = 0;
  5038  13E5  100D               	bcf	13,0	;volatile
  5039                           
  5040                           ;config.c: 60: T1CONbits.T1CKPS1 = 0;
  5041  13E6  1283               	bcf	3,5	;RP0=0, select bank0
  5042  13E7  1290               	bcf	16,5	;volatile
  5043                           
  5044                           ;config.c: 61: T1CONbits.T1CKPS0 = 1;
  5045  13E8  1610               	bsf	16,4	;volatile
  5046                           
  5047                           ;config.c: 62: T1CONbits.T1OSCEN = 0;
  5048  13E9  1190               	bcf	16,3	;volatile
  5049                           
  5050                           ;config.c: 63: T1CONbits.nT1SYNC = 0;
  5051  13EA  1110               	bcf	16,2	;volatile
  5052                           
  5053                           ;config.c: 64: T1CONbits.TMR1CS = 0;
  5054  13EB  1090               	bcf	16,1	;volatile
  5055                           
  5056                           ;config.c: 65: T1CONbits.TMR1ON = 0;
  5057  13EC  1010               	bcf	16,0	;volatile
  5058                           
  5059                           ;config.c: 67: T2CONbits.TOUTPS3 = 1;
  5060  13ED  1712               	bsf	18,6	;volatile
  5061                           
  5062                           ;config.c: 68: T2CONbits.TOUTPS2 = 1;
  5063  13EE  1692               	bsf	18,5	;volatile
  5064                           
  5065                           ;config.c: 69: T2CONbits.TOUTPS1 = 1;
  5066  13EF  1612               	bsf	18,4	;volatile
  5067                           
  5068                           ;config.c: 70: T2CONbits.TOUTPS0 = 1;
  5069  13F0  1592               	bsf	18,3	;volatile
  5070                           
  5071                           ;config.c: 71: T2CONbits.TMR2ON = 1;
  5072  13F1  1512               	bsf	18,2	;volatile
  5073                           
  5074                           ;config.c: 72: T2CONbits.T2CKPS1 = 1;
  5075  13F2  1492               	bsf	18,1	;volatile
  5076                           
  5077                           ;config.c: 73: T2CONbits.T2CKPS0 = 0;
  5078  13F3  1012               	bcf	18,0	;volatile
  5079                           
  5080                           ;config.c: 75: TMR2 = 195;
  5081  13F4  30C3               	movlw	195
  5082  13F5  0091               	movwf	17	;volatile
  5083                           
  5084                           ;config.c: 77: SSPSTATbits.SMP = 0;
  5085  13F6  1683               	bsf	3,5	;RP0=1, select bank1
  5086  13F7  1394               	bcf	20,7	;volatile
  5087                           
  5088                           ;config.c: 78: SSPSTATbits.CKE = 0;
  5089  13F8  1314               	bcf	20,6	;volatile
  5090                           
  5091                           ;config.c: 79: SSPSTATbits.D_nA = 0;
  5092  13F9  1294               	bcf	20,5	;volatile
  5093                           
  5094                           ;config.c: 80: SSPSTATbits.P = 0;
  5095  13FA  1214               	bcf	20,4	;volatile
  5096                           
  5097                           ;config.c: 81: SSPSTATbits.S = 0;
  5098  13FB  1194               	bcf	20,3	;volatile
  5099                           
  5100                           ;config.c: 82: SSPSTATbits.R_nW = 0;
  5101  13FC  1114               	bcf	20,2	;volatile
  5102                           
  5103                           ;config.c: 83: SSPSTATbits.UA = 0;
  5104  13FD  1094               	bcf	20,1	;volatile
  5105                           
  5106                           ;config.c: 84: SSPSTATbits.BF = 0;
  5107  13FE  1014               	bcf	20,0	;volatile
  5108                           
  5109                           ;config.c: 86: SSPCONbits.WCOL = 0;
  5110  13FF  1283               	bcf	3,5	;RP0=0, select bank0
  5111  1400  1394               	bcf	20,7	;volatile
  5112                           
  5113                           ;config.c: 87: SSPCONbits.SSPOV = 0;
  5114  1401  1314               	bcf	20,6	;volatile
  5115                           
  5116                           ;config.c: 88: SSPCONbits.SSPEN = 0;
  5117  1402  1294               	bcf	20,5	;volatile
  5118                           
  5119                           ;config.c: 89: SSPCONbits.CKP = 0;
  5120  1403  1214               	bcf	20,4	;volatile
  5121                           
  5122                           ;config.c: 90: SSPCONbits.SSPM3 = 0;
  5123  1404  1194               	bcf	20,3	;volatile
  5124                           
  5125                           ;config.c: 91: SSPCONbits.SSPM2 = 0;
  5126  1405  1114               	bcf	20,2	;volatile
  5127                           
  5128                           ;config.c: 92: SSPCONbits.SSPM1 = 0;
  5129  1406  1094               	bcf	20,1	;volatile
  5130                           
  5131                           ;config.c: 93: SSPCONbits.SSPM0 = 0;
  5132  1407  1014               	bcf	20,0	;volatile
  5133                           
  5134                           ;config.c: 95: TXSTAbits.CSRC = 0;
  5135  1408  1683               	bsf	3,5	;RP0=1, select bank1
  5136  1409  1398               	bcf	24,7	;volatile
  5137                           
  5138                           ;config.c: 96: TXSTAbits.TX9 = 0;
  5139  140A  1318               	bcf	24,6	;volatile
  5140                           
  5141                           ;config.c: 97: TXSTAbits.TXEN = 1;
  5142  140B  1698               	bsf	24,5	;volatile
  5143                           
  5144                           ;config.c: 98: TXSTAbits.SYNC = 0;
  5145  140C  1218               	bcf	24,4	;volatile
  5146                           
  5147                           ;config.c: 99: TXSTAbits.BRGH = 1;
  5148  140D  1518               	bsf	24,2	;volatile
  5149                           
  5150                           ;config.c: 100: TXSTAbits.TRMT = 0;
  5151  140E  1098               	bcf	24,1	;volatile
  5152                           
  5153                           ;config.c: 101: TXSTAbits.TX9D = 0;
  5154  140F  1018               	bcf	24,0	;volatile
  5155                           
  5156                           ;config.c: 103: RCSTAbits.SPEN = 1;
  5157  1410  1283               	bcf	3,5	;RP0=0, select bank0
  5158  1411  1798               	bsf	24,7	;volatile
  5159                           
  5160                           ;config.c: 104: RCSTAbits.RX9 = 0;
  5161  1412  1318               	bcf	24,6	;volatile
  5162                           
  5163                           ;config.c: 105: RCSTAbits.SREN = 0;
  5164  1413  1298               	bcf	24,5	;volatile
  5165                           
  5166                           ;config.c: 106: RCSTAbits.CREN = 1;
  5167  1414  1618               	bsf	24,4	;volatile
  5168                           
  5169                           ;config.c: 107: RCSTAbits.FERR = 0;
  5170  1415  1118               	bcf	24,2	;volatile
  5171                           
  5172                           ;config.c: 108: RCSTAbits.OERR = 0;
  5173  1416  1098               	bcf	24,1	;volatile
  5174                           
  5175                           ;config.c: 109: RCSTAbits.RX9D = 0;
  5176  1417  1018               	bcf	24,0	;volatile
  5177                           
  5178                           ;config.c: 111: if(TXSTAbits.BRGH)
  5179  1418  1683               	bsf	3,5	;RP0=1, select bank1
  5180  1419  1D18               	btfss	24,2	;volatile
  5181  141A  2C1D               	goto	l4436
  5182                           
  5183                           ;config.c: 112: SPBRG = (char)((8000000/38400)/16)-1;
  5184  141B  300C               	movlw	12
  5185  141C  2C1E               	goto	L3
  5186  141D                     l4436:
  5187                           
  5188                           ;config.c: 113: else;config.c: 114: SPBRG = (char)((8000000/38400)/64)-1;
  5189  141D  3002               	movlw	2
  5190  141E                     L3:
  5191  141E  0099               	movwf	25	;volatile
  5192                           
  5193                           ;config.c: 116: ADCON0bits.ADCS1 = 0;
  5194  141F  1283               	bcf	3,5	;RP0=0, select bank0
  5195  1420  139F               	bcf	31,7	;volatile
  5196                           
  5197                           ;config.c: 117: ADCON0bits.ADCS0 = 1;
  5198  1421  171F               	bsf	31,6	;volatile
  5199                           
  5200                           ;config.c: 118: ADCON0bits.CHS2 = 0;
  5201  1422  129F               	bcf	31,5	;volatile
  5202                           
  5203                           ;config.c: 119: ADCON0bits.CHS1 = 1;
  5204  1423  161F               	bsf	31,4	;volatile
  5205                           
  5206                           ;config.c: 120: ADCON0bits.CHS0 = 1;
  5207  1424  159F               	bsf	31,3	;volatile
  5208                           
  5209                           ;config.c: 121: ADCON0bits.GO_nDONE = 0;
  5210  1425  111F               	bcf	31,2	;volatile
  5211                           
  5212                           ;config.c: 122: ADCON0bits.ADON = 0;
  5213  1426  101F               	bcf	31,0	;volatile
  5214                           
  5215                           ;config.c: 124: ADCON1bits.PCFG2 = 1;
  5216  1427  1683               	bsf	3,5	;RP0=1, select bank1
  5217  1428  151F               	bsf	31,2	;volatile
  5218                           
  5219                           ;config.c: 125: ADCON1bits.PCFG1 = 0;
  5220  1429  109F               	bcf	31,1	;volatile
  5221                           
  5222                           ;config.c: 126: ADCON1bits.PCFG0 = 0;
  5223  142A  101F               	bcf	31,0	;volatile
  5224                           
  5225                           ;config.c: 128: TMR0_Value = 127;
  5226  142B  307F               	movlw	127
  5227  142C  1283               	bcf	3,5	;RP0=0, select bank0
  5228  142D  00A0               	movwf	??_init
  5229  142E  0820               	movf	??_init,w
  5230  142F  1683               	bsf	3,5	;RP0=1, select bank1
  5231  1430  00C2               	movwf	_TMR0_Value^(0+128)
  5232                           
  5233                           ;config.c: 129: cTMR0 = 0;
  5234  1431  01C1               	clrf	_cTMR0^(0+128)
  5235                           
  5236                           ;config.c: 131: _delay((unsigned long)((10)*(8000000/4000.0)));
  5237  1432  301A               	movlw	26
  5238  1433  1283               	bcf	3,5	;RP0=0, select bank0
  5239  1434  1303               	bcf	3,6	;RP1=0, select bank0
  5240  1435  00A1               	movwf	??_init+1
  5241  1436  30F7               	movlw	247
  5242  1437  00A0               	movwf	??_init
  5243  1438                     u6427:
  5244  1438  0BA0               	decfsz	??_init,f
  5245  1439  2C38               	goto	u6427
  5246  143A  0BA1               	decfsz	??_init+1,f
  5247  143B  2C38               	goto	u6427
  5248  143C  2C3D               	nop2
  5249  143D  0008               	return
  5250  143E                     __end_of_init:
  5251                           
  5252                           	psect	text15
  5253  044E                     __ptext15:	
  5254 ;; *************** function _fMenuStrip *****************
  5255 ;; Defined at:
  5256 ;;		line 3 in file "menu.c"
  5257 ;; Parameters:    Size  Location     Type
  5258 ;;		None
  5259 ;; Auto vars:     Size  Location     Type
  5260 ;;		None
  5261 ;; Return value:  Size  Location     Type
  5262 ;;                  1    wreg      void 
  5263 ;; Registers used:
  5264 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  5265 ;; Tracked objects:
  5266 ;;		On entry : 300/100
  5267 ;;		On exit  : B00/800
  5268 ;;		Unchanged: 0/0
  5269 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5270 ;;      Params:         0       0       0       0       0
  5271 ;;      Locals:         0       0       0       0       0
  5272 ;;      Temps:          0       8       0       0       0
  5273 ;;      Totals:         0       8       0       0       0
  5274 ;;Total ram usage:        8 bytes
  5275 ;; Hardware stack levels used: 1
  5276 ;; Hardware stack levels required when called: 7
  5277 ;; This function calls:
  5278 ;;		_LCD_SetPos
  5279 ;;		_LCD_StringOnOff
  5280 ;;		_LCD_clear
  5281 ;;		_LCD_string
  5282 ;;		_SPI_Write
  5283 ;;		___awdiv
  5284 ;;		___awmod
  5285 ;;		___bmul
  5286 ;;		___wmul
  5287 ;;		_fEraseString
  5288 ;;		_sprintf
  5289 ;;		_strcat
  5290 ;; This function is called by:
  5291 ;;		_main
  5292 ;; This function uses a non-reentrant model
  5293 ;;
  5294                           
  5295                           
  5296                           ;psect for function _fMenuStrip
  5297  044E                     _fMenuStrip:
  5298                           
  5299                           ;menu.c: 4: if(flMenuStrip == 0x01 && flSwitchButton == 0){
  5300                           
  5301                           ;incstack = 0
  5302                           ; Regs used in _fMenuStrip: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  5303  044E  033E               	decf	_flMenuStrip^(0+128),w
  5304  044F  1903               	btfsc	3,2
  5305  0450  187A               	btfsc	_flSwitchButton/(0+8),_flSwitchButton& (0+7)
  5306  0451  2D0F               	goto	l4558
  5307                           
  5308                           ;menu.c: 5: if(_MenuNav == 1) _MenuNav = 2;
  5309  0452  037B               	decf	__MenuNav,w
  5310  0453  047C               	iorwf	__MenuNav+1,w
  5311  0454  1D03               	btfss	3,2
  5312  0455  2C58               	goto	l4532
  5313  0456  3002               	movlw	2
  5314  0457  2D06               	goto	L4
  5315  0458                     l4532:
  5316                           
  5317                           ;menu.c: 6: else if(_MenuNav >= 20 && _MenuNav < _MenuArr[0] * 10 + 9) _MenuNav /= 10;
  5318  0458  087C               	movf	__MenuNav+1,w
  5319  0459  3A80               	xorlw	128
  5320  045A  00FF               	movwf	127
  5321  045B  3080               	movlw	128
  5322  045C  027F               	subwf	127,w
  5323  045D  1D03               	skipz
  5324  045E  2C61               	goto	u5095
  5325  045F  3014               	movlw	20
  5326  0460  027B               	subwf	__MenuNav,w
  5327  0461                     u5095:
  5328  0461  1C03               	skipc
  5329  0462  2C9F               	goto	l4538
  5330  0463  1683               	bsf	3,5	;RP0=1, select bank3
  5331  0464  1703               	bsf	3,6	;RP1=1, select bank3
  5332  0465  0828               	movf	__MenuArr^(0+384),w
  5333  0466  1283               	bcf	3,5	;RP0=0, select bank0
  5334  0467  1303               	bcf	3,6	;RP1=0, select bank0
  5335  0468  00CA               	movwf	??_fMenuStrip
  5336  0469  01CB               	clrf	??_fMenuStrip+1
  5337  046A  084A               	movf	??_fMenuStrip,w
  5338  046B  00A0               	movwf	___wmul@multiplier
  5339  046C  084B               	movf	??_fMenuStrip+1,w
  5340  046D  00A1               	movwf	___wmul@multiplier+1
  5341  046E  300A               	movlw	10
  5342  046F  00A2               	movwf	___wmul@multiplicand
  5343  0470  3000               	movlw	0
  5344  0471  00A3               	movwf	___wmul@multiplicand+1
  5345  0472  160A  158A  249C  120A  118A  	fcall	___wmul
  5346  0477  0820               	movf	?___wmul,w
  5347  0478  3E09               	addlw	9
  5348  0479  00CC               	movwf	??_fMenuStrip+2
  5349  047A  0821               	movf	?___wmul+1,w
  5350  047B  1803               	skipnc
  5351  047C  3E01               	addlw	1
  5352  047D  3E00               	addlw	0
  5353  047E  00CD               	movwf	??_fMenuStrip+3
  5354  047F  087C               	movf	__MenuNav+1,w
  5355  0480  3A80               	xorlw	128
  5356  0481  00CE               	movwf	??_fMenuStrip+4
  5357  0482  084D               	movf	??_fMenuStrip+3,w
  5358  0483  3A80               	xorlw	128
  5359  0484  024E               	subwf	??_fMenuStrip+4,w
  5360  0485  1D03               	skipz
  5361  0486  2C89               	goto	u5105
  5362  0487  084C               	movf	??_fMenuStrip+2,w
  5363  0488  027B               	subwf	__MenuNav,w
  5364  0489                     u5105:
  5365  0489  1803               	skipnc
  5366  048A  2C9F               	goto	l4538
  5367  048B                     l4536:
  5368  048B  300A               	movlw	10
  5369  048C  1283               	bcf	3,5	;RP0=0, select bank0
  5370  048D  1303               	bcf	3,6	;RP1=0, select bank0
  5371  048E  00A0               	movwf	___awdiv@divisor
  5372  048F  3000               	movlw	0
  5373  0490  00A1               	movwf	___awdiv@divisor+1
  5374  0491  087C               	movf	__MenuNav+1,w
  5375  0492  00A3               	movwf	___awdiv@dividend+1
  5376  0493  087B               	movf	__MenuNav,w
  5377  0494  00A2               	movwf	___awdiv@dividend
  5378  0495  160A  118A  221A  120A  118A  	fcall	___awdiv
  5379  049A  0821               	movf	?___awdiv+1,w
  5380  049B  00FC               	movwf	__MenuNav+1
  5381  049C  0820               	movf	?___awdiv,w
  5382  049D  00FB               	movwf	__MenuNav
  5383  049E  2D09               	goto	l4552
  5384  049F                     l4538:
  5385                           
  5386                           ;menu.c: 7: else if(_MenuNav >= 100 && _MenuNav < _MenuArr[0] * 100 + 99) _MenuNav /= 10
      +                          ;
  5387  049F  087C               	movf	__MenuNav+1,w
  5388  04A0  3A80               	xorlw	128
  5389  04A1  00FF               	movwf	127
  5390  04A2  3080               	movlw	128
  5391  04A3  027F               	subwf	127,w
  5392  04A4  1D03               	skipz
  5393  04A5  2CA8               	goto	u5115
  5394  04A6  3064               	movlw	100
  5395  04A7  027B               	subwf	__MenuNav,w
  5396  04A8                     u5115:
  5397  04A8  1C03               	skipc
  5398  04A9  2CD2               	goto	l4544
  5399  04AA  1683               	bsf	3,5	;RP0=1, select bank3
  5400  04AB  1703               	bsf	3,6	;RP1=1, select bank3
  5401  04AC  0828               	movf	__MenuArr^(0+384),w
  5402  04AD  1283               	bcf	3,5	;RP0=0, select bank0
  5403  04AE  1303               	bcf	3,6	;RP1=0, select bank0
  5404  04AF  00CA               	movwf	??_fMenuStrip
  5405  04B0  01CB               	clrf	??_fMenuStrip+1
  5406  04B1  084A               	movf	??_fMenuStrip,w
  5407  04B2  00A0               	movwf	___wmul@multiplier
  5408  04B3  084B               	movf	??_fMenuStrip+1,w
  5409  04B4  00A1               	movwf	___wmul@multiplier+1
  5410  04B5  3064               	movlw	100
  5411  04B6  00A2               	movwf	___wmul@multiplicand
  5412  04B7  3000               	movlw	0
  5413  04B8  00A3               	movwf	___wmul@multiplicand+1
  5414  04B9  160A  158A  249C  120A  118A  	fcall	___wmul
  5415  04BE  0820               	movf	?___wmul,w
  5416  04BF  3E63               	addlw	99
  5417  04C0  00CC               	movwf	??_fMenuStrip+2
  5418  04C1  0821               	movf	?___wmul+1,w
  5419  04C2  1803               	skipnc
  5420  04C3  3E01               	addlw	1
  5421  04C4  3E00               	addlw	0
  5422  04C5  00CD               	movwf	??_fMenuStrip+3
  5423  04C6  087C               	movf	__MenuNav+1,w
  5424  04C7  3A80               	xorlw	128
  5425  04C8  00CE               	movwf	??_fMenuStrip+4
  5426  04C9  084D               	movf	??_fMenuStrip+3,w
  5427  04CA  3A80               	xorlw	128
  5428  04CB  024E               	subwf	??_fMenuStrip+4,w
  5429  04CC  1D03               	skipz
  5430  04CD  2CD0               	goto	u5125
  5431  04CE  084C               	movf	??_fMenuStrip+2,w
  5432  04CF  027B               	subwf	__MenuNav,w
  5433  04D0                     u5125:
  5434  04D0  1C03               	btfss	3,0
  5435  04D1  2C8B               	goto	l4536
  5436  04D2                     l4544:
  5437                           
  5438                           ;menu.c: 8: else if(_MenuNav >= 1000 && _MenuNav < _MenuArr[0] * 1000 + 999) _MenuNav /=
      +                           10;
  5439  04D2  087C               	movf	__MenuNav+1,w
  5440  04D3  3A80               	xorlw	128
  5441  04D4  00FF               	movwf	127
  5442  04D5  3083               	movlw	131
  5443  04D6  027F               	subwf	127,w
  5444  04D7  1D03               	skipz
  5445  04D8  2CDB               	goto	u5135
  5446  04D9  30E8               	movlw	232
  5447  04DA  027B               	subwf	__MenuNav,w
  5448  04DB                     u5135:
  5449  04DB  1C03               	skipc
  5450  04DC  2D05               	goto	l4550
  5451  04DD  1683               	bsf	3,5	;RP0=1, select bank3
  5452  04DE  1703               	bsf	3,6	;RP1=1, select bank3
  5453  04DF  0828               	movf	__MenuArr^(0+384),w
  5454  04E0  1283               	bcf	3,5	;RP0=0, select bank0
  5455  04E1  1303               	bcf	3,6	;RP1=0, select bank0
  5456  04E2  00CA               	movwf	??_fMenuStrip
  5457  04E3  01CB               	clrf	??_fMenuStrip+1
  5458  04E4  084A               	movf	??_fMenuStrip,w
  5459  04E5  00A0               	movwf	___wmul@multiplier
  5460  04E6  084B               	movf	??_fMenuStrip+1,w
  5461  04E7  00A1               	movwf	___wmul@multiplier+1
  5462  04E8  30E8               	movlw	232
  5463  04E9  00A2               	movwf	___wmul@multiplicand
  5464  04EA  3003               	movlw	3
  5465  04EB  00A3               	movwf	___wmul@multiplicand+1
  5466  04EC  160A  158A  249C  120A  118A  	fcall	___wmul
  5467  04F1  0820               	movf	?___wmul,w
  5468  04F2  3EE7               	addlw	231
  5469  04F3  00CC               	movwf	??_fMenuStrip+2
  5470  04F4  0821               	movf	?___wmul+1,w
  5471  04F5  1803               	skipnc
  5472  04F6  3E01               	addlw	1
  5473  04F7  3E03               	addlw	3
  5474  04F8  00CD               	movwf	??_fMenuStrip+3
  5475  04F9  087C               	movf	__MenuNav+1,w
  5476  04FA  3A80               	xorlw	128
  5477  04FB  00CE               	movwf	??_fMenuStrip+4
  5478  04FC  084D               	movf	??_fMenuStrip+3,w
  5479  04FD  3A80               	xorlw	128
  5480  04FE  024E               	subwf	??_fMenuStrip+4,w
  5481  04FF  1D03               	skipz
  5482  0500  2D03               	goto	u5145
  5483  0501  084C               	movf	??_fMenuStrip+2,w
  5484  0502  027B               	subwf	__MenuNav,w
  5485  0503                     u5145:
  5486  0503  1C03               	btfss	3,0
  5487  0504  2C8B               	goto	l4536
  5488  0505                     l4550:
  5489                           
  5490                           ;menu.c: 9: else _MenuNav = 1;
  5491  0505  3001               	movlw	1
  5492  0506                     L4:
  5493  0506  00FB               	movwf	__MenuNav
  5494  0507  3000               	movlw	0
  5495  0508  00FC               	movwf	__MenuNav+1
  5496  0509                     l4552:
  5497                           
  5498                           ;menu.c: 10: flSwitchButton = 1;
  5499  0509  147A               	bsf	_flSwitchButton/(0+8),_flSwitchButton& (0+7)
  5500                           
  5501                           ;menu.c: 11: flClearLCD = 0;
  5502  050A  10FA               	bcf	_flClearLCD/(0+8),_flClearLCD& (0+7)
  5503                           
  5504                           ;menu.c: 12: flUpdate = 0;
  5505  050B  117A               	bcf	_flUpdate/(0+8),_flUpdate& (0+7)
  5506                           
  5507                           ;menu.c: 13: }
  5508  050C  120A  158A  29C2   	goto	l4680
  5509  050F                     l4558:
  5510                           
  5511                           ;menu.c: 14: else if(flMenuStrip == 0x02 && flSwitchButton == 0){
  5512  050F  3002               	movlw	2
  5513  0510  063E               	xorwf	_flMenuStrip^(0+128),w
  5514  0511  1903               	btfsc	3,2
  5515  0512  187A               	btfsc	_flSwitchButton/(0+8),_flSwitchButton& (0+7)
  5516  0513  2D5D               	goto	L31
  5517                           
  5518                           ;menu.c: 15: if(_MenuNav <= 1) _MenuNav = _MenuArr[0];
  5519  0514  087C               	movf	__MenuNav+1,w
  5520  0515  3A80               	xorlw	128
  5521  0516  00FF               	movwf	127
  5522  0517  3080               	movlw	128
  5523  0518  027F               	subwf	127,w
  5524  0519  1D03               	skipz
  5525  051A  2D1D               	goto	u5175
  5526  051B  3002               	movlw	2
  5527  051C  027B               	subwf	__MenuNav,w
  5528  051D                     u5175:
  5529  051D  1803               	skipnc
  5530  051E  2D27               	goto	l4566
  5531  051F  1683               	bsf	3,5	;RP0=1, select bank3
  5532  0520  1703               	bsf	3,6	;RP1=1, select bank3
  5533  0521  0828               	movf	__MenuArr^(0+384),w
  5534  0522  1283               	bcf	3,5	;RP0=0, select bank0
  5535  0523  1303               	bcf	3,6	;RP1=0, select bank0
  5536  0524  120A  158A  28FE   	goto	L24
  5537  0527                     l4566:
  5538                           
  5539                           ;menu.c: 16: else if(_MenuNav >= 10 && _MenuNav < 100){
  5540  0527  087C               	movf	__MenuNav+1,w
  5541  0528  3A80               	xorlw	128
  5542  0529  00FF               	movwf	127
  5543  052A  3080               	movlw	128
  5544  052B  027F               	subwf	127,w
  5545  052C  1D03               	skipz
  5546  052D  2D30               	goto	u5185
  5547  052E  300A               	movlw	10
  5548  052F  027B               	subwf	__MenuNav,w
  5549  0530                     u5185:
  5550  0530  1C03               	skipc
  5551  0531  2D60               	goto	L33
  5552  0532  087C               	movf	__MenuNav+1,w
  5553  0533  3A80               	xorlw	128
  5554  0534  00FF               	movwf	127
  5555  0535  3080               	movlw	128
  5556  0536  027F               	subwf	127,w
  5557  0537  1D03               	skipz
  5558  0538  2D3B               	goto	u5195
  5559  0539  3064               	movlw	100
  5560  053A  027B               	subwf	__MenuNav,w
  5561  053B                     u5195:
  5562  053B  1803               	skipnc
  5563  053C  2D60               	goto	L33
  5564                           
  5565                           ;menu.c: 17: if(_MenuNav <= _tempTwoDigit)
  5566  053D  087C               	movf	__MenuNav+1,w
  5567  053E  3A80               	xorlw	128
  5568  053F  3C80               	sublw	128
  5569  0540  1D03               	skipz
  5570  0541  2D46               	goto	u5205
  5571  0542  087B               	movf	__MenuNav,w
  5572  0543  1683               	bsf	3,5	;RP0=1, select bank1
  5573  0544  1303               	bcf	3,6	;RP1=0, select bank1
  5574  0545  023A               	subwf	__tempTwoDigit^(0+128),w
  5575  0546                     u5205:
  5576  0546  120A  158A  1C03   	skipc
  5577  0549  280F               	goto	l4574
  5578                           
  5579                           ;menu.c: 18: _MenuNav = _tempTwoDigit + _MenuArr[_cellTwoDigit] - 1;
  5580  054A  1683               	bsf	3,5	;RP0=1, select bank1
  5581  054B  1303               	bcf	3,6	;RP1=0, select bank1
  5582  054C  083B               	movf	__cellTwoDigit^(0+128),w
  5583  054D  3EA8               	addlw	(low (__MenuArr| (0+256)))& (0+255)
  5584  054E  0084               	movwf	4
  5585  054F  083A               	movf	__tempTwoDigit^(0+128),w
  5586  0550  1783               	bsf	3,7	;select IRP bank3
  5587  0551  0700               	addwf	0,w
  5588  0552  1283               	bcf	3,5	;RP0=0, select bank0
  5589  0553  00CA               	movwf	??_fMenuStrip
  5590  0554  01CB               	clrf	??_fMenuStrip+1
  5591  0555  0DCB               	rlf	??_fMenuStrip+1,f
  5592  0556  084A               	movf	??_fMenuStrip,w
  5593  0557  3EFF               	addlw	255
  5594  0558  00FB               	movwf	__MenuNav
  5595  0559  084B               	movf	??_fMenuStrip+1,w
  5596  055A  120A  158A  2892   	goto	L25
  5597  055D                     L31:
  5598  055D                     L30:
  5599  055D  120A  158A  28A2   	ljmp	l4614
  5600  0560                     L33:
  5601  0560                     L32:
  5602  0560  120A  158A  2815   	ljmp	l4576
  5603                           
  5604                           	psect	text16
  5605  1CE8                     __ptext16:	
  5606 ;; *************** function _strcat *****************
  5607 ;; Defined at:
  5608 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\strcat.c"
  5609 ;; Parameters:    Size  Location     Type
  5610 ;;  to              1    wreg     PTR unsigned char 
  5611 ;;		 -> str2(16), 
  5612 ;;  from            2    0[BANK0 ] PTR const unsigned char 
  5613 ;;		 -> ROM(8192), 
  5614 ;; Auto vars:     Size  Location     Type
  5615 ;;  to              1    4[BANK0 ] PTR unsigned char 
  5616 ;;		 -> str2(16), 
  5617 ;;  cp              1    3[BANK0 ] PTR unsigned char 
  5618 ;;		 -> str2(16), 
  5619 ;; Return value:  Size  Location     Type
  5620 ;;                  1    wreg      PTR unsigned char 
  5621 ;; Registers used:
  5622 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath
  5623 ;; Tracked objects:
  5624 ;;		On entry : B00/800
  5625 ;;		On exit  : B00/800
  5626 ;;		Unchanged: 0/0
  5627 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5628 ;;      Params:         0       2       0       0       0
  5629 ;;      Locals:         0       2       0       0       0
  5630 ;;      Temps:          0       1       0       0       0
  5631 ;;      Totals:         0       5       0       0       0
  5632 ;;Total ram usage:        5 bytes
  5633 ;; Hardware stack levels used: 1
  5634 ;; Hardware stack levels required when called: 2
  5635 ;; This function calls:
  5636 ;;		Nothing
  5637 ;; This function is called by:
  5638 ;;		_fMenuStrip
  5639 ;; This function uses a non-reentrant model
  5640 ;;
  5641                           
  5642                           
  5643                           ;psect for function _strcat
  5644  1CE8                     _strcat:
  5645                           
  5646                           ;incstack = 0
  5647                           ; Regs used in _strcat: [wreg-fsr0h+status,2+status,0+btemp+1+pclath]
  5648                           ;strcat@to stored from wreg
  5649  1CE8  00A4               	movwf	strcat@to
  5650  1CE9  0824               	movf	strcat@to,w
  5651  1CEA  00A2               	movwf	??_strcat
  5652  1CEB  0822               	movf	??_strcat,w
  5653  1CEC  00A3               	movwf	strcat@cp
  5654  1CED                     l4042:
  5655  1CED  0823               	movf	strcat@cp,w
  5656  1CEE  0084               	movwf	4
  5657  1CEF  0800               	movf	0,w
  5658  1CF0  1903               	btfsc	3,2
  5659  1CF1  2D01               	goto	l4048
  5660  1CF2  3001               	movlw	1
  5661  1CF3  00A2               	movwf	??_strcat
  5662  1CF4  0822               	movf	??_strcat,w
  5663  1CF5  07A3               	addwf	strcat@cp,f
  5664  1CF6  2CED               	goto	l4042
  5665  1CF7                     l4044:
  5666  1CF7  3001               	movlw	1
  5667  1CF8  00A2               	movwf	??_strcat
  5668  1CF9  0822               	movf	??_strcat,w
  5669  1CFA  07A3               	addwf	strcat@cp,f
  5670  1CFB  3001               	movlw	1
  5671  1CFC  07A0               	addwf	strcat@from,f
  5672  1CFD  1803               	skipnc
  5673  1CFE  0AA1               	incf	strcat@from+1,f
  5674  1CFF  3000               	movlw	0
  5675  1D00  07A1               	addwf	strcat@from+1,f
  5676  1D01                     l4048:
  5677  1D01  0821               	movf	strcat@from+1,w
  5678  1D02  00FF               	movwf	127
  5679  1D03  0820               	movf	strcat@from,w
  5680  1D04  0084               	movwf	4
  5681  1D05  160A  118A  2000  160A  158A  	fcall	stringtab
  5682  1D0A  00A2               	movwf	??_strcat
  5683  1D0B  0823               	movf	strcat@cp,w
  5684  1D0C  0084               	movwf	4
  5685  1D0D  0822               	movf	??_strcat,w
  5686  1D0E  1783               	bsf	3,7	;select IRP bank2
  5687  1D0F  0080               	movwf	0
  5688  1D10  0800               	movf	0,w
  5689  1D11  1903               	btfsc	3,2
  5690  1D12  0008               	return
  5691  1D13  2CF7               	goto	l4044
  5692  1D14                     __end_of_strcat:
  5693                           
  5694                           	psect	text17
  5695  024B                     __ptext17:	
  5696 ;; *************** function _sprintf *****************
  5697 ;; Defined at:
  5698 ;;		line 505 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c"
  5699 ;; Parameters:    Size  Location     Type
  5700 ;;  sp              1    wreg     PTR unsigned char 
  5701 ;;		 -> str2(16), str(16), 
  5702 ;;  f               2   14[BANK0 ] PTR const unsigned char 
  5703 ;;		 -> STR_63(13), STR_62(17), STR_60(5), STR_58(5), 
  5704 ;;		 -> STR_56(5), STR_54(5), STR_52(3), STR_50(5), 
  5705 ;;		 -> STR_48(5), STR_46(13), STR_44(5), STR_42(13), 
  5706 ;;		 -> STR_40(5), STR_37(15), STR_35(5), STR_33(5), 
  5707 ;;		 -> STR_31(3), STR_29(3), STR_27(5), STR_26(9), 
  5708 ;;		 -> STR_24(5), STR_23(9), STR_21(5), STR_19(3), 
  5709 ;;		 -> STR_17(3), STR_15(5), STR_14(9), STR_12(5), 
  5710 ;;		 -> STR_10(3), STR_8(3), STR_6(5), STR_4(5), 
  5711 ;; Auto vars:     Size  Location     Type
  5712 ;;  sp              1   41[BANK0 ] PTR unsigned char 
  5713 ;;		 -> str2(16), str(16), 
  5714 ;;  tmpval          4    0        struct .
  5715 ;;  width           2   38[BANK0 ] int 
  5716 ;;  val             2   36[BANK0 ] unsigned int 
  5717 ;;  len             2   34[BANK0 ] unsigned int 
  5718 ;;  cp              2   30[BANK0 ] PTR const unsigned char 
  5719 ;;		 -> STR_66(7), ?_sprintf(2), STR_65(6), STR_64(4), 
  5720 ;;		 -> STR_61(3), STR_59(17), STR_57(3), STR_55(17), 
  5721 ;;		 -> STR_53(3), STR_51(16), STR_49(7), STR_47(10), 
  5722 ;;		 -> STR_45(12), STR_43(9), STR_41(11), STR_39(5), 
  5723 ;;		 -> STR_38(5), STR_36(13), STR_34(10), STR_32(4), 
  5724 ;;		 -> STR_30(3), STR_28(16), STR_25(16), STR_22(15), 
  5725 ;;		 -> STR_20(4), STR_18(3), STR_16(15), STR_13(14), 
  5726 ;;		 -> STR_11(11), STR_9(8), STR_7(13), STR_5(10), 
  5727 ;;		 -> STR_3(5), STR_2(4), 
  5728 ;;  c               1   40[BANK0 ] unsigned char 
  5729 ;;  ap              1   33[BANK0 ] PTR void [1]
  5730 ;;		 -> ?_sprintf(2), 
  5731 ;;  flag            1   32[BANK0 ] unsigned char 
  5732 ;;  prec            1   29[BANK0 ] char 
  5733 ;; Return value:  Size  Location     Type
  5734 ;;                  2   14[BANK0 ] int 
  5735 ;; Registers used:
  5736 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  5737 ;; Tracked objects:
  5738 ;;		On entry : 300/0
  5739 ;;		On exit  : B00/800
  5740 ;;		Unchanged: 0/0
  5741 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5742 ;;      Params:         0      12       0       0       0
  5743 ;;      Locals:         0      13       0       0       0
  5744 ;;      Temps:          0       3       0       0       0
  5745 ;;      Totals:         0      28       0       0       0
  5746 ;;Total ram usage:       28 bytes
  5747 ;; Hardware stack levels used: 1
  5748 ;; Hardware stack levels required when called: 3
  5749 ;; This function calls:
  5750 ;;		___lwdiv
  5751 ;;		___lwmod
  5752 ;;		___wmul
  5753 ;;		_isdigit
  5754 ;; This function is called by:
  5755 ;;		_fMenuStrip
  5756 ;; This function uses a non-reentrant model
  5757 ;;
  5758                           
  5759                           
  5760                           ;psect for function _sprintf
  5761  024B                     _sprintf:
  5762                           
  5763                           ;incstack = 0
  5764                           ; Regs used in _sprintf: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  5765                           ;sprintf@sp stored from wreg
  5766  024B  00C9               	movwf	sprintf@sp
  5767                           
  5768                           ;doprnt.c: 507: va_list ap;;doprnt.c: 512: char c;;doprnt.c: 514: int width;;doprnt.c: 5
      +                          21: signed char prec;;doprnt.c: 525: unsigned char flag;;doprnt.c: 540: union {;doprnt.c
      +                          : 541: unsigned long vd;;doprnt.c: 542: double integ;;doprnt.c: 543: } tmpval;;doprnt.c:
      +                           545: unsigned int val;;doprnt.c: 546: unsigned len;;doprnt.c: 547: const char * cp;;dop
      +                          rnt.c: 550: *ap = __va_start();
  5769  024C  3030               	movlw	(low ((?_sprintf| 0+2)))& (0+255)
  5770  024D  00BA               	movwf	??_sprintf
  5771  024E  083A               	movf	??_sprintf,w
  5772  024F  00C1               	movwf	sprintf@ap
  5773  0250                     l4032:	
  5774                           ;doprnt.c: 553: while((c = *f++)) {
  5775                           
  5776  0250  082F               	movf	sprintf@f+1,w
  5777  0251  00BB               	movwf	??_sprintf+1
  5778  0252  082E               	movf	sprintf@f,w
  5779  0253  00BA               	movwf	??_sprintf
  5780  0254  0AAE               	incf	sprintf@f,f
  5781  0255  1903               	skipnz
  5782  0256  0AAF               	incf	sprintf@f+1,f
  5783  0257  083B               	movf	??_sprintf+1,w
  5784  0258  00FF               	movwf	127
  5785  0259  083A               	movf	??_sprintf,w
  5786  025A  0084               	movwf	4
  5787  025B  160A  118A  2000  120A  118A  	fcall	stringtab
  5788  0260  00BC               	movwf	??_sprintf+2
  5789  0261  083C               	movf	??_sprintf+2,w
  5790  0262  00C8               	movwf	sprintf@c
  5791  0263  0848               	movf	sprintf@c,w
  5792  0264  1903               	btfsc	3,2
  5793  0265  2C49               	goto	l4034
  5794                           
  5795                           ;doprnt.c: 555: if(c != '%')
  5796  0266  3025               	movlw	37
  5797  0267  0648               	xorwf	sprintf@c,w
  5798  0268  1903               	btfsc	3,2
  5799  0269  2A76               	goto	l3920
  5800                           
  5801                           ;doprnt.c: 557: {;doprnt.c: 558: ((*sp++ = (c)));
  5802  026A  0848               	movf	sprintf@c,w
  5803  026B  00BA               	movwf	??_sprintf
  5804  026C  0849               	movf	sprintf@sp,w
  5805  026D  0084               	movwf	4
  5806  026E  083A               	movf	??_sprintf,w
  5807  026F  1783               	bsf	3,7	;select IRP bank2
  5808  0270  0080               	movwf	0
  5809  0271  3001               	movlw	1
  5810  0272  00BA               	movwf	??_sprintf
  5811  0273  083A               	movf	??_sprintf,w
  5812  0274  07C9               	addwf	sprintf@sp,f
  5813                           
  5814                           ;doprnt.c: 559: continue;
  5815  0275  2A50               	goto	l4032
  5816  0276                     l3920:
  5817                           
  5818                           ;doprnt.c: 560: };doprnt.c: 563: width = 0;
  5819  0276  01C6               	clrf	sprintf@width
  5820  0277  01C7               	clrf	sprintf@width+1
  5821                           
  5822                           ;doprnt.c: 565: flag = 0;
  5823  0278  01C0               	clrf	sprintf@flag
  5824                           
  5825                           ;doprnt.c: 614: if(isdigit((unsigned)*f)) {
  5826  0279  082F               	movf	sprintf@f+1,w
  5827  027A  00FF               	movwf	127
  5828  027B  082E               	movf	sprintf@f,w
  5829  027C  0084               	movwf	4
  5830  027D  160A  118A  2000  120A  118A  	fcall	stringtab
  5831  0282  120A  158A  2001  120A  118A  	fcall	_isdigit
  5832  0287  1C03               	btfss	3,0
  5833  0288  2B45               	goto	l3970
  5834                           
  5835                           ;doprnt.c: 615: width = 0;
  5836  0289  01C6               	clrf	sprintf@width
  5837  028A  01C7               	clrf	sprintf@width+1
  5838  028B                     l3926:
  5839                           
  5840                           ;doprnt.c: 617: width *= 10;
  5841  028B  300A               	movlw	10
  5842  028C  00A0               	movwf	___wmul@multiplier
  5843  028D  3000               	movlw	0
  5844  028E  00A1               	movwf	___wmul@multiplier+1
  5845  028F  0847               	movf	sprintf@width+1,w
  5846  0290  00A3               	movwf	___wmul@multiplicand+1
  5847  0291  0846               	movf	sprintf@width,w
  5848  0292  00A2               	movwf	___wmul@multiplicand
  5849  0293  160A  158A  249C  120A  118A  	fcall	___wmul
  5850  0298  0821               	movf	?___wmul+1,w
  5851  0299  00C7               	movwf	sprintf@width+1
  5852  029A  0820               	movf	?___wmul,w
  5853  029B  00C6               	movwf	sprintf@width
  5854                           
  5855                           ;doprnt.c: 618: width += *f++ - '0';
  5856  029C  082F               	movf	sprintf@f+1,w
  5857  029D  00FF               	movwf	127
  5858  029E  082E               	movf	sprintf@f,w
  5859  029F  0084               	movwf	4
  5860  02A0  160A  118A  2000  120A  118A  	fcall	stringtab
  5861  02A5  3ED0               	addlw	208
  5862  02A6  00BA               	movwf	??_sprintf
  5863  02A7  30FF               	movlw	255
  5864  02A8  1803               	skipnc
  5865  02A9  3000               	movlw	0
  5866  02AA  00BB               	movwf	??_sprintf+1
  5867  02AB  083A               	movf	??_sprintf,w
  5868  02AC  07C6               	addwf	sprintf@width,f
  5869  02AD  1803               	skipnc
  5870  02AE  0AC7               	incf	sprintf@width+1,f
  5871  02AF  083B               	movf	??_sprintf+1,w
  5872  02B0  07C7               	addwf	sprintf@width+1,f
  5873  02B1  3001               	movlw	1
  5874  02B2  07AE               	addwf	sprintf@f,f
  5875  02B3  1803               	skipnc
  5876  02B4  0AAF               	incf	sprintf@f+1,f
  5877  02B5  3000               	movlw	0
  5878  02B6  07AF               	addwf	sprintf@f+1,f
  5879                           
  5880                           ;doprnt.c: 619: } while(isdigit((unsigned)*f));
  5881  02B7  082F               	movf	sprintf@f+1,w
  5882  02B8  00FF               	movwf	127
  5883  02B9  082E               	movf	sprintf@f,w
  5884  02BA  0084               	movwf	4
  5885  02BB  160A  118A  2000  120A  118A  	fcall	stringtab
  5886  02C0  120A  158A  2001  120A  118A  	fcall	_isdigit
  5887  02C5  1C03               	btfss	3,0
  5888  02C6  2B45               	goto	l3970
  5889  02C7  2A8B               	goto	l3926
  5890  02C8                     l3934:
  5891                           
  5892                           ;doprnt.c: 760: cp = (*(const char * *)__va_arg((*(const char * **)ap), (const char *)0)
      +                          );
  5893  02C8  0841               	movf	sprintf@ap,w
  5894  02C9  0084               	movwf	4
  5895  02CA  1383               	bcf	3,7	;select IRP bank0
  5896  02CB  0800               	movf	0,w
  5897  02CC  00BE               	movwf	sprintf@cp
  5898  02CD  0A84               	incf	4,f
  5899  02CE  0800               	movf	0,w
  5900  02CF  0384               	decf	4,f
  5901  02D0  00BF               	movwf	sprintf@cp+1
  5902  02D1  3002               	movlw	2
  5903  02D2  00BA               	movwf	??_sprintf
  5904  02D3  083A               	movf	??_sprintf,w
  5905  02D4  07C1               	addwf	sprintf@ap,f
  5906                           
  5907                           ;doprnt.c: 766: if(!cp)
  5908  02D5  083E               	movf	sprintf@cp,w
  5909  02D6  043F               	iorwf	sprintf@cp+1,w
  5910  02D7  1D03               	btfss	3,2
  5911  02D8  2ADD               	goto	l3942
  5912                           
  5913                           ;doprnt.c: 767: cp = "(null)";
  5914  02D9  30B9               	movlw	low (STR_66| (0+32768))
  5915  02DA  00BE               	movwf	sprintf@cp
  5916  02DB  3091               	movlw	high (STR_66| (0+32768))
  5917  02DC  00BF               	movwf	sprintf@cp+1
  5918  02DD                     l3942:
  5919                           
  5920                           ;doprnt.c: 771: len = 0;
  5921  02DD  01C2               	clrf	sprintf@len
  5922  02DE  01C3               	clrf	sprintf@len+1
  5923  02DF                     l3946:	
  5924                           ;doprnt.c: 772: while(cp[len])
  5925                           
  5926  02DF  0842               	movf	sprintf@len,w
  5927  02E0  073E               	addwf	sprintf@cp,w
  5928  02E1  0084               	movwf	4
  5929  02E2  083F               	movf	sprintf@cp+1,w
  5930  02E3  1803               	skipnc
  5931  02E4  0A3F               	incf	sprintf@cp+1,w
  5932  02E5  00FF               	movwf	127
  5933  02E6  160A  118A  2000  120A  118A  	fcall	stringtab
  5934  02EB  3A00               	xorlw	0
  5935  02EC  1903               	btfsc	3,2
  5936  02ED  2AF5               	goto	l3948
  5937                           
  5938                           ;doprnt.c: 773: len++;
  5939  02EE  3001               	movlw	1
  5940  02EF  07C2               	addwf	sprintf@len,f
  5941  02F0  1803               	skipnc
  5942  02F1  0AC3               	incf	sprintf@len+1,f
  5943  02F2  3000               	movlw	0
  5944  02F3  07C3               	addwf	sprintf@len+1,f
  5945  02F4  2ADF               	goto	l3946
  5946  02F5                     l3948:
  5947                           
  5948                           ;doprnt.c: 783: if(((unsigned)width) > len)
  5949  02F5  0847               	movf	sprintf@width+1,w
  5950  02F6  0243               	subwf	sprintf@len+1,w
  5951  02F7  1D03               	skipz
  5952  02F8  2AFB               	goto	u4335
  5953  02F9  0846               	movf	sprintf@width,w
  5954  02FA  0242               	subwf	sprintf@len,w
  5955  02FB                     u4335:
  5956  02FB  1803               	skipnc
  5957  02FC  2B04               	goto	l3952
  5958                           
  5959                           ;doprnt.c: 784: width -= len;
  5960  02FD  0842               	movf	sprintf@len,w
  5961  02FE  02C6               	subwf	sprintf@width,f
  5962  02FF  0843               	movf	sprintf@len+1,w
  5963  0300  1C03               	skipc
  5964  0301  03C7               	decf	sprintf@width+1,f
  5965  0302  02C7               	subwf	sprintf@width+1,f
  5966  0303  2B06               	goto	l3958
  5967  0304                     l3952:
  5968                           
  5969                           ;doprnt.c: 785: else;doprnt.c: 786: width = 0;
  5970  0304  01C6               	clrf	sprintf@width
  5971  0305  01C7               	clrf	sprintf@width+1
  5972  0306                     l3958:
  5973  0306  30FF               	movlw	255
  5974  0307  07C6               	addwf	sprintf@width,f
  5975  0308  1803               	skipnc
  5976  0309  0AC7               	incf	sprintf@width+1,f
  5977  030A  30FF               	movlw	255
  5978  030B  07C7               	addwf	sprintf@width+1,f
  5979  030C  0A46               	incf	sprintf@width,w
  5980  030D  1903               	btfsc	3,2
  5981  030E  0A47               	incf	sprintf@width+1,w
  5982  030F  1903               	btfsc	3,2
  5983  0310  2B36               	goto	l3966
  5984                           
  5985                           ;doprnt.c: 791: ((*sp++ = (' ')));
  5986  0311  3020               	movlw	32
  5987  0312  00BA               	movwf	??_sprintf
  5988  0313  0849               	movf	sprintf@sp,w
  5989  0314  0084               	movwf	4
  5990  0315  083A               	movf	??_sprintf,w
  5991  0316  1783               	bsf	3,7	;select IRP bank2
  5992  0317  0080               	movwf	0
  5993  0318  3001               	movlw	1
  5994  0319  00BA               	movwf	??_sprintf
  5995  031A  083A               	movf	??_sprintf,w
  5996  031B  07C9               	addwf	sprintf@sp,f
  5997  031C  2B06               	goto	l3958
  5998  031D                     l3960:
  5999                           
  6000                           ;doprnt.c: 794: ((*sp++ = (*cp++)));
  6001  031D  083F               	movf	sprintf@cp+1,w
  6002  031E  00FF               	movwf	127
  6003  031F  083E               	movf	sprintf@cp,w
  6004  0320  0084               	movwf	4
  6005  0321  160A  118A  2000  120A  118A  	fcall	stringtab
  6006  0326  00BA               	movwf	??_sprintf
  6007  0327  0849               	movf	sprintf@sp,w
  6008  0328  0084               	movwf	4
  6009  0329  083A               	movf	??_sprintf,w
  6010  032A  1783               	bsf	3,7	;select IRP bank2
  6011  032B  0080               	movwf	0
  6012  032C  3001               	movlw	1
  6013  032D  07BE               	addwf	sprintf@cp,f
  6014  032E  1803               	skipnc
  6015  032F  0ABF               	incf	sprintf@cp+1,f
  6016  0330  3000               	movlw	0
  6017  0331  07BF               	addwf	sprintf@cp+1,f
  6018  0332  3001               	movlw	1
  6019  0333  00BA               	movwf	??_sprintf
  6020  0334  083A               	movf	??_sprintf,w
  6021  0335  07C9               	addwf	sprintf@sp,f
  6022  0336                     l3966:
  6023  0336  3001               	movlw	1
  6024  0337  02C2               	subwf	sprintf@len,f
  6025  0338  3000               	movlw	0
  6026  0339  1C03               	skipc
  6027  033A  03C3               	decf	sprintf@len+1,f
  6028  033B  02C3               	subwf	sprintf@len+1,f
  6029  033C  0A42               	incf	sprintf@len,w
  6030  033D  1D03               	skipz
  6031  033E  2B1D               	goto	l3960
  6032  033F  0A43               	incf	sprintf@len+1,w
  6033  0340  1903               	btfsc	3,2
  6034  0341  2A50               	goto	l4032
  6035  0342  2B1D               	goto	l3960
  6036  0343                     l823:	
  6037                           ;doprnt.c: 843: case 'u':
  6038                           
  6039                           
  6040                           ;doprnt.c: 844: flag |= 0x40;
  6041  0343  1740               	bsf	sprintf@flag,6
  6042                           
  6043                           ;doprnt.c: 845: break;
  6044  0344  2B66               	goto	l808
  6045  0345                     l3970:
  6046  0345  082F               	movf	sprintf@f+1,w
  6047  0346  00BB               	movwf	??_sprintf+1
  6048  0347  082E               	movf	sprintf@f,w
  6049  0348  00BA               	movwf	??_sprintf
  6050  0349  0AAE               	incf	sprintf@f,f
  6051  034A  1903               	skipnz
  6052  034B  0AAF               	incf	sprintf@f+1,f
  6053  034C  083B               	movf	??_sprintf+1,w
  6054  034D  00FF               	movwf	127
  6055  034E  083A               	movf	??_sprintf,w
  6056  034F  0084               	movwf	4
  6057  0350  160A  118A  2000  120A  118A  	fcall	stringtab
  6058  0355  00C8               	movwf	sprintf@c
  6059                           
  6060                           ; Switch size 1, requested type "simple"
  6061                           ; Number of cases is 5, Range of values is 0 to 117
  6062                           ; switch strategies available:
  6063                           ; Name         Instructions Cycles
  6064                           ; simple_byte           16     9 (average)
  6065                           ; jumptable            260     6 (fixed)
  6066                           ;	Chosen strategy is simple_byte
  6067  0356  3A00               	xorlw	0	; case 0
  6068  0357  1903               	skipnz
  6069  0358  2C49               	goto	l4034
  6070  0359  3A64               	xorlw	100	; case 100
  6071  035A  1903               	skipnz
  6072  035B  2B66               	goto	l808
  6073  035C  3A0D               	xorlw	13	; case 105
  6074  035D  1903               	skipnz
  6075  035E  2B66               	goto	l808
  6076  035F  3A1A               	xorlw	26	; case 115
  6077  0360  1903               	skipnz
  6078  0361  2AC8               	goto	l3934
  6079  0362  3A06               	xorlw	6	; case 117
  6080  0363  1903               	skipnz
  6081  0364  2B43               	goto	l823
  6082  0365  2A50               	goto	l4032
  6083  0366                     l808:
  6084                           
  6085                           ;doprnt.c: 1277: if((flag & 0x40) == 0x00)
  6086  0366  1B40               	btfsc	sprintf@flag,6
  6087  0367  2B80               	goto	l3982
  6088                           
  6089                           ;doprnt.c: 1279: {;doprnt.c: 1285: val = (unsigned int)(*(int *)__va_arg((*(int **)ap), 
      +                          (int)0));
  6090  0368  0841               	movf	sprintf@ap,w
  6091  0369  0084               	movwf	4
  6092  036A  1383               	bcf	3,7	;select IRP bank0
  6093  036B  0800               	movf	0,w
  6094  036C  00C4               	movwf	sprintf@val
  6095  036D  0A84               	incf	4,f
  6096  036E  0800               	movf	0,w
  6097  036F  00C5               	movwf	sprintf@val+1
  6098  0370  3002               	movlw	2
  6099  0371  00BA               	movwf	??_sprintf
  6100  0372  083A               	movf	??_sprintf,w
  6101  0373  07C1               	addwf	sprintf@ap,f
  6102                           
  6103                           ;doprnt.c: 1287: if((int)val < 0) {
  6104  0374  1FC5               	btfss	sprintf@val+1,7
  6105  0375  2B8C               	goto	l3986
  6106                           
  6107                           ;doprnt.c: 1288: flag |= 0x03;
  6108  0376  3003               	movlw	3
  6109  0377  00BA               	movwf	??_sprintf
  6110  0378  083A               	movf	??_sprintf,w
  6111  0379  04C0               	iorwf	sprintf@flag,f
  6112                           
  6113                           ;doprnt.c: 1289: val = -val;
  6114  037A  09C4               	comf	sprintf@val,f
  6115  037B  09C5               	comf	sprintf@val+1,f
  6116  037C  0AC4               	incf	sprintf@val,f
  6117  037D  1903               	skipnz
  6118  037E  0AC5               	incf	sprintf@val+1,f
  6119  037F  2B8C               	goto	l3986
  6120  0380                     l3982:
  6121                           
  6122                           ;doprnt.c: 1294: else;doprnt.c: 1299: {;doprnt.c: 1312: val = (*(unsigned *)__va_arg((*(
      +                          unsigned **)ap), (unsigned)0));
  6123  0380  0841               	movf	sprintf@ap,w
  6124  0381  0084               	movwf	4
  6125  0382  1383               	bcf	3,7	;select IRP bank0
  6126  0383  0800               	movf	0,w
  6127  0384  00C4               	movwf	sprintf@val
  6128  0385  0A84               	incf	4,f
  6129  0386  0800               	movf	0,w
  6130  0387  00C5               	movwf	sprintf@val+1
  6131  0388  3002               	movlw	2
  6132  0389  00BA               	movwf	??_sprintf
  6133  038A  083A               	movf	??_sprintf,w
  6134  038B  07C1               	addwf	sprintf@ap,f
  6135  038C                     l3986:
  6136                           
  6137                           ;doprnt.c: 1313: };doprnt.c: 1331: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c
      +                          ++)
  6138  038C  01C8               	clrf	sprintf@c
  6139  038D  0AC8               	incf	sprintf@c,f
  6140  038E                     l3992:
  6141                           
  6142                           ;doprnt.c: 1332: if(val < dpowers[c])
  6143  038E  0848               	movf	sprintf@c,w
  6144  038F  00BA               	movwf	??_sprintf
  6145  0390  073A               	addwf	??_sprintf,w
  6146  0391  3E52               	addlw	low (_dpowers| (0+32768))
  6147  0392  0084               	movwf	4
  6148  0393  3090               	movlw	high (_dpowers| (0+32768))
  6149  0394  1803               	skipnc
  6150  0395  3E01               	addlw	1
  6151  0396  00FF               	movwf	127
  6152  0397  160A  118A  2000  120A  118A  	fcall	stringtab
  6153  039C  00BB               	movwf	??_sprintf+1
  6154  039D  160A  118A  2000  120A  118A  	fcall	stringtab
  6155  03A2  00BC               	movwf	??_sprintf+2
  6156  03A3  083C               	movf	??_sprintf+2,w
  6157  03A4  0245               	subwf	sprintf@val+1,w
  6158  03A5  1D03               	skipz
  6159  03A6  2BA9               	goto	u4385
  6160  03A7  083B               	movf	??_sprintf+1,w
  6161  03A8  0244               	subwf	sprintf@val,w
  6162  03A9                     u4385:
  6163  03A9  1C03               	btfss	3,0
  6164  03AA  2BB3               	goto	l3998
  6165  03AB  3001               	movlw	1
  6166  03AC  00BA               	movwf	??_sprintf
  6167  03AD  083A               	movf	??_sprintf,w
  6168  03AE  07C8               	addwf	sprintf@c,f
  6169  03AF  3005               	movlw	5
  6170  03B0  0648               	xorwf	sprintf@c,w
  6171  03B1  1D03               	btfss	3,2
  6172  03B2  2B8E               	goto	l3992
  6173  03B3                     l3998:
  6174                           
  6175                           ;doprnt.c: 1371: if(width && flag & 0x03)
  6176  03B3  0846               	movf	sprintf@width,w
  6177  03B4  0447               	iorwf	sprintf@width+1,w
  6178  03B5  1903               	btfsc	3,2
  6179  03B6  2BC1               	goto	l830
  6180  03B7  0840               	movf	sprintf@flag,w
  6181  03B8  3903               	andlw	3
  6182  03B9  1903               	btfsc	3,2
  6183  03BA  2BC1               	goto	l830
  6184                           
  6185                           ;doprnt.c: 1372: width--;
  6186  03BB  30FF               	movlw	255
  6187  03BC  07C6               	addwf	sprintf@width,f
  6188  03BD  1803               	skipnc
  6189  03BE  0AC7               	incf	sprintf@width+1,f
  6190  03BF  30FF               	movlw	255
  6191  03C0  07C7               	addwf	sprintf@width+1,f
  6192  03C1                     l830:
  6193                           
  6194                           ;doprnt.c: 1407: if(width > c)
  6195  03C1  0847               	movf	sprintf@width+1,w
  6196  03C2  3A80               	xorlw	128
  6197  03C3  3C80               	sublw	128
  6198  03C4  1D03               	skipz
  6199  03C5  2BC8               	goto	u4425
  6200  03C6  0846               	movf	sprintf@width,w
  6201  03C7  0248               	subwf	sprintf@c,w
  6202  03C8                     u4425:
  6203  03C8  1803               	skipnc
  6204  03C9  2BD6               	goto	l4006
  6205                           
  6206                           ;doprnt.c: 1408: width -= c;
  6207  03CA  1283               	bcf	3,5	;RP0=0, select bank0
  6208  03CB  1303               	bcf	3,6	;RP1=0, select bank0
  6209  03CC  0848               	movf	sprintf@c,w
  6210  03CD  00BA               	movwf	??_sprintf
  6211  03CE  01BB               	clrf	??_sprintf+1
  6212  03CF  083A               	movf	??_sprintf,w
  6213  03D0  02C6               	subwf	sprintf@width,f
  6214  03D1  083B               	movf	??_sprintf+1,w
  6215  03D2  1C03               	skipc
  6216  03D3  03C7               	decf	sprintf@width+1,f
  6217  03D4  02C7               	subwf	sprintf@width+1,f
  6218  03D5  2BDA               	goto	l4008
  6219  03D6                     l4006:
  6220                           
  6221                           ;doprnt.c: 1409: else;doprnt.c: 1410: width = 0;
  6222  03D6  1283               	bcf	3,5	;RP0=0, select bank0
  6223  03D7  1303               	bcf	3,6	;RP1=0, select bank0
  6224  03D8  01C6               	clrf	sprintf@width
  6225  03D9  01C7               	clrf	sprintf@width+1
  6226  03DA                     l4008:
  6227                           
  6228                           ;doprnt.c: 1448: {;doprnt.c: 1450: if(width;doprnt.c: 1454: )
  6229  03DA  0846               	movf	sprintf@width,w
  6230  03DB  0447               	iorwf	sprintf@width+1,w
  6231  03DC  1903               	btfsc	3,2
  6232  03DD  2BF3               	goto	l4016
  6233  03DE                     l4010:
  6234                           
  6235                           ;doprnt.c: 1456: ((*sp++ = (' ')));
  6236  03DE  3020               	movlw	32
  6237  03DF  00BA               	movwf	??_sprintf
  6238  03E0  0849               	movf	sprintf@sp,w
  6239  03E1  0084               	movwf	4
  6240  03E2  083A               	movf	??_sprintf,w
  6241  03E3  1783               	bsf	3,7	;select IRP bank2
  6242  03E4  0080               	movwf	0
  6243  03E5  3001               	movlw	1
  6244  03E6  00BA               	movwf	??_sprintf
  6245  03E7  083A               	movf	??_sprintf,w
  6246  03E8  07C9               	addwf	sprintf@sp,f
  6247                           
  6248                           ;doprnt.c: 1457: while(--width);
  6249  03E9  30FF               	movlw	255
  6250  03EA  07C6               	addwf	sprintf@width,f
  6251  03EB  1803               	skipnc
  6252  03EC  0AC7               	incf	sprintf@width+1,f
  6253  03ED  30FF               	movlw	255
  6254  03EE  07C7               	addwf	sprintf@width+1,f
  6255  03EF  0846               	movf	sprintf@width,w
  6256  03F0  0447               	iorwf	sprintf@width+1,w
  6257  03F1  1D03               	btfss	3,2
  6258  03F2  2BDE               	goto	l4010
  6259  03F3                     l4016:
  6260                           
  6261                           ;doprnt.c: 1464: if(flag & 0x03)
  6262  03F3  0840               	movf	sprintf@flag,w
  6263  03F4  3903               	andlw	3
  6264  03F5  1903               	btfsc	3,2
  6265  03F6  2C02               	goto	l4022
  6266                           
  6267                           ;doprnt.c: 1465: ((*sp++ = ('-')));
  6268  03F7  302D               	movlw	45
  6269  03F8  00BA               	movwf	??_sprintf
  6270  03F9  0849               	movf	sprintf@sp,w
  6271  03FA  0084               	movwf	4
  6272  03FB  083A               	movf	??_sprintf,w
  6273  03FC  1783               	bsf	3,7	;select IRP bank2
  6274  03FD  0080               	movwf	0
  6275  03FE  3001               	movlw	1
  6276  03FF  00BA               	movwf	??_sprintf
  6277  0400  083A               	movf	??_sprintf,w
  6278  0401  07C9               	addwf	sprintf@sp,f
  6279  0402                     l4022:
  6280                           
  6281                           ;doprnt.c: 1495: };doprnt.c: 1498: prec = c;
  6282  0402  0848               	movf	sprintf@c,w
  6283  0403  00BA               	movwf	??_sprintf
  6284  0404  083A               	movf	??_sprintf,w
  6285  0405  00BD               	movwf	sprintf@prec
  6286  0406                     l4030:	
  6287                           ;doprnt.c: 1500: while(prec--) {
  6288                           
  6289  0406  30FF               	movlw	255
  6290  0407  00BA               	movwf	??_sprintf
  6291  0408  083A               	movf	??_sprintf,w
  6292  0409  07BD               	addwf	sprintf@prec,f
  6293  040A  0A3D               	incf	sprintf@prec,w
  6294  040B  1903               	btfsc	3,2
  6295  040C  2A50               	goto	l4032
  6296                           
  6297                           ;doprnt.c: 1504: {;doprnt.c: 1515: c = (val / dpowers[(unsigned char)prec]) % 10 + '0';
  6298  040D  300A               	movlw	10
  6299  040E  00A8               	movwf	___lwmod@divisor
  6300  040F  3000               	movlw	0
  6301  0410  00A9               	movwf	___lwmod@divisor+1
  6302  0411  083D               	movf	sprintf@prec,w
  6303  0412  00BA               	movwf	??_sprintf
  6304  0413  073A               	addwf	??_sprintf,w
  6305  0414  3E52               	addlw	low (_dpowers| (0+32768))
  6306  0415  0084               	movwf	4
  6307  0416  3090               	movlw	high (_dpowers| (0+32768))
  6308  0417  1803               	skipnc
  6309  0418  3E01               	addlw	1
  6310  0419  00FF               	movwf	127
  6311  041A  160A  118A  2000  120A  118A  	fcall	stringtab
  6312  041F  00A0               	movwf	___lwdiv@divisor
  6313  0420  160A  118A  2000  120A  118A  	fcall	stringtab
  6314  0425  00A1               	movwf	___lwdiv@divisor+1
  6315  0426  0845               	movf	sprintf@val+1,w
  6316  0427  00A3               	movwf	___lwdiv@dividend+1
  6317  0428  0844               	movf	sprintf@val,w
  6318  0429  00A2               	movwf	___lwdiv@dividend
  6319  042A  160A  158A  2617  120A  118A  	fcall	___lwdiv
  6320  042F  0821               	movf	?___lwdiv+1,w
  6321  0430  00AB               	movwf	___lwmod@dividend+1
  6322  0431  0820               	movf	?___lwdiv,w
  6323  0432  00AA               	movwf	___lwmod@dividend
  6324  0433  160A  158A  2573  120A  118A  	fcall	___lwmod
  6325  0438  0828               	movf	?___lwmod,w
  6326  0439  3E30               	addlw	48
  6327  043A  00BB               	movwf	??_sprintf+1
  6328  043B  083B               	movf	??_sprintf+1,w
  6329  043C  00C8               	movwf	sprintf@c
  6330                           
  6331                           ;doprnt.c: 1549: };doprnt.c: 1550: ((*sp++ = (c)));
  6332  043D  0848               	movf	sprintf@c,w
  6333  043E  00BA               	movwf	??_sprintf
  6334  043F  0849               	movf	sprintf@sp,w
  6335  0440  0084               	movwf	4
  6336  0441  083A               	movf	??_sprintf,w
  6337  0442  1783               	bsf	3,7	;select IRP bank2
  6338  0443  0080               	movwf	0
  6339  0444  3001               	movlw	1
  6340  0445  00BA               	movwf	??_sprintf
  6341  0446  083A               	movf	??_sprintf,w
  6342  0447  07C9               	addwf	sprintf@sp,f
  6343  0448  2C06               	goto	l4030
  6344  0449                     l4034:
  6345                           
  6346                           ;doprnt.c: 1564: *sp = 0;
  6347  0449  0849               	movf	sprintf@sp,w
  6348  044A  0084               	movwf	4
  6349  044B  1783               	bsf	3,7	;select IRP bank2
  6350  044C  0180               	clrf	0
  6351  044D  0008               	return
  6352  044E                     __end_of_sprintf:
  6353                           
  6354                           	psect	text18
  6355  0801                     __ptext18:	
  6356 ;; *************** function _isdigit *****************
  6357 ;; Defined at:
  6358 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\isdigit.c"
  6359 ;; Parameters:    Size  Location     Type
  6360 ;;  c               1    wreg     unsigned char 
  6361 ;; Auto vars:     Size  Location     Type
  6362 ;;  c               1    1[BANK0 ] unsigned char 
  6363 ;; Return value:  Size  Location     Type
  6364 ;;		None               void
  6365 ;; Registers used:
  6366 ;;		wreg, status,2, status,0
  6367 ;; Tracked objects:
  6368 ;;		On entry : 300/0
  6369 ;;		On exit  : 300/0
  6370 ;;		Unchanged: 0/0
  6371 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6372 ;;      Params:         0       0       0       0       0
  6373 ;;      Locals:         0       2       0       0       0
  6374 ;;      Temps:          0       0       0       0       0
  6375 ;;      Totals:         0       2       0       0       0
  6376 ;;Total ram usage:        2 bytes
  6377 ;; Hardware stack levels used: 1
  6378 ;; Hardware stack levels required when called: 2
  6379 ;; This function calls:
  6380 ;;		Nothing
  6381 ;; This function is called by:
  6382 ;;		_sprintf
  6383 ;; This function uses a non-reentrant model
  6384 ;;
  6385                           
  6386                           
  6387                           ;psect for function _isdigit
  6388  0801                     _isdigit:
  6389                           
  6390                           ;incstack = 0
  6391                           ; Regs used in _isdigit: [wreg+status,2+status,0]
  6392                           ;isdigit@c stored from wreg
  6393  0801  00A1               	movwf	isdigit@c
  6394  0802  01A0               	clrf	_isdigit$1582
  6395  0803  303A               	movlw	58
  6396  0804  0221               	subwf	isdigit@c,w
  6397  0805  1803               	skipnc
  6398  0806  280D               	goto	l3636
  6399  0807  3030               	movlw	48
  6400  0808  0221               	subwf	isdigit@c,w
  6401  0809  1C03               	skipc
  6402  080A  280D               	goto	l3636
  6403  080B  01A0               	clrf	_isdigit$1582
  6404  080C  0AA0               	incf	_isdigit$1582,f
  6405  080D                     l3636:
  6406  080D  0C20               	rrf	_isdigit$1582,w
  6407  080E  0008               	return
  6408  080F                     __end_of_isdigit:
  6409                           
  6410                           	psect	text19
  6411  1C9C                     __ptext19:	
  6412 ;; *************** function ___wmul *****************
  6413 ;; Defined at:
  6414 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\Umul16.c"
  6415 ;; Parameters:    Size  Location     Type
  6416 ;;  multiplier      2    0[BANK0 ] unsigned int 
  6417 ;;  multiplicand    2    2[BANK0 ] unsigned int 
  6418 ;; Auto vars:     Size  Location     Type
  6419 ;;  product         2    4[BANK0 ] unsigned int 
  6420 ;; Return value:  Size  Location     Type
  6421 ;;                  2    0[BANK0 ] unsigned int 
  6422 ;; Registers used:
  6423 ;;		wreg, status,2, status,0
  6424 ;; Tracked objects:
  6425 ;;		On entry : 300/0
  6426 ;;		On exit  : 300/0
  6427 ;;		Unchanged: 0/0
  6428 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6429 ;;      Params:         0       4       0       0       0
  6430 ;;      Locals:         0       2       0       0       0
  6431 ;;      Temps:          0       0       0       0       0
  6432 ;;      Totals:         0       6       0       0       0
  6433 ;;Total ram usage:        6 bytes
  6434 ;; Hardware stack levels used: 1
  6435 ;; Hardware stack levels required when called: 2
  6436 ;; This function calls:
  6437 ;;		Nothing
  6438 ;; This function is called by:
  6439 ;;		_fMenuStrip
  6440 ;;		_sprintf
  6441 ;; This function uses a non-reentrant model
  6442 ;;
  6443                           
  6444                           
  6445                           ;psect for function ___wmul
  6446  1C9C                     ___wmul:
  6447                           
  6448                           ;incstack = 0
  6449                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  6450  1C9C  01A4               	clrf	___wmul@product
  6451  1C9D  01A5               	clrf	___wmul@product+1
  6452  1C9E                     l3642:
  6453  1C9E  1C20               	btfss	___wmul@multiplier,0
  6454  1C9F  2CA6               	goto	l845
  6455  1CA0  0822               	movf	___wmul@multiplicand,w
  6456  1CA1  07A4               	addwf	___wmul@product,f
  6457  1CA2  1803               	skipnc
  6458  1CA3  0AA5               	incf	___wmul@product+1,f
  6459  1CA4  0823               	movf	___wmul@multiplicand+1,w
  6460  1CA5  07A5               	addwf	___wmul@product+1,f
  6461  1CA6                     l845:
  6462  1CA6  3001               	movlw	1
  6463  1CA7                     u3835:
  6464  1CA7  1003               	clrc
  6465  1CA8  0DA2               	rlf	___wmul@multiplicand,f
  6466  1CA9  0DA3               	rlf	___wmul@multiplicand+1,f
  6467  1CAA  3EFF               	addlw	-1
  6468  1CAB  1D03               	skipz
  6469  1CAC  2CA7               	goto	u3835
  6470  1CAD  3001               	movlw	1
  6471  1CAE                     u3845:
  6472  1CAE  1003               	clrc
  6473  1CAF  0CA1               	rrf	___wmul@multiplier+1,f
  6474  1CB0  0CA0               	rrf	___wmul@multiplier,f
  6475  1CB1  3EFF               	addlw	-1
  6476  1CB2  1D03               	skipz
  6477  1CB3  2CAE               	goto	u3845
  6478  1CB4  0820               	movf	___wmul@multiplier,w
  6479  1CB5  0421               	iorwf	___wmul@multiplier+1,w
  6480  1CB6  1D03               	btfss	3,2
  6481  1CB7  2C9E               	goto	l3642
  6482  1CB8  0825               	movf	___wmul@product+1,w
  6483  1CB9  00A1               	movwf	?___wmul+1
  6484  1CBA  0824               	movf	___wmul@product,w
  6485  1CBB  00A0               	movwf	?___wmul
  6486  1CBC  0008               	return
  6487  1CBD                     __end_of___wmul:
  6488                           
  6489                           	psect	text20
  6490  1D73                     __ptext20:	
  6491 ;; *************** function ___lwmod *****************
  6492 ;; Defined at:
  6493 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\lwmod.c"
  6494 ;; Parameters:    Size  Location     Type
  6495 ;;  divisor         2    8[BANK0 ] unsigned int 
  6496 ;;  dividend        2   10[BANK0 ] unsigned int 
  6497 ;; Auto vars:     Size  Location     Type
  6498 ;;  counter         1   13[BANK0 ] unsigned char 
  6499 ;; Return value:  Size  Location     Type
  6500 ;;                  2    8[BANK0 ] unsigned int 
  6501 ;; Registers used:
  6502 ;;		wreg, status,2, status,0
  6503 ;; Tracked objects:
  6504 ;;		On entry : 300/0
  6505 ;;		On exit  : 300/0
  6506 ;;		Unchanged: 0/0
  6507 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6508 ;;      Params:         0       4       0       0       0
  6509 ;;      Locals:         0       1       0       0       0
  6510 ;;      Temps:          0       1       0       0       0
  6511 ;;      Totals:         0       6       0       0       0
  6512 ;;Total ram usage:        6 bytes
  6513 ;; Hardware stack levels used: 1
  6514 ;; Hardware stack levels required when called: 2
  6515 ;; This function calls:
  6516 ;;		Nothing
  6517 ;; This function is called by:
  6518 ;;		_sprintf
  6519 ;; This function uses a non-reentrant model
  6520 ;;
  6521                           
  6522                           
  6523                           ;psect for function ___lwmod
  6524  1D73                     ___lwmod:
  6525                           
  6526                           ;incstack = 0
  6527                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  6528  1D73  0828               	movf	___lwmod@divisor,w
  6529  1D74  0429               	iorwf	___lwmod@divisor+1,w
  6530  1D75  1903               	btfsc	3,2
  6531  1D76  2DA0               	goto	l3818
  6532  1D77  01AD               	clrf	___lwmod@counter
  6533  1D78  0AAD               	incf	___lwmod@counter,f
  6534  1D79                     l3808:
  6535  1D79  1BA9               	btfsc	___lwmod@divisor+1,7
  6536  1D7A  2D87               	goto	l3810
  6537  1D7B  3001               	movlw	1
  6538  1D7C                     u4145:
  6539  1D7C  1003               	clrc
  6540  1D7D  0DA8               	rlf	___lwmod@divisor,f
  6541  1D7E  0DA9               	rlf	___lwmod@divisor+1,f
  6542  1D7F  3EFF               	addlw	-1
  6543  1D80  1D03               	skipz
  6544  1D81  2D7C               	goto	u4145
  6545  1D82  3001               	movlw	1
  6546  1D83  00AC               	movwf	??___lwmod
  6547  1D84  082C               	movf	??___lwmod,w
  6548  1D85  07AD               	addwf	___lwmod@counter,f
  6549  1D86  2D79               	goto	l3808
  6550  1D87                     l3810:
  6551  1D87  0829               	movf	___lwmod@divisor+1,w
  6552  1D88  022B               	subwf	___lwmod@dividend+1,w
  6553  1D89  1D03               	skipz
  6554  1D8A  2D8D               	goto	u4165
  6555  1D8B  0828               	movf	___lwmod@divisor,w
  6556  1D8C  022A               	subwf	___lwmod@dividend,w
  6557  1D8D                     u4165:
  6558  1D8D  1C03               	skipc
  6559  1D8E  2D95               	goto	l3814
  6560  1D8F  0828               	movf	___lwmod@divisor,w
  6561  1D90  02AA               	subwf	___lwmod@dividend,f
  6562  1D91  0829               	movf	___lwmod@divisor+1,w
  6563  1D92  1C03               	skipc
  6564  1D93  03AB               	decf	___lwmod@dividend+1,f
  6565  1D94  02AB               	subwf	___lwmod@dividend+1,f
  6566  1D95                     l3814:
  6567  1D95  3001               	movlw	1
  6568  1D96                     u4175:
  6569  1D96  1003               	clrc
  6570  1D97  0CA9               	rrf	___lwmod@divisor+1,f
  6571  1D98  0CA8               	rrf	___lwmod@divisor,f
  6572  1D99  3EFF               	addlw	-1
  6573  1D9A  1D03               	skipz
  6574  1D9B  2D96               	goto	u4175
  6575  1D9C  3001               	movlw	1
  6576  1D9D  02AD               	subwf	___lwmod@counter,f
  6577  1D9E  1D03               	btfss	3,2
  6578  1D9F  2D87               	goto	l3810
  6579  1DA0                     l3818:
  6580  1DA0  082B               	movf	___lwmod@dividend+1,w
  6581  1DA1  00A9               	movwf	?___lwmod+1
  6582  1DA2  082A               	movf	___lwmod@dividend,w
  6583  1DA3  00A8               	movwf	?___lwmod
  6584  1DA4  0008               	return
  6585  1DA5                     __end_of___lwmod:
  6586                           
  6587                           	psect	text21
  6588  1E17                     __ptext21:	
  6589 ;; *************** function ___lwdiv *****************
  6590 ;; Defined at:
  6591 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\lwdiv.c"
  6592 ;; Parameters:    Size  Location     Type
  6593 ;;  divisor         2    0[BANK0 ] unsigned int 
  6594 ;;  dividend        2    2[BANK0 ] unsigned int 
  6595 ;; Auto vars:     Size  Location     Type
  6596 ;;  quotient        2    5[BANK0 ] unsigned int 
  6597 ;;  counter         1    7[BANK0 ] unsigned char 
  6598 ;; Return value:  Size  Location     Type
  6599 ;;                  2    0[BANK0 ] unsigned int 
  6600 ;; Registers used:
  6601 ;;		wreg, status,2, status,0
  6602 ;; Tracked objects:
  6603 ;;		On entry : 300/0
  6604 ;;		On exit  : 300/0
  6605 ;;		Unchanged: 0/0
  6606 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6607 ;;      Params:         0       4       0       0       0
  6608 ;;      Locals:         0       3       0       0       0
  6609 ;;      Temps:          0       1       0       0       0
  6610 ;;      Totals:         0       8       0       0       0
  6611 ;;Total ram usage:        8 bytes
  6612 ;; Hardware stack levels used: 1
  6613 ;; Hardware stack levels required when called: 2
  6614 ;; This function calls:
  6615 ;;		Nothing
  6616 ;; This function is called by:
  6617 ;;		_sprintf
  6618 ;; This function uses a non-reentrant model
  6619 ;;
  6620                           
  6621                           
  6622                           ;psect for function ___lwdiv
  6623  1E17                     ___lwdiv:
  6624                           
  6625                           ;incstack = 0
  6626                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  6627  1E17  01A5               	clrf	___lwdiv@quotient
  6628  1E18  01A6               	clrf	___lwdiv@quotient+1
  6629  1E19  0820               	movf	___lwdiv@divisor,w
  6630  1E1A  0421               	iorwf	___lwdiv@divisor+1,w
  6631  1E1B  1903               	btfsc	3,2
  6632  1E1C  2E4E               	goto	l3796
  6633  1E1D  01A7               	clrf	___lwdiv@counter
  6634  1E1E  0AA7               	incf	___lwdiv@counter,f
  6635  1E1F                     l3784:
  6636  1E1F  1BA1               	btfsc	___lwdiv@divisor+1,7
  6637  1E20  2E2D               	goto	l3786
  6638  1E21  3001               	movlw	1
  6639  1E22                     u4075:
  6640  1E22  1003               	clrc
  6641  1E23  0DA0               	rlf	___lwdiv@divisor,f
  6642  1E24  0DA1               	rlf	___lwdiv@divisor+1,f
  6643  1E25  3EFF               	addlw	-1
  6644  1E26  1D03               	skipz
  6645  1E27  2E22               	goto	u4075
  6646  1E28  3001               	movlw	1
  6647  1E29  00A4               	movwf	??___lwdiv
  6648  1E2A  0824               	movf	??___lwdiv,w
  6649  1E2B  07A7               	addwf	___lwdiv@counter,f
  6650  1E2C  2E1F               	goto	l3784
  6651  1E2D                     l3786:
  6652  1E2D  3001               	movlw	1
  6653  1E2E                     u4095:
  6654  1E2E  1003               	clrc
  6655  1E2F  0DA5               	rlf	___lwdiv@quotient,f
  6656  1E30  0DA6               	rlf	___lwdiv@quotient+1,f
  6657  1E31  3EFF               	addlw	-1
  6658  1E32  1D03               	skipz
  6659  1E33  2E2E               	goto	u4095
  6660  1E34  0821               	movf	___lwdiv@divisor+1,w
  6661  1E35  0223               	subwf	___lwdiv@dividend+1,w
  6662  1E36  1D03               	skipz
  6663  1E37  2E3A               	goto	u4105
  6664  1E38  0820               	movf	___lwdiv@divisor,w
  6665  1E39  0222               	subwf	___lwdiv@dividend,w
  6666  1E3A                     u4105:
  6667  1E3A  1C03               	skipc
  6668  1E3B  2E43               	goto	l3792
  6669  1E3C  0820               	movf	___lwdiv@divisor,w
  6670  1E3D  02A2               	subwf	___lwdiv@dividend,f
  6671  1E3E  0821               	movf	___lwdiv@divisor+1,w
  6672  1E3F  1C03               	skipc
  6673  1E40  03A3               	decf	___lwdiv@dividend+1,f
  6674  1E41  02A3               	subwf	___lwdiv@dividend+1,f
  6675  1E42  1425               	bsf	___lwdiv@quotient,0
  6676  1E43                     l3792:
  6677  1E43  3001               	movlw	1
  6678  1E44                     u4115:
  6679  1E44  1003               	clrc
  6680  1E45  0CA1               	rrf	___lwdiv@divisor+1,f
  6681  1E46  0CA0               	rrf	___lwdiv@divisor,f
  6682  1E47  3EFF               	addlw	-1
  6683  1E48  1D03               	skipz
  6684  1E49  2E44               	goto	u4115
  6685  1E4A  3001               	movlw	1
  6686  1E4B  02A7               	subwf	___lwdiv@counter,f
  6687  1E4C  1D03               	btfss	3,2
  6688  1E4D  2E2D               	goto	l3786
  6689  1E4E                     l3796:
  6690  1E4E  0826               	movf	___lwdiv@quotient+1,w
  6691  1E4F  00A1               	movwf	?___lwdiv+1
  6692  1E50  0825               	movf	___lwdiv@quotient,w
  6693  1E51  00A0               	movwf	?___lwdiv
  6694  1E52  0008               	return
  6695  1E53                     __end_of___lwdiv:
  6696                           
  6697                           	psect	text22
  6698  1BAA                     __ptext22:	
  6699 ;; *************** function _fEraseString *****************
  6700 ;; Defined at:
  6701 ;;		line 149 in file "config.c"
  6702 ;; Parameters:    Size  Location     Type
  6703 ;;  string          1    wreg     PTR unsigned char 
  6704 ;;		 -> str2(16), 
  6705 ;; Auto vars:     Size  Location     Type
  6706 ;;  string          1    0[BANK0 ] PTR unsigned char 
  6707 ;;		 -> str2(16), 
  6708 ;; Return value:  Size  Location     Type
  6709 ;;                  1    wreg      void 
  6710 ;; Registers used:
  6711 ;;		wreg, fsr0l, fsr0h, status,2
  6712 ;; Tracked objects:
  6713 ;;		On entry : 300/800
  6714 ;;		On exit  : B00/800
  6715 ;;		Unchanged: 0/0
  6716 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6717 ;;      Params:         0       0       0       0       0
  6718 ;;      Locals:         0       1       0       0       0
  6719 ;;      Temps:          0       0       0       0       0
  6720 ;;      Totals:         0       1       0       0       0
  6721 ;;Total ram usage:        1 bytes
  6722 ;; Hardware stack levels used: 1
  6723 ;; Hardware stack levels required when called: 2
  6724 ;; This function calls:
  6725 ;;		Nothing
  6726 ;; This function is called by:
  6727 ;;		_fMenuStrip
  6728 ;; This function uses a non-reentrant model
  6729 ;;
  6730                           
  6731                           
  6732                           ;psect for function _fEraseString
  6733  1BAA                     _fEraseString:
  6734                           
  6735                           ;incstack = 0
  6736                           ; Regs used in _fEraseString: [wreg-fsr0h+status,2]
  6737                           ;fEraseString@string stored from wreg
  6738  1BAA  00A0               	movwf	fEraseString@string
  6739                           
  6740                           ;config.c: 150: string[0] = 0;
  6741  1BAB  0820               	movf	fEraseString@string,w
  6742  1BAC  0084               	movwf	4
  6743  1BAD  1783               	bsf	3,7	;select IRP bank2
  6744  1BAE  0180               	clrf	0
  6745  1BAF  0008               	return
  6746  1BB0                     __end_of_fEraseString:
  6747                           
  6748                           	psect	text23
  6749  1BF3                     __ptext23:	
  6750 ;; *************** function ___bmul *****************
  6751 ;; Defined at:
  6752 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\Umul8.c"
  6753 ;; Parameters:    Size  Location     Type
  6754 ;;  multiplier      1    wreg     unsigned char 
  6755 ;;  multiplicand    1    9[BANK0 ] unsigned char 
  6756 ;; Auto vars:     Size  Location     Type
  6757 ;;  multiplier      1   12[BANK0 ] unsigned char 
  6758 ;;  product         1   11[BANK0 ] unsigned char 
  6759 ;; Return value:  Size  Location     Type
  6760 ;;                  1    wreg      unsigned char 
  6761 ;; Registers used:
  6762 ;;		wreg, status,2, status,0
  6763 ;; Tracked objects:
  6764 ;;		On entry : 200/0
  6765 ;;		On exit  : 300/0
  6766 ;;		Unchanged: 0/0
  6767 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6768 ;;      Params:         0       1       0       0       0
  6769 ;;      Locals:         0       2       0       0       0
  6770 ;;      Temps:          0       1       0       0       0
  6771 ;;      Totals:         0       4       0       0       0
  6772 ;;Total ram usage:        4 bytes
  6773 ;; Hardware stack levels used: 1
  6774 ;; Hardware stack levels required when called: 2
  6775 ;; This function calls:
  6776 ;;		Nothing
  6777 ;; This function is called by:
  6778 ;;		_fMenuStrip
  6779 ;;		_eval_poly
  6780 ;; This function uses a non-reentrant model
  6781 ;;
  6782                           
  6783                           
  6784                           ;psect for function ___bmul
  6785  1BF3                     ___bmul:
  6786                           
  6787                           ;incstack = 0
  6788                           ; Regs used in ___bmul: [wreg+status,2+status,0]
  6789                           ;___bmul@multiplier stored from wreg
  6790  1BF3  1283               	bcf	3,5	;RP0=0, select bank0
  6791  1BF4  00AC               	movwf	___bmul@multiplier
  6792  1BF5  01AB               	clrf	___bmul@product
  6793  1BF6                     l3474:
  6794  1BF6  1C2C               	btfss	___bmul@multiplier,0
  6795  1BF7  2BFC               	goto	l3478
  6796  1BF8  0829               	movf	___bmul@multiplicand,w
  6797  1BF9  00AA               	movwf	??___bmul
  6798  1BFA  082A               	movf	??___bmul,w
  6799  1BFB  07AB               	addwf	___bmul@product,f
  6800  1BFC                     l3478:
  6801  1BFC  1003               	clrc
  6802  1BFD  0DA9               	rlf	___bmul@multiplicand,f
  6803  1BFE  1003               	clrc
  6804  1BFF  0CAC               	rrf	___bmul@multiplier,f
  6805  1C00  082C               	movf	___bmul@multiplier,w
  6806  1C01  1D03               	btfss	3,2
  6807  1C02  2BF6               	goto	l3474
  6808  1C03  082B               	movf	___bmul@product,w
  6809  1C04  0008               	return
  6810  1C05                     __end_of___bmul:
  6811                           
  6812                           	psect	text24
  6813  1F17                     __ptext24:	
  6814 ;; *************** function ___awmod *****************
  6815 ;; Defined at:
  6816 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\awmod.c"
  6817 ;; Parameters:    Size  Location     Type
  6818 ;;  divisor         2    9[BANK0 ] int 
  6819 ;;  dividend        2   11[BANK0 ] int 
  6820 ;; Auto vars:     Size  Location     Type
  6821 ;;  sign            1   15[BANK0 ] unsigned char 
  6822 ;;  counter         1   14[BANK0 ] unsigned char 
  6823 ;; Return value:  Size  Location     Type
  6824 ;;                  2    9[BANK0 ] int 
  6825 ;; Registers used:
  6826 ;;		wreg, status,2, status,0
  6827 ;; Tracked objects:
  6828 ;;		On entry : 300/0
  6829 ;;		On exit  : 300/0
  6830 ;;		Unchanged: 0/0
  6831 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6832 ;;      Params:         0       4       0       0       0
  6833 ;;      Locals:         0       2       0       0       0
  6834 ;;      Temps:          0       1       0       0       0
  6835 ;;      Totals:         0       7       0       0       0
  6836 ;;Total ram usage:        7 bytes
  6837 ;; Hardware stack levels used: 1
  6838 ;; Hardware stack levels required when called: 2
  6839 ;; This function calls:
  6840 ;;		Nothing
  6841 ;; This function is called by:
  6842 ;;		_fMenuStrip
  6843 ;; This function uses a non-reentrant model
  6844 ;;
  6845                           
  6846                           
  6847                           ;psect for function ___awmod
  6848  1F17                     ___awmod:
  6849                           
  6850                           ;incstack = 0
  6851                           ; Regs used in ___awmod: [wreg+status,2+status,0]
  6852  1F17  01AF               	clrf	___awmod@sign
  6853  1F18  1FAC               	btfss	___awmod@dividend+1,7
  6854  1F19  2F21               	goto	l4128
  6855  1F1A  09AB               	comf	___awmod@dividend,f
  6856  1F1B  09AC               	comf	___awmod@dividend+1,f
  6857  1F1C  0AAB               	incf	___awmod@dividend,f
  6858  1F1D  1903               	skipnz
  6859  1F1E  0AAC               	incf	___awmod@dividend+1,f
  6860  1F1F  01AF               	clrf	___awmod@sign
  6861  1F20  0AAF               	incf	___awmod@sign,f
  6862  1F21                     l4128:
  6863  1F21  1FAA               	btfss	___awmod@divisor+1,7
  6864  1F22  2F28               	goto	l4132
  6865  1F23  09A9               	comf	___awmod@divisor,f
  6866  1F24  09AA               	comf	___awmod@divisor+1,f
  6867  1F25  0AA9               	incf	___awmod@divisor,f
  6868  1F26  1903               	skipnz
  6869  1F27  0AAA               	incf	___awmod@divisor+1,f
  6870  1F28                     l4132:
  6871  1F28  0829               	movf	___awmod@divisor,w
  6872  1F29  042A               	iorwf	___awmod@divisor+1,w
  6873  1F2A  1903               	btfsc	3,2
  6874  1F2B  2F55               	goto	l4150
  6875  1F2C  01AE               	clrf	___awmod@counter
  6876  1F2D  0AAE               	incf	___awmod@counter,f
  6877  1F2E                     l4140:
  6878  1F2E  1BAA               	btfsc	___awmod@divisor+1,7
  6879  1F2F  2F3C               	goto	l4142
  6880  1F30  3001               	movlw	1
  6881  1F31                     u4655:
  6882  1F31  1003               	clrc
  6883  1F32  0DA9               	rlf	___awmod@divisor,f
  6884  1F33  0DAA               	rlf	___awmod@divisor+1,f
  6885  1F34  3EFF               	addlw	-1
  6886  1F35  1D03               	skipz
  6887  1F36  2F31               	goto	u4655
  6888  1F37  3001               	movlw	1
  6889  1F38  00AD               	movwf	??___awmod
  6890  1F39  082D               	movf	??___awmod,w
  6891  1F3A  07AE               	addwf	___awmod@counter,f
  6892  1F3B  2F2E               	goto	l4140
  6893  1F3C                     l4142:
  6894  1F3C  082A               	movf	___awmod@divisor+1,w
  6895  1F3D  022C               	subwf	___awmod@dividend+1,w
  6896  1F3E  1D03               	skipz
  6897  1F3F  2F42               	goto	u4675
  6898  1F40  0829               	movf	___awmod@divisor,w
  6899  1F41  022B               	subwf	___awmod@dividend,w
  6900  1F42                     u4675:
  6901  1F42  1C03               	skipc
  6902  1F43  2F4A               	goto	l4146
  6903  1F44  0829               	movf	___awmod@divisor,w
  6904  1F45  02AB               	subwf	___awmod@dividend,f
  6905  1F46  082A               	movf	___awmod@divisor+1,w
  6906  1F47  1C03               	skipc
  6907  1F48  03AC               	decf	___awmod@dividend+1,f
  6908  1F49  02AC               	subwf	___awmod@dividend+1,f
  6909  1F4A                     l4146:
  6910  1F4A  3001               	movlw	1
  6911  1F4B                     u4685:
  6912  1F4B  1003               	clrc
  6913  1F4C  0CAA               	rrf	___awmod@divisor+1,f
  6914  1F4D  0CA9               	rrf	___awmod@divisor,f
  6915  1F4E  3EFF               	addlw	-1
  6916  1F4F  1D03               	skipz
  6917  1F50  2F4B               	goto	u4685
  6918  1F51  3001               	movlw	1
  6919  1F52  02AE               	subwf	___awmod@counter,f
  6920  1F53  1D03               	btfss	3,2
  6921  1F54  2F3C               	goto	l4142
  6922  1F55                     l4150:
  6923  1F55  082F               	movf	___awmod@sign,w
  6924  1F56  1903               	btfsc	3,2
  6925  1F57  2F5D               	goto	l4154
  6926  1F58  09AB               	comf	___awmod@dividend,f
  6927  1F59  09AC               	comf	___awmod@dividend+1,f
  6928  1F5A  0AAB               	incf	___awmod@dividend,f
  6929  1F5B  1903               	skipnz
  6930  1F5C  0AAC               	incf	___awmod@dividend+1,f
  6931  1F5D                     l4154:
  6932  1F5D  082C               	movf	___awmod@dividend+1,w
  6933  1F5E  00AA               	movwf	?___awmod+1
  6934  1F5F  082B               	movf	___awmod@dividend,w
  6935  1F60  00A9               	movwf	?___awmod
  6936  1F61  0008               	return
  6937  1F62                     __end_of___awmod:
  6938                           
  6939                           	psect	text25
  6940  121A                     __ptext25:	
  6941 ;; *************** function ___awdiv *****************
  6942 ;; Defined at:
  6943 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\awdiv.c"
  6944 ;; Parameters:    Size  Location     Type
  6945 ;;  divisor         2    0[BANK0 ] int 
  6946 ;;  dividend        2    2[BANK0 ] int 
  6947 ;; Auto vars:     Size  Location     Type
  6948 ;;  quotient        2    7[BANK0 ] int 
  6949 ;;  sign            1    6[BANK0 ] unsigned char 
  6950 ;;  counter         1    5[BANK0 ] unsigned char 
  6951 ;; Return value:  Size  Location     Type
  6952 ;;                  2    0[BANK0 ] int 
  6953 ;; Registers used:
  6954 ;;		wreg, status,2, status,0
  6955 ;; Tracked objects:
  6956 ;;		On entry : 300/0
  6957 ;;		On exit  : 300/0
  6958 ;;		Unchanged: 0/0
  6959 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6960 ;;      Params:         0       4       0       0       0
  6961 ;;      Locals:         0       4       0       0       0
  6962 ;;      Temps:          0       1       0       0       0
  6963 ;;      Totals:         0       9       0       0       0
  6964 ;;Total ram usage:        9 bytes
  6965 ;; Hardware stack levels used: 1
  6966 ;; Hardware stack levels required when called: 2
  6967 ;; This function calls:
  6968 ;;		Nothing
  6969 ;; This function is called by:
  6970 ;;		_fMenuStrip
  6971 ;; This function uses a non-reentrant model
  6972 ;;
  6973                           
  6974                           
  6975                           ;psect for function ___awdiv
  6976  121A                     ___awdiv:
  6977                           
  6978                           ;incstack = 0
  6979                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
  6980  121A  01A6               	clrf	___awdiv@sign
  6981  121B  1FA1               	btfss	___awdiv@divisor+1,7
  6982  121C  2A24               	goto	l4084
  6983  121D  09A0               	comf	___awdiv@divisor,f
  6984  121E  09A1               	comf	___awdiv@divisor+1,f
  6985  121F  0AA0               	incf	___awdiv@divisor,f
  6986  1220  1903               	skipnz
  6987  1221  0AA1               	incf	___awdiv@divisor+1,f
  6988  1222  01A6               	clrf	___awdiv@sign
  6989  1223  0AA6               	incf	___awdiv@sign,f
  6990  1224                     l4084:
  6991  1224  1FA3               	btfss	___awdiv@dividend+1,7
  6992  1225  2A2F               	goto	l4090
  6993  1226  09A2               	comf	___awdiv@dividend,f
  6994  1227  09A3               	comf	___awdiv@dividend+1,f
  6995  1228  0AA2               	incf	___awdiv@dividend,f
  6996  1229  1903               	skipnz
  6997  122A  0AA3               	incf	___awdiv@dividend+1,f
  6998  122B  3001               	movlw	1
  6999  122C  00A4               	movwf	??___awdiv
  7000  122D  0824               	movf	??___awdiv,w
  7001  122E  06A6               	xorwf	___awdiv@sign,f
  7002  122F                     l4090:
  7003  122F  01A7               	clrf	___awdiv@quotient
  7004  1230  01A8               	clrf	___awdiv@quotient+1
  7005  1231  0820               	movf	___awdiv@divisor,w
  7006  1232  0421               	iorwf	___awdiv@divisor+1,w
  7007  1233  1903               	btfsc	3,2
  7008  1234  2A66               	goto	l4112
  7009  1235  01A5               	clrf	___awdiv@counter
  7010  1236  0AA5               	incf	___awdiv@counter,f
  7011  1237                     l4100:
  7012  1237  1BA1               	btfsc	___awdiv@divisor+1,7
  7013  1238  2A45               	goto	l4102
  7014  1239  3001               	movlw	1
  7015  123A                     u4555:
  7016  123A  1003               	clrc
  7017  123B  0DA0               	rlf	___awdiv@divisor,f
  7018  123C  0DA1               	rlf	___awdiv@divisor+1,f
  7019  123D  3EFF               	addlw	-1
  7020  123E  1D03               	skipz
  7021  123F  2A3A               	goto	u4555
  7022  1240  3001               	movlw	1
  7023  1241  00A4               	movwf	??___awdiv
  7024  1242  0824               	movf	??___awdiv,w
  7025  1243  07A5               	addwf	___awdiv@counter,f
  7026  1244  2A37               	goto	l4100
  7027  1245                     l4102:
  7028  1245  3001               	movlw	1
  7029  1246                     u4575:
  7030  1246  1003               	clrc
  7031  1247  0DA7               	rlf	___awdiv@quotient,f
  7032  1248  0DA8               	rlf	___awdiv@quotient+1,f
  7033  1249  3EFF               	addlw	-1
  7034  124A  1D03               	skipz
  7035  124B  2A46               	goto	u4575
  7036  124C  0821               	movf	___awdiv@divisor+1,w
  7037  124D  0223               	subwf	___awdiv@dividend+1,w
  7038  124E  1D03               	skipz
  7039  124F  2A52               	goto	u4585
  7040  1250  0820               	movf	___awdiv@divisor,w
  7041  1251  0222               	subwf	___awdiv@dividend,w
  7042  1252                     u4585:
  7043  1252  1C03               	skipc
  7044  1253  2A5B               	goto	l4108
  7045  1254  0820               	movf	___awdiv@divisor,w
  7046  1255  02A2               	subwf	___awdiv@dividend,f
  7047  1256  0821               	movf	___awdiv@divisor+1,w
  7048  1257  1C03               	skipc
  7049  1258  03A3               	decf	___awdiv@dividend+1,f
  7050  1259  02A3               	subwf	___awdiv@dividend+1,f
  7051  125A  1427               	bsf	___awdiv@quotient,0
  7052  125B                     l4108:
  7053  125B  3001               	movlw	1
  7054  125C                     u4595:
  7055  125C  1003               	clrc
  7056  125D  0CA1               	rrf	___awdiv@divisor+1,f
  7057  125E  0CA0               	rrf	___awdiv@divisor,f
  7058  125F  3EFF               	addlw	-1
  7059  1260  1D03               	skipz
  7060  1261  2A5C               	goto	u4595
  7061  1262  3001               	movlw	1
  7062  1263  02A5               	subwf	___awdiv@counter,f
  7063  1264  1D03               	btfss	3,2
  7064  1265  2A45               	goto	l4102
  7065  1266                     l4112:
  7066  1266  0826               	movf	___awdiv@sign,w
  7067  1267  1903               	btfsc	3,2
  7068  1268  2A6E               	goto	l4116
  7069  1269  09A7               	comf	___awdiv@quotient,f
  7070  126A  09A8               	comf	___awdiv@quotient+1,f
  7071  126B  0AA7               	incf	___awdiv@quotient,f
  7072  126C  1903               	skipnz
  7073  126D  0AA8               	incf	___awdiv@quotient+1,f
  7074  126E                     l4116:
  7075  126E  0828               	movf	___awdiv@quotient+1,w
  7076  126F  00A1               	movwf	?___awdiv+1
  7077  1270  0827               	movf	___awdiv@quotient,w
  7078  1271  00A0               	movwf	?___awdiv
  7079  1272  0008               	return
  7080  1273                     __end_of___awdiv:
  7081                           
  7082                           	psect	text26
  7083  1E93                     __ptext26:	
  7084 ;; *************** function _SPI_Write *****************
  7085 ;; Defined at:
  7086 ;;		line 32 in file "spi_flash.c"
  7087 ;; Parameters:    Size  Location     Type
  7088 ;;  address         4    6[BANK0 ] long 
  7089 ;;  data            1   10[BANK0 ] unsigned char 
  7090 ;; Auto vars:     Size  Location     Type
  7091 ;;		None
  7092 ;; Return value:  Size  Location     Type
  7093 ;;                  1    wreg      void 
  7094 ;; Registers used:
  7095 ;;		wreg, status,2, status,0, pclath, cstack
  7096 ;; Tracked objects:
  7097 ;;		On entry : 300/0
  7098 ;;		On exit  : 300/0
  7099 ;;		Unchanged: 0/0
  7100 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7101 ;;      Params:         0       5       0       0       0
  7102 ;;      Locals:         0       2       0       0       0
  7103 ;;      Temps:          0       0       0       0       0
  7104 ;;      Totals:         0       7       0       0       0
  7105 ;;Total ram usage:        7 bytes
  7106 ;; Hardware stack levels used: 1
  7107 ;; Hardware stack levels required when called: 6
  7108 ;; This function calls:
  7109 ;;		_SPI_WriteByte
  7110 ;;		_SPI_notRDY
  7111 ;; This function is called by:
  7112 ;;		_main
  7113 ;;		_fMenuStrip
  7114 ;; This function uses a non-reentrant model
  7115 ;;
  7116                           
  7117                           
  7118                           ;psect for function _SPI_Write
  7119  1E93                     _SPI_Write:
  7120  1E93                     l3872:	
  7121                           ;spi_flash.c: 33: while(SPI_notRDY() == 1);
  7122                           
  7123                           ;incstack = 0
  7124                           ; Regs used in _SPI_Write: [wreg+status,2+status,0+pclath+cstack]
  7125                           
  7126  1E93  160A  158A  23C8  160A  158A  	fcall	_SPI_notRDY
  7127  1E98  3A01               	xorlw	1
  7128  1E99  1903               	skipnz
  7129  1E9A  2E93               	goto	l3872
  7130                           
  7131                           ;spi_flash.c: 34: PORTAbits.RA5 = 0;
  7132  1E9B  1285               	bcf	5,5	;volatile
  7133                           
  7134                           ;spi_flash.c: 35: SPI_WriteByte(0x06);
  7135  1E9C  3006               	movlw	6
  7136  1E9D  160A  158A  23B0  160A  158A  	fcall	_SPI_WriteByte
  7137                           
  7138                           ;spi_flash.c: 36: PORTAbits.RA5 = 1;
  7139  1EA2  1283               	bcf	3,5	;RP0=0, select bank0
  7140  1EA3  1685               	bsf	5,5	;volatile
  7141                           
  7142                           ;spi_flash.c: 38: PORTAbits.RA5 = 0;
  7143  1EA4  1285               	bcf	5,5	;volatile
  7144                           
  7145                           ;spi_flash.c: 39: SPI_WriteByte(address > 255 ? 0x02|0x08 : 0x02);
  7146  1EA5  1BA9               	btfsc	SPI_Write@address+3,7
  7147  1EA6  2EB7               	goto	l3882
  7148  1EA7  0829               	movf	SPI_Write@address+3,w
  7149  1EA8  1D03               	btfss	3,2
  7150  1EA9  2EB9               	goto	l3884
  7151  1EAA  0828               	movf	SPI_Write@address+2,w
  7152  1EAB  1D03               	btfss	3,2
  7153  1EAC  2EB9               	goto	l3884
  7154  1EAD  3001               	movlw	1
  7155  1EAE  0227               	subwf	SPI_Write@address+1,w
  7156  1EAF  1D03               	skipz
  7157  1EB0  2EB5               	goto	u4253
  7158  1EB1  3000               	movlw	0
  7159  1EB2  0226               	subwf	SPI_Write@address,w
  7160  1EB3  1D03               	skipz
  7161  1EB4  2EB5               	goto	u4253
  7162  1EB5                     u4253:
  7163  1EB5  1803               	btfsc	3,0
  7164  1EB6  2EB9               	goto	l3884
  7165  1EB7                     l3882:
  7166  1EB7  3002               	movlw	2
  7167  1EB8  2EBA               	goto	L26
  7168  1EB9                     l3884:
  7169  1EB9  300A               	movlw	10
  7170  1EBA                     L26:
  7171  1EBA  1283               	bcf	3,5	;RP0=0, select bank0
  7172  1EBB  1303               	bcf	3,6	;RP1=0, select bank0
  7173  1EBC  00AB               	movwf	_SPI_Write$1324
  7174  1EBD  3000               	movlw	0
  7175  1EBE  00AC               	movwf	_SPI_Write$1324+1
  7176  1EBF  082B               	movf	_SPI_Write$1324,w
  7177  1EC0  160A  158A  23B0  160A  158A  	fcall	_SPI_WriteByte
  7178                           
  7179                           ;spi_flash.c: 42: SPI_WriteByte(address);
  7180  1EC5  1283               	bcf	3,5	;RP0=0, select bank0
  7181  1EC6  0826               	movf	SPI_Write@address,w
  7182  1EC7  160A  158A  23B0  160A  158A  	fcall	_SPI_WriteByte
  7183                           
  7184                           ;spi_flash.c: 43: SPI_WriteByte(data);
  7185  1ECC  1283               	bcf	3,5	;RP0=0, select bank0
  7186  1ECD  082A               	movf	SPI_Write@data,w
  7187  1ECE  160A  158A  23B0   	fcall	_SPI_WriteByte
  7188                           
  7189                           ;spi_flash.c: 44: PORTAbits.RA5 = 1;
  7190  1ED1  1283               	bcf	3,5	;RP0=0, select bank0
  7191  1ED2  1685               	bsf	5,5	;volatile
  7192  1ED3  0008               	return
  7193  1ED4                     __end_of_SPI_Write:
  7194                           
  7195                           	psect	text27
  7196  1FB1                     __ptext27:	
  7197 ;; *************** function _LCD_string *****************
  7198 ;; Defined at:
  7199 ;;		line 89 in file "lcd.c"
  7200 ;; Parameters:    Size  Location     Type
  7201 ;;  st              2   14[BANK0 ] PTR unsigned char 
  7202 ;;		 -> str2(16), str(16), STR_1(13), 
  7203 ;; Auto vars:     Size  Location     Type
  7204 ;;  i               1   18[BANK0 ] unsigned char 
  7205 ;;  symbol          1   17[BANK0 ] unsigned char 
  7206 ;; Return value:  Size  Location     Type
  7207 ;;                  1    wreg      void 
  7208 ;; Registers used:
  7209 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  7210 ;; Tracked objects:
  7211 ;;		On entry : 300/0
  7212 ;;		On exit  : 300/0
  7213 ;;		Unchanged: 0/0
  7214 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7215 ;;      Params:         0       2       0       0       0
  7216 ;;      Locals:         0       2       0       0       0
  7217 ;;      Temps:          0       1       0       0       0
  7218 ;;      Totals:         0       5       0       0       0
  7219 ;;Total ram usage:        5 bytes
  7220 ;; Hardware stack levels used: 1
  7221 ;; Hardware stack levels required when called: 6
  7222 ;; This function calls:
  7223 ;;		_LCD_SetPos
  7224 ;;		_sendbyte
  7225 ;; This function is called by:
  7226 ;;		_main
  7227 ;;		_fMenuStrip
  7228 ;; This function uses a non-reentrant model
  7229 ;;
  7230                           
  7231                           
  7232                           ;psect for function _LCD_string
  7233  1FB1                     _LCD_string:
  7234                           
  7235                           ;lcd.c: 90: unsigned char symbol;;lcd.c: 91: unsigned char i = 0;
  7236                           
  7237                           ;incstack = 0
  7238 ;; using string table level
  7239                           ; Regs used in _LCD_string: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  7240  1FB1  01B2               	clrf	LCD_string@i
  7241  1FB2                     l3868:	
  7242                           ;lcd.c: 93: while(st[i] != '\0'){
  7243                           
  7244  1FB2  1283               	bcf	3,5	;RP0=0, select bank0
  7245  1FB3  1303               	bcf	3,6	;RP1=0, select bank0
  7246  1FB4  0832               	movf	LCD_string@i,w
  7247  1FB5  072E               	addwf	LCD_string@st,w
  7248  1FB6  0084               	movwf	4
  7249  1FB7  082F               	movf	LCD_string@st+1,w
  7250  1FB8  1803               	skipnc
  7251  1FB9  0A2F               	incf	LCD_string@st+1,w
  7252  1FBA  00FF               	movwf	127
  7253  1FBB  160A  118A  2000  160A  158A  	fcall	stringtab
  7254  1FC0  3A00               	xorlw	0
  7255  1FC1  1903               	btfsc	3,2
  7256  1FC2  0008               	return
  7257                           
  7258                           ;lcd.c: 94: if(i == 16 ) LCD_SetPos(0,1);
  7259  1FC3  3010               	movlw	16
  7260  1FC4  0632               	xorwf	LCD_string@i,w
  7261  1FC5  1D03               	btfss	3,2
  7262  1FC6  2FCF               	goto	l3858
  7263  1FC7  01AC               	clrf	LCD_SetPos@y
  7264  1FC8  0AAC               	incf	LCD_SetPos@y,f
  7265  1FC9  3000               	movlw	0
  7266  1FCA  160A  158A  2449  160A  158A  	fcall	_LCD_SetPos
  7267  1FCF                     l3858:
  7268                           
  7269                           ;lcd.c: 100: symbol = st[i++];
  7270  1FCF  1283               	bcf	3,5	;RP0=0, select bank0
  7271  1FD0  1303               	bcf	3,6	;RP1=0, select bank0
  7272  1FD1  0832               	movf	LCD_string@i,w
  7273  1FD2  072E               	addwf	LCD_string@st,w
  7274  1FD3  0084               	movwf	4
  7275  1FD4  082F               	movf	LCD_string@st+1,w
  7276  1FD5  1803               	skipnc
  7277  1FD6  0A2F               	incf	LCD_string@st+1,w
  7278  1FD7  00FF               	movwf	127
  7279  1FD8  160A  118A  2000  160A  158A  	fcall	stringtab
  7280  1FDD  00B0               	movwf	??_LCD_string
  7281  1FDE  0830               	movf	??_LCD_string,w
  7282  1FDF  00B1               	movwf	LCD_string@symbol
  7283  1FE0  3001               	movlw	1
  7284  1FE1  00B0               	movwf	??_LCD_string
  7285  1FE2  0830               	movf	??_LCD_string,w
  7286  1FE3  07B2               	addwf	LCD_string@i,f
  7287                           
  7288                           ;lcd.c: 101: if(symbol > 0xBF) symbol = SHRIFT[(symbol-0xC0)];
  7289  1FE4  30C0               	movlw	192
  7290  1FE5  0231               	subwf	LCD_string@symbol,w
  7291  1FE6  1C03               	skipc
  7292  1FE7  2FF7               	goto	l3866
  7293  1FE8  0831               	movf	LCD_string@symbol,w
  7294  1FE9  3E52               	addlw	low ((_SHRIFT| (0+32768)+65344))
  7295  1FEA  0084               	movwf	4
  7296  1FEB  308F               	movlw	high ((_SHRIFT| (0+32768)+65344))
  7297  1FEC  1803               	skipnc
  7298  1FED  3E01               	addlw	1
  7299  1FEE  00FF               	movwf	127
  7300  1FEF  160A  118A  2000  160A  158A  	fcall	stringtab
  7301  1FF4  00B0               	movwf	??_LCD_string
  7302  1FF5  0830               	movf	??_LCD_string,w
  7303  1FF6  00B1               	movwf	LCD_string@symbol
  7304  1FF7                     l3866:
  7305                           
  7306                           ;lcd.c: 102: sendbyte(symbol,1);
  7307  1FF7  01A8               	clrf	sendbyte@mode
  7308  1FF8  0AA8               	incf	sendbyte@mode,f
  7309  1FF9  0831               	movf	LCD_string@symbol,w
  7310  1FFA  160A  158A  247E  160A  158A  	fcall	_sendbyte
  7311  1FFF  2FB2               	goto	l3868
  7312  2000                     __end_of_LCD_string:
  7313                           
  7314                           	psect	text28
  7315  1C49                     __ptext28:	
  7316 ;; *************** function _LCD_SetPos *****************
  7317 ;; Defined at:
  7318 ;;		line 107 in file "lcd.c"
  7319 ;; Parameters:    Size  Location     Type
  7320 ;;  x               1    wreg     unsigned char 
  7321 ;;  y               1   12[BANK0 ] unsigned char 
  7322 ;; Auto vars:     Size  Location     Type
  7323 ;;  x               1   13[BANK0 ] unsigned char 
  7324 ;; Return value:  Size  Location     Type
  7325 ;;                  1    wreg      void 
  7326 ;; Registers used:
  7327 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  7328 ;; Tracked objects:
  7329 ;;		On entry : 300/0
  7330 ;;		On exit  : 0/0
  7331 ;;		Unchanged: 0/0
  7332 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7333 ;;      Params:         0       1       0       0       0
  7334 ;;      Locals:         0       1       0       0       0
  7335 ;;      Temps:          0       0       0       0       0
  7336 ;;      Totals:         0       2       0       0       0
  7337 ;;Total ram usage:        2 bytes
  7338 ;; Hardware stack levels used: 1
  7339 ;; Hardware stack levels required when called: 5
  7340 ;; This function calls:
  7341 ;;		_sendbyte
  7342 ;; This function is called by:
  7343 ;;		_main
  7344 ;;		_LCD_string
  7345 ;;		_fMenuStrip
  7346 ;; This function uses a non-reentrant model
  7347 ;;
  7348                           
  7349                           
  7350                           ;psect for function _LCD_SetPos
  7351  1C49                     _LCD_SetPos:
  7352                           
  7353                           ;incstack = 0
  7354                           ; Regs used in _LCD_SetPos: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  7355                           ;LCD_SetPos@x stored from wreg
  7356  1C49  00AD               	movwf	LCD_SetPos@x
  7357                           
  7358                           ;lcd.c: 108: switch(y){
  7359  1C4A  2C5A               	goto	l3620
  7360  1C4B                     l3614:
  7361                           
  7362                           ;lcd.c: 110: sendbyte((unsigned char)(x|0x80),0);
  7363  1C4B  01A8               	clrf	sendbyte@mode
  7364  1C4C  082D               	movf	LCD_SetPos@x,w
  7365  1C4D  3880               	iorlw	128
  7366  1C4E  160A  158A  247E   	fcall	_sendbyte
  7367                           
  7368                           ;lcd.c: 111: break;
  7369  1C51  0008               	return
  7370  1C52                     l3616:
  7371                           
  7372                           ;lcd.c: 113: sendbyte((unsigned char)((0x40+x)|0x80),0);
  7373  1C52  01A8               	clrf	sendbyte@mode
  7374  1C53  082D               	movf	LCD_SetPos@x,w
  7375  1C54  3E40               	addlw	64
  7376  1C55  3880               	iorlw	128
  7377  1C56  160A  158A  247E   	fcall	_sendbyte
  7378                           
  7379                           ;lcd.c: 114: break;
  7380  1C59  0008               	return
  7381  1C5A                     l3620:
  7382  1C5A  082C               	movf	LCD_SetPos@y,w
  7383                           
  7384                           ; Switch size 1, requested type "simple"
  7385                           ; Number of cases is 2, Range of values is 0 to 1
  7386                           ; switch strategies available:
  7387                           ; Name         Instructions Cycles
  7388                           ; simple_byte            7     4 (average)
  7389                           ; direct_byte           14     8 (fixed)
  7390                           ; jumptable            260     6 (fixed)
  7391                           ;	Chosen strategy is simple_byte
  7392  1C5B  3A00               	xorlw	0	; case 0
  7393  1C5C  1903               	skipnz
  7394  1C5D  2C4B               	goto	l3614
  7395  1C5E  3A01               	xorlw	1	; case 1
  7396  1C5F  1903               	skipnz
  7397  1C60  2C52               	goto	l3616
  7398  1C61  2C62               	goto	l374
  7399  1C62                     l374:
  7400  1C62  0008               	return
  7401  1C63                     __end_of_LCD_SetPos:
  7402                           
  7403                           	psect	text29
  7404  1C30                     __ptext29:	
  7405 ;; *************** function _LCD_StringOnOff *****************
  7406 ;; Defined at:
  7407 ;;		line 123 in file "lcd.c"
  7408 ;; Parameters:    Size  Location     Type
  7409 ;;  st              1    wreg     unsigned char 
  7410 ;;  numb            1    0[BANK0 ] unsigned char 
  7411 ;; Auto vars:     Size  Location     Type
  7412 ;;  st              1    2[BANK0 ] unsigned char 
  7413 ;; Return value:  Size  Location     Type
  7414 ;;                  2    0[BANK0 ] PTR unsigned char 
  7415 ;; Registers used:
  7416 ;;		wreg, status,2, status,0
  7417 ;; Tracked objects:
  7418 ;;		On entry : 300/900
  7419 ;;		On exit  : 300/0
  7420 ;;		Unchanged: 0/0
  7421 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7422 ;;      Params:         0       1       0       0       0
  7423 ;;      Locals:         0       1       0       0       0
  7424 ;;      Temps:          0       1       0       0       0
  7425 ;;      Totals:         0       3       0       0       0
  7426 ;;Total ram usage:        3 bytes
  7427 ;; Hardware stack levels used: 1
  7428 ;; Hardware stack levels required when called: 2
  7429 ;; This function calls:
  7430 ;;		Nothing
  7431 ;; This function is called by:
  7432 ;;		_fMenuStrip
  7433 ;; This function uses a non-reentrant model
  7434 ;;
  7435                           
  7436                           
  7437                           ;psect for function _LCD_StringOnOff
  7438  1C30                     _LCD_StringOnOff:
  7439                           
  7440                           ;incstack = 0
  7441                           ; Regs used in _LCD_StringOnOff: [wreg+status,2+status,0]
  7442                           ;LCD_StringOnOff@st stored from wreg
  7443  1C30  1283               	bcf	3,5	;RP0=0, select bank0
  7444  1C31  00A2               	movwf	LCD_StringOnOff@st
  7445                           
  7446                           ;lcd.c: 124: if(st & (1 << numb)) return "Âêë";
  7447  1C32  3001               	movlw	1
  7448  1C33  00A1               	movwf	??_LCD_StringOnOff
  7449  1C34  0A20               	incf	LCD_StringOnOff@numb,w
  7450  1C35  2C38               	goto	u4264
  7451  1C36                     u4265:
  7452  1C36  1003               	clrc
  7453  1C37  0DA1               	rlf	??_LCD_StringOnOff,f
  7454  1C38                     u4264:
  7455  1C38  3EFF               	addlw	-1
  7456  1C39  1D03               	skipz
  7457  1C3A  2C36               	goto	u4265
  7458  1C3B  0821               	movf	??_LCD_StringOnOff,w
  7459  1C3C  0522               	andwf	LCD_StringOnOff@st,w
  7460  1C3D  1903               	btfsc	3,2
  7461  1C3E  2C44               	goto	l3908
  7462  1C3F  30E9               	movlw	low (STR_2| (0+32768))
  7463  1C40  00A0               	movwf	?_LCD_StringOnOff
  7464  1C41  3091               	movlw	high (STR_2| (0+32768))
  7465  1C42  00A1               	movwf	?_LCD_StringOnOff+1
  7466  1C43  0008               	return
  7467  1C44                     l3908:
  7468                           
  7469                           ;lcd.c: 125: else return "Âûêë";
  7470  1C44  30DC               	movlw	low (STR_3| (0+32768))
  7471  1C45  00A0               	movwf	?_LCD_StringOnOff
  7472  1C46  3091               	movlw	high (STR_3| (0+32768))
  7473  1C47  00A1               	movwf	?_LCD_StringOnOff+1
  7474  1C48  0008               	return
  7475  1C49                     __end_of_LCD_StringOnOff:
  7476                           
  7477                           	psect	text30
  7478  1F62                     __ptext30:	
  7479 ;; *************** function _fACP *****************
  7480 ;; Defined at:
  7481 ;;		line 62 in file "newmain.c"
  7482 ;; Parameters:    Size  Location     Type
  7483 ;;		None
  7484 ;; Auto vars:     Size  Location     Type
  7485 ;;		None
  7486 ;; Return value:  Size  Location     Type
  7487 ;;                  1    wreg      void 
  7488 ;; Registers used:
  7489 ;;		wreg
  7490 ;; Tracked objects:
  7491 ;;		On entry : 300/100
  7492 ;;		On exit  : 300/100
  7493 ;;		Unchanged: 0/0
  7494 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7495 ;;      Params:         0       0       0       0       0
  7496 ;;      Locals:         0       0       0       0       0
  7497 ;;      Temps:          0       2       0       0       0
  7498 ;;      Totals:         0       2       0       0       0
  7499 ;;Total ram usage:        2 bytes
  7500 ;; Hardware stack levels used: 1
  7501 ;; Hardware stack levels required when called: 2
  7502 ;; This function calls:
  7503 ;;		Nothing
  7504 ;; This function is called by:
  7505 ;;		_main
  7506 ;; This function uses a non-reentrant model
  7507 ;;
  7508                           
  7509                           
  7510                           ;psect for function _fACP
  7511  1F62                     _fACP:
  7512                           
  7513                           ;newmain.c: 64: ADCON0bits.CHS2 = 0;
  7514                           
  7515                           ;incstack = 0
  7516                           ; Regs used in _fACP: [wreg]
  7517  1F62  1283               	bcf	3,5	;RP0=0, select bank0
  7518  1F63  129F               	bcf	31,5	;volatile
  7519                           
  7520                           ;newmain.c: 65: ADCON0bits.CHS1 = 0;
  7521  1F64  121F               	bcf	31,4	;volatile
  7522                           
  7523                           ;newmain.c: 66: ADCON0bits.CHS0 = 0;
  7524  1F65  119F               	bcf	31,3	;volatile
  7525                           
  7526                           ;newmain.c: 67: ADCON0bits.ADON = 1;
  7527  1F66  141F               	bsf	31,0	;volatile
  7528                           
  7529                           ;newmain.c: 68: _delay((unsigned long)((1)*(8000000/4000.0)));
  7530  1F67  3003               	movlw	3
  7531  1F68  1283               	bcf	3,5	;RP0=0, select bank0
  7532  1F69  1303               	bcf	3,6	;RP1=0, select bank0
  7533  1F6A  00A1               	movwf	??_fACP+1
  7534  1F6B  3097               	movlw	151
  7535  1F6C  00A0               	movwf	??_fACP
  7536  1F6D                     u6437:
  7537  1F6D  0BA0               	decfsz	??_fACP,f
  7538  1F6E  2F6D               	goto	u6437
  7539  1F6F  0BA1               	decfsz	??_fACP+1,f
  7540  1F70  2F6D               	goto	u6437
  7541                           
  7542                           ;newmain.c: 69: ADCON0bits.GO_nDONE = 1;
  7543  1F71  1283               	bcf	3,5	;RP0=0, select bank0
  7544  1F72  1303               	bcf	3,6	;RP1=0, select bank0
  7545  1F73  151F               	bsf	31,2	;volatile
  7546  1F74                     l164:	
  7547                           ;newmain.c: 70: while(GO_DONE);
  7548                           
  7549  1F74  191F               	btfsc	31,2	;volatile
  7550  1F75  2F74               	goto	l164
  7551                           
  7552                           ;newmain.c: 71: ADCON0bits.ADON = 0;
  7553  1F76  101F               	bcf	31,0	;volatile
  7554                           
  7555                           ;newmain.c: 72: Analog.AI0 = ADRES;
  7556  1F77  081E               	movf	30,w	;volatile
  7557  1F78  00A0               	movwf	??_fACP
  7558  1F79  0820               	movf	??_fACP,w
  7559  1F7A  1683               	bsf	3,5	;RP0=1, select bank1
  7560  1F7B  00A4               	movwf	_Analog^(0+128)
  7561                           
  7562                           ;newmain.c: 74: ADCON0bits.CHS2 = 0;
  7563  1F7C  1283               	bcf	3,5	;RP0=0, select bank0
  7564  1F7D  129F               	bcf	31,5	;volatile
  7565                           
  7566                           ;newmain.c: 75: ADCON0bits.CHS1 = 0;
  7567  1F7E  121F               	bcf	31,4	;volatile
  7568                           
  7569                           ;newmain.c: 76: ADCON0bits.CHS0 = 1;
  7570  1F7F  159F               	bsf	31,3	;volatile
  7571                           
  7572                           ;newmain.c: 77: ADCON0bits.ADON = 1;
  7573  1F80  141F               	bsf	31,0	;volatile
  7574                           
  7575                           ;newmain.c: 78: _delay((unsigned long)((1)*(8000000/4000.0)));
  7576  1F81  3003               	movlw	3
  7577  1F82  1283               	bcf	3,5	;RP0=0, select bank0
  7578  1F83  1303               	bcf	3,6	;RP1=0, select bank0
  7579  1F84  00A1               	movwf	??_fACP+1
  7580  1F85  3097               	movlw	151
  7581  1F86  00A0               	movwf	??_fACP
  7582  1F87                     u6447:
  7583  1F87  0BA0               	decfsz	??_fACP,f
  7584  1F88  2F87               	goto	u6447
  7585  1F89  0BA1               	decfsz	??_fACP+1,f
  7586  1F8A  2F87               	goto	u6447
  7587                           
  7588                           ;newmain.c: 79: ADCON0bits.GO_nDONE = 1;
  7589  1F8B  1283               	bcf	3,5	;RP0=0, select bank0
  7590  1F8C  1303               	bcf	3,6	;RP1=0, select bank0
  7591  1F8D  151F               	bsf	31,2	;volatile
  7592  1F8E                     l167:	
  7593                           ;newmain.c: 80: while(GO_DONE);
  7594                           
  7595  1F8E  191F               	btfsc	31,2	;volatile
  7596  1F8F  2F8E               	goto	l167
  7597                           
  7598                           ;newmain.c: 81: ADCON0bits.ADON = 0;
  7599  1F90  101F               	bcf	31,0	;volatile
  7600                           
  7601                           ;newmain.c: 82: Analog.AI1 = ADRES;
  7602  1F91  081E               	movf	30,w	;volatile
  7603  1F92  00A0               	movwf	??_fACP
  7604  1F93  0820               	movf	??_fACP,w
  7605  1F94  1683               	bsf	3,5	;RP0=1, select bank1
  7606  1F95  00A5               	movwf	(_Analog^(0+128)+1)
  7607                           
  7608                           ;newmain.c: 84: ADCON0bits.CHS2 = 0;
  7609  1F96  1283               	bcf	3,5	;RP0=0, select bank0
  7610  1F97  129F               	bcf	31,5	;volatile
  7611                           
  7612                           ;newmain.c: 85: ADCON0bits.CHS1 = 1;
  7613  1F98  161F               	bsf	31,4	;volatile
  7614                           
  7615                           ;newmain.c: 86: ADCON0bits.CHS0 = 1;
  7616  1F99  159F               	bsf	31,3	;volatile
  7617                           
  7618                           ;newmain.c: 87: ADCON0bits.ADON = 1;
  7619  1F9A  141F               	bsf	31,0	;volatile
  7620                           
  7621                           ;newmain.c: 88: _delay((unsigned long)((1)*(8000000/4000.0)));
  7622  1F9B  3003               	movlw	3
  7623  1F9C  1283               	bcf	3,5	;RP0=0, select bank0
  7624  1F9D  1303               	bcf	3,6	;RP1=0, select bank0
  7625  1F9E  00A1               	movwf	??_fACP+1
  7626  1F9F  3097               	movlw	151
  7627  1FA0  00A0               	movwf	??_fACP
  7628  1FA1                     u6457:
  7629  1FA1  0BA0               	decfsz	??_fACP,f
  7630  1FA2  2FA1               	goto	u6457
  7631  1FA3  0BA1               	decfsz	??_fACP+1,f
  7632  1FA4  2FA1               	goto	u6457
  7633                           
  7634                           ;newmain.c: 89: ADCON0bits.GO_nDONE = 1;
  7635  1FA5  1283               	bcf	3,5	;RP0=0, select bank0
  7636  1FA6  1303               	bcf	3,6	;RP1=0, select bank0
  7637  1FA7  151F               	bsf	31,2	;volatile
  7638  1FA8                     l170:	
  7639                           ;newmain.c: 90: while(GO_DONE);
  7640                           
  7641  1FA8  191F               	btfsc	31,2	;volatile
  7642  1FA9  2FA8               	goto	l170
  7643                           
  7644                           ;newmain.c: 91: ADCON0bits.ADON = 0;
  7645  1FAA  101F               	bcf	31,0	;volatile
  7646                           
  7647                           ;newmain.c: 92: Analog.AI2 = ADRES;
  7648  1FAB  081E               	movf	30,w	;volatile
  7649  1FAC  00A0               	movwf	??_fACP
  7650  1FAD  0820               	movf	??_fACP,w
  7651  1FAE  1683               	bsf	3,5	;RP0=1, select bank1
  7652  1FAF  00A6               	movwf	(_Analog^(0+128)+2)
  7653  1FB0  0008               	return
  7654  1FB1                     __end_of_fACP:
  7655                           
  7656                           	psect	text31
  7657  1C1A                     __ptext31:	
  7658 ;; *************** function _SPI_init *****************
  7659 ;; Defined at:
  7660 ;;		line 3 in file "spi_flash.c"
  7661 ;; Parameters:    Size  Location     Type
  7662 ;;		None
  7663 ;; Auto vars:     Size  Location     Type
  7664 ;;		None
  7665 ;; Return value:  Size  Location     Type
  7666 ;;                  1    wreg      void 
  7667 ;; Registers used:
  7668 ;;		None
  7669 ;; Tracked objects:
  7670 ;;		On entry : 0/0
  7671 ;;		On exit  : 300/0
  7672 ;;		Unchanged: 0/0
  7673 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7674 ;;      Params:         0       0       0       0       0
  7675 ;;      Locals:         0       0       0       0       0
  7676 ;;      Temps:          0       0       0       0       0
  7677 ;;      Totals:         0       0       0       0       0
  7678 ;;Total ram usage:        0 bytes
  7679 ;; Hardware stack levels used: 1
  7680 ;; Hardware stack levels required when called: 2
  7681 ;; This function calls:
  7682 ;;		Nothing
  7683 ;; This function is called by:
  7684 ;;		_main
  7685 ;; This function uses a non-reentrant model
  7686 ;;
  7687                           
  7688                           
  7689                           ;psect for function _SPI_init
  7690  1C1A                     _SPI_init:
  7691                           
  7692                           ;spi_flash.c: 4: TRISCbits.TRISC4 = 1;
  7693                           
  7694                           ;incstack = 0
  7695                           ; Regs used in _SPI_init: []
  7696  1C1A  1683               	bsf	3,5	;RP0=1, select bank1
  7697  1C1B  1303               	bcf	3,6	;RP1=0, select bank1
  7698  1C1C  1607               	bsf	7,4	;volatile
  7699                           
  7700                           ;spi_flash.c: 5: TRISCbits.TRISC5 = 0;
  7701  1C1D  1287               	bcf	7,5	;volatile
  7702                           
  7703                           ;spi_flash.c: 6: TRISCbits.TRISC3 = 0;
  7704  1C1E  1187               	bcf	7,3	;volatile
  7705                           
  7706                           ;spi_flash.c: 7: TRISAbits.TRISA5 = 0;
  7707  1C1F  1285               	bcf	5,5	;volatile
  7708                           
  7709                           ;spi_flash.c: 9: PORTAbits.RA5 = 1;
  7710  1C20  1283               	bcf	3,5	;RP0=0, select bank0
  7711  1C21  1685               	bsf	5,5	;volatile
  7712                           
  7713                           ;spi_flash.c: 11: SSPSTATbits.SMP = 0;
  7714  1C22  1683               	bsf	3,5	;RP0=1, select bank1
  7715  1C23  1394               	bcf	20,7	;volatile
  7716                           
  7717                           ;spi_flash.c: 12: SSPSTATbits.CKE = 1;
  7718  1C24  1714               	bsf	20,6	;volatile
  7719                           
  7720                           ;spi_flash.c: 13: SSPSTATbits.BF = 0;
  7721  1C25  1014               	bcf	20,0	;volatile
  7722                           
  7723                           ;spi_flash.c: 15: SSPCONbits.WCOL = 0;
  7724  1C26  1283               	bcf	3,5	;RP0=0, select bank0
  7725  1C27  1394               	bcf	20,7	;volatile
  7726                           
  7727                           ;spi_flash.c: 16: SSPCONbits.SSPOV = 0;
  7728  1C28  1314               	bcf	20,6	;volatile
  7729                           
  7730                           ;spi_flash.c: 17: SSPCONbits.SSPEN = 1;
  7731  1C29  1694               	bsf	20,5	;volatile
  7732                           
  7733                           ;spi_flash.c: 18: SSPCONbits.CKP = 0;
  7734  1C2A  1214               	bcf	20,4	;volatile
  7735                           
  7736                           ;spi_flash.c: 19: SSPCONbits.SSPM3 = 0;
  7737  1C2B  1194               	bcf	20,3	;volatile
  7738                           
  7739                           ;spi_flash.c: 20: SSPCONbits.SSPM2 = 0;
  7740  1C2C  1114               	bcf	20,2	;volatile
  7741                           
  7742                           ;spi_flash.c: 21: SSPCONbits.SSPM1 = 0;
  7743  1C2D  1094               	bcf	20,1	;volatile
  7744                           
  7745                           ;spi_flash.c: 22: SSPCONbits.SSPM0 = 1;
  7746  1C2E  1414               	bsf	20,0	;volatile
  7747  1C2F  0008               	return
  7748  1C30                     __end_of_SPI_init:
  7749                           
  7750                           	psect	text32
  7751  1DDD                     __ptext32:	
  7752 ;; *************** function _SPI_Read *****************
  7753 ;; Defined at:
  7754 ;;		line 46 in file "spi_flash.c"
  7755 ;; Parameters:    Size  Location     Type
  7756 ;;  address         4    6[BANK0 ] long 
  7757 ;; Auto vars:     Size  Location     Type
  7758 ;;  data            1   13[BANK0 ] unsigned char 
  7759 ;; Return value:  Size  Location     Type
  7760 ;;                  1    wreg      unsigned char 
  7761 ;; Registers used:
  7762 ;;		wreg, status,2, status,0, pclath, cstack
  7763 ;; Tracked objects:
  7764 ;;		On entry : 300/0
  7765 ;;		On exit  : 300/0
  7766 ;;		Unchanged: 0/0
  7767 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7768 ;;      Params:         0       4       0       0       0
  7769 ;;      Locals:         0       3       0       0       0
  7770 ;;      Temps:          0       1       0       0       0
  7771 ;;      Totals:         0       8       0       0       0
  7772 ;;Total ram usage:        8 bytes
  7773 ;; Hardware stack levels used: 1
  7774 ;; Hardware stack levels required when called: 6
  7775 ;; This function calls:
  7776 ;;		_SPI_ReadByte
  7777 ;;		_SPI_WriteByte
  7778 ;;		_SPI_notRDY
  7779 ;; This function is called by:
  7780 ;;		_main
  7781 ;; This function uses a non-reentrant model
  7782 ;;
  7783                           
  7784                           
  7785                           ;psect for function _SPI_Read
  7786  1DDD                     _SPI_Read:
  7787  1DDD                     l4488:	
  7788                           ;spi_flash.c: 47: while(SPI_notRDY() == 1);
  7789                           
  7790                           ;incstack = 0
  7791                           ; Regs used in _SPI_Read: [wreg+status,2+status,0+pclath+cstack]
  7792                           
  7793  1DDD  160A  158A  23C8  160A  158A  	fcall	_SPI_notRDY
  7794  1DE2  3A01               	xorlw	1
  7795  1DE3  1903               	skipnz
  7796  1DE4  2DDD               	goto	l4488
  7797                           
  7798                           ;spi_flash.c: 48: PORTAbits.RA5 = 0;
  7799  1DE5  1285               	bcf	5,5	;volatile
  7800                           
  7801                           ;spi_flash.c: 49: SPI_WriteByte(address > 255 ? 0x03|0x08 : 0x03);
  7802  1DE6  1BA9               	btfsc	SPI_Read@address+3,7
  7803  1DE7  2DF8               	goto	l4492
  7804  1DE8  0829               	movf	SPI_Read@address+3,w
  7805  1DE9  1D03               	btfss	3,2
  7806  1DEA  2DFA               	goto	l4494
  7807  1DEB  0828               	movf	SPI_Read@address+2,w
  7808  1DEC  1D03               	btfss	3,2
  7809  1DED  2DFA               	goto	l4494
  7810  1DEE  3001               	movlw	1
  7811  1DEF  0227               	subwf	SPI_Read@address+1,w
  7812  1DF0  1D03               	skipz
  7813  1DF1  2DF6               	goto	u5043
  7814  1DF2  3000               	movlw	0
  7815  1DF3  0226               	subwf	SPI_Read@address,w
  7816  1DF4  1D03               	skipz
  7817  1DF5  2DF6               	goto	u5043
  7818  1DF6                     u5043:
  7819  1DF6  1803               	btfsc	3,0
  7820  1DF7  2DFA               	goto	l4494
  7821  1DF8                     l4492:
  7822  1DF8  3003               	movlw	3
  7823  1DF9  2DFB               	goto	L27
  7824  1DFA                     l4494:
  7825  1DFA  300B               	movlw	11
  7826  1DFB                     L27:
  7827  1DFB  1283               	bcf	3,5	;RP0=0, select bank0
  7828  1DFC  1303               	bcf	3,6	;RP1=0, select bank0
  7829  1DFD  00AB               	movwf	_SPI_Read$1327
  7830  1DFE  3000               	movlw	0
  7831  1DFF  00AC               	movwf	_SPI_Read$1327+1
  7832  1E00  082B               	movf	_SPI_Read$1327,w
  7833  1E01  160A  158A  23B0  160A  158A  	fcall	_SPI_WriteByte
  7834                           
  7835                           ;spi_flash.c: 52: SPI_WriteByte(address);
  7836  1E06  1283               	bcf	3,5	;RP0=0, select bank0
  7837  1E07  0826               	movf	SPI_Read@address,w
  7838  1E08  160A  158A  23B0  160A  158A  	fcall	_SPI_WriteByte
  7839                           
  7840                           ;spi_flash.c: 53: char data = SPI_ReadByte(0);
  7841  1E0D  3000               	movlw	0
  7842  1E0E  160A  158A  23BF   	fcall	_SPI_ReadByte
  7843  1E11  00AA               	movwf	??_SPI_Read
  7844  1E12  082A               	movf	??_SPI_Read,w
  7845  1E13  00AD               	movwf	SPI_Read@data
  7846                           
  7847                           ;spi_flash.c: 54: PORTAbits.RA5 = 1;
  7848  1E14  1685               	bsf	5,5	;volatile
  7849                           
  7850                           ;spi_flash.c: 55: return data;
  7851  1E15  082D               	movf	SPI_Read@data,w
  7852  1E16  0008               	return
  7853  1E17                     __end_of_SPI_Read:
  7854                           
  7855                           	psect	text33
  7856  1BC8                     __ptext33:	
  7857 ;; *************** function _SPI_notRDY *****************
  7858 ;; Defined at:
  7859 ;;		line 74 in file "spi_flash.c"
  7860 ;; Parameters:    Size  Location     Type
  7861 ;;		None
  7862 ;; Auto vars:     Size  Location     Type
  7863 ;;  notRDY          1    5[BANK0 ] unsigned char 
  7864 ;; Return value:  Size  Location     Type
  7865 ;;                  1    wreg      unsigned char 
  7866 ;; Registers used:
  7867 ;;		wreg, status,2, status,0, pclath, cstack
  7868 ;; Tracked objects:
  7869 ;;		On entry : 300/0
  7870 ;;		On exit  : 300/0
  7871 ;;		Unchanged: 0/0
  7872 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7873 ;;      Params:         0       0       0       0       0
  7874 ;;      Locals:         0       1       0       0       0
  7875 ;;      Temps:          0       1       0       0       0
  7876 ;;      Totals:         0       2       0       0       0
  7877 ;;Total ram usage:        2 bytes
  7878 ;; Hardware stack levels used: 1
  7879 ;; Hardware stack levels required when called: 5
  7880 ;; This function calls:
  7881 ;;		_SPI_ReadStatus
  7882 ;; This function is called by:
  7883 ;;		_SPI_Write
  7884 ;;		_SPI_Read
  7885 ;; This function uses a non-reentrant model
  7886 ;;
  7887                           
  7888                           
  7889                           ;psect for function _SPI_notRDY
  7890  1BC8                     _SPI_notRDY:
  7891                           
  7892                           ;spi_flash.c: 75: char notRDY = SPI_ReadStatus();
  7893                           
  7894                           ;incstack = 0
  7895                           ; Regs used in _SPI_notRDY: [wreg+status,2+status,0+pclath+cstack]
  7896  1BC8  160A  158A  23D1   	fcall	_SPI_ReadStatus
  7897  1BCB  00A4               	movwf	??_SPI_notRDY
  7898  1BCC  0824               	movf	??_SPI_notRDY,w
  7899  1BCD  00A5               	movwf	SPI_notRDY@notRDY
  7900                           
  7901                           ;spi_flash.c: 76: return (notRDY & 0x01);
  7902  1BCE  0825               	movf	SPI_notRDY@notRDY,w
  7903  1BCF  3901               	andlw	1
  7904  1BD0  0008               	return
  7905  1BD1                     __end_of_SPI_notRDY:
  7906                           
  7907                           	psect	text34
  7908  1BD1                     __ptext34:	
  7909 ;; *************** function _SPI_ReadStatus *****************
  7910 ;; Defined at:
  7911 ;;		line 57 in file "spi_flash.c"
  7912 ;; Parameters:    Size  Location     Type
  7913 ;;		None
  7914 ;; Auto vars:     Size  Location     Type
  7915 ;;  status          1    3[BANK0 ] unsigned char 
  7916 ;; Return value:  Size  Location     Type
  7917 ;;                  1    wreg      unsigned char 
  7918 ;; Registers used:
  7919 ;;		wreg, status,2, status,0, pclath, cstack
  7920 ;; Tracked objects:
  7921 ;;		On entry : 300/0
  7922 ;;		On exit  : 300/0
  7923 ;;		Unchanged: 0/0
  7924 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7925 ;;      Params:         0       0       0       0       0
  7926 ;;      Locals:         0       1       0       0       0
  7927 ;;      Temps:          0       1       0       0       0
  7928 ;;      Totals:         0       2       0       0       0
  7929 ;;Total ram usage:        2 bytes
  7930 ;; Hardware stack levels used: 1
  7931 ;; Hardware stack levels required when called: 4
  7932 ;; This function calls:
  7933 ;;		_SPI_ReadByte
  7934 ;;		_SPI_WriteByte
  7935 ;; This function is called by:
  7936 ;;		_SPI_notRDY
  7937 ;; This function uses a non-reentrant model
  7938 ;;
  7939                           
  7940                           
  7941                           ;psect for function _SPI_ReadStatus
  7942  1BD1                     _SPI_ReadStatus:
  7943                           
  7944                           ;spi_flash.c: 58: PORTAbits.RA5 = 0;
  7945                           
  7946                           ;incstack = 0
  7947                           ; Regs used in _SPI_ReadStatus: [wreg+status,2+status,0+pclath+cstack]
  7948  1BD1  1285               	bcf	5,5	;volatile
  7949                           
  7950                           ;spi_flash.c: 59: SPI_WriteByte(0x05);
  7951  1BD2  3005               	movlw	5
  7952  1BD3  160A  158A  23B0  160A  158A  	fcall	_SPI_WriteByte
  7953                           
  7954                           ;spi_flash.c: 60: char status = SPI_ReadByte(0);
  7955  1BD8  3000               	movlw	0
  7956  1BD9  160A  158A  23BF   	fcall	_SPI_ReadByte
  7957  1BDC  00A2               	movwf	??_SPI_ReadStatus
  7958  1BDD  0822               	movf	??_SPI_ReadStatus,w
  7959  1BDE  00A3               	movwf	SPI_ReadStatus@status
  7960                           
  7961                           ;spi_flash.c: 61: PORTAbits.RA5 = 1;
  7962  1BDF  1685               	bsf	5,5	;volatile
  7963                           
  7964                           ;spi_flash.c: 62: return status;
  7965  1BE0  0823               	movf	SPI_ReadStatus@status,w
  7966  1BE1  0008               	return
  7967  1BE2                     __end_of_SPI_ReadStatus:
  7968                           
  7969                           	psect	text35
  7970  1BBF                     __ptext35:	
  7971 ;; *************** function _SPI_ReadByte *****************
  7972 ;; Defined at:
  7973 ;;		line 28 in file "spi_flash.c"
  7974 ;; Parameters:    Size  Location     Type
  7975 ;;  data            1    wreg     unsigned char 
  7976 ;; Auto vars:     Size  Location     Type
  7977 ;;  data            1    1[BANK0 ] unsigned char 
  7978 ;; Return value:  Size  Location     Type
  7979 ;;                  1    wreg      unsigned char 
  7980 ;; Registers used:
  7981 ;;		wreg, status,2, status,0, pclath, cstack
  7982 ;; Tracked objects:
  7983 ;;		On entry : 300/100
  7984 ;;		On exit  : 300/0
  7985 ;;		Unchanged: 0/0
  7986 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7987 ;;      Params:         0       0       0       0       0
  7988 ;;      Locals:         0       1       0       0       0
  7989 ;;      Temps:          0       0       0       0       0
  7990 ;;      Totals:         0       1       0       0       0
  7991 ;;Total ram usage:        1 bytes
  7992 ;; Hardware stack levels used: 1
  7993 ;; Hardware stack levels required when called: 3
  7994 ;; This function calls:
  7995 ;;		_SPI_WriteByte
  7996 ;; This function is called by:
  7997 ;;		_SPI_Read
  7998 ;;		_SPI_ReadStatus
  7999 ;; This function uses a non-reentrant model
  8000 ;;
  8001                           
  8002                           
  8003                           ;psect for function _SPI_ReadByte
  8004  1BBF                     _SPI_ReadByte:
  8005                           
  8006                           ;incstack = 0
  8007                           ; Regs used in _SPI_ReadByte: [wreg+status,2+status,0+pclath+cstack]
  8008                           ;SPI_ReadByte@data stored from wreg
  8009  1BBF  1283               	bcf	3,5	;RP0=0, select bank0
  8010  1BC0  00A1               	movwf	SPI_ReadByte@data
  8011                           
  8012                           ;spi_flash.c: 29: SPI_WriteByte(data);
  8013  1BC1  0821               	movf	SPI_ReadByte@data,w
  8014  1BC2  160A  158A  23B0   	fcall	_SPI_WriteByte
  8015                           
  8016                           ;spi_flash.c: 30: return SSPBUF;
  8017  1BC5  1283               	bcf	3,5	;RP0=0, select bank0
  8018  1BC6  0813               	movf	19,w	;volatile
  8019  1BC7  0008               	return
  8020  1BC8                     __end_of_SPI_ReadByte:
  8021                           
  8022                           	psect	text36
  8023  1BB0                     __ptext36:	
  8024 ;; *************** function _SPI_WriteByte *****************
  8025 ;; Defined at:
  8026 ;;		line 24 in file "spi_flash.c"
  8027 ;; Parameters:    Size  Location     Type
  8028 ;;  data            1    wreg     unsigned char 
  8029 ;; Auto vars:     Size  Location     Type
  8030 ;;  data            1    0[BANK0 ] unsigned char 
  8031 ;; Return value:  Size  Location     Type
  8032 ;;                  1    wreg      void 
  8033 ;; Registers used:
  8034 ;;		wreg
  8035 ;; Tracked objects:
  8036 ;;		On entry : 300/0
  8037 ;;		On exit  : 300/100
  8038 ;;		Unchanged: 0/0
  8039 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8040 ;;      Params:         0       0       0       0       0
  8041 ;;      Locals:         0       1       0       0       0
  8042 ;;      Temps:          0       0       0       0       0
  8043 ;;      Totals:         0       1       0       0       0
  8044 ;;Total ram usage:        1 bytes
  8045 ;; Hardware stack levels used: 1
  8046 ;; Hardware stack levels required when called: 2
  8047 ;; This function calls:
  8048 ;;		Nothing
  8049 ;; This function is called by:
  8050 ;;		_SPI_ReadByte
  8051 ;;		_SPI_Write
  8052 ;;		_SPI_Read
  8053 ;;		_SPI_ReadStatus
  8054 ;; This function uses a non-reentrant model
  8055 ;;
  8056                           
  8057                           
  8058                           ;psect for function _SPI_WriteByte
  8059  1BB0                     _SPI_WriteByte:
  8060                           
  8061                           ;incstack = 0
  8062                           ; Regs used in _SPI_WriteByte: [wreg]
  8063                           ;SPI_WriteByte@data stored from wreg
  8064  1BB0  00A0               	movwf	SPI_WriteByte@data
  8065                           
  8066                           ;spi_flash.c: 25: SSPBUF = data;
  8067  1BB1  0820               	movf	SPI_WriteByte@data,w
  8068  1BB2  0093               	movwf	19	;volatile
  8069  1BB3                     l751:	
  8070                           ;spi_flash.c: 26: while(SSPSTATbits.BF == 0);
  8071                           
  8072  1BB3  1683               	bsf	3,5	;RP0=1, select bank1
  8073  1BB4  1814               	btfsc	20,0	;volatile
  8074  1BB5  0008               	return
  8075  1BB6  2BB3               	goto	l751
  8076  1BB7                     __end_of_SPI_WriteByte:
  8077                           
  8078                           	psect	text37
  8079  1339                     __ptext37:	
  8080 ;; *************** function _LCD_init *****************
  8081 ;; Defined at:
  8082 ;;		line 18 in file "lcd.c"
  8083 ;; Parameters:    Size  Location     Type
  8084 ;;		None
  8085 ;; Auto vars:     Size  Location     Type
  8086 ;;		None
  8087 ;; Return value:  Size  Location     Type
  8088 ;;                  1    wreg      void 
  8089 ;; Registers used:
  8090 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  8091 ;; Tracked objects:
  8092 ;;		On entry : 300/0
  8093 ;;		On exit  : 0/0
  8094 ;;		Unchanged: 0/0
  8095 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8096 ;;      Params:         0       0       0       0       0
  8097 ;;      Locals:         0       0       0       0       0
  8098 ;;      Temps:          0       2       0       0       0
  8099 ;;      Totals:         0       2       0       0       0
  8100 ;;Total ram usage:        2 bytes
  8101 ;; Hardware stack levels used: 1
  8102 ;; Hardware stack levels required when called: 6
  8103 ;; This function calls:
  8104 ;;		_LCD_clear
  8105 ;;		_sendbyte
  8106 ;;		_sendhalfbyte
  8107 ;; This function is called by:
  8108 ;;		_main
  8109 ;; This function uses a non-reentrant model
  8110 ;;
  8111                           
  8112                           
  8113                           ;psect for function _LCD_init
  8114  1339                     _LCD_init:
  8115                           
  8116                           ;lcd.c: 19: _delay((unsigned long)((50)*(8000000/4000.0)));
  8117                           
  8118                           ;incstack = 0
  8119                           ; Regs used in _LCD_init: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  8120  1339  3082               	movlw	130
  8121  133A  1283               	bcf	3,5	;RP0=0, select bank0
  8122  133B  1303               	bcf	3,6	;RP1=0, select bank0
  8123  133C  00AF               	movwf	??_LCD_init+1
  8124  133D  30DD               	movlw	221
  8125  133E  00AE               	movwf	??_LCD_init
  8126  133F                     u6467:
  8127  133F  0BAE               	decfsz	??_LCD_init,f
  8128  1340  2B3F               	goto	u6467
  8129  1341  0BAF               	decfsz	??_LCD_init+1,f
  8130  1342  2B3F               	goto	u6467
  8131                           
  8132                           ;lcd.c: 23: sendhalfbyte(0b00000011);
  8133  1343  3003               	movlw	3
  8134  1344  160A  158A  25A5  160A  118A  	fcall	_sendhalfbyte
  8135                           
  8136                           ;lcd.c: 24: _delay((unsigned long)((4500)*(8000000/4000000.0)));
  8137  1349  300C               	movlw	12
  8138  134A  1283               	bcf	3,5	;RP0=0, select bank0
  8139  134B  1303               	bcf	3,6	;RP1=0, select bank0
  8140  134C  00AF               	movwf	??_LCD_init+1
  8141  134D  30AE               	movlw	174
  8142  134E  00AE               	movwf	??_LCD_init
  8143  134F                     u6477:
  8144  134F  0BAE               	decfsz	??_LCD_init,f
  8145  1350  2B4F               	goto	u6477
  8146  1351  0BAF               	decfsz	??_LCD_init+1,f
  8147  1352  2B4F               	goto	u6477
  8148  1353  0000               	nop
  8149                           
  8150                           ;lcd.c: 25: sendhalfbyte(0b00000011);
  8151  1354  3003               	movlw	3
  8152  1355  160A  158A  25A5  160A  118A  	fcall	_sendhalfbyte
  8153                           
  8154                           ;lcd.c: 26: _delay((unsigned long)((200)*(8000000/4000000.0)));
  8155  135A  3084               	movlw	132
  8156  135B  1283               	bcf	3,5	;RP0=0, select bank0
  8157  135C  1303               	bcf	3,6	;RP1=0, select bank0
  8158  135D  00AE               	movwf	??_LCD_init
  8159  135E                     u6487:
  8160  135E  0BAE               	decfsz	??_LCD_init,f
  8161  135F  2B5E               	goto	u6487
  8162  1360  0000               	nop
  8163                           
  8164                           ;lcd.c: 27: sendhalfbyte(0b00000011);
  8165  1361  3003               	movlw	3
  8166  1362  160A  158A  25A5  160A  118A  	fcall	_sendhalfbyte
  8167                           
  8168                           ;lcd.c: 28: _delay((unsigned long)((1)*(8000000/4000.0)));
  8169  1367  3003               	movlw	3
  8170  1368  1283               	bcf	3,5	;RP0=0, select bank0
  8171  1369  1303               	bcf	3,6	;RP1=0, select bank0
  8172  136A  00AF               	movwf	??_LCD_init+1
  8173  136B  3097               	movlw	151
  8174  136C  00AE               	movwf	??_LCD_init
  8175  136D                     u6497:
  8176  136D  0BAE               	decfsz	??_LCD_init,f
  8177  136E  2B6D               	goto	u6497
  8178  136F  0BAF               	decfsz	??_LCD_init+1,f
  8179  1370  2B6D               	goto	u6497
  8180                           
  8181                           ;lcd.c: 29: sendhalfbyte(0b00000010);
  8182  1371  3002               	movlw	2
  8183  1372  160A  158A  25A5  160A  118A  	fcall	_sendhalfbyte
  8184                           
  8185                           ;lcd.c: 30: _delay((unsigned long)((1)*(8000000/4000.0)));
  8186  1377  3003               	movlw	3
  8187  1378  1283               	bcf	3,5	;RP0=0, select bank0
  8188  1379  1303               	bcf	3,6	;RP1=0, select bank0
  8189  137A  00AF               	movwf	??_LCD_init+1
  8190  137B  3097               	movlw	151
  8191  137C  00AE               	movwf	??_LCD_init
  8192  137D                     u6507:
  8193  137D  0BAE               	decfsz	??_LCD_init,f
  8194  137E  2B7D               	goto	u6507
  8195  137F  0BAF               	decfsz	??_LCD_init+1,f
  8196  1380  2B7D               	goto	u6507
  8197                           
  8198                           ;lcd.c: 33: sendbyte(0b00101000,0);
  8199  1381  1283               	bcf	3,5	;RP0=0, select bank0
  8200  1382  1303               	bcf	3,6	;RP1=0, select bank0
  8201  1383  01A8               	clrf	sendbyte@mode
  8202  1384  3028               	movlw	40
  8203  1385  160A  158A  247E  160A  118A  	fcall	_sendbyte
  8204                           
  8205                           ;lcd.c: 34: _delay((unsigned long)((1)*(8000000/4000.0)));
  8206  138A  3003               	movlw	3
  8207  138B  1283               	bcf	3,5	;RP0=0, select bank0
  8208  138C  1303               	bcf	3,6	;RP1=0, select bank0
  8209  138D  00AF               	movwf	??_LCD_init+1
  8210  138E  3097               	movlw	151
  8211  138F  00AE               	movwf	??_LCD_init
  8212  1390                     u6517:
  8213  1390  0BAE               	decfsz	??_LCD_init,f
  8214  1391  2B90               	goto	u6517
  8215  1392  0BAF               	decfsz	??_LCD_init+1,f
  8216  1393  2B90               	goto	u6517
  8217                           
  8218                           ;lcd.c: 35: sendbyte(0b00001100,0);
  8219  1394  1283               	bcf	3,5	;RP0=0, select bank0
  8220  1395  1303               	bcf	3,6	;RP1=0, select bank0
  8221  1396  01A8               	clrf	sendbyte@mode
  8222  1397  300C               	movlw	12
  8223  1398  160A  158A  247E  160A  118A  	fcall	_sendbyte
  8224                           
  8225                           ;lcd.c: 36: LCD_clear();
  8226  139D  160A  158A  2405  160A  118A  	fcall	_LCD_clear
  8227                           
  8228                           ;lcd.c: 37: sendbyte(0b00000110,0);
  8229  13A2  1283               	bcf	3,5	;RP0=0, select bank0
  8230  13A3  1303               	bcf	3,6	;RP1=0, select bank0
  8231  13A4  01A8               	clrf	sendbyte@mode
  8232  13A5  3006               	movlw	6
  8233  13A6  160A  158A  247E  160A  118A  	fcall	_sendbyte
  8234                           
  8235                           ;lcd.c: 38: _delay((unsigned long)((1)*(8000000/4000.0)));
  8236  13AB  3003               	movlw	3
  8237  13AC  1283               	bcf	3,5	;RP0=0, select bank0
  8238  13AD  1303               	bcf	3,6	;RP1=0, select bank0
  8239  13AE  00AF               	movwf	??_LCD_init+1
  8240  13AF  3097               	movlw	151
  8241  13B0  00AE               	movwf	??_LCD_init
  8242  13B1                     u6527:
  8243  13B1  0BAE               	decfsz	??_LCD_init,f
  8244  13B2  2BB1               	goto	u6527
  8245  13B3  0BAF               	decfsz	??_LCD_init+1,f
  8246  13B4  2BB1               	goto	u6527
  8247  13B5  0008               	return
  8248  13B6                     __end_of_LCD_init:
  8249                           
  8250                           	psect	text38
  8251  1C05                     __ptext38:	
  8252 ;; *************** function _LCD_clear *****************
  8253 ;; Defined at:
  8254 ;;		line 118 in file "lcd.c"
  8255 ;; Parameters:    Size  Location     Type
  8256 ;;		None
  8257 ;; Auto vars:     Size  Location     Type
  8258 ;;		None
  8259 ;; Return value:  Size  Location     Type
  8260 ;;                  1    wreg      void 
  8261 ;; Registers used:
  8262 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  8263 ;; Tracked objects:
  8264 ;;		On entry : 0/100
  8265 ;;		On exit  : 0/0
  8266 ;;		Unchanged: 0/0
  8267 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8268 ;;      Params:         0       0       0       0       0
  8269 ;;      Locals:         0       0       0       0       0
  8270 ;;      Temps:          0       2       0       0       0
  8271 ;;      Totals:         0       2       0       0       0
  8272 ;;Total ram usage:        2 bytes
  8273 ;; Hardware stack levels used: 1
  8274 ;; Hardware stack levels required when called: 5
  8275 ;; This function calls:
  8276 ;;		_sendbyte
  8277 ;; This function is called by:
  8278 ;;		_LCD_init
  8279 ;;		_fMenuStrip
  8280 ;; This function uses a non-reentrant model
  8281 ;;
  8282                           
  8283                           
  8284                           ;psect for function _LCD_clear
  8285  1C05                     _LCD_clear:
  8286                           
  8287                           ;lcd.c: 119: sendbyte(0b00000001,0);
  8288                           
  8289                           ;incstack = 0
  8290                           ; Regs used in _LCD_clear: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  8291  1C05  1283               	bcf	3,5	;RP0=0, select bank0
  8292  1C06  1303               	bcf	3,6	;RP1=0, select bank0
  8293  1C07  01A8               	clrf	sendbyte@mode
  8294  1C08  3001               	movlw	1
  8295  1C09  160A  158A  247E  160A  158A  	fcall	_sendbyte
  8296                           
  8297                           ;lcd.c: 120: _delay((unsigned long)((1600)*(8000000/4000000.0)));
  8298  1C0E  3005               	movlw	5
  8299  1C0F  1283               	bcf	3,5	;RP0=0, select bank0
  8300  1C10  1303               	bcf	3,6	;RP1=0, select bank0
  8301  1C11  00AD               	movwf	??_LCD_clear+1
  8302  1C12  3025               	movlw	37
  8303  1C13  00AC               	movwf	??_LCD_clear
  8304  1C14                     u6537:
  8305  1C14  0BAC               	decfsz	??_LCD_clear,f
  8306  1C15  2C14               	goto	u6537
  8307  1C16  0BAD               	decfsz	??_LCD_clear+1,f
  8308  1C17  2C14               	goto	u6537
  8309  1C18  2C19               	nop2
  8310  1C19  0008               	return
  8311  1C1A                     __end_of_LCD_clear:
  8312                           
  8313                           	psect	text39
  8314  1C7E                     __ptext39:	
  8315 ;; *************** function _sendbyte *****************
  8316 ;; Defined at:
  8317 ;;		line 69 in file "lcd.c"
  8318 ;; Parameters:    Size  Location     Type
  8319 ;;  c               1    wreg     unsigned char 
  8320 ;;  mode            1    8[BANK0 ] unsigned char 
  8321 ;; Auto vars:     Size  Location     Type
  8322 ;;  c               1   11[BANK0 ] unsigned char 
  8323 ;;  hb              1   10[BANK0 ] unsigned char 
  8324 ;; Return value:  Size  Location     Type
  8325 ;;                  1    wreg      void 
  8326 ;; Registers used:
  8327 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  8328 ;; Tracked objects:
  8329 ;;		On entry : 300/0
  8330 ;;		On exit  : 0/0
  8331 ;;		Unchanged: 0/0
  8332 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8333 ;;      Params:         0       1       0       0       0
  8334 ;;      Locals:         0       2       0       0       0
  8335 ;;      Temps:          0       1       0       0       0
  8336 ;;      Totals:         0       4       0       0       0
  8337 ;;Total ram usage:        4 bytes
  8338 ;; Hardware stack levels used: 1
  8339 ;; Hardware stack levels required when called: 4
  8340 ;; This function calls:
  8341 ;;		_sendhalfbyte
  8342 ;; This function is called by:
  8343 ;;		_LCD_init
  8344 ;;		_LCD_string
  8345 ;;		_LCD_SetPos
  8346 ;;		_LCD_clear
  8347 ;; This function uses a non-reentrant model
  8348 ;;
  8349                           
  8350                           
  8351                           ;psect for function _sendbyte
  8352  1C7E                     _sendbyte:
  8353                           
  8354                           ;incstack = 0
  8355                           ; Regs used in _sendbyte: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  8356                           ;sendbyte@c stored from wreg
  8357  1C7E  00AB               	movwf	sendbyte@c
  8358                           
  8359                           ;lcd.c: 71: hb = c;
  8360  1C7F  082B               	movf	sendbyte@c,w
  8361  1C80  00A9               	movwf	??_sendbyte
  8362  1C81  0829               	movf	??_sendbyte,w
  8363  1C82  00AA               	movwf	sendbyte@hb
  8364                           
  8365                           ;lcd.c: 72: hb &= ~0x0F;
  8366  1C83  30F0               	movlw	240
  8367  1C84  00A9               	movwf	??_sendbyte
  8368  1C85  0829               	movf	??_sendbyte,w
  8369  1C86  05AA               	andwf	sendbyte@hb,f
  8370                           
  8371                           ;lcd.c: 73: c <<= 4;
  8372  1C87  0EAB               	swapf	sendbyte@c,f
  8373  1C88  30F0               	movlw	240
  8374  1C89  05AB               	andwf	sendbyte@c,f
  8375                           
  8376                           ;lcd.c: 75: if(mode != 0)
  8377  1C8A  0828               	movf	sendbyte@mode,w
  8378  1C8B  1903               	btfsc	3,2
  8379  1C8C  2C8F               	goto	l3460
  8380                           
  8381                           ;lcd.c: 81: {;lcd.c: 82: c |= 0x04;
  8382  1C8D  152B               	bsf	sendbyte@c,2
  8383                           
  8384                           ;lcd.c: 83: hb |= 0x04;
  8385  1C8E  152A               	bsf	sendbyte@hb,2
  8386  1C8F                     l3460:
  8387                           
  8388                           ;lcd.c: 84: };lcd.c: 85: sendhalfbyte(hb);
  8389  1C8F  082A               	movf	sendbyte@hb,w
  8390  1C90  160A  158A  25A5  160A  158A  	fcall	_sendhalfbyte
  8391                           
  8392                           ;lcd.c: 86: sendhalfbyte(c);
  8393  1C95  1283               	bcf	3,5	;RP0=0, select bank0
  8394  1C96  1303               	bcf	3,6	;RP1=0, select bank0
  8395  1C97  082B               	movf	sendbyte@c,w
  8396  1C98  160A  158A  25A5   	fcall	_sendhalfbyte
  8397  1C9B  0008               	return
  8398  1C9C                     __end_of_sendbyte:
  8399                           
  8400                           	psect	text40
  8401  1DA5                     __ptext40:	
  8402 ;; *************** function _sendhalfbyte *****************
  8403 ;; Defined at:
  8404 ;;		line 45 in file "lcd.c"
  8405 ;; Parameters:    Size  Location     Type
  8406 ;;  c               1    wreg     unsigned char 
  8407 ;; Auto vars:     Size  Location     Type
  8408 ;;  c               1    7[BANK0 ] unsigned char 
  8409 ;; Return value:  Size  Location     Type
  8410 ;;                  1    wreg      void 
  8411 ;; Registers used:
  8412 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  8413 ;; Tracked objects:
  8414 ;;		On entry : 0/0
  8415 ;;		On exit  : 0/0
  8416 ;;		Unchanged: 0/0
  8417 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8418 ;;      Params:         0       0       0       0       0
  8419 ;;      Locals:         0       1       0       0       0
  8420 ;;      Temps:          0       1       0       0       0
  8421 ;;      Totals:         0       2       0       0       0
  8422 ;;Total ram usage:        2 bytes
  8423 ;; Hardware stack levels used: 1
  8424 ;; Hardware stack levels required when called: 3
  8425 ;; This function calls:
  8426 ;;		_fShiftData
  8427 ;; This function is called by:
  8428 ;;		_LCD_init
  8429 ;;		_sendbyte
  8430 ;; This function uses a non-reentrant model
  8431 ;;
  8432                           
  8433                           
  8434                           ;psect for function _sendhalfbyte
  8435  1DA5                     _sendhalfbyte:
  8436                           
  8437                           ;incstack = 0
  8438                           ; Regs used in _sendhalfbyte: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  8439                           ;sendhalfbyte@c stored from wreg
  8440  1DA5  1283               	bcf	3,5	;RP0=0, select bank0
  8441  1DA6  1303               	bcf	3,6	;RP1=0, select bank0
  8442  1DA7  00A7               	movwf	sendhalfbyte@c
  8443                           
  8444                           ;lcd.c: 50: fShiftData(0x00);
  8445  1DA8  3000               	movlw	0
  8446  1DA9  160A  158A  26D4  160A  158A  	fcall	_fShiftData
  8447                           
  8448                           ;lcd.c: 51: _delay((unsigned long)((1)*(8000000/4000000.0)));
  8449  1DAE  2DAF               	nop2	;2 cycle nop
  8450                           
  8451                           ;lcd.c: 52: if(c & 0x01 || c & 0x02 || c & 0x03)
  8452  1DAF  1283               	bcf	3,5	;RP0=0, select bank0
  8453  1DB0  1303               	bcf	3,6	;RP1=0, select bank0
  8454  1DB1  1C27               	btfss	sendhalfbyte@c,0
  8455  1DB2  18A7               	btfsc	sendhalfbyte@c,1
  8456  1DB3  2DB8               	goto	l3394
  8457  1DB4  0827               	movf	sendhalfbyte@c,w
  8458  1DB5  3903               	andlw	3
  8459  1DB6  1903               	btfsc	3,2
  8460  1DB7  2DBF               	goto	l3396
  8461  1DB8                     l3394:
  8462                           
  8463                           ;lcd.c: 53: c <<= 3;
  8464  1DB8  1003               	clrc
  8465  1DB9  0DA7               	rlf	sendhalfbyte@c,f
  8466  1DBA  1003               	clrc
  8467  1DBB  0DA7               	rlf	sendhalfbyte@c,f
  8468  1DBC  1003               	clrc
  8469  1DBD  0DA7               	rlf	sendhalfbyte@c,f
  8470  1DBE  2DC1               	goto	l3398
  8471  1DBF                     l3396:
  8472                           
  8473                           ;lcd.c: 54: else;lcd.c: 55: c >>= 1;
  8474  1DBF  1003               	clrc
  8475  1DC0  0CA7               	rrf	sendhalfbyte@c,f
  8476  1DC1                     l3398:
  8477                           
  8478                           ;lcd.c: 59: c |= 0x04;
  8479  1DC1  1527               	bsf	sendhalfbyte@c,2
  8480                           
  8481                           ;lcd.c: 60: fShiftData(c);
  8482  1DC2  0827               	movf	sendhalfbyte@c,w
  8483  1DC3  160A  158A  26D4  160A  158A  	fcall	_fShiftData
  8484                           
  8485                           ;lcd.c: 62: _delay((unsigned long)((1)*(8000000/4000000.0)));
  8486  1DC8  2DC9               	nop2	;2 cycle nop
  8487                           
  8488                           ;lcd.c: 63: c &= ~0x04;
  8489  1DC9  30FB               	movlw	251
  8490  1DCA  1283               	bcf	3,5	;RP0=0, select bank0
  8491  1DCB  1303               	bcf	3,6	;RP1=0, select bank0
  8492  1DCC  00A6               	movwf	??_sendhalfbyte
  8493  1DCD  0826               	movf	??_sendhalfbyte,w
  8494  1DCE  05A7               	andwf	sendhalfbyte@c,f
  8495                           
  8496                           ;lcd.c: 64: fShiftData(c);
  8497  1DCF  0827               	movf	sendhalfbyte@c,w
  8498  1DD0  160A  158A  26D4  160A  158A  	fcall	_fShiftData
  8499                           
  8500                           ;lcd.c: 66: _delay((unsigned long)((50)*(8000000/4000000.0)));
  8501  1DD5  3020               	movlw	32
  8502  1DD6  1283               	bcf	3,5	;RP0=0, select bank0
  8503  1DD7  1303               	bcf	3,6	;RP1=0, select bank0
  8504  1DD8  00A6               	movwf	??_sendhalfbyte
  8505  1DD9                     u6547:
  8506  1DD9  0BA6               	decfsz	??_sendhalfbyte,f
  8507  1DDA  2DD9               	goto	u6547
  8508  1DDB  0000               	nop
  8509  1DDC  0008               	return
  8510  1DDD                     __end_of_sendhalfbyte:
  8511                           
  8512                           	psect	text41
  8513  1ED4                     __ptext41:	
  8514 ;; *************** function _fShiftData *****************
  8515 ;; Defined at:
  8516 ;;		line 3 in file "shift_registr.c"
  8517 ;; Parameters:    Size  Location     Type
  8518 ;;  shiftVar        1    wreg     unsigned char 
  8519 ;; Auto vars:     Size  Location     Type
  8520 ;;  shiftVar        1    2[BANK0 ] unsigned char 
  8521 ;;  i               1    5[BANK0 ] unsigned char 
  8522 ;;  shiftVariabl    2    3[BANK0 ] short 
  8523 ;; Return value:  Size  Location     Type
  8524 ;;                  1    wreg      void 
  8525 ;; Registers used:
  8526 ;;		wreg, status,2, status,0, btemp+1
  8527 ;; Tracked objects:
  8528 ;;		On entry : 0/0
  8529 ;;		On exit  : 300/0
  8530 ;;		Unchanged: 0/0
  8531 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8532 ;;      Params:         0       0       0       0       0
  8533 ;;      Locals:         0       4       0       0       0
  8534 ;;      Temps:          0       2       0       0       0
  8535 ;;      Totals:         0       6       0       0       0
  8536 ;;Total ram usage:        6 bytes
  8537 ;; Hardware stack levels used: 1
  8538 ;; Hardware stack levels required when called: 2
  8539 ;; This function calls:
  8540 ;;		Nothing
  8541 ;; This function is called by:
  8542 ;;		_main
  8543 ;;		_sendhalfbyte
  8544 ;; This function uses a non-reentrant model
  8545 ;;
  8546                           
  8547                           
  8548                           ;psect for function _fShiftData
  8549  1ED4                     _fShiftData:
  8550                           
  8551                           ;incstack = 0
  8552                           ; Regs used in _fShiftData: [wreg+status,2+status,0+btemp+1]
  8553                           ;fShiftData@shiftVar stored from wreg
  8554  1ED4  1283               	bcf	3,5	;RP0=0, select bank0
  8555  1ED5  1303               	bcf	3,6	;RP1=0, select bank0
  8556  1ED6  00A2               	movwf	fShiftData@shiftVar
  8557                           
  8558                           ;shift_registr.c: 5: shiftVariable = _tempPinDO;
  8559  1ED7  1683               	bsf	3,5	;RP0=1, select bank1
  8560  1ED8  0843               	movf	__tempPinDO^(0+128),w
  8561  1ED9  1283               	bcf	3,5	;RP0=0, select bank0
  8562  1EDA  00A0               	movwf	??_fShiftData
  8563  1EDB  01A1               	clrf	??_fShiftData+1
  8564  1EDC  0820               	movf	??_fShiftData,w
  8565  1EDD  00A3               	movwf	fShiftData@shiftVariable
  8566  1EDE  0821               	movf	??_fShiftData+1,w
  8567  1EDF  00A4               	movwf	fShiftData@shiftVariable+1
  8568                           
  8569                           ;shift_registr.c: 6: shiftVariable <<= 8;
  8570  1EE0  3008               	movlw	8
  8571  1EE1                     u3215:
  8572  1EE1  1003               	clrc
  8573  1EE2  0DA3               	rlf	fShiftData@shiftVariable,f
  8574  1EE3  0DA4               	rlf	fShiftData@shiftVariable+1,f
  8575  1EE4  3EFF               	addlw	-1
  8576  1EE5  1D03               	skipz
  8577  1EE6  2EE1               	goto	u3215
  8578                           
  8579                           ;shift_registr.c: 7: shiftVariable |= shiftVar;
  8580  1EE7  0822               	movf	fShiftData@shiftVar,w
  8581  1EE8  00A0               	movwf	??_fShiftData
  8582  1EE9  01A1               	clrf	??_fShiftData+1
  8583  1EEA  0820               	movf	??_fShiftData,w
  8584  1EEB  04A3               	iorwf	fShiftData@shiftVariable,f
  8585  1EEC  0821               	movf	??_fShiftData+1,w
  8586  1EED  04A4               	iorwf	fShiftData@shiftVariable+1,f
  8587                           
  8588                           ;shift_registr.c: 8: for(char i = 0; i < 16; i++)
  8589  1EEE  01A5               	clrf	fShiftData@i
  8590  1EEF                     l714:
  8591                           
  8592                           ;shift_registr.c: 9: {;shift_registr.c: 10: if(shiftVariable & 0x0001)
  8593  1EEF  1C23               	btfss	fShiftData@shiftVariable,0
  8594  1EF0  2EF3               	goto	l716
  8595                           
  8596                           ;shift_registr.c: 11: PORTBbits.RB1 = 1;
  8597  1EF1  1486               	bsf	6,1	;volatile
  8598  1EF2  2EF4               	goto	l717
  8599  1EF3                     l716:
  8600                           
  8601                           ;shift_registr.c: 12: else;shift_registr.c: 13: PORTBbits.RB1 = 0;
  8602  1EF3  1086               	bcf	6,1	;volatile
  8603  1EF4                     l717:
  8604                           
  8605                           ;shift_registr.c: 14: _delay((unsigned long)((3)*(8000000/4000000.0)));
  8606  1EF4  2EF5               	nop2	;2 cycle nop
  8607  1EF5  2EF6               	nop2	;2 cycle nop
  8608  1EF6  2EF7               	nop2	;2 cycle nop
  8609                           
  8610                           ;shift_registr.c: 16: shiftVariable >>= 1;
  8611  1EF7  3001               	movlw	1
  8612  1EF8  00FF               	movwf	127
  8613  1EF9                     u3235:
  8614  1EF9  1283               	bcf	3,5	;RP0=0, select bank0
  8615  1EFA  1303               	bcf	3,6	;RP1=0, select bank0
  8616  1EFB  0D24               	rlf	fShiftData@shiftVariable+1,w
  8617  1EFC  0CA4               	rrf	fShiftData@shiftVariable+1,f
  8618  1EFD  0CA3               	rrf	fShiftData@shiftVariable,f
  8619  1EFE  0BFF               	decfsz	127,f
  8620  1EFF  2EF9               	goto	u3235
  8621                           
  8622                           ;shift_registr.c: 17: PORTBbits.RB2 = 1;
  8623  1F00  1506               	bsf	6,2	;volatile
  8624                           
  8625                           ;shift_registr.c: 18: _delay((unsigned long)((3)*(8000000/4000000.0)));
  8626  1F01  2F02               	nop2	;2 cycle nop
  8627  1F02  2F03               	nop2	;2 cycle nop
  8628  1F03  2F04               	nop2	;2 cycle nop
  8629                           
  8630                           ;shift_registr.c: 20: PORTBbits.RB2 = 0;
  8631  1F04  1283               	bcf	3,5	;RP0=0, select bank0
  8632  1F05  1303               	bcf	3,6	;RP1=0, select bank0
  8633  1F06  1106               	bcf	6,2	;volatile
  8634  1F07  3001               	movlw	1
  8635  1F08  00A0               	movwf	??_fShiftData
  8636  1F09  0820               	movf	??_fShiftData,w
  8637  1F0A  07A5               	addwf	fShiftData@i,f
  8638  1F0B  3010               	movlw	16
  8639  1F0C  0225               	subwf	fShiftData@i,w
  8640  1F0D  1C03               	skipc
  8641  1F0E  2EEF               	goto	l714
  8642                           
  8643                           ;shift_registr.c: 21: };shift_registr.c: 22: PORTBbits.RB0 = 1;
  8644  1F0F  1406               	bsf	6,0	;volatile
  8645                           
  8646                           ;shift_registr.c: 23: _delay((unsigned long)((3)*(8000000/4000000.0)));
  8647  1F10  2F11               	nop2	;2 cycle nop
  8648  1F11  2F12               	nop2	;2 cycle nop
  8649  1F12  2F13               	nop2	;2 cycle nop
  8650                           
  8651                           ;shift_registr.c: 25: PORTBbits.RB0 = 0;
  8652  1F13  1283               	bcf	3,5	;RP0=0, select bank0
  8653  1F14  1303               	bcf	3,6	;RP1=0, select bank0
  8654  1F15  1006               	bcf	6,0	;volatile
  8655  1F16  0008               	return
  8656  1F17                     __end_of_fShiftData:
  8657                           
  8658                           	psect	text42
  8659  169F                     __ptext42:	
  8660 ;; *************** function _linkup *****************
  8661 ;; Defined at:
  8662 ;;		line 10 in file "newmain.c"
  8663 ;; Parameters:    Size  Location     Type
  8664 ;;		None
  8665 ;; Auto vars:     Size  Location     Type
  8666 ;;		None
  8667 ;; Return value:  Size  Location     Type
  8668 ;;                  1    wreg      void 
  8669 ;; Registers used:
  8670 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8671 ;; Tracked objects:
  8672 ;;		On entry : 0/0
  8673 ;;		On exit  : 200/0
  8674 ;;		Unchanged: 0/0
  8675 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8676 ;;      Params:         0       0       0       0       0
  8677 ;;      Locals:         0       0       0       0       0
  8678 ;;      Temps:          4       0       0       0       0
  8679 ;;      Totals:         4       0       0       0       0
  8680 ;;Total ram usage:        4 bytes
  8681 ;; Hardware stack levels used: 1
  8682 ;; Hardware stack levels required when called: 1
  8683 ;; This function calls:
  8684 ;;		_fInterruptRecieveDevice
  8685 ;;		i1___lwmod
  8686 ;; This function is called by:
  8687 ;;		Interrupt level 1
  8688 ;; This function uses a non-reentrant model
  8689 ;;
  8690                           
  8691                           
  8692                           ;psect for function _linkup
  8693  169F                     _linkup:
  8694                           
  8695                           ;newmain.c: 11: if(INTCONbits.RBIE && INTCONbits.RBIF){
  8696  169F  198B               	btfsc	11,3	;volatile
  8697  16A0  1C0B               	btfss	11,0	;volatile
  8698  16A1  2EA8               	goto	i1l4932
  8699                           
  8700                           ;newmain.c: 12: fInterruptRecieveDevice();
  8701  16A2  160A  118A  25F3  160A  118A  	fcall	_fInterruptRecieveDevice
  8702                           
  8703                           ;newmain.c: 13: INTCONbits.RBIF = 0;
  8704  16A7  100B               	bcf	11,0	;volatile
  8705  16A8                     i1l4932:
  8706                           
  8707                           ;newmain.c: 14: };newmain.c: 15: if(INTCONbits.T0IE && INTCONbits.T0IF){
  8708  16A8  1A8B               	btfsc	11,5	;volatile
  8709  16A9  1D0B               	btfss	11,2	;volatile
  8710  16AA  2EC3               	goto	i1l4956
  8711                           
  8712                           ;newmain.c: 16: TMR0 = TMR0_Value;
  8713  16AB  1683               	bsf	3,5	;RP0=1, select bank1
  8714  16AC  1303               	bcf	3,6	;RP1=0, select bank1
  8715  16AD  0842               	movf	_TMR0_Value^(0+128),w
  8716  16AE  1283               	bcf	3,5	;RP0=0, select bank0
  8717  16AF  0081               	movwf	1	;volatile
  8718                           
  8719                           ;newmain.c: 17: if(cTMR0 == 3){
  8720  16B0  3003               	movlw	3
  8721  16B1  1683               	bsf	3,5	;RP0=1, select bank1
  8722  16B2  0641               	xorwf	_cTMR0^(0+128),w
  8723  16B3  1D03               	btfss	3,2
  8724  16B4  2EBD               	goto	i1l4952
  8725                           
  8726                           ;newmain.c: 19: cTMR0 = 0;
  8727  16B5  01C1               	clrf	_cTMR0^(0+128)
  8728                           
  8729                           ;newmain.c: 20: flModeStep = 0;
  8730  16B6  01FD               	clrf	_flModeStep
  8731                           
  8732                           ;newmain.c: 21: flStartBitRecieve = 0;
  8733  16B7  127A               	bcf	_flStartBitRecieve/(0+8),_flStartBitRecieve& (0+7)
  8734                           
  8735                           ;newmain.c: 22: flStopBitRecieve = 0;
  8736  16B8  11FA               	bcf	_flStopBitRecieve/(0+8),_flStopBitRecieve& (0+7)
  8737                           
  8738                           ;newmain.c: 23: flDO1 = 0;
  8739  16B9  12FA               	bcf	_flDO1/(0+8),_flDO1& (0+7)
  8740                           
  8741                           ;newmain.c: 24: T1CONbits.TMR1ON = 0;
  8742  16BA  1283               	bcf	3,5	;RP0=0, select bank0
  8743  16BB  1010               	bcf	16,0	;volatile
  8744                           
  8745                           ;newmain.c: 25: INTCONbits.T0IE = 0;
  8746  16BC  128B               	bcf	11,5	;volatile
  8747  16BD                     i1l4952:
  8748                           
  8749                           ;newmain.c: 26: };newmain.c: 27: INTCONbits.T0IF = 0;
  8750  16BD  110B               	bcf	11,2	;volatile
  8751                           
  8752                           ;newmain.c: 28: cTMR0++;
  8753  16BE  3001               	movlw	1
  8754  16BF  00F6               	movwf	??_linkup
  8755  16C0  0876               	movf	??_linkup,w
  8756  16C1  1683               	bsf	3,5	;RP0=1, select bank1
  8757  16C2  07C1               	addwf	_cTMR0^(0+128),f
  8758  16C3                     i1l4956:
  8759                           
  8760                           ;newmain.c: 29: };newmain.c: 30: if(PIE1bits.TMR1IE && PIR1bits.TMR1IF){
  8761  16C3  1683               	bsf	3,5	;RP0=1, select bank1
  8762  16C4  1303               	bcf	3,6	;RP1=0, select bank1
  8763  16C5  1C0C               	btfss	12,0	;volatile
  8764  16C6  2ECC               	goto	i1l146
  8765  16C7  1283               	bcf	3,5	;RP0=0, select bank0
  8766  16C8  1C0C               	btfss	12,0	;volatile
  8767  16C9  2ECC               	goto	i1l146
  8768                           
  8769                           ;newmain.c: 31: T1CONbits.TMR1ON = 0;
  8770  16CA  1010               	bcf	16,0	;volatile
  8771                           
  8772                           ;newmain.c: 32: PIR1bits.TMR1IF = 0;
  8773  16CB  100C               	bcf	12,0	;volatile
  8774  16CC                     i1l146:
  8775                           
  8776                           ;newmain.c: 33: };newmain.c: 34: if(PIE1bits.TMR2IE && PIR1bits.TMR2IF){
  8777  16CC  1683               	bsf	3,5	;RP0=1, select bank1
  8778  16CD  1C8C               	btfss	12,1	;volatile
  8779  16CE  2F0A               	goto	i1l4986
  8780  16CF  1283               	bcf	3,5	;RP0=0, select bank0
  8781  16D0  1C8C               	btfss	12,1	;volatile
  8782  16D1  2F0A               	goto	i1l4986
  8783                           
  8784                           ;newmain.c: 35: _countTMR2trigger++;
  8785  16D2  3001               	movlw	1
  8786  16D3  00F6               	movwf	??_linkup
  8787  16D4  0876               	movf	??_linkup,w
  8788  16D5  1683               	bsf	3,5	;RP0=1, select bank1
  8789  16D6  07C5               	addwf	__countTMR2trigger^(0+128),f
  8790                           
  8791                           ;newmain.c: 38: if(_countTMR2trigger >= 28) {
  8792  16D7  301C               	movlw	28
  8793  16D8  0245               	subwf	__countTMR2trigger^(0+128),w
  8794  16D9  1C03               	skipc
  8795  16DA  2F08               	goto	i1l4984
  8796                           
  8797                           ;newmain.c: 39: _countSecond++;
  8798  16DB  3001               	movlw	1
  8799  16DC  07B6               	addwf	__countSecond^(0+128),f
  8800  16DD  1803               	skipnc
  8801  16DE  0AB7               	incf	(__countSecond+1)^(0+128),f
  8802  16DF  3000               	movlw	0
  8803  16E0  07B7               	addwf	(__countSecond+1)^(0+128),f
  8804                           
  8805                           ;newmain.c: 40: _countTMR2trigger = 0;
  8806  16E1  01C5               	clrf	__countTMR2trigger^(0+128)
  8807                           
  8808                           ;newmain.c: 42: _second = 1;
  8809  16E2  17FA               	bsf	__second/(0+8),__second& (0+7)
  8810                           
  8811                           ;newmain.c: 43: if((_countSecond % 60) == 0)
  8812  16E3  303C               	movlw	60
  8813  16E4  00F0               	movwf	i1___lwmod@divisor
  8814  16E5  3000               	movlw	0
  8815  16E6  00F1               	movwf	i1___lwmod@divisor+1
  8816  16E7  0837               	movf	(__countSecond+1)^(0+128),w
  8817  16E8  00F3               	movwf	i1___lwmod@dividend+1
  8818  16E9  0836               	movf	__countSecond^(0+128),w
  8819  16EA  00F2               	movwf	i1___lwmod@dividend
  8820  16EB  160A  158A  2541  160A  118A  	fcall	i1___lwmod
  8821  16F0  0870               	movf	?i1___lwmod,w
  8822  16F1  0471               	iorwf	?i1___lwmod+1,w
  8823  16F2  1903               	btfsc	3,2
  8824                           
  8825                           ;newmain.c: 44: _minute = 1;
  8826  16F3  177A               	bsf	__minute/(0+8),__minute& (0+7)
  8827                           
  8828                           ;newmain.c: 45: if((_countSecond % 3600) == 0){
  8829  16F4  3010               	movlw	16
  8830  16F5  00F0               	movwf	i1___lwmod@divisor
  8831  16F6  300E               	movlw	14
  8832  16F7  00F1               	movwf	i1___lwmod@divisor+1
  8833  16F8  0837               	movf	(__countSecond+1)^(0+128),w
  8834  16F9  00F3               	movwf	i1___lwmod@dividend+1
  8835  16FA  0836               	movf	__countSecond^(0+128),w
  8836  16FB  00F2               	movwf	i1___lwmod@dividend
  8837  16FC  160A  158A  2541  160A  118A  	fcall	i1___lwmod
  8838  1701  0870               	movf	?i1___lwmod,w
  8839  1702  0471               	iorwf	?i1___lwmod+1,w
  8840  1703  1D03               	btfss	3,2
  8841  1704  2F08               	goto	i1l4984
  8842                           
  8843                           ;newmain.c: 46: _hour = 1;
  8844  1705  146B               	bsf	(__hour/(0+8))^(0+128),__hour& (0+7)
  8845                           
  8846                           ;newmain.c: 47: _countSecond = 0;
  8847  1706  01B6               	clrf	__countSecond^(0+128)
  8848  1707  01B7               	clrf	(__countSecond+1)^(0+128)
  8849  1708                     i1l4984:
  8850                           
  8851                           ;newmain.c: 48: };newmain.c: 49: };newmain.c: 51: PIR1bits.TMR2IF = 0;
  8852  1708  1283               	bcf	3,5	;RP0=0, select bank0
  8853  1709  108C               	bcf	12,1	;volatile
  8854  170A                     i1l4986:
  8855                           
  8856                           ;newmain.c: 52: };newmain.c: 53: if(PIE1bits.ADIE && PIR1bits.ADIF){
  8857  170A  1683               	bsf	3,5	;RP0=1, select bank1
  8858  170B  1F0C               	btfss	12,6	;volatile
  8859  170C  2F45               	goto	i1l161
  8860  170D  1283               	bcf	3,5	;RP0=0, select bank0
  8861  170E  1F0C               	btfss	12,6	;volatile
  8862  170F  2F45               	goto	i1l161
  8863                           
  8864                           ;newmain.c: 54: if(Analog.AI0 >= 35 && Analog.AI0 <= 45) flMenuStrip = 0x01;
  8865  1710  3023               	movlw	35
  8866  1711  1683               	bsf	3,5	;RP0=1, select bank1
  8867  1712  0224               	subwf	_Analog^(0+128),w
  8868  1713  1C03               	skipc
  8869  1714  2F1C               	goto	i1l4996
  8870  1715  302E               	movlw	46
  8871  1716  0224               	subwf	_Analog^(0+128),w
  8872  1717  1803               	skipnc
  8873  1718  2F1C               	goto	i1l4996
  8874  1719  01BE               	clrf	_flMenuStrip^(0+128)
  8875  171A  0ABE               	incf	_flMenuStrip^(0+128),f
  8876  171B  2F43               	goto	i1l5020
  8877  171C                     i1l4996:
  8878                           
  8879                           ;newmain.c: 55: else if(Analog.AI0 >= 85 && Analog.AI0 <= 105) flMenuStrip = 0x02;
  8880  171C  3055               	movlw	85
  8881  171D  0224               	subwf	_Analog^(0+128),w
  8882  171E  1C03               	skipc
  8883  171F  2F26               	goto	i1l5002
  8884  1720  306A               	movlw	106
  8885  1721  0224               	subwf	_Analog^(0+128),w
  8886  1722  1803               	skipnc
  8887  1723  2F26               	goto	i1l5002
  8888  1724  3002               	movlw	2
  8889  1725  2F39               	goto	L29
  8890  1726                     i1l5002:
  8891                           
  8892                           ;newmain.c: 56: else if(Analog.AI0 >= 130 && Analog.AI0 <= 155) flMenuStrip = 0x04;
  8893  1726  3082               	movlw	130
  8894  1727  0224               	subwf	_Analog^(0+128),w
  8895  1728  1C03               	skipc
  8896  1729  2F30               	goto	i1l5008
  8897  172A  309C               	movlw	156
  8898  172B  0224               	subwf	_Analog^(0+128),w
  8899  172C  1803               	skipnc
  8900  172D  2F30               	goto	i1l5008
  8901  172E  3004               	movlw	4
  8902  172F  2F39               	goto	L29
  8903  1730                     i1l5008:
  8904                           
  8905                           ;newmain.c: 57: else if(Analog.AI0 >= 190 && Analog.AI0 <= 210) flMenuStrip = 0x08;
  8906  1730  30BE               	movlw	190
  8907  1731  0224               	subwf	_Analog^(0+128),w
  8908  1732  1C03               	skipc
  8909  1733  2F3D               	goto	i1l5014
  8910  1734  30D3               	movlw	211
  8911  1735  0224               	subwf	_Analog^(0+128),w
  8912  1736  1803               	skipnc
  8913  1737  2F3D               	goto	i1l5014
  8914  1738  3008               	movlw	8
  8915  1739                     L29:
  8916  1739  00F6               	movwf	??_linkup
  8917  173A  0876               	movf	??_linkup,w
  8918  173B  00BE               	movwf	_flMenuStrip^(0+128)
  8919  173C  2F43               	goto	i1l5020
  8920  173D                     i1l5014:
  8921                           
  8922                           ;newmain.c: 58: else if (Analog.AI0 >= 230) { flMenuStrip = 0; flSwitchButton = 0; }
  8923  173D  30E6               	movlw	230
  8924  173E  0224               	subwf	_Analog^(0+128),w
  8925  173F  1C03               	skipc
  8926  1740  2F43               	goto	i1l5020
  8927  1741  01BE               	clrf	_flMenuStrip^(0+128)
  8928  1742  107A               	bcf	_flSwitchButton/(0+8),_flSwitchButton& (0+7)
  8929  1743                     i1l5020:
  8930                           
  8931                           ;newmain.c: 59: PIR1bits.ADIF = 0;
  8932  1743  1283               	bcf	3,5	;RP0=0, select bank0
  8933  1744  130C               	bcf	12,6	;volatile
  8934  1745                     i1l161:
  8935  1745  0879               	movf	??_linkup+3,w
  8936  1746  008A               	movwf	10
  8937  1747  0878               	movf	??_linkup+2,w
  8938  1748  0084               	movwf	4
  8939  1749  0E77               	swapf	??_linkup+1,w
  8940  174A  0083               	movwf	3
  8941  174B  0EFE               	swapf	126,f
  8942  174C  0E7E               	swapf	126,w
  8943  174D  0009               	retfie
  8944  174E                     __end_of_linkup:
  8945                           
  8946                           	psect	intentry
  8947  0004                     __pintentry:	
  8948                           ;incstack = 0
  8949                           ; Regs used in _linkup: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8950                           
  8951  0004                     interrupt_function:
  8952  007E                     saved_w	set	btemp
  8953  0004  00FE               	movwf	btemp
  8954  0005  0E03               	swapf	3,w
  8955  0006  00F7               	movwf	??_linkup+1
  8956  0007  0804               	movf	4,w
  8957  0008  00F8               	movwf	??_linkup+2
  8958  0009  080A               	movf	10,w
  8959  000A  00F9               	movwf	??_linkup+3
  8960  000B  160A  118A  2E9F   	ljmp	_linkup
  8961                           
  8962                           	psect	text43
  8963  1D41                     __ptext43:	
  8964 ;; *************** function i1___lwmod *****************
  8965 ;; Defined at:
  8966 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\lwmod.c"
  8967 ;; Parameters:    Size  Location     Type
  8968 ;;  divisor         2    0[COMMON] unsigned int 
  8969 ;;  dividend        2    2[COMMON] unsigned int 
  8970 ;; Auto vars:     Size  Location     Type
  8971 ;;  counter         1    5[COMMON] unsigned char 
  8972 ;; Return value:  Size  Location     Type
  8973 ;;                  2    0[COMMON] unsigned int 
  8974 ;; Registers used:
  8975 ;;		wreg, status,2, status,0
  8976 ;; Tracked objects:
  8977 ;;		On entry : 300/100
  8978 ;;		On exit  : 300/100
  8979 ;;		Unchanged: 300/0
  8980 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8981 ;;      Params:         4       0       0       0       0
  8982 ;;      Locals:         1       0       0       0       0
  8983 ;;      Temps:          1       0       0       0       0
  8984 ;;      Totals:         6       0       0       0       0
  8985 ;;Total ram usage:        6 bytes
  8986 ;; Hardware stack levels used: 1
  8987 ;; This function calls:
  8988 ;;		Nothing
  8989 ;; This function is called by:
  8990 ;;		_linkup
  8991 ;; This function uses a non-reentrant model
  8992 ;;
  8993                           
  8994                           
  8995                           ;psect for function i1___lwmod
  8996  1D41                     i1___lwmod:
  8997                           
  8998                           ;incstack = 0
  8999                           ; Regs used in i1___lwmod: [wreg+status,2+status,0]
  9000  1D41  0870               	movf	i1___lwmod@divisor,w
  9001  1D42  0471               	iorwf	i1___lwmod@divisor+1,w
  9002  1D43  1903               	btfsc	3,2
  9003  1D44  2D6E               	goto	i1l4920
  9004  1D45  01F5               	clrf	i1___lwmod@counter
  9005  1D46  0AF5               	incf	i1___lwmod@counter,f
  9006  1D47                     i1l4910:
  9007  1D47  1BF1               	btfsc	i1___lwmod@divisor+1,7
  9008  1D48  2D55               	goto	i1l4912
  9009  1D49  3001               	movlw	1
  9010  1D4A                     u572_25:
  9011  1D4A  1003               	clrc
  9012  1D4B  0DF0               	rlf	i1___lwmod@divisor,f
  9013  1D4C  0DF1               	rlf	i1___lwmod@divisor+1,f
  9014  1D4D  3EFF               	addlw	-1
  9015  1D4E  1D03               	skipz
  9016  1D4F  2D4A               	goto	u572_25
  9017  1D50  3001               	movlw	1
  9018  1D51  00F4               	movwf	??i1___lwmod
  9019  1D52  0874               	movf	??i1___lwmod,w
  9020  1D53  07F5               	addwf	i1___lwmod@counter,f
  9021  1D54  2D47               	goto	i1l4910
  9022  1D55                     i1l4912:
  9023  1D55  0871               	movf	i1___lwmod@divisor+1,w
  9024  1D56  0273               	subwf	i1___lwmod@dividend+1,w
  9025  1D57  1D03               	skipz
  9026  1D58  2D5B               	goto	u574_25
  9027  1D59  0870               	movf	i1___lwmod@divisor,w
  9028  1D5A  0272               	subwf	i1___lwmod@dividend,w
  9029  1D5B                     u574_25:
  9030  1D5B  1C03               	skipc
  9031  1D5C  2D63               	goto	i1l4916
  9032  1D5D  0870               	movf	i1___lwmod@divisor,w
  9033  1D5E  02F2               	subwf	i1___lwmod@dividend,f
  9034  1D5F  0871               	movf	i1___lwmod@divisor+1,w
  9035  1D60  1C03               	skipc
  9036  1D61  03F3               	decf	i1___lwmod@dividend+1,f
  9037  1D62  02F3               	subwf	i1___lwmod@dividend+1,f
  9038  1D63                     i1l4916:
  9039  1D63  3001               	movlw	1
  9040  1D64                     u575_25:
  9041  1D64  1003               	clrc
  9042  1D65  0CF1               	rrf	i1___lwmod@divisor+1,f
  9043  1D66  0CF0               	rrf	i1___lwmod@divisor,f
  9044  1D67  3EFF               	addlw	-1
  9045  1D68  1D03               	skipz
  9046  1D69  2D64               	goto	u575_25
  9047  1D6A  3001               	movlw	1
  9048  1D6B  02F5               	subwf	i1___lwmod@counter,f
  9049  1D6C  1D03               	btfss	3,2
  9050  1D6D  2D55               	goto	i1l4912
  9051  1D6E                     i1l4920:
  9052  1D6E  0873               	movf	i1___lwmod@dividend+1,w
  9053  1D6F  00F1               	movwf	?i1___lwmod+1
  9054  1D70  0872               	movf	i1___lwmod@dividend,w
  9055  1D71  00F0               	movwf	?i1___lwmod
  9056  1D72  0008               	return
  9057  1D73                     __end_ofi1___lwmod:
  9058                           
  9059                           	psect	text44
  9060  15F3                     __ptext44:	
  9061 ;; *************** function _fInterruptRecieveDevice *****************
  9062 ;; Defined at:
  9063 ;;		line 95 in file "Bb_device.c"
  9064 ;; Parameters:    Size  Location     Type
  9065 ;;		None
  9066 ;; Auto vars:     Size  Location     Type
  9067 ;;		None
  9068 ;; Return value:  Size  Location     Type
  9069 ;;                  1    wreg      void 
  9070 ;; Registers used:
  9071 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  9072 ;; Tracked objects:
  9073 ;;		On entry : 0/0
  9074 ;;		On exit  : 0/0
  9075 ;;		Unchanged: 0/0
  9076 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  9077 ;;      Params:         0       0       0       0       0
  9078 ;;      Locals:         0       0       0       0       0
  9079 ;;      Temps:          2       0       0       0       0
  9080 ;;      Totals:         2       0       0       0       0
  9081 ;;Total ram usage:        2 bytes
  9082 ;; Hardware stack levels used: 1
  9083 ;; This function calls:
  9084 ;;		Nothing
  9085 ;; This function is called by:
  9086 ;;		_linkup
  9087 ;; This function uses a non-reentrant model
  9088 ;;
  9089                           
  9090                           
  9091                           ;psect for function _fInterruptRecieveDevice
  9092  15F3                     _fInterruptRecieveDevice:
  9093                           
  9094                           ;Bb_device.c: 99: if(PORTBbits.RB7 == 1 && flModeStep == 0 && flStartBitRecieve == 0){
  9095                           
  9096                           ;incstack = 0
  9097                           ; Regs used in _fInterruptRecieveDevice: [wreg-fsr0h+status,2+status,0]
  9098  15F3  1283               	bcf	3,5	;RP0=0, select bank0
  9099  15F4  1303               	bcf	3,6	;RP1=0, select bank0
  9100  15F5  1F86               	btfss	6,7	;volatile
  9101  15F6  2E08               	goto	i1l460
  9102  15F7  087D               	movf	_flModeStep,w
  9103  15F8  1903               	btfsc	3,2
  9104  15F9  1A7A               	btfsc	_flStartBitRecieve/(0+8),_flStartBitRecieve& (0+7)
  9105  15FA  2E08               	goto	i1l460
  9106                           
  9107                           ;Bb_device.c: 100: TMR0 = TMR0_Value;
  9108  15FB  1683               	bsf	3,5	;RP0=1, select bank1
  9109  15FC  0842               	movf	_TMR0_Value^(0+128),w
  9110  15FD  1283               	bcf	3,5	;RP0=0, select bank0
  9111  15FE  0081               	movwf	1	;volatile
  9112                           
  9113                           ;Bb_device.c: 101: INTCONbits.T0IF = 0;
  9114  15FF  110B               	bcf	11,2	;volatile
  9115                           
  9116                           ;Bb_device.c: 102: INTCONbits.T0IE = 1;
  9117  1600  168B               	bsf	11,5	;volatile
  9118                           
  9119                           ;Bb_device.c: 103: TMR1H = 0x00;
  9120  1601  018F               	clrf	15	;volatile
  9121                           
  9122                           ;Bb_device.c: 104: TMR1L = 0x00;
  9123  1602  018E               	clrf	14	;volatile
  9124                           
  9125                           ;Bb_device.c: 105: flStartBitRecieve = 1;
  9126  1603  167A               	bsf	_flStartBitRecieve/(0+8),_flStartBitRecieve& (0+7)
  9127                           
  9128                           ;Bb_device.c: 106: flModeStep = 1;
  9129  1604  01FD               	clrf	_flModeStep
  9130  1605  0AFD               	incf	_flModeStep,f
  9131                           
  9132                           ;Bb_device.c: 107: T1CONbits.TMR1ON = 1;
  9133  1606  1410               	bsf	16,0	;volatile
  9134                           
  9135                           ;Bb_device.c: 110: }
  9136  1607  0008               	return
  9137  1608                     i1l460:
  9138                           
  9139                           ;Bb_device.c: 111: else if(PORTBbits.RB7 == 0 && flModeStep == 1 && flStartBitRecieve ==
      +                           1){
  9140  1608  1B86               	btfsc	6,7	;volatile
  9141  1609  2E22               	goto	i1l462
  9142  160A  037D               	decf	_flModeStep,w
  9143  160B  1903               	btfsc	3,2
  9144  160C  1E7A               	btfss	_flStartBitRecieve/(0+8),_flStartBitRecieve& (0+7)
  9145  160D  2E22               	goto	i1l462
  9146                           
  9147                           ;Bb_device.c: 112: T1CONbits.TMR1ON = 0;
  9148  160E  1010               	bcf	16,0	;volatile
  9149                           
  9150                           ;Bb_device.c: 118: if(TMR1H >= 0x0A && TMR1H <= 0x0C){
  9151  160F  300A               	movlw	10
  9152  1610  020F               	subwf	15,w	;volatile
  9153  1611  1C03               	skipc
  9154  1612  2E1F               	goto	i1l463
  9155  1613  300D               	movlw	13
  9156  1614  020F               	subwf	15,w	;volatile
  9157  1615  1803               	skipnc
  9158  1616  2E1F               	goto	i1l463
  9159                           
  9160                           ;Bb_device.c: 121: flModeStep = 2;
  9161  1617  3002               	movlw	2
  9162  1618  00F0               	movwf	??_fInterruptRecieveDevice
  9163  1619  0870               	movf	??_fInterruptRecieveDevice,w
  9164  161A  00FD               	movwf	_flModeStep
  9165  161B                     i1l4192:
  9166                           
  9167                           ;Bb_device.c: 124: TMR1H = 0x00;
  9168  161B  1283               	bcf	3,5	;RP0=0, select bank0
  9169  161C  018F               	clrf	15	;volatile
  9170                           
  9171                           ;Bb_device.c: 125: TMR1L = 0x00;
  9172  161D  018E               	clrf	14	;volatile
  9173                           
  9174                           ;Bb_device.c: 126: }
  9175  161E  0008               	return
  9176  161F                     i1l463:
  9177                           
  9178                           ;Bb_device.c: 127: else{;Bb_device.c: 128: flStartBitRecieve = 0;
  9179  161F  127A               	bcf	_flStartBitRecieve/(0+8),_flStartBitRecieve& (0+7)
  9180                           
  9181                           ;Bb_device.c: 129: flModeStep = 0;
  9182  1620  01FD               	clrf	_flModeStep
  9183                           
  9184                           ;Bb_device.c: 131: };Bb_device.c: 134: }
  9185  1621  0008               	return
  9186  1622                     i1l462:
  9187                           
  9188                           ;Bb_device.c: 135: else if(PORTBbits.RB7 == 1 && flModeStep == 2 && flStartBitRecieve ==
      +                           1){
  9189  1622  1F86               	btfss	6,7	;volatile
  9190  1623  2E2F               	goto	i1l466
  9191  1624  3002               	movlw	2
  9192  1625  067D               	xorwf	_flModeStep,w
  9193  1626  1903               	btfsc	3,2
  9194  1627  1E7A               	btfss	_flStartBitRecieve/(0+8),_flStartBitRecieve& (0+7)
  9195  1628  2E2F               	goto	i1l466
  9196                           
  9197                           ;Bb_device.c: 136: T1CONbits.TMR1ON = 1;
  9198  1629  1410               	bsf	16,0	;volatile
  9199                           
  9200                           ;Bb_device.c: 137: flModeStep = 3;
  9201  162A  3003               	movlw	3
  9202  162B  00F0               	movwf	??_fInterruptRecieveDevice
  9203  162C  0870               	movf	??_fInterruptRecieveDevice,w
  9204  162D  00FD               	movwf	_flModeStep
  9205                           
  9206                           ;Bb_device.c: 139: }
  9207  162E  0008               	return
  9208  162F                     i1l466:
  9209                           
  9210                           ;Bb_device.c: 140: else if(PORTBbits.RB7 == 0 && flModeStep == 3 && flStartBitRecieve ==
      +                           1){
  9211  162F  1B86               	btfsc	6,7	;volatile
  9212  1630  2E70               	goto	i1l468
  9213  1631  3003               	movlw	3
  9214  1632  067D               	xorwf	_flModeStep,w
  9215  1633  1903               	btfsc	3,2
  9216  1634  1E7A               	btfss	_flStartBitRecieve/(0+8),_flStartBitRecieve& (0+7)
  9217  1635  2E70               	goto	i1l468
  9218                           
  9219                           ;Bb_device.c: 143: T1CONbits.TMR1ON = 0;
  9220  1636  1010               	bcf	16,0	;volatile
  9221                           
  9222                           ;Bb_device.c: 144: flModeStep = 2;
  9223  1637  3002               	movlw	2
  9224  1638  00F0               	movwf	??_fInterruptRecieveDevice
  9225  1639  0870               	movf	??_fInterruptRecieveDevice,w
  9226  163A  00FD               	movwf	_flModeStep
  9227                           
  9228                           ;Bb_device.c: 145: if(cQuantity < 32){
  9229  163B  3020               	movlw	32
  9230  163C  1683               	bsf	3,5	;RP0=1, select bank1
  9231  163D  0240               	subwf	_cQuantity^(0+128),w
  9232  163E  1803               	skipnc
  9233  163F  2E61               	goto	i1l469
  9234                           
  9235                           ;Bb_device.c: 146: arrCmd[carrCmd] <<= 1;
  9236  1640  083F               	movf	_carrCmd^(0+128),w
  9237  1641  3EA0               	addlw	(low (_arrCmd| 0))& (0+255)
  9238  1642  0084               	movwf	4
  9239  1643  1003               	clrc
  9240  1644  1383               	bcf	3,7	;select IRP bank1
  9241  1645  0D80               	rlf	0,f
  9242                           
  9243                           ;Bb_device.c: 147: if( TMR1H >= 0x02) arrCmd[carrCmd] |= 0b00000001;
  9244  1646  3002               	movlw	2
  9245  1647  1283               	bcf	3,5	;RP0=0, select bank0
  9246  1648  020F               	subwf	15,w	;volatile
  9247  1649  1C03               	skipc
  9248  164A  2E50               	goto	i1l4220
  9249  164B  1683               	bsf	3,5	;RP0=1, select bank1
  9250  164C  083F               	movf	_carrCmd^(0+128),w
  9251  164D  3EA0               	addlw	(low (_arrCmd| 0))& (0+255)
  9252  164E  0084               	movwf	4
  9253  164F  1400               	bsf	0,0
  9254  1650                     i1l4220:
  9255                           
  9256                           ;Bb_device.c: 148: if(cQuantity == 7 || cQuantity == 15 || cQuantity == 23) {carrCmd++;}
  9257  1650  3007               	movlw	7
  9258  1651  1683               	bsf	3,5	;RP0=1, select bank1
  9259  1652  0640               	xorwf	_cQuantity^(0+128),w
  9260  1653  1903               	btfsc	3,2
  9261  1654  2E5D               	goto	i1l4226
  9262  1655  300F               	movlw	15
  9263  1656  0640               	xorwf	_cQuantity^(0+128),w
  9264  1657  1903               	btfsc	3,2
  9265  1658  2E5D               	goto	i1l4226
  9266  1659  3017               	movlw	23
  9267  165A  0640               	xorwf	_cQuantity^(0+128),w
  9268  165B  1D03               	btfss	3,2
  9269  165C  2E61               	goto	i1l469
  9270  165D                     i1l4226:
  9271  165D  3001               	movlw	1
  9272  165E  00F0               	movwf	??_fInterruptRecieveDevice
  9273  165F  0870               	movf	??_fInterruptRecieveDevice,w
  9274  1660  07BF               	addwf	_carrCmd^(0+128),f
  9275  1661                     i1l469:
  9276                           
  9277                           ;Bb_device.c: 149: };Bb_device.c: 150: cQuantity++;
  9278  1661  3001               	movlw	1
  9279  1662  00F0               	movwf	??_fInterruptRecieveDevice
  9280  1663  0870               	movf	??_fInterruptRecieveDevice,w
  9281  1664  07C0               	addwf	_cQuantity^(0+128),f
  9282                           
  9283                           ;Bb_device.c: 151: if(cQuantity == 32){
  9284  1665  3020               	movlw	32
  9285  1666  0640               	xorwf	_cQuantity^(0+128),w
  9286  1667  1D03               	btfss	3,2
  9287  1668  2E1B               	goto	i1l4192
  9288                           
  9289                           ;Bb_device.c: 159: flModeStep = 4;
  9290  1669  3004               	movlw	4
  9291  166A  00F0               	movwf	??_fInterruptRecieveDevice
  9292  166B  0870               	movf	??_fInterruptRecieveDevice,w
  9293  166C  00FD               	movwf	_flModeStep
  9294                           
  9295                           ;Bb_device.c: 162: cQuantity = 0;
  9296  166D  01C0               	clrf	_cQuantity^(0+128)
  9297                           
  9298                           ;Bb_device.c: 163: carrCmd = 0;
  9299  166E  01BF               	clrf	_carrCmd^(0+128)
  9300  166F  2E1B               	goto	i1l4192
  9301  1670                     i1l468:
  9302                           
  9303                           ;Bb_device.c: 171: else if(PORTBbits.RB7 == 1 && flModeStep == 4 && flStartBitRecieve ==
      +                           1){
  9304  1670  1F86               	btfss	6,7	;volatile
  9305  1671  2E7D               	goto	i1l476
  9306  1672  3004               	movlw	4
  9307  1673  067D               	xorwf	_flModeStep,w
  9308  1674  1903               	btfsc	3,2
  9309  1675  1E7A               	btfss	_flStartBitRecieve/(0+8),_flStartBitRecieve& (0+7)
  9310  1676  2E7D               	goto	i1l476
  9311                           
  9312                           ;Bb_device.c: 175: T1CONbits.TMR1ON = 1;
  9313  1677  1410               	bsf	16,0	;volatile
  9314                           
  9315                           ;Bb_device.c: 176: flModeStep = 5;
  9316  1678  3005               	movlw	5
  9317  1679  00F0               	movwf	??_fInterruptRecieveDevice
  9318  167A  0870               	movf	??_fInterruptRecieveDevice,w
  9319  167B  00FD               	movwf	_flModeStep
  9320                           
  9321                           ;Bb_device.c: 177: }
  9322  167C  0008               	return
  9323  167D                     i1l476:
  9324                           
  9325                           ;Bb_device.c: 178: else if(PORTBbits.RB7 == 0 && flModeStep == 5 && flStartBitRecieve ==
      +                           1){
  9326  167D  1B86               	btfsc	6,7	;volatile
  9327  167E  0008               	return
  9328  167F  3005               	movlw	5
  9329  1680  067D               	xorwf	_flModeStep,w
  9330  1681  1D03               	btfss	3,2
  9331  1682  0008               	return
  9332  1683  1E7A               	btfss	_flStartBitRecieve/(0+8),_flStartBitRecieve& (0+7)
  9333  1684  0008               	return
  9334                           
  9335                           ;Bb_device.c: 180: T1CONbits.TMR1ON = 0;
  9336  1685  1010               	bcf	16,0	;volatile
  9337                           
  9338                           ;Bb_device.c: 185: if(TMR1H >= 0x02 && TMR1H <= 0x04){
  9339  1686  3002               	movlw	2
  9340  1687  020F               	subwf	15,w	;volatile
  9341  1688  1C03               	skipc
  9342  1689  2E95               	goto	i1l4266
  9343  168A  3005               	movlw	5
  9344  168B  020F               	subwf	15,w	;volatile
  9345  168C  1803               	skipnc
  9346  168D  2E95               	goto	i1l4266
  9347                           
  9348                           ;Bb_device.c: 197: flModeStep = 0;
  9349  168E  01FD               	clrf	_flModeStep
  9350                           
  9351                           ;Bb_device.c: 198: flStartBitRecieve = 0;
  9352  168F  127A               	bcf	_flStartBitRecieve/(0+8),_flStartBitRecieve& (0+7)
  9353                           
  9354                           ;Bb_device.c: 199: flStopBitRecieve = 1;
  9355  1690  15FA               	bsf	_flStopBitRecieve/(0+8),_flStopBitRecieve& (0+7)
  9356                           
  9357                           ;Bb_device.c: 201: cTMR0 = 0;
  9358  1691  1683               	bsf	3,5	;RP0=1, select bank1
  9359  1692  01C1               	clrf	_cTMR0^(0+128)
  9360                           
  9361                           ;Bb_device.c: 202: INTCONbits.T0IF = 0;
  9362  1693  110B               	bcf	11,2	;volatile
  9363                           
  9364                           ;Bb_device.c: 203: INTCONbits.T0IE = 0;
  9365  1694  128B               	bcf	11,5	;volatile
  9366  1695                     i1l4266:
  9367                           
  9368                           ;Bb_device.c: 207: };Bb_device.c: 208: _delay((unsigned long)((1)*(8000000/4000.0)));
  9369  1695  3003               	movlw	3
  9370  1696  00F1               	movwf	??_fInterruptRecieveDevice+1
  9371  1697  3097               	movlw	151
  9372  1698  00F0               	movwf	??_fInterruptRecieveDevice
  9373  1699                     u655_27:
  9374  1699  0BF0               	decfsz	??_fInterruptRecieveDevice,f
  9375  169A  2E99               	goto	u655_27
  9376  169B  0BF1               	decfsz	??_fInterruptRecieveDevice+1,f
  9377  169C  2E99               	goto	u655_27
  9378  169D  2E9E               	nop2
  9379  169E  0008               	return
  9380  169F                     __end_of_fInterruptRecieveDevice:
  9381  007E                     btemp	set	126	;btemp
  9382  007E                     wtemp0	set	126
  9383                           
  9384                           	psect	config
  9385                           
  9386                           ;Config register CONFIG @ 0x2007
  9387                           ;	Oscillator Selection bits
  9388                           ;	FOSC = HS, HS oscillator
  9389                           ;	Watchdog Timer Enable bit
  9390                           ;	WDTE = OFF, WDT disabled
  9391                           ;	Power-up Timer Enable bit
  9392                           ;	PWRTE = OFF, PWRT disabled
  9393                           ;	FLASH Program Memory Code Protection bit
  9394                           ;	CP = OFF, Code protection off
  9395                           ;	Brown-out Reset Enable bit
  9396                           ;	BOREN = OFF, BOR disabled
  9397  2007                     	org	8199
  9398  2007  3FBA               	dw	16314
  9399                           
  9400                           	psect	text15_split_1
  9401  080F                     l4574:
  9402                           
  9403                           ;menu.c: 19: else;menu.c: 20: _MenuNav--;
  9404  080F  30FF               	movlw	255
  9405  0810  07FB               	addwf	__MenuNav,f
  9406  0811  1803               	skipnc
  9407  0812  0AFC               	incf	__MenuNav+1,f
  9408  0813  30FF               	movlw	255
  9409  0814  290A               	goto	L7
  9410  0815                     l4576:
  9411                           
  9412                           ;menu.c: 22: else if(_MenuNav >= 100 && _MenuNav < 1000) {
  9413  0815  087C               	movf	__MenuNav+1,w
  9414  0816  3A80               	xorlw	128
  9415  0817  00FF               	movwf	127
  9416  0818  3080               	movlw	128
  9417  0819  027F               	subwf	127,w
  9418  081A  1D03               	skipz
  9419  081B  281E               	goto	u5215
  9420  081C  3064               	movlw	100
  9421  081D  027B               	subwf	__MenuNav,w
  9422  081E                     u5215:
  9423  081E  1C03               	skipc
  9424  081F  2896               	goto	l4604
  9425  0820  087C               	movf	__MenuNav+1,w
  9426  0821  3A80               	xorlw	128
  9427  0822  00FF               	movwf	127
  9428  0823  3083               	movlw	131
  9429  0824  027F               	subwf	127,w
  9430  0825  1D03               	skipz
  9431  0826  2829               	goto	u5225
  9432  0827  30E8               	movlw	232
  9433  0828  027B               	subwf	__MenuNav,w
  9434  0829                     u5225:
  9435  0829  1803               	skipnc
  9436  082A  2896               	goto	l4604
  9437                           
  9438                           ;menu.c: 23: if(_MenuNav == 210 && _settingTimeImpDO1 != 0) _settingTimeImpDO1--;
  9439  082B  30D2               	movlw	210
  9440  082C  067B               	xorwf	__MenuNav,w
  9441  082D  047C               	iorwf	__MenuNav+1,w
  9442  082E  1D03               	btfss	3,2
  9443  082F  283C               	goto	l4586
  9444  0830  1683               	bsf	3,5	;RP0=1, select bank1
  9445  0831  1303               	bcf	3,6	;RP1=0, select bank1
  9446  0832  0834               	movf	__settingTimeImpDO1^(0+128),w
  9447  0833  0435               	iorwf	(__settingTimeImpDO1+1)^(0+128),w
  9448  0834  1903               	btfsc	3,2
  9449  0835  283C               	goto	l4586
  9450  0836  30FF               	movlw	255
  9451  0837  07B4               	addwf	__settingTimeImpDO1^(0+128),f
  9452  0838  1803               	skipnc
  9453  0839  0AB5               	incf	(__settingTimeImpDO1+1)^(0+128),f
  9454  083A  30FF               	movlw	255
  9455  083B  292E               	goto	L8
  9456  083C                     l4586:
  9457                           
  9458                           ;menu.c: 24: else if(_MenuNav == 230 && _settingTimerOnDO2 != 0) _settingTimerOnDO2--;
  9459  083C  30E6               	movlw	230
  9460  083D  067B               	xorwf	__MenuNav,w
  9461  083E  047C               	iorwf	__MenuNav+1,w
  9462  083F  1D03               	btfss	3,2
  9463  0840  284D               	goto	l4592
  9464  0841  1683               	bsf	3,5	;RP0=1, select bank1
  9465  0842  1303               	bcf	3,6	;RP1=0, select bank1
  9466  0843  0832               	movf	__settingTimerOnDO2^(0+128),w
  9467  0844  0433               	iorwf	(__settingTimerOnDO2+1)^(0+128),w
  9468  0845  1903               	btfsc	3,2
  9469  0846  284D               	goto	l4592
  9470  0847  30FF               	movlw	255
  9471  0848  07B2               	addwf	__settingTimerOnDO2^(0+128),f
  9472  0849  1803               	skipnc
  9473  084A  0AB3               	incf	(__settingTimerOnDO2+1)^(0+128),f
  9474  084B  30FF               	movlw	255
  9475  084C  293C               	goto	L9
  9476  084D                     l4592:
  9477                           
  9478                           ;menu.c: 25: else if(_MenuNav == 240 && _settingTimerOffDO2 != 0) _settingTimerOffDO2--;
  9479  084D  30F0               	movlw	240
  9480  084E  067B               	xorwf	__MenuNav,w
  9481  084F  047C               	iorwf	__MenuNav+1,w
  9482  0850  1D03               	btfss	3,2
  9483  0851  285E               	goto	l4598
  9484  0852  1683               	bsf	3,5	;RP0=1, select bank1
  9485  0853  1303               	bcf	3,6	;RP1=0, select bank1
  9486  0854  0830               	movf	__settingTimerOffDO2^(0+128),w
  9487  0855  0431               	iorwf	(__settingTimerOffDO2+1)^(0+128),w
  9488  0856  1903               	btfsc	3,2
  9489  0857  285E               	goto	l4598
  9490  0858  30FF               	movlw	255
  9491  0859  07B0               	addwf	__settingTimerOffDO2^(0+128),f
  9492  085A  1803               	skipnc
  9493  085B  0AB1               	incf	(__settingTimerOffDO2+1)^(0+128),f
  9494  085C  30FF               	movlw	255
  9495  085D  294A               	goto	L10
  9496  085E                     l4598:
  9497                           
  9498                           ;menu.c: 26: else if(_MenuNav <= (short int)_tempDigit)
  9499  085E  1683               	bsf	3,5	;RP0=1, select bank1
  9500  085F  1303               	bcf	3,6	;RP1=0, select bank1
  9501  0860  082B               	movf	(__tempDigit+1)^(0+128),w
  9502  0861  3A80               	xorlw	128
  9503  0862  1283               	bcf	3,5	;RP0=0, select bank0
  9504  0863  00CA               	movwf	??_fMenuStrip
  9505  0864  087C               	movf	__MenuNav+1,w
  9506  0865  3A80               	xorlw	128
  9507  0866  024A               	subwf	??_fMenuStrip,w
  9508  0867  1D03               	skipz
  9509  0868  286C               	goto	u5295
  9510  0869  087B               	movf	__MenuNav,w
  9511  086A  1683               	bsf	3,5	;RP0=1, select bank1
  9512  086B  022A               	subwf	__tempDigit^(0+128),w
  9513  086C                     u5295:
  9514  086C  1C03               	skipc
  9515  086D  280F               	goto	l4574
  9516                           
  9517                           ;menu.c: 27: _MenuNav = (short int)((_tempDigit + _SubMenuArr[_firstCell][_secondCell]) 
      +                          - 1);
  9518  086E  3006               	movlw	6
  9519  086F  1283               	bcf	3,5	;RP0=0, select bank0
  9520  0870  1303               	bcf	3,6	;RP1=0, select bank0
  9521  0871  00CA               	movwf	??_fMenuStrip
  9522  0872  084A               	movf	??_fMenuStrip,w
  9523  0873  00A9               	movwf	___bmul@multiplicand
  9524  0874  1683               	bsf	3,5	;RP0=1, select bank1
  9525  0875  083D               	movf	__firstCell^(0+128),w
  9526  0876  160A  158A  23F3  120A  158A  	fcall	___bmul
  9527  087B  3E90               	addlw	(low (__SubMenuArr| (0+256)))& (0+255)
  9528  087C  1683               	bsf	3,5	;RP0=1, select bank1
  9529  087D  073C               	addwf	__secondCell^(0+128),w
  9530  087E  1283               	bcf	3,5	;RP0=0, select bank0
  9531  087F  00CB               	movwf	??_fMenuStrip+1
  9532  0880  084B               	movf	??_fMenuStrip+1,w
  9533  0881  0084               	movwf	4
  9534  0882  1783               	bsf	3,7	;select IRP bank3
  9535  0883  0800               	movf	0,w
  9536  0884  1683               	bsf	3,5	;RP0=1, select bank1
  9537  0885  072A               	addwf	__tempDigit^(0+128),w
  9538  0886  1283               	bcf	3,5	;RP0=0, select bank0
  9539  0887  00CC               	movwf	??_fMenuStrip+2
  9540  0888  1683               	bsf	3,5	;RP0=1, select bank1
  9541  0889  082B               	movf	(__tempDigit+1)^(0+128),w
  9542  088A  1803               	skipnc
  9543  088B  0A2B               	incf	(__tempDigit+1)^(0+128),w
  9544  088C  1283               	bcf	3,5	;RP0=0, select bank0
  9545  088D  00CD               	movwf	??_fMenuStrip+3
  9546  088E  084C               	movf	??_fMenuStrip+2,w
  9547  088F  3EFF               	addlw	255
  9548  0890  00FB               	movwf	__MenuNav
  9549  0891  084D               	movf	??_fMenuStrip+3,w
  9550  0892                     L25:
  9551  0892  1803               	skipnc
  9552  0893  3E01               	addlw	1
  9553  0894  3EFF               	addlw	255
  9554  0895  2903               	goto	L12
  9555  0896                     l4604:
  9556                           
  9557                           ;menu.c: 30: else if(_MenuNav >= 1000) _MenuNav = _MenuNav;
  9558  0896  087C               	movf	__MenuNav+1,w
  9559  0897  3A80               	xorlw	128
  9560  0898  00FF               	movwf	127
  9561  0899  3083               	movlw	131
  9562  089A  027F               	subwf	127,w
  9563  089B  1D03               	skipz
  9564  089C  289F               	goto	u5305
  9565  089D  30E8               	movlw	232
  9566  089E  027B               	subwf	__MenuNav,w
  9567  089F                     u5305:
  9568  089F  1803               	btfsc	3,0
  9569  08A0  29C0               	goto	l4610
  9570  08A1  280F               	goto	l4574
  9571  08A2                     l4614:	
  9572                           ;menu.c: 34: }
  9573                           
  9574                           
  9575                           ;menu.c: 35: else if(flMenuStrip == 0x04 && flSwitchButton == 0){
  9576  08A2  3004               	movlw	4
  9577  08A3  063E               	xorwf	_flMenuStrip^(0+128),w
  9578  08A4  1903               	btfsc	3,2
  9579  08A5  187A               	btfsc	_flSwitchButton/(0+8),_flSwitchButton& (0+7)
  9580  08A6  2992               	goto	l4666
  9581                           
  9582                           ;menu.c: 36: if(_MenuNav >= _MenuArr[0] && _MenuNav < 10) _MenuNav = 1;
  9583  08A7  087C               	movf	__MenuNav+1,w
  9584  08A8  3A80               	xorlw	128
  9585  08A9  1283               	bcf	3,5	;RP0=0, select bank0
  9586  08AA  00CA               	movwf	??_fMenuStrip
  9587  08AB  3080               	movlw	128
  9588  08AC  024A               	subwf	??_fMenuStrip,w
  9589  08AD  1D03               	skipz
  9590  08AE  28B3               	goto	u5335
  9591  08AF  1683               	bsf	3,5	;RP0=1, select bank3
  9592  08B0  1703               	bsf	3,6	;RP1=1, select bank3
  9593  08B1  0828               	movf	__MenuArr^(0+384),w
  9594  08B2  027B               	subwf	__MenuNav,w
  9595  08B3                     u5335:
  9596  08B3  1C03               	skipc
  9597  08B4  28C4               	goto	l4624
  9598  08B5  087C               	movf	__MenuNav+1,w
  9599  08B6  3A80               	xorlw	128
  9600  08B7  00FF               	movwf	127
  9601  08B8  3080               	movlw	128
  9602  08B9  027F               	subwf	127,w
  9603  08BA  1D03               	skipz
  9604  08BB  28BE               	goto	u5345
  9605  08BC  300A               	movlw	10
  9606  08BD  027B               	subwf	__MenuNav,w
  9607  08BE                     u5345:
  9608  08BE  1803               	skipnc
  9609  08BF  28C4               	goto	l4624
  9610  08C0  3001               	movlw	1
  9611  08C1  00FB               	movwf	__MenuNav
  9612  08C2  3000               	movlw	0
  9613  08C3  2903               	goto	L12
  9614  08C4                     l4624:
  9615                           
  9616                           ;menu.c: 37: else if(_MenuNav >= 10 && _MenuNav < 100){
  9617  08C4  087C               	movf	__MenuNav+1,w
  9618  08C5  3A80               	xorlw	128
  9619  08C6  00FF               	movwf	127
  9620  08C7  3080               	movlw	128
  9621  08C8  027F               	subwf	127,w
  9622  08C9  1D03               	skipz
  9623  08CA  28CD               	goto	u5355
  9624  08CB  300A               	movlw	10
  9625  08CC  027B               	subwf	__MenuNav,w
  9626  08CD                     u5355:
  9627  08CD  1C03               	skipc
  9628  08CE  290C               	goto	l4634
  9629  08CF  087C               	movf	__MenuNav+1,w
  9630  08D0  3A80               	xorlw	128
  9631  08D1  00FF               	movwf	127
  9632  08D2  3080               	movlw	128
  9633  08D3  027F               	subwf	127,w
  9634  08D4  1D03               	skipz
  9635  08D5  28D8               	goto	u5365
  9636  08D6  3064               	movlw	100
  9637  08D7  027B               	subwf	__MenuNav,w
  9638  08D8                     u5365:
  9639  08D8  1803               	skipnc
  9640  08D9  290C               	goto	l4634
  9641                           
  9642                           ;menu.c: 38: if(_MenuNav >= _tempTwoDigit + _MenuArr[_cellTwoDigit] - 1)
  9643  08DA  1683               	bsf	3,5	;RP0=1, select bank1
  9644  08DB  1303               	bcf	3,6	;RP1=0, select bank1
  9645  08DC  083B               	movf	__cellTwoDigit^(0+128),w
  9646  08DD  3EA8               	addlw	(low (__MenuArr| (0+256)))& (0+255)
  9647  08DE  0084               	movwf	4
  9648  08DF  083A               	movf	__tempTwoDigit^(0+128),w
  9649  08E0  1783               	bsf	3,7	;select IRP bank3
  9650  08E1  0700               	addwf	0,w
  9651  08E2  1283               	bcf	3,5	;RP0=0, select bank0
  9652  08E3  00CA               	movwf	??_fMenuStrip
  9653  08E4  01CB               	clrf	??_fMenuStrip+1
  9654  08E5  0DCB               	rlf	??_fMenuStrip+1,f
  9655  08E6  084A               	movf	??_fMenuStrip,w
  9656  08E7  3EFF               	addlw	255
  9657  08E8  00CC               	movwf	??_fMenuStrip+2
  9658  08E9  084B               	movf	??_fMenuStrip+1,w
  9659  08EA  1803               	skipnc
  9660  08EB  3E01               	addlw	1
  9661  08EC  3EFF               	addlw	255
  9662  08ED  00CD               	movwf	??_fMenuStrip+3
  9663  08EE  087C               	movf	__MenuNav+1,w
  9664  08EF  3A80               	xorlw	128
  9665  08F0  00CE               	movwf	??_fMenuStrip+4
  9666  08F1  084D               	movf	??_fMenuStrip+3,w
  9667  08F2  3A80               	xorlw	128
  9668  08F3  024E               	subwf	??_fMenuStrip+4,w
  9669  08F4  1D03               	skipz
  9670  08F5  28F8               	goto	u5375
  9671  08F6  084C               	movf	??_fMenuStrip+2,w
  9672  08F7  027B               	subwf	__MenuNav,w
  9673  08F8                     u5375:
  9674  08F8  1C03               	skipc
  9675  08F9  2905               	goto	l4632
  9676                           
  9677                           ;menu.c: 39: _MenuNav = _tempTwoDigit;
  9678  08FA  1683               	bsf	3,5	;RP0=1, select bank1
  9679  08FB  1303               	bcf	3,6	;RP1=0, select bank1
  9680  08FC  083A               	movf	__tempTwoDigit^(0+128),w
  9681  08FD  1283               	bcf	3,5	;RP0=0, select bank0
  9682  08FE                     L24:
  9683  08FE  00CA               	movwf	??_fMenuStrip
  9684  08FF  01CB               	clrf	??_fMenuStrip+1
  9685  0900  084A               	movf	??_fMenuStrip,w
  9686  0901  00FB               	movwf	__MenuNav
  9687  0902  084B               	movf	??_fMenuStrip+1,w
  9688  0903                     L12:
  9689  0903  00FC               	movwf	__MenuNav+1
  9690  0904  29C0               	goto	l4610
  9691  0905                     l4632:
  9692                           
  9693                           ;menu.c: 40: else;menu.c: 41: _MenuNav++;
  9694  0905  3001               	movlw	1
  9695  0906  07FB               	addwf	__MenuNav,f
  9696  0907  1803               	skipnc
  9697  0908  0AFC               	incf	__MenuNav+1,f
  9698  0909  3000               	movlw	0
  9699  090A                     L7:
  9700  090A  07FC               	addwf	__MenuNav+1,f
  9701  090B  29C0               	goto	l4610
  9702  090C                     l4634:
  9703                           
  9704                           ;menu.c: 43: else if(_MenuNav >= 100 && _MenuNav < 1000) {
  9705  090C  087C               	movf	__MenuNav+1,w
  9706  090D  3A80               	xorlw	128
  9707  090E  00FF               	movwf	127
  9708  090F  3080               	movlw	128
  9709  0910  027F               	subwf	127,w
  9710  0911  1D03               	skipz
  9711  0912  2915               	goto	u5385
  9712  0913  3064               	movlw	100
  9713  0914  027B               	subwf	__MenuNav,w
  9714  0915                     u5385:
  9715  0915  1C03               	skipc
  9716  0916  2986               	goto	l4656
  9717  0917  087C               	movf	__MenuNav+1,w
  9718  0918  3A80               	xorlw	128
  9719  0919  00FF               	movwf	127
  9720  091A  3083               	movlw	131
  9721  091B  027F               	subwf	127,w
  9722  091C  1D03               	skipz
  9723  091D  2920               	goto	u5395
  9724  091E  30E8               	movlw	232
  9725  091F  027B               	subwf	__MenuNav,w
  9726  0920                     u5395:
  9727  0920  1803               	skipnc
  9728  0921  2986               	goto	l4656
  9729                           
  9730                           ;menu.c: 44: if(_MenuNav == 210) _settingTimeImpDO1++;
  9731  0922  30D2               	movlw	210
  9732  0923  067B               	xorwf	__MenuNav,w
  9733  0924  047C               	iorwf	__MenuNav+1,w
  9734  0925  1D03               	btfss	3,2
  9735  0926  2930               	goto	l4642
  9736  0927  3001               	movlw	1
  9737  0928  1683               	bsf	3,5	;RP0=1, select bank1
  9738  0929  1303               	bcf	3,6	;RP1=0, select bank1
  9739  092A  07B4               	addwf	__settingTimeImpDO1^(0+128),f
  9740  092B  1803               	skipnc
  9741  092C  0AB5               	incf	(__settingTimeImpDO1+1)^(0+128),f
  9742  092D  3000               	movlw	0
  9743  092E                     L8:
  9744  092E  07B5               	addwf	(__settingTimeImpDO1+1)^(0+128),f
  9745  092F  29C0               	goto	l4610
  9746  0930                     l4642:
  9747                           
  9748                           ;menu.c: 45: else if(_MenuNav == 230) _settingTimerOnDO2++;
  9749  0930  30E6               	movlw	230
  9750  0931  067B               	xorwf	__MenuNav,w
  9751  0932  047C               	iorwf	__MenuNav+1,w
  9752  0933  1D03               	btfss	3,2
  9753  0934  293E               	goto	l4646
  9754  0935  3001               	movlw	1
  9755  0936  1683               	bsf	3,5	;RP0=1, select bank1
  9756  0937  1303               	bcf	3,6	;RP1=0, select bank1
  9757  0938  07B2               	addwf	__settingTimerOnDO2^(0+128),f
  9758  0939  1803               	skipnc
  9759  093A  0AB3               	incf	(__settingTimerOnDO2+1)^(0+128),f
  9760  093B  3000               	movlw	0
  9761  093C                     L9:
  9762  093C  07B3               	addwf	(__settingTimerOnDO2+1)^(0+128),f
  9763  093D  29C0               	goto	l4610
  9764  093E                     l4646:
  9765                           
  9766                           ;menu.c: 46: else if(_MenuNav == 240) _settingTimerOffDO2++;
  9767  093E  30F0               	movlw	240
  9768  093F  067B               	xorwf	__MenuNav,w
  9769  0940  047C               	iorwf	__MenuNav+1,w
  9770  0941  1D03               	btfss	3,2
  9771  0942  294C               	goto	l4650
  9772  0943  3001               	movlw	1
  9773  0944  1683               	bsf	3,5	;RP0=1, select bank1
  9774  0945  1303               	bcf	3,6	;RP1=0, select bank1
  9775  0946  07B0               	addwf	__settingTimerOffDO2^(0+128),f
  9776  0947  1803               	skipnc
  9777  0948  0AB1               	incf	(__settingTimerOffDO2+1)^(0+128),f
  9778  0949  3000               	movlw	0
  9779  094A                     L10:
  9780  094A  07B1               	addwf	(__settingTimerOffDO2+1)^(0+128),f
  9781  094B  29C0               	goto	l4610
  9782  094C                     l4650:
  9783                           
  9784                           ;menu.c: 47: else if(_MenuNav >= (short int)((_tempDigit + _SubMenuArr[_firstCell][_seco
      +                          ndCell]) - 1))
  9785  094C  3006               	movlw	6
  9786  094D  1283               	bcf	3,5	;RP0=0, select bank0
  9787  094E  1303               	bcf	3,6	;RP1=0, select bank0
  9788  094F  00CA               	movwf	??_fMenuStrip
  9789  0950  084A               	movf	??_fMenuStrip,w
  9790  0951  00A9               	movwf	___bmul@multiplicand
  9791  0952  1683               	bsf	3,5	;RP0=1, select bank1
  9792  0953  083D               	movf	__firstCell^(0+128),w
  9793  0954  160A  158A  23F3  120A  158A  	fcall	___bmul
  9794  0959  3E90               	addlw	(low (__SubMenuArr| (0+256)))& (0+255)
  9795  095A  1683               	bsf	3,5	;RP0=1, select bank1
  9796  095B  073C               	addwf	__secondCell^(0+128),w
  9797  095C  1283               	bcf	3,5	;RP0=0, select bank0
  9798  095D  00CB               	movwf	??_fMenuStrip+1
  9799  095E  084B               	movf	??_fMenuStrip+1,w
  9800  095F  0084               	movwf	4
  9801  0960  1783               	bsf	3,7	;select IRP bank3
  9802  0961  0800               	movf	0,w
  9803  0962  1683               	bsf	3,5	;RP0=1, select bank1
  9804  0963  072A               	addwf	__tempDigit^(0+128),w
  9805  0964  1283               	bcf	3,5	;RP0=0, select bank0
  9806  0965  00CC               	movwf	??_fMenuStrip+2
  9807  0966  1683               	bsf	3,5	;RP0=1, select bank1
  9808  0967  082B               	movf	(__tempDigit+1)^(0+128),w
  9809  0968  1803               	skipnc
  9810  0969  0A2B               	incf	(__tempDigit+1)^(0+128),w
  9811  096A  1283               	bcf	3,5	;RP0=0, select bank0
  9812  096B  00CD               	movwf	??_fMenuStrip+3
  9813  096C  084C               	movf	??_fMenuStrip+2,w
  9814  096D  3EFF               	addlw	255
  9815  096E  00CE               	movwf	??_fMenuStrip+4
  9816  096F  084D               	movf	??_fMenuStrip+3,w
  9817  0970  1803               	skipnc
  9818  0971  3E01               	addlw	1
  9819  0972  3EFF               	addlw	255
  9820  0973  00CF               	movwf	??_fMenuStrip+5
  9821  0974  087C               	movf	__MenuNav+1,w
  9822  0975  3A80               	xorlw	128
  9823  0976  00D0               	movwf	??_fMenuStrip+6
  9824  0977  084F               	movf	??_fMenuStrip+5,w
  9825  0978  3A80               	xorlw	128
  9826  0979  0250               	subwf	??_fMenuStrip+6,w
  9827  097A  1D03               	skipz
  9828  097B  297E               	goto	u5435
  9829  097C  084E               	movf	??_fMenuStrip+4,w
  9830  097D  027B               	subwf	__MenuNav,w
  9831  097E                     u5435:
  9832  097E  1C03               	skipc
  9833  097F  2905               	goto	l4632
  9834                           
  9835                           ;menu.c: 48: _MenuNav = _tempDigit;
  9836  0980  1683               	bsf	3,5	;RP0=1, select bank1
  9837  0981  1303               	bcf	3,6	;RP1=0, select bank1
  9838  0982  082B               	movf	(__tempDigit+1)^(0+128),w
  9839  0983  00FC               	movwf	__MenuNav+1
  9840  0984  082A               	movf	__tempDigit^(0+128),w
  9841  0985  29BF               	goto	L13
  9842  0986                     l4656:
  9843                           
  9844                           ;menu.c: 51: else if(_MenuNav >= 1000) _MenuNav = _MenuNav;
  9845  0986  087C               	movf	__MenuNav+1,w
  9846  0987  3A80               	xorlw	128
  9847  0988  00FF               	movwf	127
  9848  0989  3083               	movlw	131
  9849  098A  027F               	subwf	127,w
  9850  098B  1D03               	skipz
  9851  098C  298F               	goto	u5445
  9852  098D  30E8               	movlw	232
  9853  098E  027B               	subwf	__MenuNav,w
  9854  098F                     u5445:
  9855  098F  1803               	btfsc	3,0
  9856  0990  29C0               	goto	l4610
  9857  0991  2905               	goto	l4632
  9858  0992                     l4666:
  9859                           
  9860                           ;menu.c: 56: else if(flMenuStrip == 0x08 && flSwitchButton == 0){
  9861  0992  3008               	movlw	8
  9862  0993  063E               	xorwf	_flMenuStrip^(0+128),w
  9863  0994  1903               	btfsc	3,2
  9864  0995  187A               	btfsc	_flSwitchButton/(0+8),_flSwitchButton& (0+7)
  9865  0996  29C2               	goto	l4680
  9866                           
  9867                           ;menu.c: 57: if(_MenuNav > 1 && _MenuNav <= 1000) {
  9868  0997  087C               	movf	__MenuNav+1,w
  9869  0998  3A80               	xorlw	128
  9870  0999  00FF               	movwf	127
  9871  099A  3080               	movlw	128
  9872  099B  027F               	subwf	127,w
  9873  099C  1D03               	skipz
  9874  099D  29A0               	goto	u5475
  9875  099E  3002               	movlw	2
  9876  099F  027B               	subwf	__MenuNav,w
  9877  09A0                     u5475:
  9878  09A0  1C03               	skipc
  9879  09A1  29C0               	goto	l4610
  9880  09A2  087C               	movf	__MenuNav+1,w
  9881  09A3  3A80               	xorlw	128
  9882  09A4  00FF               	movwf	127
  9883  09A5  3083               	movlw	131
  9884  09A6  027F               	subwf	127,w
  9885  09A7  1D03               	skipz
  9886  09A8  29AB               	goto	u5485
  9887  09A9  30E9               	movlw	233
  9888  09AA  027B               	subwf	__MenuNav,w
  9889  09AB                     u5485:
  9890  09AB  1803               	skipnc
  9891  09AC  29C0               	goto	l4610
  9892                           
  9893                           ;menu.c: 58: _MenuNav *= 10;
  9894  09AD  300A               	movlw	10
  9895  09AE  1283               	bcf	3,5	;RP0=0, select bank0
  9896  09AF  1303               	bcf	3,6	;RP1=0, select bank0
  9897  09B0  00A0               	movwf	___wmul@multiplier
  9898  09B1  3000               	movlw	0
  9899  09B2  00A1               	movwf	___wmul@multiplier+1
  9900  09B3  087C               	movf	__MenuNav+1,w
  9901  09B4  00A3               	movwf	___wmul@multiplicand+1
  9902  09B5  087B               	movf	__MenuNav,w
  9903  09B6  00A2               	movwf	___wmul@multiplicand
  9904  09B7  160A  158A  249C  120A  158A  	fcall	___wmul
  9905  09BC  0821               	movf	?___wmul+1,w
  9906  09BD  00FC               	movwf	__MenuNav+1
  9907  09BE  0820               	movf	?___wmul,w
  9908  09BF                     L13:
  9909  09BF  00FB               	movwf	__MenuNav
  9910  09C0                     l4610:
  9911                           
  9912                           ;menu.c: 32: flSwitchButton = 1;
  9913  09C0  147A               	bsf	_flSwitchButton/(0+8),_flSwitchButton& (0+7)
  9914                           
  9915                           ;menu.c: 33: flClearLCD = 0;
  9916  09C1  10FA               	bcf	_flClearLCD/(0+8),_flClearLCD& (0+7)
  9917  09C2                     l4680:
  9918                           
  9919                           ;menu.c: 63: };menu.c: 64: if(_MenuNav >= 100){
  9920  09C2  087C               	movf	__MenuNav+1,w
  9921  09C3  3A80               	xorlw	128
  9922  09C4  00FF               	movwf	127
  9923  09C5  3080               	movlw	128
  9924  09C6  027F               	subwf	127,w
  9925  09C7  1D03               	skipz
  9926  09C8  29CB               	goto	u5495
  9927  09C9  3064               	movlw	100
  9928  09CA  027B               	subwf	__MenuNav,w
  9929  09CB                     u5495:
  9930  09CB  1C03               	skipc
  9931  09CC  2A3D               	goto	l4684
  9932                           
  9933                           ;menu.c: 65: _firstCell = (unsigned char)(_MenuNav / 100 - 2);
  9934  09CD  3064               	movlw	100
  9935  09CE  1283               	bcf	3,5	;RP0=0, select bank0
  9936  09CF  1303               	bcf	3,6	;RP1=0, select bank0
  9937  09D0  00A0               	movwf	___awdiv@divisor
  9938  09D1  3000               	movlw	0
  9939  09D2  00A1               	movwf	___awdiv@divisor+1
  9940  09D3  087C               	movf	__MenuNav+1,w
  9941  09D4  00A3               	movwf	___awdiv@dividend+1
  9942  09D5  087B               	movf	__MenuNav,w
  9943  09D6  00A2               	movwf	___awdiv@dividend
  9944  09D7  160A  118A  221A  120A  158A  	fcall	___awdiv
  9945  09DC  0820               	movf	?___awdiv,w
  9946  09DD  3EFE               	addlw	254
  9947  09DE  00CA               	movwf	??_fMenuStrip
  9948  09DF  084A               	movf	??_fMenuStrip,w
  9949  09E0  1683               	bsf	3,5	;RP0=1, select bank1
  9950  09E1  00BD               	movwf	__firstCell^(0+128)
  9951                           
  9952                           ;menu.c: 66: _secondCell = (unsigned char)(_MenuNav / 10 % 10);
  9953  09E2  300A               	movlw	10
  9954  09E3  1283               	bcf	3,5	;RP0=0, select bank0
  9955  09E4  00A9               	movwf	___awmod@divisor
  9956  09E5  3000               	movlw	0
  9957  09E6  00AA               	movwf	___awmod@divisor+1
  9958  09E7  300A               	movlw	10
  9959  09E8  00A0               	movwf	___awdiv@divisor
  9960  09E9  3000               	movlw	0
  9961  09EA  00A1               	movwf	___awdiv@divisor+1
  9962  09EB  087C               	movf	__MenuNav+1,w
  9963  09EC  00A3               	movwf	___awdiv@dividend+1
  9964  09ED  087B               	movf	__MenuNav,w
  9965  09EE  00A2               	movwf	___awdiv@dividend
  9966  09EF  160A  118A  221A  120A  158A  	fcall	___awdiv
  9967  09F4  0821               	movf	?___awdiv+1,w
  9968  09F5  00AC               	movwf	___awmod@dividend+1
  9969  09F6  0820               	movf	?___awdiv,w
  9970  09F7  00AB               	movwf	___awmod@dividend
  9971  09F8  160A  158A  2717  120A  158A  	fcall	___awmod
  9972  09FD  0829               	movf	?___awmod,w
  9973  09FE  00CA               	movwf	??_fMenuStrip
  9974  09FF  084A               	movf	??_fMenuStrip,w
  9975  0A00  1683               	bsf	3,5	;RP0=1, select bank1
  9976  0A01  00BC               	movwf	__secondCell^(0+128)
  9977                           
  9978                           ;menu.c: 67: _tempDigit = (unsigned short int)(((_firstCell + 2) * 100) + (_secondCell *
      +                           10));
  9979  0A02  083D               	movf	__firstCell^(0+128),w
  9980  0A03  1283               	bcf	3,5	;RP0=0, select bank0
  9981  0A04  00CA               	movwf	??_fMenuStrip
  9982  0A05  01CB               	clrf	??_fMenuStrip+1
  9983  0A06  084A               	movf	??_fMenuStrip,w
  9984  0A07  00A0               	movwf	___wmul@multiplier
  9985  0A08  084B               	movf	??_fMenuStrip+1,w
  9986  0A09  00A1               	movwf	___wmul@multiplier+1
  9987  0A0A  3064               	movlw	100
  9988  0A0B  00A2               	movwf	___wmul@multiplicand
  9989  0A0C  3000               	movlw	0
  9990  0A0D  00A3               	movwf	___wmul@multiplicand+1
  9991  0A0E  160A  158A  249C  120A  158A  	fcall	___wmul
  9992  0A13  0820               	movf	?___wmul,w
  9993  0A14  00CC               	movwf	??_fMenuStrip+2
  9994  0A15  0821               	movf	?___wmul+1,w
  9995  0A16  00CD               	movwf	??_fMenuStrip+3
  9996  0A17  1683               	bsf	3,5	;RP0=1, select bank1
  9997  0A18  083C               	movf	__secondCell^(0+128),w
  9998  0A19  1283               	bcf	3,5	;RP0=0, select bank0
  9999  0A1A  00CE               	movwf	??_fMenuStrip+4
 10000  0A1B  01CF               	clrf	??_fMenuStrip+5
 10001  0A1C  084E               	movf	??_fMenuStrip+4,w
 10002  0A1D  00A0               	movwf	___wmul@multiplier
 10003  0A1E  084F               	movf	??_fMenuStrip+5,w
 10004  0A1F  00A1               	movwf	___wmul@multiplier+1
 10005  0A20  300A               	movlw	10
 10006  0A21  00A2               	movwf	___wmul@multiplicand
 10007  0A22  3000               	movlw	0
 10008  0A23  00A3               	movwf	___wmul@multiplicand+1
 10009  0A24  160A  158A  249C  120A  158A  	fcall	___wmul
 10010  0A29  0820               	movf	?___wmul,w
 10011  0A2A  074C               	addwf	??_fMenuStrip+2,w
 10012  0A2B  00D0               	movwf	??_fMenuStrip+6
 10013  0A2C  0821               	movf	?___wmul+1,w
 10014  0A2D  1803               	skipnc
 10015  0A2E  0A21               	incf	?___wmul+1,w
 10016  0A2F  074D               	addwf	??_fMenuStrip+3,w
 10017  0A30  00D1               	movwf	??_fMenuStrip+7
 10018  0A31  0850               	movf	??_fMenuStrip+6,w
 10019  0A32  3EC8               	addlw	200
 10020  0A33  1683               	bsf	3,5	;RP0=1, select bank1
 10021  0A34  00AA               	movwf	__tempDigit^(0+128)
 10022  0A35  1283               	bcf	3,5	;RP0=0, select bank0
 10023  0A36  0851               	movf	??_fMenuStrip+7,w
 10024  0A37  1803               	skipnc
 10025  0A38  3E01               	addlw	1
 10026  0A39  3E00               	addlw	0
 10027  0A3A  1683               	bsf	3,5	;RP0=1, select bank1
 10028  0A3B  00AB               	movwf	(__tempDigit+1)^(0+128)
 10029                           
 10030                           ;menu.c: 68: }
 10031  0A3C  2A79               	goto	l4688
 10032  0A3D                     l4684:
 10033                           
 10034                           ;menu.c: 69: else if(_MenuNav >= 10){
 10035  0A3D  087C               	movf	__MenuNav+1,w
 10036  0A3E  3A80               	xorlw	128
 10037  0A3F  00FF               	movwf	127
 10038  0A40  3080               	movlw	128
 10039  0A41  027F               	subwf	127,w
 10040  0A42  1D03               	skipz
 10041  0A43  2A46               	goto	u5505
 10042  0A44  300A               	movlw	10
 10043  0A45  027B               	subwf	__MenuNav,w
 10044  0A46                     u5505:
 10045  0A46  1C03               	skipc
 10046  0A47  2A79               	goto	l4688
 10047                           
 10048                           ;menu.c: 70: _cellTwoDigit = (unsigned char)(_MenuNav / 10 - 1);
 10049  0A48  300A               	movlw	10
 10050  0A49  1283               	bcf	3,5	;RP0=0, select bank0
 10051  0A4A  1303               	bcf	3,6	;RP1=0, select bank0
 10052  0A4B  00A0               	movwf	___awdiv@divisor
 10053  0A4C  3000               	movlw	0
 10054  0A4D  00A1               	movwf	___awdiv@divisor+1
 10055  0A4E  087C               	movf	__MenuNav+1,w
 10056  0A4F  00A3               	movwf	___awdiv@dividend+1
 10057  0A50  087B               	movf	__MenuNav,w
 10058  0A51  00A2               	movwf	___awdiv@dividend
 10059  0A52  160A  118A  221A  120A  158A  	fcall	___awdiv
 10060  0A57  0820               	movf	?___awdiv,w
 10061  0A58  3EFF               	addlw	255
 10062  0A59  00CA               	movwf	??_fMenuStrip
 10063  0A5A  084A               	movf	??_fMenuStrip,w
 10064  0A5B  1683               	bsf	3,5	;RP0=1, select bank1
 10065  0A5C  00BB               	movwf	__cellTwoDigit^(0+128)
 10066                           
 10067                           ;menu.c: 71: _tempTwoDigit = (unsigned char)(_MenuNav / 10 * 10);
 10068  0A5D  300A               	movlw	10
 10069  0A5E  1283               	bcf	3,5	;RP0=0, select bank0
 10070  0A5F  00CA               	movwf	??_fMenuStrip
 10071  0A60  084A               	movf	??_fMenuStrip,w
 10072  0A61  00A9               	movwf	___bmul@multiplicand
 10073  0A62  087C               	movf	__MenuNav+1,w
 10074  0A63  00A3               	movwf	___awdiv@dividend+1
 10075  0A64  087B               	movf	__MenuNav,w
 10076  0A65  00A2               	movwf	___awdiv@dividend
 10077  0A66  300A               	movlw	10
 10078  0A67  00A0               	movwf	___awdiv@divisor
 10079  0A68  3000               	movlw	0
 10080  0A69  00A1               	movwf	___awdiv@divisor+1
 10081  0A6A  160A  118A  221A  120A  158A  	fcall	___awdiv
 10082  0A6F  0820               	movf	?___awdiv,w
 10083  0A70  160A  158A  23F3  120A  158A  	fcall	___bmul
 10084  0A75  00CB               	movwf	??_fMenuStrip+1
 10085  0A76  084B               	movf	??_fMenuStrip+1,w
 10086  0A77  1683               	bsf	3,5	;RP0=1, select bank1
 10087  0A78  00BA               	movwf	__tempTwoDigit^(0+128)
 10088  0A79                     l4688:
 10089                           
 10090                           ;menu.c: 72: };menu.c: 73: if(flClearLCD == 0) LCD_clear();
 10091  0A79  18FA               	btfsc	_flClearLCD/(0+8),_flClearLCD& (0+7)
 10092  0A7A  2F1E               	goto	l4842
 10093  0A7B  160A  158A  2405  120A  158A  	fcall	_LCD_clear
 10094  0A80  2F1E               	goto	l4842
 10095  0A81                     l4692:
 10096                           
 10097                           ;menu.c: 89: sprintf(str, "%16s", "Íàñòðîéêè");
 10098  0A81  30D7               	movlw	low (STR_4| (0+32768))
 10099  0A82  1283               	bcf	3,5	;RP0=0, select bank0
 10100  0A83  1303               	bcf	3,6	;RP1=0, select bank0
 10101  0A84  00AE               	movwf	sprintf@f
 10102  0A85  3091               	movlw	high (STR_4| (0+32768))
 10103  0A86  00AF               	movwf	sprintf@f+1
 10104  0A87  3078               	movlw	low (STR_5| (0+32768))
 10105  0A88  00B0               	movwf	low ((?_sprintf| 0+2))
 10106  0A89  3091               	movlw	high (STR_5| (0+32768))
 10107  0A8A  00B1               	movwf	(low ((?_sprintf| 0+2))+1)
 10108  0A8B  30C2               	movlw	(low (_str| (0+256)))& (0+255)
 10109  0A8C  120A  118A  224B  120A  158A  	fcall	_sprintf
 10110                           
 10111                           ;menu.c: 93: break;
 10112  0A91  2FD4               	goto	l4844
 10113  0A92                     l4694:
 10114                           
 10115                           ;menu.c: 95: sprintf(str, "%16s", "ÄÎ1-Èìï/ïîñò");
 10116  0A92  30D7               	movlw	low (STR_4| (0+32768))
 10117  0A93  1283               	bcf	3,5	;RP0=0, select bank0
 10118  0A94  1303               	bcf	3,6	;RP1=0, select bank0
 10119  0A95  00AE               	movwf	sprintf@f
 10120  0A96  3091               	movlw	high (STR_4| (0+32768))
 10121  0A97  00AF               	movwf	sprintf@f+1
 10122  0A98  3022               	movlw	low (STR_7| (0+32768))
 10123  0A99  00B0               	movwf	low ((?_sprintf| 0+2))
 10124  0A9A  3091               	movlw	high (STR_7| (0+32768))
 10125  0A9B  00B1               	movwf	(low ((?_sprintf| 0+2))+1)
 10126  0A9C  30C2               	movlw	(low (_str| (0+256)))& (0+255)
 10127  0A9D  120A  118A  224B  120A  158A  	fcall	_sprintf
 10128                           
 10129                           ;menu.c: 96: break;
 10130  0AA2  2FD4               	goto	l4844
 10131  0AA3                     l4696:
 10132                           
 10133                           ;menu.c: 98: sprintf(str2, "%s", "Èìïóëüñ");
 10134  0AA3  30F0               	movlw	low (STR_8| (0+32768))
 10135  0AA4  1283               	bcf	3,5	;RP0=0, select bank0
 10136  0AA5  1303               	bcf	3,6	;RP1=0, select bank0
 10137  0AA6  00AE               	movwf	sprintf@f
 10138  0AA7  3091               	movlw	high (STR_8| (0+32768))
 10139  0AA8  00AF               	movwf	sprintf@f+1
 10140  0AA9  30B1               	movlw	low (STR_9| (0+32768))
 10141  0AAA  00B0               	movwf	low ((?_sprintf| 0+2))
 10142  0AAB  3091               	movlw	high (STR_9| (0+32768))
 10143  0AAC  00B1               	movwf	(low ((?_sprintf| 0+2))+1)
 10144  0AAD  30B2               	movlw	(low (_str2| (0+256)))& (0+255)
 10145  0AAE  120A  118A  224B  120A  158A  	fcall	_sprintf
 10146                           
 10147                           ;menu.c: 99: if(_settingsBit & (1 << 1))
 10148  0AB3  1683               	bsf	3,5	;RP0=1, select bank1
 10149  0AB4  1CC4               	btfss	__settingsBit^(0+128),1
 10150  0AB5  2FD4               	goto	l4844
 10151                           
 10152                           ;menu.c: 100: strcat(str2, '*');
 10153  0AB6  302A               	movlw	42
 10154  0AB7  1283               	bcf	3,5	;RP0=0, select bank0
 10155  0AB8  00A0               	movwf	strcat@from
 10156  0AB9  3080               	movlw	128
 10157  0ABA  00A1               	movwf	strcat@from+1
 10158  0ABB  30B2               	movlw	(low (_str2| (0+256)))& (0+255)
 10159  0ABC  160A  158A  24E8  120A  158A  	fcall	_strcat
 10160  0AC1  2FD4               	goto	l4844
 10161  0AC2                     l4702:
 10162                           
 10163                           ;menu.c: 103: _settingTimeImpDO1 = 0;
 10164  0AC2  1683               	bsf	3,5	;RP0=1, select bank1
 10165  0AC3  1303               	bcf	3,6	;RP1=0, select bank1
 10166  0AC4  01B4               	clrf	__settingTimeImpDO1^(0+128)
 10167  0AC5  01B5               	clrf	(__settingTimeImpDO1+1)^(0+128)
 10168                           
 10169                           ;menu.c: 104: ((_settingTimeImpDO1) |= 1UL << (0));
 10170  0AC6  1434               	bsf	__settingTimeImpDO1^(0+128),0
 10171                           
 10172                           ;menu.c: 105: ((_settingsBit) |= 1UL << (1));
 10173  0AC7  14C4               	bsf	__settingsBit^(0+128),1
 10174                           
 10175                           ;menu.c: 106: _MenuNav = 200;
 10176  0AC8  30C8               	movlw	200
 10177  0AC9  2C2F               	goto	L19
 10178  0ACA                     l4710:	
 10179                           ;menu.c: 107: break;
 10180                           
 10181                           
 10182                           ;menu.c: 109: sprintf(str2, "%s", "Ïîñòîÿííûé");
 10183  0ACA  30F0               	movlw	low (STR_8| (0+32768))
 10184  0ACB  1283               	bcf	3,5	;RP0=0, select bank0
 10185  0ACC  1303               	bcf	3,6	;RP1=0, select bank0
 10186  0ACD  00AE               	movwf	sprintf@f
 10187  0ACE  3091               	movlw	high (STR_8| (0+32768))
 10188  0ACF  00AF               	movwf	sprintf@f+1
 10189  0AD0  306D               	movlw	low (STR_11| (0+32768))
 10190  0AD1  00B0               	movwf	low ((?_sprintf| 0+2))
 10191  0AD2  3091               	movlw	high (STR_11| (0+32768))
 10192  0AD3  00B1               	movwf	(low ((?_sprintf| 0+2))+1)
 10193  0AD4  30B2               	movlw	(low (_str2| (0+256)))& (0+255)
 10194  0AD5  120A  118A  224B  120A  158A  	fcall	_sprintf
 10195                           
 10196                           ;menu.c: 110: if(!(_settingsBit & (1 << 1)))
 10197  0ADA  1683               	bsf	3,5	;RP0=1, select bank1
 10198  0ADB  18C4               	btfsc	__settingsBit^(0+128),1
 10199  0ADC  2FD4               	goto	l4844
 10200                           
 10201                           ;menu.c: 111: strcat(str2, '*');
 10202  0ADD  302A               	movlw	42
 10203  0ADE  1283               	bcf	3,5	;RP0=0, select bank0
 10204  0ADF  00A0               	movwf	strcat@from
 10205  0AE0  3080               	movlw	128
 10206  0AE1  00A1               	movwf	strcat@from+1
 10207  0AE2  30B2               	movlw	(low (_str2| (0+256)))& (0+255)
 10208  0AE3  160A  158A  24E8  120A  158A  	fcall	_strcat
 10209  0AE8  2FD4               	goto	l4844
 10210  0AE9                     l4716:
 10211                           
 10212                           ;menu.c: 114: ((_settingsBit) &= ~(1UL << (1)));
 10213  0AE9  30FD               	movlw	253
 10214  0AEA  1283               	bcf	3,5	;RP0=0, select bank0
 10215  0AEB  1303               	bcf	3,6	;RP1=0, select bank0
 10216  0AEC  00CA               	movwf	??_fMenuStrip
 10217  0AED  084A               	movf	??_fMenuStrip,w
 10218  0AEE  1683               	bsf	3,5	;RP0=1, select bank1
 10219  0AEF  05C4               	andwf	__settingsBit^(0+128),f
 10220                           
 10221                           ;menu.c: 115: _MenuNav = 201;
 10222  0AF0  30C9               	movlw	201
 10223  0AF1  2C2F               	goto	L19
 10224  0AF2                     l4720:	
 10225                           ;menu.c: 116: break;
 10226                           
 10227                           
 10228                           ;menu.c: 118: sprintf(str, "%16s", "ÄÎ1-Âðåìÿ èìï");
 10229  0AF2  30D7               	movlw	low (STR_4| (0+32768))
 10230  0AF3  1283               	bcf	3,5	;RP0=0, select bank0
 10231  0AF4  1303               	bcf	3,6	;RP1=0, select bank0
 10232  0AF5  00AE               	movwf	sprintf@f
 10233  0AF6  3091               	movlw	high (STR_4| (0+32768))
 10234  0AF7  00AF               	movwf	sprintf@f+1
 10235  0AF8  3007               	movlw	low (STR_13| (0+32768))
 10236  0AF9  00B0               	movwf	low ((?_sprintf| 0+2))
 10237  0AFA  3091               	movlw	high (STR_13| (0+32768))
 10238  0AFB  00B1               	movwf	(low ((?_sprintf| 0+2))+1)
 10239  0AFC  30C2               	movlw	(low (_str| (0+256)))& (0+255)
 10240  0AFD  120A  118A  224B  120A  158A  	fcall	_sprintf
 10241                           
 10242                           ;menu.c: 119: break;
 10243  0B02  2FD4               	goto	l4844
 10244  0B03                     l4722:
 10245                           
 10246                           ;menu.c: 121: sprintf(str2, "%4d ñåê.", _settingTimeImpDO1);
 10247  0B03  3096               	movlw	low (STR_14| (0+32768))
 10248  0B04  1283               	bcf	3,5	;RP0=0, select bank0
 10249  0B05  1303               	bcf	3,6	;RP1=0, select bank0
 10250  0B06  00AE               	movwf	sprintf@f
 10251  0B07  3091               	movlw	high (STR_14| (0+32768))
 10252  0B08  00AF               	movwf	sprintf@f+1
 10253  0B09  1683               	bsf	3,5	;RP0=1, select bank1
 10254  0B0A  0835               	movf	(__settingTimeImpDO1+1)^(0+128),w
 10255  0B0B  1283               	bcf	3,5	;RP0=0, select bank0
 10256  0B0C  00B1               	movwf	?_sprintf+3
 10257  0B0D  1683               	bsf	3,5	;RP0=1, select bank1
 10258  0B0E  0834               	movf	__settingTimeImpDO1^(0+128),w
 10259  0B0F  1283               	bcf	3,5	;RP0=0, select bank0
 10260  0B10  00B0               	movwf	?_sprintf+2
 10261  0B11  30B2               	movlw	(low (_str2| (0+256)))& (0+255)
 10262  0B12  120A  118A  224B  120A  158A  	fcall	_sprintf
 10263                           
 10264                           ;menu.c: 122: break;
 10265  0B17  2FD4               	goto	l4844
 10266  0B18                     l4724:
 10267                           
 10268                           ;menu.c: 125: _MenuNav = 210;
 10269  0B18  30D2               	movlw	210
 10270  0B19  2C2F               	goto	L19
 10271  0B1A                     l4726:	
 10272                           ;menu.c: 126: break;
 10273                           
 10274                           
 10275                           ;menu.c: 128: sprintf(str, "%16s", "ÄÎ2-Âêë òàéìåð");
 10276  0B1A  30D7               	movlw	low (STR_4| (0+32768))
 10277  0B1B  1283               	bcf	3,5	;RP0=0, select bank0
 10278  0B1C  1303               	bcf	3,6	;RP1=0, select bank0
 10279  0B1D  00AE               	movwf	sprintf@f
 10280  0B1E  3091               	movlw	high (STR_4| (0+32768))
 10281  0B1F  00AF               	movwf	sprintf@f+1
 10282  0B20  30E9               	movlw	low (STR_16| (0+32768))
 10283  0B21  00B0               	movwf	low ((?_sprintf| 0+2))
 10284  0B22  3090               	movlw	high (STR_16| (0+32768))
 10285  0B23  00B1               	movwf	(low ((?_sprintf| 0+2))+1)
 10286  0B24  30C2               	movlw	(low (_str| (0+256)))& (0+255)
 10287  0B25  120A  118A  224B  120A  158A  	fcall	_sprintf
 10288                           
 10289                           ;menu.c: 129: break;
 10290  0B2A  2FD4               	goto	l4844
 10291  0B2B                     l4728:
 10292                           
 10293                           ;menu.c: 131: sprintf(str2, "%s", "Äà");
 10294  0B2B  30F0               	movlw	low (STR_8| (0+32768))
 10295  0B2C  1283               	bcf	3,5	;RP0=0, select bank0
 10296  0B2D  1303               	bcf	3,6	;RP1=0, select bank0
 10297  0B2E  00AE               	movwf	sprintf@f
 10298  0B2F  3091               	movlw	high (STR_8| (0+32768))
 10299  0B30  00AF               	movwf	sprintf@f+1
 10300  0B31  30ED               	movlw	low (STR_18| (0+32768))
 10301  0B32  00B0               	movwf	low ((?_sprintf| 0+2))
 10302  0B33  3091               	movlw	high (STR_18| (0+32768))
 10303  0B34  00B1               	movwf	(low ((?_sprintf| 0+2))+1)
 10304  0B35  30B2               	movlw	(low (_str2| (0+256)))& (0+255)
 10305  0B36  120A  118A  224B  120A  158A  	fcall	_sprintf
 10306                           
 10307                           ;menu.c: 132: if(_settingsBit & (1 << 3))
 10308  0B3B  1683               	bsf	3,5	;RP0=1, select bank1
 10309  0B3C  1DC4               	btfss	__settingsBit^(0+128),3
 10310  0B3D  2FD4               	goto	l4844
 10311                           
 10312                           ;menu.c: 133: strcat(str2, '*');
 10313  0B3E  302A               	movlw	42
 10314  0B3F  1283               	bcf	3,5	;RP0=0, select bank0
 10315  0B40  00A0               	movwf	strcat@from
 10316  0B41  3080               	movlw	128
 10317  0B42  00A1               	movwf	strcat@from+1
 10318  0B43  30B2               	movlw	(low (_str2| (0+256)))& (0+255)
 10319  0B44  160A  158A  24E8  120A  158A  	fcall	_strcat
 10320  0B49  2FD4               	goto	l4844
 10321  0B4A                     l4734:
 10322                           
 10323                           ;menu.c: 136: if(_settingTimerOnDO2 == 0 || _settingTimerOffDO2 == 0)
 10324  0B4A  1683               	bsf	3,5	;RP0=1, select bank1
 10325  0B4B  1303               	bcf	3,6	;RP1=0, select bank1
 10326  0B4C  0832               	movf	__settingTimerOnDO2^(0+128),w
 10327  0B4D  0433               	iorwf	(__settingTimerOnDO2+1)^(0+128),w
 10328  0B4E  1903               	btfsc	3,2
 10329  0B4F  2B54               	goto	l4738
 10330  0B50  0830               	movf	__settingTimerOffDO2^(0+128),w
 10331  0B51  0431               	iorwf	(__settingTimerOffDO2+1)^(0+128),w
 10332  0B52  1D03               	btfss	3,2
 10333  0B53  2B5C               	goto	l4740
 10334  0B54                     l4738:
 10335                           
 10336                           ;menu.c: 137: {;menu.c: 138: _settingTimerOnDO2 = 5;
 10337  0B54  3005               	movlw	5
 10338  0B55  00B2               	movwf	__settingTimerOnDO2^(0+128)
 10339  0B56  3000               	movlw	0
 10340  0B57  00B3               	movwf	(__settingTimerOnDO2^(0+128)+1)
 10341                           
 10342                           ;menu.c: 139: _settingTimerOffDO2 = 5;
 10343  0B58  3005               	movlw	5
 10344  0B59  00B0               	movwf	__settingTimerOffDO2^(0+128)
 10345  0B5A  3000               	movlw	0
 10346  0B5B  00B1               	movwf	(__settingTimerOffDO2^(0+128)+1)
 10347  0B5C                     l4740:
 10348                           
 10349                           ;menu.c: 140: };menu.c: 141: ((_settingsBit) |= 1UL << (3));
 10350  0B5C  15C4               	bsf	__settingsBit^(0+128),3
 10351                           
 10352                           ;menu.c: 142: _MenuNav = 220;
 10353  0B5D  30DC               	movlw	220
 10354  0B5E  2C2F               	goto	L19
 10355  0B5F                     l4742:	
 10356                           ;menu.c: 143: break;
 10357                           
 10358                           
 10359                           ;menu.c: 145: sprintf(str2, "%s", "Íåò");
 10360  0B5F  30F0               	movlw	low (STR_8| (0+32768))
 10361  0B60  1283               	bcf	3,5	;RP0=0, select bank0
 10362  0B61  1303               	bcf	3,6	;RP1=0, select bank0
 10363  0B62  00AE               	movwf	sprintf@f
 10364  0B63  3091               	movlw	high (STR_8| (0+32768))
 10365  0B64  00AF               	movwf	sprintf@f+1
 10366  0B65  30E1               	movlw	low (STR_20| (0+32768))
 10367  0B66  00B0               	movwf	low ((?_sprintf| 0+2))
 10368  0B67  3091               	movlw	high (STR_20| (0+32768))
 10369  0B68  00B1               	movwf	(low ((?_sprintf| 0+2))+1)
 10370  0B69  30B2               	movlw	(low (_str2| (0+256)))& (0+255)
 10371  0B6A  120A  118A  224B  120A  158A  	fcall	_sprintf
 10372                           
 10373                           ;menu.c: 146: if(!(_settingsBit & (1 << 3)))
 10374  0B6F  1683               	bsf	3,5	;RP0=1, select bank1
 10375  0B70  19C4               	btfsc	__settingsBit^(0+128),3
 10376  0B71  2FD4               	goto	l4844
 10377                           
 10378                           ;menu.c: 147: strcat(str2, '*');
 10379  0B72  302A               	movlw	42
 10380  0B73  1283               	bcf	3,5	;RP0=0, select bank0
 10381  0B74  00A0               	movwf	strcat@from
 10382  0B75  3080               	movlw	128
 10383  0B76  00A1               	movwf	strcat@from+1
 10384  0B77  30B2               	movlw	(low (_str2| (0+256)))& (0+255)
 10385  0B78  160A  158A  24E8  120A  158A  	fcall	_strcat
 10386  0B7D  2FD4               	goto	l4844
 10387  0B7E                     l4748:
 10388                           
 10389                           ;menu.c: 150: ((_settingsBit) &= ~(1UL << (3)));
 10390  0B7E  30F7               	movlw	247
 10391  0B7F  1283               	bcf	3,5	;RP0=0, select bank0
 10392  0B80  1303               	bcf	3,6	;RP1=0, select bank0
 10393  0B81  00CA               	movwf	??_fMenuStrip
 10394  0B82  084A               	movf	??_fMenuStrip,w
 10395  0B83  1683               	bsf	3,5	;RP0=1, select bank1
 10396  0B84  05C4               	andwf	__settingsBit^(0+128),f
 10397                           
 10398                           ;menu.c: 151: _MenuNav = 221;
 10399  0B85  30DD               	movlw	221
 10400  0B86  2C2F               	goto	L19
 10401  0B87                     l4752:	
 10402                           ;menu.c: 152: break;
 10403                           
 10404                           
 10405                           ;menu.c: 154: sprintf(str, "%16s", "ÄÎ2-Òàéìåð âêë");
 10406  0B87  30D7               	movlw	low (STR_4| (0+32768))
 10407  0B88  1283               	bcf	3,5	;RP0=0, select bank0
 10408  0B89  1303               	bcf	3,6	;RP1=0, select bank0
 10409  0B8A  00AE               	movwf	sprintf@f
 10410  0B8B  3091               	movlw	high (STR_4| (0+32768))
 10411  0B8C  00AF               	movwf	sprintf@f+1
 10412  0B8D  30DA               	movlw	low (STR_22| (0+32768))
 10413  0B8E  00B0               	movwf	low ((?_sprintf| 0+2))
 10414  0B8F  3090               	movlw	high (STR_22| (0+32768))
 10415  0B90  00B1               	movwf	(low ((?_sprintf| 0+2))+1)
 10416  0B91  30C2               	movlw	(low (_str| (0+256)))& (0+255)
 10417  0B92  120A  118A  224B  120A  158A  	fcall	_sprintf
 10418                           
 10419                           ;menu.c: 155: break;
 10420  0B97  2FD4               	goto	l4844
 10421  0B98                     l4754:
 10422                           
 10423                           ;menu.c: 157: sprintf(str2, "%4d ìèí.", _settingTimerOnDO2);
 10424  0B98  309F               	movlw	low (STR_23| (0+32768))
 10425  0B99  1283               	bcf	3,5	;RP0=0, select bank0
 10426  0B9A  1303               	bcf	3,6	;RP1=0, select bank0
 10427  0B9B  00AE               	movwf	sprintf@f
 10428  0B9C  3091               	movlw	high (STR_23| (0+32768))
 10429  0B9D  00AF               	movwf	sprintf@f+1
 10430  0B9E  1683               	bsf	3,5	;RP0=1, select bank1
 10431  0B9F  0833               	movf	(__settingTimerOnDO2+1)^(0+128),w
 10432  0BA0  1283               	bcf	3,5	;RP0=0, select bank0
 10433  0BA1  00B1               	movwf	?_sprintf+3
 10434  0BA2  1683               	bsf	3,5	;RP0=1, select bank1
 10435  0BA3  0832               	movf	__settingTimerOnDO2^(0+128),w
 10436  0BA4  1283               	bcf	3,5	;RP0=0, select bank0
 10437  0BA5  00B0               	movwf	?_sprintf+2
 10438  0BA6  30B2               	movlw	(low (_str2| (0+256)))& (0+255)
 10439  0BA7  120A  118A  224B  120A  158A  	fcall	_sprintf
 10440                           
 10441                           ;menu.c: 158: break;
 10442  0BAC  2FD4               	goto	l4844
 10443  0BAD                     l4756:
 10444                           
 10445                           ;menu.c: 164: sprintf(str, "%16s", "ÄÎ2-Òàéìåð âûêë");
 10446  0BAD  30D7               	movlw	low (STR_4| (0+32768))
 10447  0BAE  1283               	bcf	3,5	;RP0=0, select bank0
 10448  0BAF  1303               	bcf	3,6	;RP1=0, select bank0
 10449  0BB0  00AE               	movwf	sprintf@f
 10450  0BB1  3091               	movlw	high (STR_4| (0+32768))
 10451  0BB2  00AF               	movwf	sprintf@f+1
 10452  0BB3  30AA               	movlw	low (STR_25| (0+32768))
 10453  0BB4  00B0               	movwf	low ((?_sprintf| 0+2))
 10454  0BB5  3090               	movlw	high (STR_25| (0+32768))
 10455  0BB6  00B1               	movwf	(low ((?_sprintf| 0+2))+1)
 10456  0BB7  30C2               	movlw	(low (_str| (0+256)))& (0+255)
 10457  0BB8  120A  118A  224B  120A  158A  	fcall	_sprintf
 10458                           
 10459                           ;menu.c: 165: break;
 10460  0BBD  2FD4               	goto	l4844
 10461  0BBE                     l4758:
 10462                           
 10463                           ;menu.c: 167: sprintf(str2, "%4d ìèí.", _settingTimerOffDO2);
 10464  0BBE  309F               	movlw	low (STR_23| (0+32768))
 10465  0BBF  1283               	bcf	3,5	;RP0=0, select bank0
 10466  0BC0  1303               	bcf	3,6	;RP1=0, select bank0
 10467  0BC1  00AE               	movwf	sprintf@f
 10468  0BC2  3091               	movlw	high (STR_23| (0+32768))
 10469  0BC3  00AF               	movwf	sprintf@f+1
 10470  0BC4  1683               	bsf	3,5	;RP0=1, select bank1
 10471  0BC5  0831               	movf	(__settingTimerOffDO2+1)^(0+128),w
 10472  0BC6  1283               	bcf	3,5	;RP0=0, select bank0
 10473  0BC7  00B1               	movwf	?_sprintf+3
 10474  0BC8  1683               	bsf	3,5	;RP0=1, select bank1
 10475  0BC9  0830               	movf	__settingTimerOffDO2^(0+128),w
 10476  0BCA  1283               	bcf	3,5	;RP0=0, select bank0
 10477  0BCB  00B0               	movwf	?_sprintf+2
 10478  0BCC  30B2               	movlw	(low (_str2| (0+256)))& (0+255)
 10479  0BCD  120A  118A  224B  120A  158A  	fcall	_sprintf
 10480                           
 10481                           ;menu.c: 168: break;
 10482  0BD2  2FD4               	goto	l4844
 10483  0BD3                     l4760:
 10484                           
 10485                           ;menu.c: 174: sprintf(str, "%16s", "ÄÎ2-Âêë ïî òåìï");
 10486  0BD3  30D7               	movlw	low (STR_4| (0+32768))
 10487  0BD4  1283               	bcf	3,5	;RP0=0, select bank0
 10488  0BD5  1303               	bcf	3,6	;RP1=0, select bank0
 10489  0BD6  00AE               	movwf	sprintf@f
 10490  0BD7  3091               	movlw	high (STR_4| (0+32768))
 10491  0BD8  00AF               	movwf	sprintf@f+1
 10492  0BD9  30BA               	movlw	low (STR_28| (0+32768))
 10493  0BDA  00B0               	movwf	low ((?_sprintf| 0+2))
 10494  0BDB  3090               	movlw	high (STR_28| (0+32768))
 10495  0BDC  00B1               	movwf	(low ((?_sprintf| 0+2))+1)
 10496  0BDD  30C2               	movlw	(low (_str| (0+256)))& (0+255)
 10497  0BDE  120A  118A  224B  120A  158A  	fcall	_sprintf
 10498                           
 10499                           ;menu.c: 175: break;
 10500  0BE3  2FD4               	goto	l4844
 10501  0BE4                     l4762:
 10502                           
 10503                           ;menu.c: 177: sprintf(str2, "%s", "Äà");
 10504  0BE4  30F0               	movlw	low (STR_8| (0+32768))
 10505  0BE5  1283               	bcf	3,5	;RP0=0, select bank0
 10506  0BE6  1303               	bcf	3,6	;RP1=0, select bank0
 10507  0BE7  00AE               	movwf	sprintf@f
 10508  0BE8  3091               	movlw	high (STR_8| (0+32768))
 10509  0BE9  00AF               	movwf	sprintf@f+1
 10510  0BEA  30ED               	movlw	low (STR_18| (0+32768))
 10511  0BEB  00B0               	movwf	low ((?_sprintf| 0+2))
 10512  0BEC  3091               	movlw	high (STR_18| (0+32768))
 10513  0BED  00B1               	movwf	(low ((?_sprintf| 0+2))+1)
 10514  0BEE  30B2               	movlw	(low (_str2| (0+256)))& (0+255)
 10515  0BEF  120A  118A  224B  120A  158A  	fcall	_sprintf
 10516                           
 10517                           ;menu.c: 178: if(_settingsBit & (1 << 4))
 10518  0BF4  1683               	bsf	3,5	;RP0=1, select bank1
 10519  0BF5  1E44               	btfss	__settingsBit^(0+128),4
 10520  0BF6  2FD4               	goto	l4844
 10521                           
 10522                           ;menu.c: 179: strcat(str2, '*');
 10523  0BF7  302A               	movlw	42
 10524  0BF8  1283               	bcf	3,5	;RP0=0, select bank0
 10525  0BF9  00A0               	movwf	strcat@from
 10526  0BFA  3080               	movlw	128
 10527  0BFB  00A1               	movwf	strcat@from+1
 10528  0BFC  30B2               	movlw	(low (_str2| (0+256)))& (0+255)
 10529  0BFD  160A  158A  24E8  120A  158A  	fcall	_strcat
 10530  0C02  2FD4               	goto	l4844
 10531  0C03                     l669:	
 10532                           ;menu.c: 181: case 2500:
 10533                           
 10534                           
 10535                           ;menu.c: 182: ((_settingsBit) |= 1UL << (4));
 10536  0C03  1683               	bsf	3,5	;RP0=1, select bank1
 10537  0C04  1303               	bcf	3,6	;RP1=0, select bank1
 10538  0C05  1644               	bsf	__settingsBit^(0+128),4
 10539                           
 10540                           ;menu.c: 183: _MenuNav = 250;
 10541  0C06  30FA               	movlw	250
 10542  0C07  2C2F               	goto	L19
 10543  0C08                     l4770:	
 10544                           ;menu.c: 184: break;
 10545                           
 10546                           
 10547                           ;menu.c: 186: sprintf(str2, "%s", "Íåò");
 10548  0C08  30F0               	movlw	low (STR_8| (0+32768))
 10549  0C09  1283               	bcf	3,5	;RP0=0, select bank0
 10550  0C0A  1303               	bcf	3,6	;RP1=0, select bank0
 10551  0C0B  00AE               	movwf	sprintf@f
 10552  0C0C  3091               	movlw	high (STR_8| (0+32768))
 10553  0C0D  00AF               	movwf	sprintf@f+1
 10554  0C0E  30E1               	movlw	low (STR_20| (0+32768))
 10555  0C0F  00B0               	movwf	low ((?_sprintf| 0+2))
 10556  0C10  3091               	movlw	high (STR_20| (0+32768))
 10557  0C11  00B1               	movwf	(low ((?_sprintf| 0+2))+1)
 10558  0C12  30B2               	movlw	(low (_str2| (0+256)))& (0+255)
 10559  0C13  120A  118A  224B  120A  158A  	fcall	_sprintf
 10560                           
 10561                           ;menu.c: 187: if(!(_settingsBit & (1 << 4)))
 10562  0C18  1683               	bsf	3,5	;RP0=1, select bank1
 10563  0C19  1A44               	btfsc	__settingsBit^(0+128),4
 10564  0C1A  2FD4               	goto	l4844
 10565                           
 10566                           ;menu.c: 188: strcat(str2, '*');
 10567  0C1B  302A               	movlw	42
 10568  0C1C  1283               	bcf	3,5	;RP0=0, select bank0
 10569  0C1D  00A0               	movwf	strcat@from
 10570  0C1E  3080               	movlw	128
 10571  0C1F  00A1               	movwf	strcat@from+1
 10572  0C20  30B2               	movlw	(low (_str2| (0+256)))& (0+255)
 10573  0C21  160A  158A  24E8  120A  158A  	fcall	_strcat
 10574  0C26  2FD4               	goto	l4844
 10575  0C27                     l4776:
 10576                           
 10577                           ;menu.c: 191: ((_settingsBit) &= ~(1UL << (4)));
 10578  0C27  30EF               	movlw	239
 10579  0C28  1283               	bcf	3,5	;RP0=0, select bank0
 10580  0C29  1303               	bcf	3,6	;RP1=0, select bank0
 10581  0C2A  00CA               	movwf	??_fMenuStrip
 10582  0C2B  084A               	movf	??_fMenuStrip,w
 10583  0C2C  1683               	bsf	3,5	;RP0=1, select bank1
 10584  0C2D  05C4               	andwf	__settingsBit^(0+128),f
 10585                           
 10586                           ;menu.c: 192: _MenuNav = 251;
 10587  0C2E  30FB               	movlw	251
 10588  0C2F                     L19:
 10589  0C2F  00FB               	movwf	__MenuNav
 10590  0C30  3000               	movlw	0
 10591  0C31  2ED0               	goto	L22
 10592  0C32                     l4780:	
 10593                           ;menu.c: 193: break;
 10594                           
 10595                           
 10596                           ;menu.c: 195: sprintf(str, "%16s", "Ïîêàçàíèÿ");
 10597  0C32  30D7               	movlw	low (STR_4| (0+32768))
 10598  0C33  1283               	bcf	3,5	;RP0=0, select bank0
 10599  0C34  1303               	bcf	3,6	;RP1=0, select bank0
 10600  0C35  00AE               	movwf	sprintf@f
 10601  0C36  3091               	movlw	high (STR_4| (0+32768))
 10602  0C37  00AF               	movwf	sprintf@f+1
 10603  0C38  3082               	movlw	low (STR_34| (0+32768))
 10604  0C39  00B0               	movwf	low ((?_sprintf| 0+2))
 10605  0C3A  3091               	movlw	high (STR_34| (0+32768))
 10606  0C3B  00B1               	movwf	(low ((?_sprintf| 0+2))+1)
 10607  0C3C  30C2               	movlw	(low (_str| (0+256)))& (0+255)
 10608  0C3D  120A  118A  224B  120A  158A  	fcall	_sprintf
 10609                           
 10610                           ;menu.c: 199: break;
 10611  0C42  2FD4               	goto	l4844
 10612  0C43                     l4782:
 10613                           
 10614                           ;menu.c: 201: sprintf(str, "%16s", "Àíàëîã. ââîä");
 10615  0C43  30D7               	movlw	low (STR_4| (0+32768))
 10616  0C44  1283               	bcf	3,5	;RP0=0, select bank0
 10617  0C45  1303               	bcf	3,6	;RP1=0, select bank0
 10618  0C46  00AE               	movwf	sprintf@f
 10619  0C47  3091               	movlw	high (STR_4| (0+32768))
 10620  0C48  00AF               	movwf	sprintf@f+1
 10621  0C49  3015               	movlw	low (STR_36| (0+32768))
 10622  0C4A  00B0               	movwf	low ((?_sprintf| 0+2))
 10623  0C4B  3091               	movlw	high (STR_36| (0+32768))
 10624  0C4C  00B1               	movwf	(low ((?_sprintf| 0+2))+1)
 10625  0C4D  30C2               	movlw	(low (_str| (0+256)))& (0+255)
 10626  0C4E  120A  118A  224B  120A  158A  	fcall	_sprintf
 10627                           
 10628                           ;menu.c: 202: break;
 10629  0C53  2FD4               	goto	l4844
 10630  0C54                     l4784:
 10631                           
 10632                           ;menu.c: 204: sprintf(str2, "%3s%3u  %3s%3u", "Àí1:", Analog.AI1, "Aí2:", Analog.AI2);
 10633  0C54  30F8               	movlw	low (STR_37| (0+32768))
 10634  0C55  1283               	bcf	3,5	;RP0=0, select bank0
 10635  0C56  1303               	bcf	3,6	;RP1=0, select bank0
 10636  0C57  00AE               	movwf	sprintf@f
 10637  0C58  3090               	movlw	high (STR_37| (0+32768))
 10638  0C59  00AF               	movwf	sprintf@f+1
 10639  0C5A  30CD               	movlw	low (STR_38| (0+32768))
 10640  0C5B  00B0               	movwf	low ((?_sprintf| 0+2))
 10641  0C5C  3091               	movlw	high (STR_38| (0+32768))
 10642  0C5D  00B1               	movwf	(low ((?_sprintf| 0+2))+1)
 10643  0C5E  1683               	bsf	3,5	;RP0=1, select bank1
 10644  0C5F  0825               	movf	(_Analog^(0+128)+1),w
 10645  0C60  1283               	bcf	3,5	;RP0=0, select bank0
 10646  0C61  00CA               	movwf	??_fMenuStrip
 10647  0C62  01CB               	clrf	??_fMenuStrip+1
 10648  0C63  084A               	movf	??_fMenuStrip,w
 10649  0C64  00B2               	movwf	?_sprintf+4
 10650  0C65  084B               	movf	??_fMenuStrip+1,w
 10651  0C66  00B3               	movwf	?_sprintf+5
 10652  0C67  30D2               	movlw	low (STR_39| (0+32768))
 10653  0C68  00B4               	movwf	low ((?_sprintf| 0+6))
 10654  0C69  3091               	movlw	high (STR_39| (0+32768))
 10655  0C6A  00B5               	movwf	(low ((?_sprintf| 0+6))+1)
 10656  0C6B  1683               	bsf	3,5	;RP0=1, select bank1
 10657  0C6C  0826               	movf	(_Analog^(0+128)+2),w
 10658  0C6D  1283               	bcf	3,5	;RP0=0, select bank0
 10659  0C6E  00CC               	movwf	??_fMenuStrip+2
 10660  0C6F  01CD               	clrf	??_fMenuStrip+3
 10661  0C70  084C               	movf	??_fMenuStrip+2,w
 10662  0C71  00B6               	movwf	?_sprintf+8
 10663  0C72  084D               	movf	??_fMenuStrip+3,w
 10664  0C73  00B7               	movwf	?_sprintf+9
 10665  0C74  30B2               	movlw	(low (_str2| (0+256)))& (0+255)
 10666  0C75  120A  118A  224B  120A  158A  	fcall	_sprintf
 10667                           
 10668                           ;menu.c: 205: break;
 10669  0C7A  2FD4               	goto	l4844
 10670  0C7B                     l4786:
 10671                           
 10672                           ;menu.c: 209: sprintf(str, "%16s", "Öèôð. ââîä");
 10673  0C7B  30D7               	movlw	low (STR_4| (0+32768))
 10674  0C7C  1283               	bcf	3,5	;RP0=0, select bank0
 10675  0C7D  1303               	bcf	3,6	;RP1=0, select bank0
 10676  0C7E  00AE               	movwf	sprintf@f
 10677  0C7F  3091               	movlw	high (STR_4| (0+32768))
 10678  0C80  00AF               	movwf	sprintf@f+1
 10679  0C81  3062               	movlw	low (STR_41| (0+32768))
 10680  0C82  00B0               	movwf	low ((?_sprintf| 0+2))
 10681  0C83  3091               	movlw	high (STR_41| (0+32768))
 10682  0C84  00B1               	movwf	(low ((?_sprintf| 0+2))+1)
 10683  0C85  30C2               	movlw	(low (_str| (0+256)))& (0+255)
 10684  0C86  120A  118A  224B  120A  158A  	fcall	_sprintf
 10685                           
 10686                           ;menu.c: 210: break;
 10687  0C8B  2FD4               	goto	l4844
 10688  0C8C                     l4788:
 10689                           
 10690                           ;menu.c: 212: sprintf(str2, "%12s%d%d%d%d", "Ä.âõîäû:",RB3,RB4,RB5,RB6);
 10691  0C8C  302F               	movlw	low (STR_42| (0+32768))
 10692  0C8D  1283               	bcf	3,5	;RP0=0, select bank0
 10693  0C8E  1303               	bcf	3,6	;RP1=0, select bank0
 10694  0C8F  00AE               	movwf	sprintf@f
 10695  0C90  3091               	movlw	high (STR_42| (0+32768))
 10696  0C91  00AF               	movwf	sprintf@f+1
 10697  0C92  30A8               	movlw	low (STR_43| (0+32768))
 10698  0C93  00B0               	movwf	low ((?_sprintf| 0+2))
 10699  0C94  3091               	movlw	high (STR_43| (0+32768))
 10700  0C95  00B1               	movwf	(low ((?_sprintf| 0+2))+1)
 10701  0C96  1003               	clrc
 10702  0C97  1986               	btfsc	6,3	;volatile
 10703  0C98  1403               	setc
 10704  0C99  3000               	movlw	0
 10705  0C9A  1803               	skipnc
 10706  0C9B  3001               	movlw	1
 10707  0C9C  00CA               	movwf	??_fMenuStrip
 10708  0C9D  01CB               	clrf	??_fMenuStrip+1
 10709  0C9E  084A               	movf	??_fMenuStrip,w
 10710  0C9F  00B2               	movwf	?_sprintf+4
 10711  0CA0  084B               	movf	??_fMenuStrip+1,w
 10712  0CA1  00B3               	movwf	?_sprintf+5
 10713  0CA2  1003               	clrc
 10714  0CA3  1A06               	btfsc	6,4	;volatile
 10715  0CA4  1403               	setc
 10716  0CA5  3000               	movlw	0
 10717  0CA6  1803               	skipnc
 10718  0CA7  3001               	movlw	1
 10719  0CA8  00CC               	movwf	??_fMenuStrip+2
 10720  0CA9  01CD               	clrf	??_fMenuStrip+3
 10721  0CAA  084C               	movf	??_fMenuStrip+2,w
 10722  0CAB  00B4               	movwf	?_sprintf+6
 10723  0CAC  084D               	movf	??_fMenuStrip+3,w
 10724  0CAD  00B5               	movwf	?_sprintf+7
 10725  0CAE  1003               	clrc
 10726  0CAF  1A86               	btfsc	6,5	;volatile
 10727  0CB0  1403               	setc
 10728  0CB1  3000               	movlw	0
 10729  0CB2  1803               	skipnc
 10730  0CB3  3001               	movlw	1
 10731  0CB4  00CE               	movwf	??_fMenuStrip+4
 10732  0CB5  01CF               	clrf	??_fMenuStrip+5
 10733  0CB6  084E               	movf	??_fMenuStrip+4,w
 10734  0CB7  00B6               	movwf	?_sprintf+8
 10735  0CB8  084F               	movf	??_fMenuStrip+5,w
 10736  0CB9  00B7               	movwf	?_sprintf+9
 10737  0CBA  1003               	clrc
 10738  0CBB  1B06               	btfsc	6,6	;volatile
 10739  0CBC  1403               	setc
 10740  0CBD  3000               	movlw	0
 10741  0CBE  1803               	skipnc
 10742  0CBF  3001               	movlw	1
 10743  0CC0  00D0               	movwf	??_fMenuStrip+6
 10744  0CC1  01D1               	clrf	??_fMenuStrip+7
 10745  0CC2  0850               	movf	??_fMenuStrip+6,w
 10746  0CC3  00B8               	movwf	?_sprintf+10
 10747  0CC4  0851               	movf	??_fMenuStrip+7,w
 10748  0CC5  00B9               	movwf	?_sprintf+11
 10749  0CC6  30B2               	movlw	(low (_str2| (0+256)))& (0+255)
 10750  0CC7  120A  118A  224B  120A  158A  	fcall	_sprintf
 10751                           
 10752                           ;menu.c: 213: break;
 10753  0CCC  2FD4               	goto	l4844
 10754  0CCD                     l4790:
 10755                           
 10756                           ;menu.c: 215: _MenuNav /= 10;
 10757  0CCD  300A               	movlw	10
 10758  0CCE  1283               	bcf	3,5	;RP0=0, select bank0
 10759  0CCF  1303               	bcf	3,6	;RP1=0, select bank0
 10760  0CD0  00A0               	movwf	___awdiv@divisor
 10761  0CD1  3000               	movlw	0
 10762  0CD2  00A1               	movwf	___awdiv@divisor+1
 10763  0CD3  087C               	movf	__MenuNav+1,w
 10764  0CD4  00A3               	movwf	___awdiv@dividend+1
 10765  0CD5  087B               	movf	__MenuNav,w
 10766  0CD6  00A2               	movwf	___awdiv@dividend
 10767  0CD7  160A  118A  221A  120A  158A  	fcall	___awdiv
 10768  0CDC  0821               	movf	?___awdiv+1,w
 10769  0CDD  00FC               	movwf	__MenuNav+1
 10770  0CDE  0820               	movf	?___awdiv,w
 10771  0CDF  00FB               	movwf	__MenuNav
 10772                           
 10773                           ;menu.c: 216: break;
 10774  0CE0  2FD4               	goto	l4844
 10775  0CE1                     l4792:
 10776                           
 10777                           ;menu.c: 218: sprintf(str, "%16s", "Öèôð. âûâîä");
 10778  0CE1  30D7               	movlw	low (STR_4| (0+32768))
 10779  0CE2  1283               	bcf	3,5	;RP0=0, select bank0
 10780  0CE3  1303               	bcf	3,6	;RP1=0, select bank0
 10781  0CE4  00AE               	movwf	sprintf@f
 10782  0CE5  3091               	movlw	high (STR_4| (0+32768))
 10783  0CE6  00AF               	movwf	sprintf@f+1
 10784  0CE7  3056               	movlw	low (STR_45| (0+32768))
 10785  0CE8  00B0               	movwf	low ((?_sprintf| 0+2))
 10786  0CE9  3091               	movlw	high (STR_45| (0+32768))
 10787  0CEA  00B1               	movwf	(low ((?_sprintf| 0+2))+1)
 10788  0CEB  30C2               	movlw	(low (_str| (0+256)))& (0+255)
 10789  0CEC  120A  118A  224B  120A  158A  	fcall	_sprintf
 10790                           
 10791                           ;menu.c: 219: break;
 10792  0CF1  2FD4               	goto	l4844
 10793  0CF2                     l4794:
 10794                           
 10795                           ;menu.c: 221: sprintf(str2, "%12s%d%d%d%d", "Ä.âûõîäû:",_tempPinDO&0x08?1:0,_tempPinDO&0
      +                          x04?1:0,_tempPinDO&0x02?1:0,_tempPinDO&0x01?1:0);
 10796  0CF2  302F               	movlw	low (STR_42| (0+32768))
 10797  0CF3  1283               	bcf	3,5	;RP0=0, select bank0
 10798  0CF4  1303               	bcf	3,6	;RP1=0, select bank0
 10799  0CF5  00AE               	movwf	sprintf@f
 10800  0CF6  3091               	movlw	high (STR_42| (0+32768))
 10801  0CF7  00AF               	movwf	sprintf@f+1
 10802  0CF8  308C               	movlw	low (STR_47| (0+32768))
 10803  0CF9  00B0               	movwf	low ((?_sprintf| 0+2))
 10804  0CFA  3091               	movlw	high (STR_47| (0+32768))
 10805  0CFB  00B1               	movwf	(low ((?_sprintf| 0+2))+1)
 10806  0CFC  1683               	bsf	3,5	;RP0=1, select bank1
 10807  0CFD  1DC3               	btfss	__tempPinDO^(0+128),3
 10808  0CFE  2D01               	goto	u5600
 10809  0CFF  3001               	movlw	1
 10810  0D00  2D02               	goto	u5610
 10811  0D01                     u5600:
 10812  0D01  3000               	movlw	0
 10813  0D02                     u5610:
 10814  0D02  1283               	bcf	3,5	;RP0=0, select bank0
 10815  0D03  00CA               	movwf	??_fMenuStrip
 10816  0D04  01CB               	clrf	??_fMenuStrip+1
 10817  0D05  084A               	movf	??_fMenuStrip,w
 10818  0D06  00B2               	movwf	?_sprintf+4
 10819  0D07  084B               	movf	??_fMenuStrip+1,w
 10820  0D08  00B3               	movwf	?_sprintf+5
 10821  0D09  1683               	bsf	3,5	;RP0=1, select bank1
 10822  0D0A  1D43               	btfss	__tempPinDO^(0+128),2
 10823  0D0B  2D0E               	goto	u5620
 10824  0D0C  3001               	movlw	1
 10825  0D0D  2D0F               	goto	u5630
 10826  0D0E                     u5620:
 10827  0D0E  3000               	movlw	0
 10828  0D0F                     u5630:
 10829  0D0F  1283               	bcf	3,5	;RP0=0, select bank0
 10830  0D10  00CC               	movwf	??_fMenuStrip+2
 10831  0D11  01CD               	clrf	??_fMenuStrip+3
 10832  0D12  084C               	movf	??_fMenuStrip+2,w
 10833  0D13  00B4               	movwf	?_sprintf+6
 10834  0D14  084D               	movf	??_fMenuStrip+3,w
 10835  0D15  00B5               	movwf	?_sprintf+7
 10836  0D16  1683               	bsf	3,5	;RP0=1, select bank1
 10837  0D17  1CC3               	btfss	__tempPinDO^(0+128),1
 10838  0D18  2D1B               	goto	u5640
 10839  0D19  3001               	movlw	1
 10840  0D1A  2D1C               	goto	u5650
 10841  0D1B                     u5640:
 10842  0D1B  3000               	movlw	0
 10843  0D1C                     u5650:
 10844  0D1C  1283               	bcf	3,5	;RP0=0, select bank0
 10845  0D1D  00CE               	movwf	??_fMenuStrip+4
 10846  0D1E  01CF               	clrf	??_fMenuStrip+5
 10847  0D1F  084E               	movf	??_fMenuStrip+4,w
 10848  0D20  00B6               	movwf	?_sprintf+8
 10849  0D21  084F               	movf	??_fMenuStrip+5,w
 10850  0D22  00B7               	movwf	?_sprintf+9
 10851  0D23  1683               	bsf	3,5	;RP0=1, select bank1
 10852  0D24  1C43               	btfss	__tempPinDO^(0+128),0
 10853  0D25  2D28               	goto	u5660
 10854  0D26  3001               	movlw	1
 10855  0D27  2D29               	goto	u5670
 10856  0D28                     u5660:
 10857  0D28  3000               	movlw	0
 10858  0D29                     u5670:
 10859  0D29  1283               	bcf	3,5	;RP0=0, select bank0
 10860  0D2A  00D0               	movwf	??_fMenuStrip+6
 10861  0D2B  01D1               	clrf	??_fMenuStrip+7
 10862  0D2C  0850               	movf	??_fMenuStrip+6,w
 10863  0D2D  00B8               	movwf	?_sprintf+10
 10864  0D2E  0851               	movf	??_fMenuStrip+7,w
 10865  0D2F  00B9               	movwf	?_sprintf+11
 10866  0D30  30B2               	movlw	(low (_str2| (0+256)))& (0+255)
 10867  0D31  120A  118A  224B  120A  158A  	fcall	_sprintf
 10868                           
 10869                           ;menu.c: 222: break;
 10870  0D36  2FD4               	goto	l4844
 10871  0D37                     l4798:
 10872                           
 10873                           ;menu.c: 227: sprintf(str, "%16s", "Ïàìÿòü");
 10874  0D37  30D7               	movlw	low (STR_4| (0+32768))
 10875  0D38  1283               	bcf	3,5	;RP0=0, select bank0
 10876  0D39  1303               	bcf	3,6	;RP1=0, select bank0
 10877  0D3A  00AE               	movwf	sprintf@f
 10878  0D3B  3091               	movlw	high (STR_4| (0+32768))
 10879  0D3C  00AF               	movwf	sprintf@f+1
 10880  0D3D  30C0               	movlw	low (STR_49| (0+32768))
 10881  0D3E  00B0               	movwf	low ((?_sprintf| 0+2))
 10882  0D3F  3091               	movlw	high (STR_49| (0+32768))
 10883  0D40  00B1               	movwf	(low ((?_sprintf| 0+2))+1)
 10884  0D41  30C2               	movlw	(low (_str| (0+256)))& (0+255)
 10885  0D42  120A  118A  224B  120A  158A  	fcall	_sprintf
 10886                           
 10887                           ;menu.c: 230: break;
 10888  0D47  2FD4               	goto	l4844
 10889  0D48                     l4800:
 10890                           
 10891                           ;menu.c: 232: sprintf(str, "%16s", "Ñîõð.òåê.íàñòð.");
 10892  0D48  30D7               	movlw	low (STR_4| (0+32768))
 10893  0D49  1283               	bcf	3,5	;RP0=0, select bank0
 10894  0D4A  1303               	bcf	3,6	;RP1=0, select bank0
 10895  0D4B  00AE               	movwf	sprintf@f
 10896  0D4C  3091               	movlw	high (STR_4| (0+32768))
 10897  0D4D  00AF               	movwf	sprintf@f+1
 10898  0D4E  30CA               	movlw	low (STR_51| (0+32768))
 10899  0D4F  00B0               	movwf	low ((?_sprintf| 0+2))
 10900  0D50  3090               	movlw	high (STR_51| (0+32768))
 10901  0D51  00B1               	movwf	(low ((?_sprintf| 0+2))+1)
 10902  0D52  30C2               	movlw	(low (_str| (0+256)))& (0+255)
 10903  0D53  120A  118A  224B  120A  158A  	fcall	_sprintf
 10904                           
 10905                           ;menu.c: 233: break;
 10906  0D58  2FD4               	goto	l4844
 10907  0D59                     l4802:
 10908                           
 10909                           ;menu.c: 235: sprintf(str2, "%s", "Äà");
 10910  0D59  30F0               	movlw	low (STR_8| (0+32768))
 10911  0D5A  1283               	bcf	3,5	;RP0=0, select bank0
 10912  0D5B  1303               	bcf	3,6	;RP1=0, select bank0
 10913  0D5C  00AE               	movwf	sprintf@f
 10914  0D5D  3091               	movlw	high (STR_8| (0+32768))
 10915  0D5E  00AF               	movwf	sprintf@f+1
 10916  0D5F  30ED               	movlw	low (STR_18| (0+32768))
 10917  0D60  00B0               	movwf	low ((?_sprintf| 0+2))
 10918  0D61  3091               	movlw	high (STR_18| (0+32768))
 10919  0D62  00B1               	movwf	(low ((?_sprintf| 0+2))+1)
 10920  0D63  30B2               	movlw	(low (_str2| (0+256)))& (0+255)
 10921  0D64  120A  118A  224B  120A  158A  	fcall	_sprintf
 10922                           
 10923                           ;menu.c: 236: if(flUpdate)
 10924  0D69  1D7A               	btfss	_flUpdate/(0+8),_flUpdate& (0+7)
 10925  0D6A  2FD4               	goto	l4844
 10926                           
 10927                           ;menu.c: 237: strcat(str2, '*');
 10928  0D6B  302A               	movlw	42
 10929  0D6C  00A0               	movwf	strcat@from
 10930  0D6D  3080               	movlw	128
 10931  0D6E  00A1               	movwf	strcat@from+1
 10932  0D6F  30B2               	movlw	(low (_str2| (0+256)))& (0+255)
 10933  0D70  160A  158A  24E8  120A  158A  	fcall	_strcat
 10934  0D75  2FD4               	goto	l4844
 10935  0D76                     l687:	
 10936                           ;menu.c: 239: case 4000:
 10937                           
 10938                           
 10939                           ;menu.c: 240: flUpdate = 1;
 10940  0D76  157A               	bsf	_flUpdate/(0+8),_flUpdate& (0+7)
 10941                           
 10942                           ;menu.c: 241: SPI_Write(0,_settingsBit);
 10943  0D77  3000               	movlw	0
 10944  0D78  1283               	bcf	3,5	;RP0=0, select bank0
 10945  0D79  1303               	bcf	3,6	;RP1=0, select bank0
 10946  0D7A  00A9               	movwf	SPI_Write@address+3
 10947  0D7B  3000               	movlw	0
 10948  0D7C  00A8               	movwf	SPI_Write@address+2
 10949  0D7D  3000               	movlw	0
 10950  0D7E  00A7               	movwf	SPI_Write@address+1
 10951  0D7F  3000               	movlw	0
 10952  0D80  00A6               	movwf	SPI_Write@address
 10953  0D81  1683               	bsf	3,5	;RP0=1, select bank1
 10954  0D82  0844               	movf	__settingsBit^(0+128),w
 10955  0D83  1283               	bcf	3,5	;RP0=0, select bank0
 10956  0D84  00CA               	movwf	??_fMenuStrip
 10957  0D85  084A               	movf	??_fMenuStrip,w
 10958  0D86  00AA               	movwf	SPI_Write@data
 10959  0D87  160A  158A  2693  120A  158A  	fcall	_SPI_Write
 10960                           
 10961                           ;menu.c: 242: SPI_Write(1,_settingTimeImpDO1>>8);
 10962  0D8C  3000               	movlw	0
 10963  0D8D  00A9               	movwf	SPI_Write@address+3
 10964  0D8E  3000               	movlw	0
 10965  0D8F  00A8               	movwf	SPI_Write@address+2
 10966  0D90  3000               	movlw	0
 10967  0D91  00A7               	movwf	SPI_Write@address+1
 10968  0D92  3001               	movlw	1
 10969  0D93  00A6               	movwf	SPI_Write@address
 10970  0D94  1683               	bsf	3,5	;RP0=1, select bank1
 10971  0D95  0835               	movf	(__settingTimeImpDO1+1)^(0+128),w
 10972  0D96  1283               	bcf	3,5	;RP0=0, select bank0
 10973  0D97  00CA               	movwf	??_fMenuStrip
 10974  0D98  084A               	movf	??_fMenuStrip,w
 10975  0D99  00AA               	movwf	SPI_Write@data
 10976  0D9A  160A  158A  2693  120A  158A  	fcall	_SPI_Write
 10977                           
 10978                           ;menu.c: 243: SPI_Write(2,_settingTimeImpDO1);
 10979  0D9F  3000               	movlw	0
 10980  0DA0  00A9               	movwf	SPI_Write@address+3
 10981  0DA1  3000               	movlw	0
 10982  0DA2  00A8               	movwf	SPI_Write@address+2
 10983  0DA3  3000               	movlw	0
 10984  0DA4  00A7               	movwf	SPI_Write@address+1
 10985  0DA5  3002               	movlw	2
 10986  0DA6  00A6               	movwf	SPI_Write@address
 10987  0DA7  1683               	bsf	3,5	;RP0=1, select bank1
 10988  0DA8  0834               	movf	__settingTimeImpDO1^(0+128),w
 10989  0DA9  1283               	bcf	3,5	;RP0=0, select bank0
 10990  0DAA  00CA               	movwf	??_fMenuStrip
 10991  0DAB  084A               	movf	??_fMenuStrip,w
 10992  0DAC  00AA               	movwf	SPI_Write@data
 10993  0DAD  160A  158A  2693  120A  158A  	fcall	_SPI_Write
 10994                           
 10995                           ;menu.c: 244: SPI_Write(3,_settingTimerOnDO2>>8);
 10996  0DB2  3000               	movlw	0
 10997  0DB3  00A9               	movwf	SPI_Write@address+3
 10998  0DB4  3000               	movlw	0
 10999  0DB5  00A8               	movwf	SPI_Write@address+2
 11000  0DB6  3000               	movlw	0
 11001  0DB7  00A7               	movwf	SPI_Write@address+1
 11002  0DB8  3003               	movlw	3
 11003  0DB9  00A6               	movwf	SPI_Write@address
 11004  0DBA  1683               	bsf	3,5	;RP0=1, select bank1
 11005  0DBB  0833               	movf	(__settingTimerOnDO2+1)^(0+128),w
 11006  0DBC  1283               	bcf	3,5	;RP0=0, select bank0
 11007  0DBD  00CA               	movwf	??_fMenuStrip
 11008  0DBE  084A               	movf	??_fMenuStrip,w
 11009  0DBF  00AA               	movwf	SPI_Write@data
 11010  0DC0  160A  158A  2693  120A  158A  	fcall	_SPI_Write
 11011                           
 11012                           ;menu.c: 245: SPI_Write(4,_settingTimerOnDO2);
 11013  0DC5  3000               	movlw	0
 11014  0DC6  00A9               	movwf	SPI_Write@address+3
 11015  0DC7  3000               	movlw	0
 11016  0DC8  00A8               	movwf	SPI_Write@address+2
 11017  0DC9  3000               	movlw	0
 11018  0DCA  00A7               	movwf	SPI_Write@address+1
 11019  0DCB  3004               	movlw	4
 11020  0DCC  00A6               	movwf	SPI_Write@address
 11021  0DCD  1683               	bsf	3,5	;RP0=1, select bank1
 11022  0DCE  0832               	movf	__settingTimerOnDO2^(0+128),w
 11023  0DCF  1283               	bcf	3,5	;RP0=0, select bank0
 11024  0DD0  00CA               	movwf	??_fMenuStrip
 11025  0DD1  084A               	movf	??_fMenuStrip,w
 11026  0DD2  00AA               	movwf	SPI_Write@data
 11027  0DD3  160A  158A  2693  120A  158A  	fcall	_SPI_Write
 11028                           
 11029                           ;menu.c: 246: SPI_Write(5,_settingTimerOffDO2>>8);
 11030  0DD8  3000               	movlw	0
 11031  0DD9  00A9               	movwf	SPI_Write@address+3
 11032  0DDA  3000               	movlw	0
 11033  0DDB  00A8               	movwf	SPI_Write@address+2
 11034  0DDC  3000               	movlw	0
 11035  0DDD  00A7               	movwf	SPI_Write@address+1
 11036  0DDE  3005               	movlw	5
 11037  0DDF  00A6               	movwf	SPI_Write@address
 11038  0DE0  1683               	bsf	3,5	;RP0=1, select bank1
 11039  0DE1  0831               	movf	(__settingTimerOffDO2+1)^(0+128),w
 11040  0DE2  1283               	bcf	3,5	;RP0=0, select bank0
 11041  0DE3  00CA               	movwf	??_fMenuStrip
 11042  0DE4  084A               	movf	??_fMenuStrip,w
 11043  0DE5  00AA               	movwf	SPI_Write@data
 11044  0DE6  160A  158A  2693  120A  158A  	fcall	_SPI_Write
 11045                           
 11046                           ;menu.c: 247: SPI_Write(6,_settingTimerOffDO2);
 11047  0DEB  3000               	movlw	0
 11048  0DEC  00A9               	movwf	SPI_Write@address+3
 11049  0DED  3000               	movlw	0
 11050  0DEE  00A8               	movwf	SPI_Write@address+2
 11051  0DEF  3000               	movlw	0
 11052  0DF0  00A7               	movwf	SPI_Write@address+1
 11053  0DF1  3006               	movlw	6
 11054  0DF2  00A6               	movwf	SPI_Write@address
 11055  0DF3  1683               	bsf	3,5	;RP0=1, select bank1
 11056  0DF4  0830               	movf	__settingTimerOffDO2^(0+128),w
 11057  0DF5  1283               	bcf	3,5	;RP0=0, select bank0
 11058  0DF6  00CA               	movwf	??_fMenuStrip
 11059  0DF7  084A               	movf	??_fMenuStrip,w
 11060  0DF8  00AA               	movwf	SPI_Write@data
 11061  0DF9  160A  158A  2693  120A  158A  	fcall	_SPI_Write
 11062                           
 11063                           ;menu.c: 248: _MenuNav = 400;
 11064  0DFE  3090               	movlw	144
 11065  0DFF  2ECE               	goto	L23
 11066  0E00                     l4812:	
 11067                           ;menu.c: 249: break;
 11068                           
 11069                           
 11070                           ;menu.c: 251: sprintf(str, "%16s", "Ñáðîñ íàñòð. ÎÇÓ");
 11071  0E00  30D7               	movlw	low (STR_4| (0+32768))
 11072  0E01  1283               	bcf	3,5	;RP0=0, select bank0
 11073  0E02  1303               	bcf	3,6	;RP1=0, select bank0
 11074  0E03  00AE               	movwf	sprintf@f
 11075  0E04  3091               	movlw	high (STR_4| (0+32768))
 11076  0E05  00AF               	movwf	sprintf@f+1
 11077  0E06  3077               	movlw	low (STR_55| (0+32768))
 11078  0E07  00B0               	movwf	low ((?_sprintf| 0+2))
 11079  0E08  3090               	movlw	high (STR_55| (0+32768))
 11080  0E09  00B1               	movwf	(low ((?_sprintf| 0+2))+1)
 11081  0E0A  30C2               	movlw	(low (_str| (0+256)))& (0+255)
 11082  0E0B  120A  118A  224B  120A  158A  	fcall	_sprintf
 11083                           
 11084                           ;menu.c: 252: break;
 11085  0E10  2FD4               	goto	l4844
 11086  0E11                     l4814:
 11087                           
 11088                           ;menu.c: 254: sprintf(str, "%16s", "Äà");
 11089  0E11  30D7               	movlw	low (STR_4| (0+32768))
 11090  0E12  1283               	bcf	3,5	;RP0=0, select bank0
 11091  0E13  1303               	bcf	3,6	;RP1=0, select bank0
 11092  0E14  00AE               	movwf	sprintf@f
 11093  0E15  3091               	movlw	high (STR_4| (0+32768))
 11094  0E16  00AF               	movwf	sprintf@f+1
 11095  0E17  30ED               	movlw	low (STR_18| (0+32768))
 11096  0E18  00B0               	movwf	low ((?_sprintf| 0+2))
 11097  0E19  3091               	movlw	high (STR_18| (0+32768))
 11098  0E1A  00B1               	movwf	(low ((?_sprintf| 0+2))+1)
 11099  0E1B  30C2               	movlw	(low (_str| (0+256)))& (0+255)
 11100  0E1C  120A  118A  224B  120A  158A  	fcall	_sprintf
 11101                           
 11102                           ;menu.c: 255: if(flUpdate)
 11103  0E21  1D7A               	btfss	_flUpdate/(0+8),_flUpdate& (0+7)
 11104  0E22  2FD4               	goto	l4844
 11105                           
 11106                           ;menu.c: 256: strcat(str2, '*');
 11107  0E23  302A               	movlw	42
 11108  0E24  00A0               	movwf	strcat@from
 11109  0E25  3080               	movlw	128
 11110  0E26  00A1               	movwf	strcat@from+1
 11111  0E27  30B2               	movlw	(low (_str2| (0+256)))& (0+255)
 11112  0E28  160A  158A  24E8  120A  158A  	fcall	_strcat
 11113  0E2D  2FD4               	goto	l4844
 11114  0E2E                     l691:	
 11115                           ;menu.c: 258: case 4100:
 11116                           
 11117                           
 11118                           ;menu.c: 259: flUpdate = 1;
 11119  0E2E  157A               	bsf	_flUpdate/(0+8),_flUpdate& (0+7)
 11120                           
 11121                           ;menu.c: 260: _settingsBit = 0;
 11122  0E2F  1683               	bsf	3,5	;RP0=1, select bank1
 11123  0E30  1303               	bcf	3,6	;RP1=0, select bank1
 11124  0E31  01C4               	clrf	__settingsBit^(0+128)
 11125                           
 11126                           ;menu.c: 261: _settingTimeImpDO1 = 0;
 11127  0E32  01B4               	clrf	__settingTimeImpDO1^(0+128)
 11128  0E33  01B5               	clrf	(__settingTimeImpDO1+1)^(0+128)
 11129                           
 11130                           ;menu.c: 262: _settingTimerOnDO2 = 0;
 11131  0E34  01B2               	clrf	__settingTimerOnDO2^(0+128)
 11132  0E35  01B3               	clrf	(__settingTimerOnDO2+1)^(0+128)
 11133                           
 11134                           ;menu.c: 263: _settingTimerOffDO2 = 0;
 11135  0E36  01B0               	clrf	__settingTimerOffDO2^(0+128)
 11136  0E37  01B1               	clrf	(__settingTimerOffDO2+1)^(0+128)
 11137                           
 11138                           ;menu.c: 264: _MenuNav = 410;
 11139  0E38  309A               	movlw	154
 11140  0E39  2ECE               	goto	L23
 11141  0E3A                     l4824:	
 11142                           ;menu.c: 265: break;
 11143                           
 11144                           
 11145                           ;menu.c: 267: sprintf(str, "%16s", "Ñáðîñ íàñòð. ÏÇÓ");
 11146  0E3A  30D7               	movlw	low (STR_4| (0+32768))
 11147  0E3B  1283               	bcf	3,5	;RP0=0, select bank0
 11148  0E3C  1303               	bcf	3,6	;RP1=0, select bank0
 11149  0E3D  00AE               	movwf	sprintf@f
 11150  0E3E  3091               	movlw	high (STR_4| (0+32768))
 11151  0E3F  00AF               	movwf	sprintf@f+1
 11152  0E40  3088               	movlw	low (STR_59| (0+32768))
 11153  0E41  00B0               	movwf	low ((?_sprintf| 0+2))
 11154  0E42  3090               	movlw	high (STR_59| (0+32768))
 11155  0E43  00B1               	movwf	(low ((?_sprintf| 0+2))+1)
 11156  0E44  30C2               	movlw	(low (_str| (0+256)))& (0+255)
 11157  0E45  120A  118A  224B  120A  158A  	fcall	_sprintf
 11158                           
 11159                           ;menu.c: 268: break;
 11160  0E4A  2FD4               	goto	l4844
 11161  0E4B                     l4826:
 11162                           
 11163                           ;menu.c: 270: sprintf(str, "%16s", "Äà");
 11164  0E4B  30D7               	movlw	low (STR_4| (0+32768))
 11165  0E4C  1283               	bcf	3,5	;RP0=0, select bank0
 11166  0E4D  1303               	bcf	3,6	;RP1=0, select bank0
 11167  0E4E  00AE               	movwf	sprintf@f
 11168  0E4F  3091               	movlw	high (STR_4| (0+32768))
 11169  0E50  00AF               	movwf	sprintf@f+1
 11170  0E51  30ED               	movlw	low (STR_18| (0+32768))
 11171  0E52  00B0               	movwf	low ((?_sprintf| 0+2))
 11172  0E53  3091               	movlw	high (STR_18| (0+32768))
 11173  0E54  00B1               	movwf	(low ((?_sprintf| 0+2))+1)
 11174  0E55  30C2               	movlw	(low (_str| (0+256)))& (0+255)
 11175  0E56  120A  118A  224B  120A  158A  	fcall	_sprintf
 11176                           
 11177                           ;menu.c: 271: if(flUpdate)
 11178  0E5B  1D7A               	btfss	_flUpdate/(0+8),_flUpdate& (0+7)
 11179  0E5C  2FD4               	goto	l4844
 11180                           
 11181                           ;menu.c: 272: strcat(str2, '*');
 11182  0E5D  302A               	movlw	42
 11183  0E5E  00A0               	movwf	strcat@from
 11184  0E5F  3080               	movlw	128
 11185  0E60  00A1               	movwf	strcat@from+1
 11186  0E61  30B2               	movlw	(low (_str2| (0+256)))& (0+255)
 11187  0E62  160A  158A  24E8  120A  158A  	fcall	_strcat
 11188  0E67  2FD4               	goto	l4844
 11189  0E68                     l695:	
 11190                           ;menu.c: 274: case 4200:
 11191                           
 11192                           
 11193                           ;menu.c: 275: flUpdate = 1;
 11194  0E68  157A               	bsf	_flUpdate/(0+8),_flUpdate& (0+7)
 11195                           
 11196                           ;menu.c: 277: SPI_Write(0,0);
 11197  0E69  3000               	movlw	0
 11198  0E6A  1283               	bcf	3,5	;RP0=0, select bank0
 11199  0E6B  1303               	bcf	3,6	;RP1=0, select bank0
 11200  0E6C  00A9               	movwf	SPI_Write@address+3
 11201  0E6D  3000               	movlw	0
 11202  0E6E  00A8               	movwf	SPI_Write@address+2
 11203  0E6F  3000               	movlw	0
 11204  0E70  00A7               	movwf	SPI_Write@address+1
 11205  0E71  3000               	movlw	0
 11206  0E72  00A6               	movwf	SPI_Write@address
 11207  0E73  01AA               	clrf	SPI_Write@data
 11208  0E74  160A  158A  2693  120A  158A  	fcall	_SPI_Write
 11209                           
 11210                           ;menu.c: 278: SPI_Write(1,0);
 11211  0E79  3000               	movlw	0
 11212  0E7A  00A9               	movwf	SPI_Write@address+3
 11213  0E7B  3000               	movlw	0
 11214  0E7C  00A8               	movwf	SPI_Write@address+2
 11215  0E7D  3000               	movlw	0
 11216  0E7E  00A7               	movwf	SPI_Write@address+1
 11217  0E7F  3001               	movlw	1
 11218  0E80  00A6               	movwf	SPI_Write@address
 11219  0E81  01AA               	clrf	SPI_Write@data
 11220  0E82  160A  158A  2693  120A  158A  	fcall	_SPI_Write
 11221                           
 11222                           ;menu.c: 279: SPI_Write(2,0);
 11223  0E87  3000               	movlw	0
 11224  0E88  00A9               	movwf	SPI_Write@address+3
 11225  0E89  3000               	movlw	0
 11226  0E8A  00A8               	movwf	SPI_Write@address+2
 11227  0E8B  3000               	movlw	0
 11228  0E8C  00A7               	movwf	SPI_Write@address+1
 11229  0E8D  3002               	movlw	2
 11230  0E8E  00A6               	movwf	SPI_Write@address
 11231  0E8F  01AA               	clrf	SPI_Write@data
 11232  0E90  160A  158A  2693  120A  158A  	fcall	_SPI_Write
 11233                           
 11234                           ;menu.c: 280: SPI_Write(3,0);
 11235  0E95  3000               	movlw	0
 11236  0E96  00A9               	movwf	SPI_Write@address+3
 11237  0E97  3000               	movlw	0
 11238  0E98  00A8               	movwf	SPI_Write@address+2
 11239  0E99  3000               	movlw	0
 11240  0E9A  00A7               	movwf	SPI_Write@address+1
 11241  0E9B  3003               	movlw	3
 11242  0E9C  00A6               	movwf	SPI_Write@address
 11243  0E9D  01AA               	clrf	SPI_Write@data
 11244  0E9E  160A  158A  2693  120A  158A  	fcall	_SPI_Write
 11245                           
 11246                           ;menu.c: 281: SPI_Write(4,0);
 11247  0EA3  3000               	movlw	0
 11248  0EA4  00A9               	movwf	SPI_Write@address+3
 11249  0EA5  3000               	movlw	0
 11250  0EA6  00A8               	movwf	SPI_Write@address+2
 11251  0EA7  3000               	movlw	0
 11252  0EA8  00A7               	movwf	SPI_Write@address+1
 11253  0EA9  3004               	movlw	4
 11254  0EAA  00A6               	movwf	SPI_Write@address
 11255  0EAB  01AA               	clrf	SPI_Write@data
 11256  0EAC  160A  158A  2693  120A  158A  	fcall	_SPI_Write
 11257                           
 11258                           ;menu.c: 282: SPI_Write(5,0);
 11259  0EB1  3000               	movlw	0
 11260  0EB2  00A9               	movwf	SPI_Write@address+3
 11261  0EB3  3000               	movlw	0
 11262  0EB4  00A8               	movwf	SPI_Write@address+2
 11263  0EB5  3000               	movlw	0
 11264  0EB6  00A7               	movwf	SPI_Write@address+1
 11265  0EB7  3005               	movlw	5
 11266  0EB8  00A6               	movwf	SPI_Write@address
 11267  0EB9  01AA               	clrf	SPI_Write@data
 11268  0EBA  160A  158A  2693  120A  158A  	fcall	_SPI_Write
 11269                           
 11270                           ;menu.c: 283: SPI_Write(6,0);
 11271  0EBF  3000               	movlw	0
 11272  0EC0  00A9               	movwf	SPI_Write@address+3
 11273  0EC1  3000               	movlw	0
 11274  0EC2  00A8               	movwf	SPI_Write@address+2
 11275  0EC3  3000               	movlw	0
 11276  0EC4  00A7               	movwf	SPI_Write@address+1
 11277  0EC5  3006               	movlw	6
 11278  0EC6  00A6               	movwf	SPI_Write@address
 11279  0EC7  01AA               	clrf	SPI_Write@data
 11280  0EC8  160A  158A  2693  120A  158A  	fcall	_SPI_Write
 11281                           
 11282                           ;menu.c: 285: _MenuNav = 420;
 11283  0ECD  30A4               	movlw	164
 11284  0ECE                     L23:
 11285  0ECE  00FB               	movwf	__MenuNav
 11286  0ECF  3001               	movlw	1
 11287  0ED0                     L22:
 11288  0ED0  00FC               	movwf	__MenuNav+1
 11289                           
 11290                           ;menu.c: 286: break;
 11291  0ED1  2FD4               	goto	l4844
 11292  0ED2                     l4836:
 11293                           
 11294                           ;menu.c: 288: sprintf(str, "Òâí:%3d Òíàð:%3d", temperatureAI1, temperatureAI2);
 11295  0ED2  3099               	movlw	low (STR_62| (0+32768))
 11296  0ED3  1283               	bcf	3,5	;RP0=0, select bank0
 11297  0ED4  1303               	bcf	3,6	;RP1=0, select bank0
 11298  0ED5  00AE               	movwf	sprintf@f
 11299  0ED6  3090               	movlw	high (STR_62| (0+32768))
 11300  0ED7  00AF               	movwf	sprintf@f+1
 11301  0ED8  1683               	bsf	3,5	;RP0=1, select bank1
 11302  0ED9  0839               	movf	_temperatureAI1^(0+128),w
 11303  0EDA  1283               	bcf	3,5	;RP0=0, select bank0
 11304  0EDB  00B0               	movwf	?_sprintf+2
 11305  0EDC  01B1               	clrf	?_sprintf+3
 11306  0EDD  1BB0               	btfsc	?_sprintf+2,7
 11307  0EDE  03B1               	decf	?_sprintf+3,f
 11308  0EDF  1683               	bsf	3,5	;RP0=1, select bank1
 11309  0EE0  0838               	movf	_temperatureAI2^(0+128),w
 11310  0EE1  1283               	bcf	3,5	;RP0=0, select bank0
 11311  0EE2  00B2               	movwf	?_sprintf+4
 11312  0EE3  01B3               	clrf	?_sprintf+5
 11313  0EE4  1BB2               	btfsc	?_sprintf+4,7
 11314  0EE5  03B3               	decf	?_sprintf+5,f
 11315  0EE6  30C2               	movlw	(low (_str| (0+256)))& (0+255)
 11316  0EE7  120A  118A  224B  120A  158A  	fcall	_sprintf
 11317                           
 11318                           ;menu.c: 291: sprintf(str2, "%3s%4s%5s%4u", "ÄÓ:", LCD_StringOnOff(_tempPinDO,3),"ÍÀÃÐ:"
      +                          ,LCD_StringOnOff(_tempPinDO,4));
 11319  0EEC  303C               	movlw	low (STR_63| (0+32768))
 11320  0EED  00AE               	movwf	sprintf@f
 11321  0EEE  3091               	movlw	high (STR_63| (0+32768))
 11322  0EEF  00AF               	movwf	sprintf@f+1
 11323  0EF0  30E5               	movlw	low (STR_64| (0+32768))
 11324  0EF1  00B0               	movwf	low ((?_sprintf| 0+2))
 11325  0EF2  3091               	movlw	high (STR_64| (0+32768))
 11326  0EF3  00B1               	movwf	(low ((?_sprintf| 0+2))+1)
 11327  0EF4  3003               	movlw	3
 11328  0EF5  00CA               	movwf	??_fMenuStrip
 11329  0EF6  084A               	movf	??_fMenuStrip,w
 11330  0EF7  00A0               	movwf	LCD_StringOnOff@numb
 11331  0EF8  1683               	bsf	3,5	;RP0=1, select bank1
 11332  0EF9  0843               	movf	__tempPinDO^(0+128),w
 11333  0EFA  160A  158A  2430  120A  158A  	fcall	_LCD_StringOnOff
 11334  0EFF  0820               	movf	?_LCD_StringOnOff,w
 11335  0F00  00B2               	movwf	low ((?_sprintf| 0+4))
 11336  0F01  0821               	movf	?_LCD_StringOnOff+1,w
 11337  0F02  00B3               	movwf	(low ((?_sprintf| 0+4))+1)
 11338  0F03  30C7               	movlw	low (STR_65| (0+32768))
 11339  0F04  00B4               	movwf	low ((?_sprintf| 0+6))
 11340  0F05  3091               	movlw	high (STR_65| (0+32768))
 11341  0F06  00B5               	movwf	(low ((?_sprintf| 0+6))+1)
 11342  0F07  3004               	movlw	4
 11343  0F08  00CB               	movwf	??_fMenuStrip+1
 11344  0F09  084B               	movf	??_fMenuStrip+1,w
 11345  0F0A  00A0               	movwf	LCD_StringOnOff@numb
 11346  0F0B  1683               	bsf	3,5	;RP0=1, select bank1
 11347  0F0C  0843               	movf	__tempPinDO^(0+128),w
 11348  0F0D  160A  158A  2430  120A  158A  	fcall	_LCD_StringOnOff
 11349  0F12  0820               	movf	?_LCD_StringOnOff,w
 11350  0F13  00B6               	movwf	low ((?_sprintf| 0+8))
 11351  0F14  0821               	movf	?_LCD_StringOnOff+1,w
 11352  0F15  00B7               	movwf	(low ((?_sprintf| 0+8))+1)
 11353  0F16  30B2               	movlw	(low (_str2| (0+256)))& (0+255)
 11354  0F17  120A  118A  224B  120A  158A  	fcall	_sprintf
 11355                           
 11356                           ;menu.c: 295: flClearLCD = 1;
 11357  0F1C  14FA               	bsf	_flClearLCD/(0+8),_flClearLCD& (0+7)
 11358                           
 11359                           ;menu.c: 296: break;
 11360  0F1D  2FD4               	goto	l4844
 11361  0F1E                     l4842:
 11362                           
 11363                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 9 sub-sw
      +                          itches
 11364                           ; Switch size 1, requested type "simple"
 11365                           ; Number of cases is 9, Range of values is 0 to 16
 11366                           ; switch strategies available:
 11367                           ; Name         Instructions Cycles
 11368                           ; simple_byte           28    15 (average)
 11369                           ; direct_byte           59     8 (fixed)
 11370                           ; jumptable            260     6 (fixed)
 11371                           ;	Chosen strategy is simple_byte
 11372  0F1E  087C               	movf	__MenuNav+1,w
 11373  0F1F  3A00               	xorlw	0	; case 0
 11374  0F20  1903               	skipnz
 11375  0F21  2F3B               	goto	l5450
 11376  0F22  3A01               	xorlw	1	; case 1
 11377  0F23  1903               	skipnz
 11378  0F24  2F85               	goto	l5452
 11379  0F25  3A06               	xorlw	6	; case 7
 11380  0F26  1903               	skipnz
 11381  0F27  2F99               	goto	l5454
 11382  0F28  3A0F               	xorlw	15	; case 8
 11383  0F29  1903               	skipnz
 11384  0F2A  2FA1               	goto	l5456
 11385  0F2B  3A01               	xorlw	1	; case 9
 11386  0F2C  1903               	skipnz
 11387  0F2D  2FAF               	goto	l5458
 11388  0F2E  3A02               	xorlw	2	; case 11
 11389  0F2F  1903               	skipnz
 11390  0F30  2FBA               	goto	l5460
 11391  0F31  3A07               	xorlw	7	; case 12
 11392  0F32  1903               	skipnz
 11393  0F33  2FBF               	goto	l5462
 11394  0F34  3A03               	xorlw	3	; case 15
 11395  0F35  1903               	skipnz
 11396  0F36  2FC7               	goto	l5464
 11397  0F37  3A1F               	xorlw	31	; case 16
 11398  0F38  1903               	skipnz
 11399  0F39  2FCC               	goto	l5466
 11400  0F3A  2ED2               	goto	l4836
 11401  0F3B                     l5450:
 11402                           
 11403                           ; Switch size 1, requested type "simple"
 11404                           ; Number of cases is 24, Range of values is 2 to 251
 11405                           ; switch strategies available:
 11406                           ; Name         Instructions Cycles
 11407                           ; simple_byte           73    37 (average)
 11408                           ; jumptable            263     9 (fixed)
 11409                           ;	Chosen strategy is simple_byte
 11410  0F3B  087B               	movf	__MenuNav,w
 11411  0F3C  3A02               	xorlw	2	; case 2
 11412  0F3D  1903               	skipnz
 11413  0F3E  2A81               	goto	l4692
 11414  0F3F  3A01               	xorlw	1	; case 3
 11415  0F40  1903               	skipnz
 11416  0F41  2C32               	goto	l4780
 11417  0F42  3A07               	xorlw	7	; case 4
 11418  0F43  1903               	skipnz
 11419  0F44  2D37               	goto	l4798
 11420  0F45  3A10               	xorlw	16	; case 20
 11421  0F46  1903               	skipnz
 11422  0F47  2A92               	goto	l4694
 11423  0F48  3A01               	xorlw	1	; case 21
 11424  0F49  1903               	skipnz
 11425  0F4A  2AF2               	goto	l4720
 11426  0F4B  3A03               	xorlw	3	; case 22
 11427  0F4C  1903               	skipnz
 11428  0F4D  2B1A               	goto	l4726
 11429  0F4E  3A01               	xorlw	1	; case 23
 11430  0F4F  1903               	skipnz
 11431  0F50  2B87               	goto	l4752
 11432  0F51  3A0F               	xorlw	15	; case 24
 11433  0F52  1903               	skipnz
 11434  0F53  2BAD               	goto	l4756
 11435  0F54  3A01               	xorlw	1	; case 25
 11436  0F55  1903               	skipnz
 11437  0F56  2BD3               	goto	l4760
 11438  0F57  3A07               	xorlw	7	; case 30
 11439  0F58  1903               	skipnz
 11440  0F59  2C43               	goto	l4782
 11441  0F5A  3A01               	xorlw	1	; case 31
 11442  0F5B  1903               	skipnz
 11443  0F5C  2C7B               	goto	l4786
 11444  0F5D  3A3F               	xorlw	63	; case 32
 11445  0F5E  1903               	skipnz
 11446  0F5F  2CE1               	goto	l4792
 11447  0F60  3A08               	xorlw	8	; case 40
 11448  0F61  1903               	skipnz
 11449  0F62  2D48               	goto	l4800
 11450  0F63  3A01               	xorlw	1	; case 41
 11451  0F64  1903               	skipnz
 11452  0F65  2E00               	goto	l4812
 11453  0F66  3A03               	xorlw	3	; case 42
 11454  0F67  1903               	skipnz
 11455  0F68  2E3A               	goto	l4824
 11456  0F69  3AE2               	xorlw	226	; case 200
 11457  0F6A  1903               	skipnz
 11458  0F6B  2AA3               	goto	l4696
 11459  0F6C  3A01               	xorlw	1	; case 201
 11460  0F6D  1903               	skipnz
 11461  0F6E  2ACA               	goto	l4710
 11462  0F6F  3A1B               	xorlw	27	; case 210
 11463  0F70  1903               	skipnz
 11464  0F71  2B03               	goto	l4722
 11465  0F72  3A0E               	xorlw	14	; case 220
 11466  0F73  1903               	skipnz
 11467  0F74  2B2B               	goto	l4728
 11468  0F75  3A01               	xorlw	1	; case 221
 11469  0F76  1903               	skipnz
 11470  0F77  2B5F               	goto	l4742
 11471  0F78  3A3B               	xorlw	59	; case 230
 11472  0F79  1903               	skipnz
 11473  0F7A  2B98               	goto	l4754
 11474  0F7B  3A16               	xorlw	22	; case 240
 11475  0F7C  1903               	skipnz
 11476  0F7D  2BBE               	goto	l4758
 11477  0F7E  3A0A               	xorlw	10	; case 250
 11478  0F7F  1903               	skipnz
 11479  0F80  2BE4               	goto	l4762
 11480  0F81  3A01               	xorlw	1	; case 251
 11481  0F82  1903               	skipnz
 11482  0F83  2C08               	goto	l4770
 11483  0F84  2ED2               	goto	l4836
 11484  0F85                     l5452:
 11485                           
 11486                           ; Switch size 1, requested type "simple"
 11487                           ; Number of cases is 6, Range of values is 44 to 164
 11488                           ; switch strategies available:
 11489                           ; Name         Instructions Cycles
 11490                           ; simple_byte           19    10 (average)
 11491                           ; jumptable            263     9 (fixed)
 11492                           ;	Chosen strategy is simple_byte
 11493  0F85  087B               	movf	__MenuNav,w
 11494  0F86  3A2C               	xorlw	44	; case 44
 11495  0F87  1903               	skipnz
 11496  0F88  2C54               	goto	l4784
 11497  0F89  3A1A               	xorlw	26	; case 54
 11498  0F8A  1903               	skipnz
 11499  0F8B  2C8C               	goto	l4788
 11500  0F8C  3A76               	xorlw	118	; case 64
 11501  0F8D  1903               	skipnz
 11502  0F8E  2CF2               	goto	l4794
 11503  0F8F  3AD0               	xorlw	208	; case 144
 11504  0F90  1903               	skipnz
 11505  0F91  2D59               	goto	l4802
 11506  0F92  3A0A               	xorlw	10	; case 154
 11507  0F93  1903               	skipnz
 11508  0F94  2E11               	goto	l4814
 11509  0F95  3A3E               	xorlw	62	; case 164
 11510  0F96  1903               	skipnz
 11511  0F97  2E4B               	goto	l4826
 11512  0F98  2ED2               	goto	l4836
 11513  0F99                     l5454:
 11514                           
 11515                           ; Switch size 1, requested type "simple"
 11516                           ; Number of cases is 2, Range of values is 208 to 218
 11517                           ; switch strategies available:
 11518                           ; Name         Instructions Cycles
 11519                           ; simple_byte            7     4 (average)
 11520                           ; direct_byte           44    11 (fixed)
 11521                           ; jumptable            263     9 (fixed)
 11522                           ;	Chosen strategy is simple_byte
 11523  0F99  087B               	movf	__MenuNav,w
 11524  0F9A  3AD0               	xorlw	208	; case 208
 11525  0F9B  1903               	skipnz
 11526  0F9C  2AC2               	goto	l4702
 11527  0F9D  3A0A               	xorlw	10	; case 218
 11528  0F9E  1903               	skipnz
 11529  0F9F  2AE9               	goto	l4716
 11530  0FA0  2ED2               	goto	l4836
 11531  0FA1                     l5456:
 11532                           
 11533                           ; Switch size 1, requested type "simple"
 11534                           ; Number of cases is 4, Range of values is 52 to 252
 11535                           ; switch strategies available:
 11536                           ; Name         Instructions Cycles
 11537                           ; simple_byte           13     7 (average)
 11538                           ; jumptable            263     9 (fixed)
 11539                           ;	Chosen strategy is simple_byte
 11540  0FA1  087B               	movf	__MenuNav,w
 11541  0FA2  3A34               	xorlw	52	; case 52
 11542  0FA3  1903               	skipnz
 11543  0FA4  2B18               	goto	l4724
 11544  0FA5  3AAC               	xorlw	172	; case 152
 11545  0FA6  1903               	skipnz
 11546  0FA7  2B4A               	goto	l4734
 11547  0FA8  3A3A               	xorlw	58	; case 162
 11548  0FA9  1903               	skipnz
 11549  0FAA  2B7E               	goto	l4748
 11550  0FAB  3A5E               	xorlw	94	; case 252
 11551  0FAC  1903               	skipnz
 11552  0FAD  2FD4               	goto	l4844
 11553  0FAE  2ED2               	goto	l4836
 11554  0FAF                     l5458:
 11555                           
 11556                           ; Switch size 1, requested type "simple"
 11557                           ; Number of cases is 3, Range of values is 96 to 206
 11558                           ; switch strategies available:
 11559                           ; Name         Instructions Cycles
 11560                           ; simple_byte           10     6 (average)
 11561                           ; jumptable            263     9 (fixed)
 11562                           ;	Chosen strategy is simple_byte
 11563  0FAF  087B               	movf	__MenuNav,w
 11564  0FB0  3A60               	xorlw	96	; case 96
 11565  0FB1  1903               	skipnz
 11566  0FB2  2FD4               	goto	l4844
 11567  0FB3  3AA4               	xorlw	164	; case 196
 11568  0FB4  1903               	skipnz
 11569  0FB5  2C03               	goto	l669
 11570  0FB6  3A0A               	xorlw	10	; case 206
 11571  0FB7  1903               	skipnz
 11572  0FB8  2C27               	goto	l4776
 11573  0FB9  2ED2               	goto	l4836
 11574  0FBA                     l5460:
 11575                           
 11576                           ; Switch size 1, requested type "simple"
 11577                           ; Number of cases is 1, Range of values is 184 to 184
 11578                           ; switch strategies available:
 11579                           ; Name         Instructions Cycles
 11580                           ; simple_byte            4     3 (average)
 11581                           ; direct_byte           14    11 (fixed)
 11582                           ; jumptable            263     9 (fixed)
 11583                           ;	Chosen strategy is simple_byte
 11584  0FBA  087B               	movf	__MenuNav,w
 11585  0FBB  3AB8               	xorlw	184	; case 184
 11586  0FBC  1903               	skipnz
 11587  0FBD  2FD4               	goto	l4844
 11588  0FBE  2ED2               	goto	l4836
 11589  0FBF                     l5462:
 11590                           
 11591                           ; Switch size 1, requested type "simple"
 11592                           ; Number of cases is 2, Range of values is 28 to 128
 11593                           ; switch strategies available:
 11594                           ; Name         Instructions Cycles
 11595                           ; simple_byte            7     4 (average)
 11596                           ; jumptable            263     9 (fixed)
 11597                           ;	Chosen strategy is simple_byte
 11598  0FBF  087B               	movf	__MenuNav,w
 11599  0FC0  3A1C               	xorlw	28	; case 28
 11600  0FC1  1903               	skipnz
 11601  0FC2  2CCD               	goto	l4790
 11602  0FC3  3A9C               	xorlw	156	; case 128
 11603  0FC4  1903               	skipnz
 11604  0FC5  2CCD               	goto	l4790
 11605  0FC6  2ED2               	goto	l4836
 11606  0FC7                     l5464:
 11607                           
 11608                           ; Switch size 1, requested type "simple"
 11609                           ; Number of cases is 1, Range of values is 160 to 160
 11610                           ; switch strategies available:
 11611                           ; Name         Instructions Cycles
 11612                           ; simple_byte            4     3 (average)
 11613                           ; direct_byte           14    11 (fixed)
 11614                           ; jumptable            263     9 (fixed)
 11615                           ;	Chosen strategy is simple_byte
 11616  0FC7  087B               	movf	__MenuNav,w
 11617  0FC8  3AA0               	xorlw	160	; case 160
 11618  0FC9  1903               	skipnz
 11619  0FCA  2D76               	goto	l687
 11620  0FCB  2ED2               	goto	l4836
 11621  0FCC                     l5466:
 11622                           
 11623                           ; Switch size 1, requested type "simple"
 11624                           ; Number of cases is 2, Range of values is 4 to 104
 11625                           ; switch strategies available:
 11626                           ; Name         Instructions Cycles
 11627                           ; simple_byte            7     4 (average)
 11628                           ; jumptable            263     9 (fixed)
 11629                           ;	Chosen strategy is simple_byte
 11630  0FCC  087B               	movf	__MenuNav,w
 11631  0FCD  3A04               	xorlw	4	; case 4
 11632  0FCE  1903               	skipnz
 11633  0FCF  2E2E               	goto	l691
 11634  0FD0  3A6C               	xorlw	108	; case 104
 11635  0FD1  1903               	skipnz
 11636  0FD2  2E68               	goto	l695
 11637  0FD3  2ED2               	goto	l4836
 11638  0FD4                     l4844:
 11639                           
 11640                           ;menu.c: 303: LCD_SetPos(0,0);
 11641  0FD4  1283               	bcf	3,5	;RP0=0, select bank0
 11642  0FD5  1303               	bcf	3,6	;RP1=0, select bank0
 11643  0FD6  01AC               	clrf	LCD_SetPos@y
 11644  0FD7  3000               	movlw	0
 11645  0FD8  160A  158A  2449  120A  158A  	fcall	_LCD_SetPos
 11646                           
 11647                           ;menu.c: 304: LCD_string((char*)str);
 11648  0FDD  30C2               	movlw	(low (_str| (0+256)))& (0+255)
 11649  0FDE  1283               	bcf	3,5	;RP0=0, select bank0
 11650  0FDF  1303               	bcf	3,6	;RP1=0, select bank0
 11651  0FE0  00AE               	movwf	LCD_string@st
 11652  0FE1  3001               	movlw	1
 11653  0FE2  00AF               	movwf	LCD_string@st+1
 11654  0FE3  160A  158A  27B1  120A  158A  	fcall	_LCD_string
 11655                           
 11656                           ;menu.c: 305: LCD_SetPos(0,1);
 11657  0FE8  01AC               	clrf	LCD_SetPos@y
 11658  0FE9  0AAC               	incf	LCD_SetPos@y,f
 11659  0FEA  3000               	movlw	0
 11660  0FEB  160A  158A  2449  120A  158A  	fcall	_LCD_SetPos
 11661                           
 11662                           ;menu.c: 306: LCD_string((char*)str2);
 11663  0FF0  30B2               	movlw	(low (_str2| (0+256)))& (0+255)
 11664  0FF1  1283               	bcf	3,5	;RP0=0, select bank0
 11665  0FF2  1303               	bcf	3,6	;RP1=0, select bank0
 11666  0FF3  00AE               	movwf	LCD_string@st
 11667  0FF4  3001               	movlw	1
 11668  0FF5  00AF               	movwf	LCD_string@st+1
 11669  0FF6  160A  158A  27B1  120A  158A  	fcall	_LCD_string
 11670                           
 11671                           ;menu.c: 309: fEraseString(str2);
 11672  0FFB  30B2               	movlw	(low (_str2| (0+256)))& (0+255)
 11673  0FFC  160A  158A  23AA   	fcall	_fEraseString
 11674  0FFF  0008               	return
 11675  1000                     __end_of_fMenuStrip:

Data Sizes:
    Strings     380
    Constant    101
    Data        36
    BSS         73
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     10      14
    BANK0            80     80      80
    BANK1            80     35      76
    BANK3            96      0      66
    BANK2            96      0       0

Pointer List with Targets:

    strcat@from	PTR const unsigned char  size(2) Largest target is 8192
		 -> ROM(CODE[8192]), 

    strcat@to	PTR unsigned char  size(1) Largest target is 16
		 -> str2(BANK3[16]), 

    strcat@cp	PTR unsigned char  size(1) Largest target is 16
		 -> str2(BANK3[16]), 

    frexp@eptr	PTR int  size(1) Largest target is 2
		 -> log@exponent(BANK1[2]), 

    eval_poly@d	PTR const  size(2) Largest target is 27
		 -> log@coeff(CODE[27]), 

    sprintf@cp	PTR const unsigned char  size(2) Largest target is 17
		 -> STR_66(CODE[7]), ?_sprintf(BANK0[2]), STR_65(CODE[6]), STR_64(CODE[4]), 
		 -> STR_61(CODE[3]), STR_59(CODE[17]), STR_57(CODE[3]), STR_55(CODE[17]), 
		 -> STR_53(CODE[3]), STR_51(CODE[16]), STR_49(CODE[7]), STR_47(CODE[10]), 
		 -> STR_45(CODE[12]), STR_43(CODE[9]), STR_41(CODE[11]), STR_39(CODE[5]), 
		 -> STR_38(CODE[5]), STR_36(CODE[13]), STR_34(CODE[10]), STR_32(CODE[4]), 
		 -> STR_30(CODE[3]), STR_28(CODE[16]), STR_25(CODE[16]), STR_22(CODE[15]), 
		 -> STR_20(CODE[4]), STR_18(CODE[3]), STR_16(CODE[15]), STR_13(CODE[14]), 
		 -> STR_11(CODE[11]), STR_9(CODE[8]), STR_7(CODE[13]), STR_5(CODE[10]), 
		 -> STR_3(CODE[5]), STR_2(CODE[4]), 

    sprintf@f	PTR const unsigned char  size(2) Largest target is 17
		 -> STR_63(CODE[13]), STR_62(CODE[17]), STR_60(CODE[5]), STR_58(CODE[5]), 
		 -> STR_56(CODE[5]), STR_54(CODE[5]), STR_52(CODE[3]), STR_50(CODE[5]), 
		 -> STR_48(CODE[5]), STR_46(CODE[13]), STR_44(CODE[5]), STR_42(CODE[13]), 
		 -> STR_40(CODE[5]), STR_37(CODE[15]), STR_35(CODE[5]), STR_33(CODE[5]), 
		 -> STR_31(CODE[3]), STR_29(CODE[3]), STR_27(CODE[5]), STR_26(CODE[9]), 
		 -> STR_24(CODE[5]), STR_23(CODE[9]), STR_21(CODE[5]), STR_19(CODE[3]), 
		 -> STR_17(CODE[3]), STR_15(CODE[5]), STR_14(CODE[9]), STR_12(CODE[5]), 
		 -> STR_10(CODE[3]), STR_8(CODE[3]), STR_6(CODE[5]), STR_4(CODE[5]), 

    sprintf@sp	PTR unsigned char  size(1) Largest target is 16
		 -> str2(BANK3[16]), str(BANK3[16]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    sp__strcat	PTR unsigned char  size(1) Largest target is 16
		 -> str2(BANK3[16]), 

    sp__LCD_StringOnOff	PTR unsigned char  size(2) Largest target is 5
		 -> STR_3(CODE[5]), STR_2(CODE[4]), 

    LCD_string@st	PTR unsigned char  size(2) Largest target is 16
		 -> str2(BANK3[16]), str(BANK3[16]), STR_1(CODE[13]), 

    fEraseString@string	PTR unsigned char  size(1) Largest target is 16
		 -> str2(BANK3[16]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _linkup in COMMON

    _linkup->i1___lwmod

Critical Paths under _main in BANK0

    _rTemperature->___awtoft
    _rThermistor->___fttol
    ___lbtoft->___ftpack
    ___fttol->___ftdiv
    ___ftdiv->_eval_poly
    _log->___awtoft
    _eval_poly->___ftadd
    ___ftmul->___ftpack
    ___ftmul->___ftpack
    ___ftadd->___ftmul
    ___awtoft->_rThermistor
    _fMenuStrip->_sprintf
    _sprintf->___lwmod
    ___lwmod->___lwdiv
    ___bmul->___awdiv
    ___awmod->___awdiv
    _SPI_Write->_SPI_notRDY
    _LCD_string->_LCD_SetPos
    _LCD_SetPos->_sendbyte
    _SPI_Read->_SPI_notRDY
    _SPI_notRDY->_SPI_ReadStatus
    _SPI_ReadStatus->_SPI_ReadByte
    _SPI_ReadByte->_SPI_WriteByte
    _LCD_init->_LCD_clear
    _LCD_clear->_sendbyte
    _sendbyte->_sendhalfbyte
    _sendhalfbyte->_fShiftData

Critical Paths under _linkup in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_rTemperature
    _rTemperature->_log
    _rThermistor->___fttol
    _log->___awtoft
    ___awtoft->_rThermistor

Critical Paths under _linkup in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _linkup in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _linkup in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 5     5      0   60646
                                             30 BANK1      5     5      0
                         _LCD_SetPos
                           _LCD_init
                         _LCD_string
                           _SPI_Read
                          _SPI_Write
                           _SPI_init
                               _fACP
                         _fMenuStrip
                         _fShiftData
                               _init
                       _rTemperature
 ---------------------------------------------------------------------------------
 (1) _rTemperature                                        10    10      0   36750
                                             20 BANK1     10    10      0
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                            ___fttol
                                _log
                        _rThermistor
 ---------------------------------------------------------------------------------
 (2) _rThermistor                                          6     4      2   11463
                                             76 BANK0      2     0      2
                                              6 BANK1      4     4      0
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___fttol
                           ___lbtoft
 ---------------------------------------------------------------------------------
 (3) ___lbtoft                                             8     5      3    2008
                                              8 BANK0      8     5      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) ___fttol                                             14    10      4     358
                                             68 BANK0      8     4      4
                                              0 BANK1      6     6      0
                             ___bmul (ARG)
                            ___ftadd (ARG)
                            ___ftdiv (ARG)
                             ___ftge (ARG)
                            ___ftmul (ARG)
                           ___ftpack (ARG)
                          _eval_poly (ARG)
                              _frexp (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftdiv                                             16    10      6    2692
                                             52 BANK0     16    10      6
                             ___bmul (ARG)
                            ___ftadd (ARG)
                             ___ftge (ARG)
                            ___ftmul (ARG)
                           ___ftpack
                           ___ftpack (ARG)
                           ___lbtoft (ARG)
                          _eval_poly (ARG)
                              _frexp (ARG)
 ---------------------------------------------------------------------------------
 (2) _log                                                  6     3      3   16399
                                             14 BANK1      6     3      3
                           ___awtoft
                            ___ftadd
                            ___ftdiv (ARG)
                             ___ftge
                            ___ftmul
                            ___fttol (ARG)
                          _eval_poly
                              _frexp
                        _rThermistor (ARG)
 ---------------------------------------------------------------------------------
 (3) _frexp                                                6     2      4     330
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (3) _eval_poly                                           15     8      7    6946
                                             37 BANK0     15     8      7
                             ___bmul
                            ___ftadd
                            ___ftmul
 ---------------------------------------------------------------------------------
 (3) ___ftmul                                             16    10      6    2818
                                              8 BANK0     16    10      6
                           ___ftpack
                           ___ftpack (ARG)
                              _frexp (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftadd                                             13     7      6    3542
                                             24 BANK0     13     7      6
                             ___bmul (ARG)
                            ___ftmul (ARG)
                           ___ftpack
                           ___ftpack (ARG)
                           ___lbtoft (ARG)
                              _frexp (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftge                                               6     0      6     322
                                              0 BANK0      6     0      6
 ---------------------------------------------------------------------------------
 (3) ___awtoft                                             6     3      3    2183
                                             78 BANK0      2     2      0
                                             10 BANK1      4     1      3
                            ___ftadd (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                           ___ftpack
                            ___fttol (ARG)
                        _rThermistor (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftpack                                             8     3      5    1986
                                              0 BANK0      8     3      5
 ---------------------------------------------------------------------------------
 (1) _init                                                 2     2      0       0
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _fMenuStrip                                           8     8      0   15913
                                             42 BANK0      8     8      0
                         _LCD_SetPos
                    _LCD_StringOnOff
                          _LCD_clear
                         _LCD_string
                          _SPI_Write
                            ___awdiv
                            ___awmod
                             ___bmul
                             ___wmul
                       _fEraseString
                            _sprintf
                             _strcat
 ---------------------------------------------------------------------------------
 (2) _strcat                                               5     3      2     818
                                              0 BANK0      5     3      2
 ---------------------------------------------------------------------------------
 (2) _sprintf                                             32    20     12    5550
                                             14 BANK0     28    16     12
                    _LCD_StringOnOff (ARG)
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
 ---------------------------------------------------------------------------------
 (3) _isdigit                                              2     2      0      68
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4    1210
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (3) ___lwmod                                              6     2      4     373
                                              8 BANK0      6     2      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              8     4      4     268
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (2) _fEraseString                                         1     1      0      49
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (4) ___bmul                                               4     3      1     249
                                              9 BANK0      4     3      1
                            ___awdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___awmod                                              7     3      4     482
                                              9 BANK0      7     3      4
                            ___awdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              9     5      4    1334
                                              0 BANK0      9     5      4
 ---------------------------------------------------------------------------------
 (2) _SPI_Write                                            7     2      5    1920
                                              6 BANK0      7     2      5
                      _SPI_WriteByte
                         _SPI_notRDY
 ---------------------------------------------------------------------------------
 (2) _LCD_string                                           5     3      2    2245
                                             14 BANK0      5     3      2
                         _LCD_SetPos
                           _sendbyte
 ---------------------------------------------------------------------------------
 (3) _LCD_SetPos                                           2     1      1    1112
                                             12 BANK0      2     1      1
                           _sendbyte
 ---------------------------------------------------------------------------------
 (2) _LCD_StringOnOff                                      3     2      1     150
                                              0 BANK0      3     2      1
 ---------------------------------------------------------------------------------
 (1) _fACP                                                 2     2      0       0
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _SPI_init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _SPI_Read                                             8     4      4     746
                                              6 BANK0      8     4      4
                       _SPI_ReadByte
                      _SPI_WriteByte
                         _SPI_notRDY
 ---------------------------------------------------------------------------------
 (3) _SPI_notRDY                                           2     2      0     112
                                              4 BANK0      2     2      0
                     _SPI_ReadStatus
 ---------------------------------------------------------------------------------
 (4) _SPI_ReadStatus                                       2     2      0      89
                                              2 BANK0      2     2      0
                       _SPI_ReadByte
                      _SPI_WriteByte
 ---------------------------------------------------------------------------------
 (5) _SPI_ReadByte                                         1     1      0      44
                                              1 BANK0      1     1      0
                      _SPI_WriteByte
 ---------------------------------------------------------------------------------
 (5) _SPI_WriteByte                                        1     1      0      22
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _LCD_init                                             2     2      0    1797
                                             14 BANK0      2     2      0
                          _LCD_clear
                           _sendbyte
                       _sendhalfbyte
 ---------------------------------------------------------------------------------
 (2) _LCD_clear                                            2     2      0     794
                                             12 BANK0      2     2      0
                           _sendbyte
 ---------------------------------------------------------------------------------
 (3) _sendbyte                                             4     3      1     794
                                              8 BANK0      4     3      1
                       _sendhalfbyte
 ---------------------------------------------------------------------------------
 (4) _sendhalfbyte                                         2     2      0     209
                                              6 BANK0      2     2      0
                         _fShiftData
 ---------------------------------------------------------------------------------
 (1) _fShiftData                                           6     6      0      95
                                              0 BANK0      6     6      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _linkup                                               4     4      0     263
                                              6 COMMON     4     4      0
            _fInterruptRecieveDevice
                          i1___lwmod
 ---------------------------------------------------------------------------------
 (8) i1___lwmod                                            6     2      4     263
                                              0 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (8) _fInterruptRecieveDevice                              2     2      0       0
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _LCD_SetPos
     _sendbyte
       _sendhalfbyte
         _fShiftData
   _LCD_init
     _LCD_clear
       _sendbyte
     _sendbyte
     _sendhalfbyte
   _LCD_string
     _LCD_SetPos
     _sendbyte
   _SPI_Read
     _SPI_ReadByte
       _SPI_WriteByte
     _SPI_WriteByte
     _SPI_notRDY
       _SPI_ReadStatus
         _SPI_ReadByte
         _SPI_WriteByte
   _SPI_Write
     _SPI_WriteByte
     _SPI_notRDY
   _SPI_init
   _fACP
   _fMenuStrip
     _LCD_SetPos
     _LCD_StringOnOff
     _LCD_clear
     _LCD_string
     _SPI_Write
     ___awdiv
     ___awmod
       ___awdiv (ARG)
     ___bmul
       ___awdiv (ARG)
     ___wmul
     _fEraseString
     _sprintf
       _LCD_StringOnOff (ARG)
       ___lwdiv (ARG)
       ___lwmod (ARG)
         ___lwdiv (ARG)
       ___wmul (ARG)
       _isdigit (ARG)
     _strcat
   _fShiftData
   _init
   _rTemperature
     ___awtoft
       ___ftadd (ARG)
         ___bmul (ARG)
         ___ftmul (ARG)
           ___ftpack
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
         _frexp (ARG)
       ___ftdiv (ARG)
         ___bmul (ARG)
         ___ftadd (ARG)
         ___ftge (ARG)
         ___ftmul (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___lbtoft (ARG)
         _eval_poly (ARG)
           ___bmul
           ___ftadd
           ___ftmul
         _frexp (ARG)
       ___ftmul (ARG)
       ___ftpack (ARG)
       ___fttol (ARG)
         ___bmul (ARG)
         ___ftadd (ARG)
         ___ftdiv (ARG)
         ___ftge (ARG)
         ___ftmul (ARG)
         ___ftpack (ARG)
         _eval_poly (ARG)
         _frexp (ARG)
       _rThermistor (ARG)
         ___ftadd
         ___ftdiv
         ___ftmul
         ___fttol
         ___lbtoft
     ___ftadd
     ___ftdiv
     ___fttol
     _log
       ___awtoft
       ___ftadd
       ___ftdiv (ARG)
       ___ftge (ARG)
       ___ftmul (ARG)
       ___fttol (ARG)
       _eval_poly (ARG)
       _frexp (ARG)
       _rThermistor (ARG)
     _rThermistor

 _linkup (ROOT)
   _fInterruptRecieveDevice
   i1___lwmod

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK3               60      0      42      10       68.8%
BITBANK3            60      0       0       9        0.0%
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               60      0       0      12        0.0%
BITBANK2            60      0       0      11        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50     23      4C       8       95.0%
BITBANK1            50      0       1       7        1.2%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50     50      50       5      100.0%
BITBANK0            50      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      A       E       1      100.0%
BITCOMMON            E      0       1       0        7.1%
CODE                 0      0       0       0        0.0%
DATA                 0      0      EC       6        0.0%
ABS                  0      0      EC       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%


Microchip Technology PIC Macro Assembler V2.32 build 20210201212658 
Symbol Table                                                                                   Tue Dec 07 19:23:04 2021

               ??_LCD_StringOnOff 0021                                 pc 0002                    ___bmul@product 002B  
                     ?_LCD_SetPos 002C                       _SSPSTATbits 0094                      ___awdiv@sign 0026  
                    ?_rThermistor 006C                                fsr 0004               ___wmul@multiplicand 0022  
                      _SPI_notRDY 1BC8                      ___ftadd@exp1 0044                      ___ftadd@exp2 0043  
                    ___ftadd@sign 0042                     ?_rTemperature 0070                               l200 0209  
                 SPI_Read@address 0026                               l210 023F                               l212 023A  
                             l205 0229                               l209 022E                               l170 1FA8  
                             l164 1F74                               l181 0163                               l190 01BF  
                             l167 1F8E                               l194 01DA                               l189 01D4  
                             l374 1C62                               l714 1EEF                               l716 1EF3  
                             l717 1EF4                               l830 03C1                               l751 1BB3  
                             l823 0343                               l808 0366                               l691 0E2E  
                             l845 1CA6                               l669 0C03                               l695 0E68  
                             l687 0D76                               _RB3 0033                               _RB4 0034  
                             _RB5 0035                               _RB6 0036                               _log 0668  
                             fsr0 0004                               _str 01C2                               indf 0000  
                    ___awmod@sign 002F                       ?_LCD_string 002E                      ___ftdiv@cntr 005E  
                    ___ftdiv@sign 0063                              l1064 1318                              l1065 1320  
                            l1057 1303                              l1148 152A                              l1088 0609  
                            l4010 03DE                              l4100 1237                              l4102 1245  
                            l4030 0406                              l4022 0402                              l4006 03D6  
                            l4112 1266                              l4016 03F3                              l4008 03DA  
                            l4032 0250                              l4034 0449                              l4042 1CED  
                            l4116 126E                              l4108 125B                              l4140 1F2E  
                            l4132 1F28                              l4044 1CF7                              l3420 12D5  
                            l4060 068C                              l5100 01B3                              l4142 1F3C  
                            l4150 1F55                              l3502 05A0                              l4128 1F21  
                            l4048 1D01                              l3424 12DC                              l3520 05CF  
                            l4090 122F                              l4154 1F5D                              l4146 1F4A  
                            l3426 12E8                              l3522 05DB                              l3514 05BA  
                            l3602 07D2                              l4066 069D                              l5042 007B  
                            l5050 00AF                              l3460 1C8F                              l3620 1C5A  
                            l4084 1224                              l3436 1316                              l3428 12ED  
                            l3532 05F9                              l3524 05E0                              l3700 15CF  
                            l5140 021D                              l5124 01EC                              l3614 1C4B  
                            l3438 1308                              l3542 062D                              l3534 0605  
                            l3526 05E4                              l5134 01F7                              l5118 01E0  
                            l3616 1C52                              l3712 1D23                              l3552 0650  
                            l5160 0235                              l3394 1DB8                              l3474 1BF6  
                            l3810 1D87                              l3642 1C9E                              l4610 09C0  
                            l3538 061B                              l3562 0761                              l3730 14D9  
                            l4514 1754                              l5066 0171                              l3396 1DBF  
                            l3636 080D                              l4604 0896                              l4532 0458  
                            l4436 141D                              l3716 1D32                              l3492 058A  
                            l5148 021F                              l3398 1DC1                              l3478 1BFC  
                            l3814 1D95                              l4710 0ACA                              l4702 0AC2  
                            l4614 08A2                              l4550 0505                              l3662 1CC7  
                            l3590 07AA                              l3830 1E65                              l3734 14E3  
                            l3808 1D79                              l3920 0276                              l4800 0D48  
                            l4720 0AF2                              l4632 0905                              l4624 08C4  
                            l4544 04D2                              l4536 048B                              l4552 0509  
                            l3496 0591                              l3568 0777                              l3672 1571  
                            l3752 1514                              l5096 01AB                              l3818 1DA0  
                            l5450 0F3B                              l4802 0D59                              l4722 0B03  
                            l4650 094C                              l4642 0930                              l4634 090C  
                            l4538 049F                              l3586 079A                              l3762 153D  
                            l3754 1526                              l4492 1DF8                              l3908 1C44  
                            l5460 0FBA                              l5452 0F85                              l4812 0E00  
                            l4740 0B5C                              l4724 0B18                              l4716 0AE9  
                            l4494 1DFA                              l3942 02DD                              l3934 02C8  
                            l3926 028B                              l5462 0FBF                              l5454 0F99  
                            l4814 0E11                              l4742 0B5F                              l4734 0B4A  
                            l4726 0B1A                              l4646 093E                              l4574 080F  
                            l4566 0527                              l4558 050F                              l3598 07C2  
                            l3694 15B0                              l3678 1587                              l3766 154B  
                            l4488 1DDD                              l3872 1E93                              l3792 1E43  
                            l3784 1E1F                              l3960 031D                              l3952 0304  
                            l5464 0FC7                              l5456 0FA1                              l4824 0E3A  
                            l4760 0BD3                              l4752 0B87                              l4728 0B2B  
                            l4656 0986                              l4592 084D                              l4576 0815  
                            l4680 09C2                              l3848 14C2                              l3866 1FF7  
                            l3858 1FCF                              l3882 1EB7                              l3786 1E2D  
                            l3946 02DF                              l3970 0345                              l5466 0FCC  
                            l5458 0FAF                              l4826 0E4B                              l4770 0C08  
                            l4762 0BE4                              l4754 0B98                              l4738 0B54  
                            l4842 0F1E                              l4666 0992                              l4586 083C  
                            l3868 1FB2                              l3884 1EB9                              l3796 1E4E  
                            l3948 02F5                              l4836 0ED2                              l4780 0C32  
                            l4756 0BAD                              l4748 0B7E                              l4844 0FD4  
                            l4692 0A81                              l4684 0A3D                              ?_log 00D6  
                            l3982 0380                              l3966 0336                              l3958 0306  
                            l4790 0CCD                              l4782 0C43                              l4758 0BBE  
                            l4694 0A92                              l4598 085E                              l3992 038E  
                            l4792 0CE1                              l4784 0C54                              l4776 0C27  
                            l4696 0AA3                              l4688 0A79                              l3986 038C  
                            l4794 0CF2                              l4786 0C7B                              l4788 0C8C  
                            l3998 03B3                              l4798 0D37                              STR_1 1149  
                            STR_2 11E9                              STR_3 11DC                              STR_4 11D7  
                            STR_5 1178                              STR_6 11D7                              STR_7 1122  
                            STR_8 11F0                              STR_9 11B1                              u4005 1515  
                            u3215 1EE1                              u4105 1E3A                              u3235 1EF9  
                            u4115 1E44                              u3315 12E1                              u4035 1530  
                            u3335 12FC                              u4145 1D7C                              u5105 0489  
                            u5043 1DF6                              u4075 1E22                              u5115 04A8  
                            u3355 130F                              u4253 1EB5                              u4165 1D8D  
                            u5205 0546                              u5125 04D0                              u4095 1E2E  
                            u4175 1D96                              u4335 02FB                              u5215 081E  
                            u5135 04DB                              u3535 05BB                              u4264 1C38  
                            u4265 1C36                              u4425 03C8                              u5305 089F  
                            u5225 0829                              u5145 0503                              u3625 05FA  
                            u3395 1327                              u6035 00E6                              u3565 05D0  
                            u3725 07AB                              u6045 0117                              u5335 08B3  
                            u5175 051D                              u5095 0461                              u3735 07B3  
                            u6055 0148                              u5600 0D01                              u4385 03A9  
                            u5505 0A46                              u5345 08BE                              u5185 0530  
                            u3905 15C2                              u5610 0D02                              u4555 123A  
                            u3835 1CA7                              u5435 097E                              u5355 08CD  
                            u5195 053B                              u3595 05E5                              u3915 15D0  
                            u5620 0D0E                              u3845 1CAE                              u5445 098F  
                            u5365 08D8                              u6165 01C9                              u5630 0D0F  
                            u4575 1246                              u4655 1F31                              u5375 08F8  
                            u5295 086C                              u3775 07D3                              u5640 0D1B  
                            u4585 1252                              u5385 0915                              u3785 07DB  
                            u6265 0203                              u6417 016B                              u5650 0D1C  
                            u6507 137D                              u4595 125C                              u4675 1F42  
                            u5475 09A0                              u5395 0920                              u6427 1438  
                            u5660 0D28                              u6517 1390                              u6437 1F6D  
                            u4685 1F4B                              u5485 09AB                              u6285 0215  
                            u5670 0D29                              u6527 13B1                              u6447 1F87  
                            u5495 09CB                              u3895 15B1                              u3975 14EB  
                            u6537 1C14                              u6457 1FA1                              u6547 1DD9  
                            u6467 133F                              u6477 134F                              u6487 135E  
                            u6497 136D                              _TMR0 0001                              _TMR2 0011  
                            _cACP 00C7                              _fACP 1F62                              _main 0042  
                    ___ftpack@arg 0020                              _init 13B6                      ___ftpack@exp 0023  
                            _str2 01B2                              btemp 007E                              log@x 00D6  
                            start 000E            __end_of_SPI_ReadStatus 1BE2                __size_of_LCD_clear 0015  
                   _SPI_WriteByte 1BB0                 ___bmul@multiplier 002C                      ___ftmul@cntr 0036  
                    ___ftmul@sign 0037                      ___fttol@exp1 00CD                             ??_log 00D9  
                    ___fttol@lval 00C9                       LCD_SetPos@x 002D                       LCD_SetPos@y 002C  
                           ?_fACP 0070                  __end_of_LCD_init 13B6                    ??_rTemperature 0070  
                           ?_main 0070                             ?_init 0070                   __end_of___awdiv 1273  
                           _ADRES 001E                   __end_of___ftadd 0668                             STR_10 11F0  
                           STR_11 116D                             STR_12 11D7                             STR_20 11E1  
                           STR_21 11D7                             STR_13 1107                             STR_30 11ED  
                           STR_14 1196                             STR_22 10DA                             STR_31 11F0  
                           STR_15 11D7                             STR_23 119F                             STR_32 11E1  
                           STR_40 11D7                             STR_24 11D7                             STR_16 10E9  
                           STR_17 11F0                             STR_33 11D7                             STR_41 1162  
                           STR_25 10AA                             STR_26 119F                             STR_50 11D7  
                           STR_18 11ED                             STR_34 1182                             STR_42 112F  
                           STR_19 11F0                             STR_35 11D7                             STR_27 11D7  
                           STR_43 11A8                             STR_51 10CA                             STR_52 11F0  
                           STR_60 11D7                             STR_44 11D7                             STR_36 1115  
                           STR_28 10BA                   __end_of___awmod 1F62                             STR_61 11ED  
                           STR_53 11ED                             STR_29 11F0                             STR_45 1156  
                           STR_37 10F8                             STR_46 112F                             STR_54 11D7  
                           STR_38 11CD                             STR_62 1099                             STR_39 11D2  
                           STR_47 118C                             STR_63 113C                             STR_55 1077  
                           STR_56 11D7                             STR_48 11D7                             STR_64 11E5  
                           STR_57 11ED                             STR_65 11C7                             STR_49 11C0  
                           STR_58 11D7                             STR_66 11B9                             STR_59 1088  
                 __end_of___ftdiv 15F3                   __end_of___ftmul 07FE                   ___awdiv@divisor 0020  
                 __end_of___fttol 155B                   __end_of___lwdiv 1E53                             i1l161 1745  
                           i1l146 16CC                   __end_of___lwmod 1DA5                             i1l460 1608  
                           i1l462 1622                             i1l463 161F                             i1l466 162F  
                           i1l476 167D                             i1l468 1670                             i1l469 1661  
                 ___awdiv@counter 0025                             _TMR1H 000F                             _TMR1L 000E  
                           _SPBRG 0099                             _PORTA 0005                             _PORTB 0006  
                           _PORTC 0007                             _cTMR0 00C1                             _flDO1 03D5  
              i1___lwmod@dividend 0072                __settingTimeImpDO1 00B4                     ___awtoft@sign 00D5  
                           __hour 0758                   __end_of_dpowers 105C                  SPI_ReadByte@data 0021  
                           _frexp 1E53                             _errno 00A8                    _SPI_Write$1324 002B  
                 __end_of_isdigit 080F                     ___ftpack@sign 0024                  __end_of_SPI_Read 1E17  
                  __pbitbssCOMMON 03D0                             pclath 000A                  __end_of_SPI_init 1C30  
             __size_of_LCD_SetPos 001A                __settingTimerOnDO2 00B2                             status 0003  
                           wtemp0 007E                   __end_of_sprintf 044E                      rThermistor@A 00CE  
              __size_of_SPI_Write 0041                __size_ofi1___lwmod 0032                   ?_SPI_ReadStatus 0070  
                    SPI_Read@data 002D                    ?_SPI_WriteByte 0070                      __end_of_fACP 1FB1  
                 __initialization 0011                       log@exponent 00DA               __size_of_LCD_string 004F  
                    __end_of_main 024B                     __cellTwoDigit 00BB                      __end_of_init 143E  
              fShiftData@shiftVar 0022                            ??_fACP 0020                       ?_SPI_notRDY 0070  
                    __flashSecond 0759                            ??_main 00E6                     ___fttol@sign1 00C8  
                          ??_init 0020                 __end_of_LCD_clear 1C1A                       LCD_string@i 0032  
                          ?_frexp 0020                  SPI_Write@address 0026                  ___awdiv@dividend 0022  
                __end_of___awtoft 1CE8                  __end_of___ftpack 1339                  __end_of___lbtoft 1C7E  
                          i1l5002 1726                            i1l4220 1650                            i1l5020 1743  
                          i1l5014 173D                            i1l5008 1730                            i1l4226 165D  
                          i1l4192 161B                            i1l4266 1695                            i1l4910 1D47  
                          i1l4912 1D55                            i1l4920 1D6E                            i1l4916 1D63  
                          i1l4932 16A8                            __100ms 075C                            i1l4952 16BD  
                          i1l4956 16C3                            i1l4984 1708                            i1l4986 170A  
                          i1l4996 171C                            __250ms 075B                            __500ms 075A  
                          u572_25 1D4A                            u574_25 1D5B                            u575_25 1D64  
                          u655_27 1699                            _SHRIFT 1012               LCD_StringOnOff@numb 0020  
                          _SSPBUF 0013                            _Analog 00A4                            ___bmul 1BF3  
                          ___ftge 1D14                            ___wmul 1C9C                         ??___awdiv 0024  
                       ??___ftadd 003E                         ??___awmod 002D                         ??___ftdiv 005A  
                          _arrCmd 00A0                         ??___ftmul 002E                         ??___fttol 0068  
                       ??___lwdiv 0024                         ??___lwmod 002C                      __countSecond 00B6  
                          _linkup 169F                  ___awdiv@quotient 0027                   ___awmod@divisor 0029  
                 ___awmod@counter 002E                            _strcat 1CE8              __size_of_rThermistor 005A  
           ___ftmul@f3_as_product 0033                 __end_of_SPI_Write 1ED4                  __end_of_sendbyte 1C9C  
                    __pdataCOMMON 007B                 __end_ofi1___lwmod 1D73                         ??_isdigit 0020  
                          saved_w 007E               __settingTimerOffDO2 00B0                         ??_sprintf 003A  
                      _fMenuStrip 044E                   _LCD_StringOnOff 1C30                  __end_oflog@coeff 1077  
         __end_of__initialization 003E                        ___ftadd@f1 0038                        ___ftadd@f2 003B  
                 ??_SPI_WriteByte 0020              __end_of_rTemperature 1800                        ___ftge@ff1 0020  
                      ___ftge@ff2 0023               __size_of_SPI_notRDY 0009                         ?_LCD_init 0070  
                    eval_poly@res 0051                        ___ftdiv@f1 0057                        ___ftdiv@f2 0054  
                      ___ftdiv@f3 005F                        _fShiftData 1ED4                        ___awtoft@c 00D2  
                      ___lbtoft@c 002F               ___bmul@multiplicand 0029                        ___ftmul@f1 0028  
                      ___ftmul@f2 002B                        ___fttol@f1 0064                    __pcstackCOMMON 0070  
                    __pidataBANK3 11F8                      ??_LCD_SetPos 002D                     __end_of_frexp 1E93  
                       ?_SPI_Read 0026          ?_fInterruptRecieveDevice 0070                         ?_SPI_init 0070  
                      _flClearLCD 03D1              rTemperature@analogAI 00E5                    _OPTION_REGbits 0081  
               LCD_StringOnOff@st 0022                      ??_LCD_string 0030                        __firstCell 00BD  
                         ??_frexp 0024                      sprintf@width 0046                        __pbssBANK1 00A0  
                      __pbssBANK3 01B2                        _flModeStep 007D                __size_of_eval_poly 008B  
                LCD_string@symbol 0031                __end_of_LCD_SetPos 1C63                        ??_LCD_init 002E  
                    LCD_string@st 002E                        __pmaintext 0042                           ?___bmul 0029  
                         ?___ftge 0020                        __tempDigit 00AA                        __tempPinDO 00C3  
                         ?___wmul 0020                __end_of_LCD_string 2000                        __pintentry 0004  
                         ?_linkup 0070                         ?___awtoft 00D2                         ?___ftpack 0020  
                       ?___lbtoft 0028                        ??_SPI_Read 002A                           ?_strcat 0020  
                      ??_SPI_init 0020                     ?_sendhalfbyte 0070                           _GO_DONE 00FA  
         __end_of_LCD_StringOnOff 1C49                       ?_fMenuStrip 0070                        __stringtab 1000  
                ??_SPI_ReadStatus 0022                       ?_fShiftData 0070                     SPI_Write@data 002A  
                       ?_sendbyte 0028   __end_of_fInterruptRecieveDevice 169F                   __size_of___bmul 0012  
                 __size_of___ftge 002D                           ___awdiv 121A                           ___ftadd 0563  
                         ___awmod 1F17                           ___ftdiv 155B                   __size_of___wmul 0021  
                         ___ftmul 074B                           ___fttol 14C9                 SPI_WriteByte@data 0020  
                    __settingsBit 00C4                           ___lwdiv 1E17                           ___lwmod 1D73  
                SPI_notRDY@notRDY 0025                           _carrCmd 00BF                     ?_fEraseString 0070  
                      ??___awtoft 006E                        ??___ftpack 0025                        ??___lbtoft 002B  
               __end_of_eval_poly 14C9                           __minute 03D6                      ??_SPI_notRDY 0024  
                         __second 03D7                   __size_of_linkup 00AF                           __ptext1 174E  
                         __ptext2 1273                           __ptext3 1C63                           __ptext4 14C9  
                         __ptext5 155B                           __ptext6 0668                    ??_sendhalfbyte 0026  
                         __ptext7 1E53                           __ptext8 143E                           __ptext9 074B  
                     __SubMenuArr 0190                   __size_of_strcat 002C                         _T1CONbits 0010  
                         _counter 00C6                           _dpowers 1052                         _T2CONbits 0012  
                    __size_of_log 00E3                           _isdigit 0801                  ___awmod@dividend 002B  
               __countTMR2trigger 00C5                           _sprintf 024B             __size_of_rTemperature 00B2  
                         clrloop0 1BB8                         _LCD_clear 1C05              end_of_initialization 003E  
              __end_of_SPI_notRDY 1BD1                        ??_sendbyte 0029                         _RCSTAbits 0018  
                         psplit$0 210041                    _flSwitchButton 03D0  
                    __pstringtext 1000                    ??_fEraseString 0020               __size_of_fMenuStrip 0BB2  
         fShiftData@shiftVariable 0023                         _PORTAbits 0005                         _PORTBbits 0006  
                    _rTemperature 174E               __size_of_fShiftData 0043                         _TRISAbits 0085  
                       _TRISBbits 0086                  ?_LCD_StringOnOff 0020                         _TRISCbits 0087  
                       _SPI_Write 1E93                         i1___lwmod 1D41                        ?_LCD_clear 0070  
                     ___ftdiv@exp 0062                         _TXSTAbits 0098                    __end_of_SHRIFT 1052  
                   ?_SPI_ReadByte 0070                 __size_of_LCD_init 007D                       ___ftmul@exp 0032  
                  __end_of___bmul 1C05                    __end_of___ftge 1D41                     ??_rThermistor 006E  
                  __end_of___wmul 1CBD               rThermistor@analogAI 00D1                     __pidataCOMMON 07FE  
               i1___lwmod@divisor 0070                     __pbitbssBANK1 0758                 i1___lwmod@counter 0075  
                  __end_of_linkup 174E                 __size_of_SPI_Read 003A                    __end_of_strcat 1D14  
             start_initialization 0011                 __size_of_SPI_init 0016                        eval_poly@d 0048  
                      eval_poly@n 004A                        eval_poly@x 0045                     sendhalfbyte@c 0027  
                     __end_of_log 074B                        ?_SPI_Write 0026                        ?i1___lwmod 0070  
__size_of_fInterruptRecieveDevice 00AC                        frexp@value 0020              __end_of_sendhalfbyte 1DDD  
                  ??_SPI_ReadByte 0021             __end_of_SPI_WriteByte 1BB7                          ??___bmul 002A  
                        ??___ftge 0026                          ??___wmul 0024                        init_fetch0 1BE2  
                     fShiftData@i 0025                       __pdataBANK3 0190                  _flStopBitRecieve 03D3  
                        ??_linkup 0076                          ??_strcat 0022                 __size_of___awtoft 002B  
               __size_of___ftpack 006C                fEraseString@string 0020                 __size_of___lbtoft 001B  
                     _flMenuStrip 00BE                         _cQuantity 00C0                       __pbssCOMMON 007D  
             __end_of_rThermistor 12CD                         ___latbits 0002                     __pcstackBANK0 0020  
                   __pcstackBANK1 00C8                      _isdigit$1582 0020                      ??_fMenuStrip 004A  
                     ??_LCD_clear 002C                    _temperatureAI1 00B9                    _temperatureAI2 00B8  
            __end_of_fEraseString 1BB0                 _rTemperature$1806 00DC                 _rTemperature$1807 00DF  
               _rTemperature$1808 00E2                       sprintf@flag 0040                       sprintf@prec 003D  
                     __secondCell 00BC                      ??_fShiftData 0020                  ___lwdiv@dividend 0022  
                       __timerDO1 00AE                         __timerDO2 00AC                          ?___awdiv 0020  
                        ?___ftadd 0038                          ?___awmod 0029                 __size_of_sendbyte 001E  
                        ?___ftdiv 0054                          ?___ftmul 0028                          ?___fttol 0064  
                        ?___lwdiv 0020                          ?___lwmod 0028                __end_of_fMenuStrip 1000  
                        ?_isdigit 0070                         _eval_poly 143E              SPI_ReadStatus@status 0023  
                      sendbyte@hb 002A                __end_of_fShiftData 1F17                       ??_SPI_Write 002B  
                ___lwdiv@quotient 0025                       ??i1___lwmod 0074                        pnum$text15 0021  
                        ?_sprintf 002E                    __size_of_frexp 0040                 interrupt_function 0004  
                  ___wmul@product 0024                          _LCD_init 1339                         clear_ram0 1BB7  
                        _PIE1bits 008C                          _PIE2bits 008D                          _PIR1bits 000C  
                   __tempTwoDigit 00BA                       _rThermistor 1273                         main@SPI_i 00EA  
                        _SPI_Read 1DDD                        _ADCON0bits 001F                       __stringbase 1012  
                      _ADCON1bits 009F                 ___wmul@multiplier 0020                          _SPI_init 1C1A  
                      ?_eval_poly 0045              __end_of_SPI_ReadByte 1BC8           _fInterruptRecieveDevice 15F3  
           __size_of_sendhalfbyte 0038                         frexp@eptr 0023                          __MenuArr 01A8  
                        __MenuNav 007B           __size_of_SPI_ReadStatus 0011                      sendbyte@mode 0028  
                __size_of___awdiv 0059                  __size_of___ftadd 0105                  __size_of___awmod 004B  
                __size_of___ftdiv 0098                  __size_of___ftmul 00B3                  __size_of___fttol 0092  
                __size_of___lwdiv 003C                  __size_of___lwmod 0032                          ___awtoft 1CBD  
                        ___ftpack 12CD                          ___lbtoft 1C63                __end_of__stringtab 1012  
                    _sendhalfbyte 1DA5                        sprintf@len 0042                        sprintf@val 0044  
                      strcat@from 0020                  __size_of_isdigit 000E                          _flUpdate 03D2  
           __size_of_fEraseString 0006                   ___lwdiv@divisor 0020                   ___lwdiv@counter 0027  
                        __ptext10 0563                          __ptext11 1D14                          __ptext20 1D73  
                        __ptext12 1CBD                          __ptext21 1E17                          __ptext13 12CD  
                        __ptext30 1F62                          __ptext22 1BAA                          __ptext14 13B6  
                        __ptext31 1C1A                          __ptext23 1BF3                          __ptext15 044E  
                        __ptext40 1DA5                          __ptext32 1DDD                          __ptext24 1F17  
                        __ptext16 1CE8                          __ptext41 1ED4                          __ptext33 1BC8  
                        __ptext25 121A                          __ptext17 024B                          __ptext42 169F  
                        __ptext34 1BD1                          __ptext26 1E93                          __ptext18 0801  
                        __ptext43 1D41                          __ptext35 1BBF                          __ptext27 1FB1  
                        __ptext19 1C9C                          __ptext44 15F3                          __ptext36 1BB0  
                        __ptext28 1C49                          __ptext37 1339                          __ptext29 1C30  
                        __ptext38 1C05                          __ptext39 1C7E                  __size_of_sprintf 0203  
                   __size_of_fACP 004F                         sendbyte@c 002B          __size_of_LCD_StringOnOff 0019  
                   __size_of_main 0209                     __size_of_init 0088                          _sendbyte 1C7E  
               _flStartBitRecieve 03D4                        _LCD_SetPos 1C49                      _fEraseString 1BAA  
              pnum$text15_split_1 0041                          log@coeff 105C                        _INTCONbits 000B  
                     ??_eval_poly 004C         ??_fInterruptRecieveDevice 0070                        _LCD_string 1FB1  
                        init_ram0 1BE6                          isdigit@c 0021                          intlevel1 0000  
                       sprintf@ap 0041                         sprintf@cp 003E                         sprintf@sp 0049  
                ___lwmod@dividend 002A                         stringcode 100A             __size_of_SPI_ReadByte 0009  
                        sprintf@c 0048                          sprintf@f 002E                          strcat@cp 0023  
                        strcat@to 0024                   ___lwmod@divisor 0028                   ___lwmod@counter 002D  
                        stringtab 1000            __size_of_SPI_WriteByte 0007                        _TMR0_Value 00C2  
                   _SPI_Read$1327 002B                        _SSPCONbits 0014                      _SPI_ReadByte 1BBF  
                  _SPI_ReadStatus 1BD1  

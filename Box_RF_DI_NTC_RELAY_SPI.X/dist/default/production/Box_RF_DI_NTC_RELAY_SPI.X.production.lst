

Microchip MPLAB XC8 Assembler V2.32 build 20210201212658 
                                                                                               Thu Dec 09 22:15:26 2021

Microchip MPLAB XC8 C Compiler v2.32 (Free license) build 20210201212658 Og9 
     1                           	processor	16F76
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	idataCOMMON,global,class=CODE,delta=2,noexec
     5                           	psect	idataBANK3,global,class=CODE,delta=2,noexec
     6                           	psect	stringtext,global,reloc=256,class=STRCODE,delta=2,noexec
     7                           	psect	cinit,global,class=CODE,merge=1,delta=2
     8                           	psect	bitbssCOMMON,global,bit,class=COMMON,space=1,delta=1,noexec
     9                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1,noexec
    10                           	psect	dataCOMMON,global,class=COMMON,space=1,delta=1,noexec
    11                           	psect	bitbssBANK1,global,bit,class=BANK1,space=1,delta=1,noexec
    12                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,noexec
    13                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1,noexec
    14                           	psect	dataBANK3,global,class=BANK3,space=1,delta=1,noexec
    15                           	psect	inittext,global,class=CODE,delta=2
    16                           	psect	clrtext,global,class=CODE,delta=2
    17                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
    18                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
    19                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    20                           	psect	maintext,global,class=CODE,split=1,delta=2
    21                           	psect	text1,local,class=CODE,merge=1,delta=2
    22                           	psect	text2,local,class=CODE,merge=1,delta=2
    23                           	psect	text3,local,class=CODE,merge=1,delta=2,group=2
    24                           	psect	text4,local,class=CODE,merge=1,delta=2,group=2
    25                           	psect	text5,local,class=CODE,merge=1,delta=2,group=2
    26                           	psect	text6,local,class=CODE,merge=1,delta=2,group=3
    27                           	psect	text7,local,class=CODE,merge=1,delta=2,group=3
    28                           	psect	text8,local,class=CODE,merge=1,delta=2,group=3
    29                           	psect	text9,local,class=CODE,merge=1,delta=2,group=2
    30                           	psect	text10,local,class=CODE,merge=1,delta=2,group=2
    31                           	psect	text11,local,class=CODE,merge=1,delta=2,group=2
    32                           	psect	text12,local,class=CODE,merge=1,delta=2,group=2
    33                           	psect	text13,local,class=CODE,merge=1,delta=2,group=2
    34                           	psect	text14,local,class=CODE,merge=1,delta=2
    35                           	psect	text15,local,class=CODE,merge=1,delta=2
    36                           	psect	text16,local,class=CODE,merge=1,delta=2,group=3
    37                           	psect	text17,local,class=CODE,merge=1,delta=2,group=1
    38                           	psect	text18,local,class=CODE,merge=1,delta=2,group=3
    39                           	psect	text19,local,class=CODE,merge=1,delta=2,group=2
    40                           	psect	text20,local,class=CODE,merge=1,delta=2,group=2
    41                           	psect	text21,local,class=CODE,merge=1,delta=2,group=2
    42                           	psect	text22,local,class=CODE,merge=1,delta=2
    43                           	psect	text23,local,class=CODE,merge=1,delta=2,group=2
    44                           	psect	text24,local,class=CODE,merge=1,delta=2,group=2
    45                           	psect	text25,local,class=CODE,merge=1,delta=2,group=2
    46                           	psect	text26,local,class=CODE,merge=1,delta=2
    47                           	psect	text27,local,class=CODE,merge=1,delta=2
    48                           	psect	text28,local,class=CODE,merge=1,delta=2
    49                           	psect	text29,local,class=CODE,merge=1,delta=2
    50                           	psect	text30,local,class=CODE,merge=1,delta=2
    51                           	psect	text31,local,class=CODE,merge=1,delta=2
    52                           	psect	text32,local,class=CODE,merge=1,delta=2
    53                           	psect	text33,local,class=CODE,merge=1,delta=2
    54                           	psect	text34,local,class=CODE,merge=1,delta=2
    55                           	psect	text35,local,class=CODE,merge=1,delta=2
    56                           	psect	text36,local,class=CODE,merge=1,delta=2
    57                           	psect	text37,local,class=CODE,merge=1,delta=2
    58                           	psect	text38,local,class=CODE,merge=1,delta=2
    59                           	psect	text39,local,class=CODE,merge=1,delta=2
    60                           	psect	text40,local,class=CODE,merge=1,delta=2
    61                           	psect	text41,local,class=CODE,merge=1,delta=2
    62                           	psect	text42,local,class=CODE,merge=1,delta=2
    63                           	psect	intentry,global,class=CODE,delta=2
    64                           	psect	text43,local,class=CODE,merge=1,delta=2
    65                           	psect	text44,local,class=CODE,merge=1,delta=2
    66                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    67                           	psect	text15_split_1,local,class=CODE,merge=1,delta=2
    68                           	dabs	1,0x7E,2
    69  0000                     
    70                           ; Version 2.20
    71                           ; Generated 12/02/2020 GMT
    72                           ; 
    73                           ; Copyright Â© 2020, Microchip Technology Inc. and its subsidiaries ("Microchip")
    74                           ; All rights reserved.
    75                           ; 
    76                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    77                           ; 
    78                           ; Redistribution and use in source and binary forms, with or without modification, are
    79                           ; permitted provided that the following conditions are met:
    80                           ; 
    81                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    82                           ;        conditions and the following disclaimer.
    83                           ; 
    84                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    85                           ;        of conditions and the following disclaimer in the documentation and/or other
    86                           ;        materials provided with the distribution.
    87                           ; 
    88                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    89                           ;        software without specific prior written permission.
    90                           ; 
    91                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    92                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    93                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    94                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    95                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    96                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    97                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    98                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    99                           ; 
   100                           ; 
   101                           ; Code-generator required, PIC16F76 Definitions
   102                           ; 
   103                           ; SFR Addresses
   104  0000                     	;# 
   105  0001                     	;# 
   106  0002                     	;# 
   107  0003                     	;# 
   108  0004                     	;# 
   109  0005                     	;# 
   110  0006                     	;# 
   111  0007                     	;# 
   112  000A                     	;# 
   113  000B                     	;# 
   114  000C                     	;# 
   115  000D                     	;# 
   116  000E                     	;# 
   117  000E                     	;# 
   118  000F                     	;# 
   119  0010                     	;# 
   120  0011                     	;# 
   121  0012                     	;# 
   122  0013                     	;# 
   123  0014                     	;# 
   124  0015                     	;# 
   125  0015                     	;# 
   126  0016                     	;# 
   127  0017                     	;# 
   128  0018                     	;# 
   129  0019                     	;# 
   130  001A                     	;# 
   131  001B                     	;# 
   132  001B                     	;# 
   133  001C                     	;# 
   134  001D                     	;# 
   135  001E                     	;# 
   136  001F                     	;# 
   137  0081                     	;# 
   138  0085                     	;# 
   139  0086                     	;# 
   140  0087                     	;# 
   141  008C                     	;# 
   142  008D                     	;# 
   143  008E                     	;# 
   144  0092                     	;# 
   145  0093                     	;# 
   146  0094                     	;# 
   147  0098                     	;# 
   148  0099                     	;# 
   149  009F                     	;# 
   150  010C                     	;# 
   151  010D                     	;# 
   152  010E                     	;# 
   153  010F                     	;# 
   154  018C                     	;# 
   155  0000                     	;# 
   156  0001                     	;# 
   157  0002                     	;# 
   158  0003                     	;# 
   159  0004                     	;# 
   160  0005                     	;# 
   161  0006                     	;# 
   162  0007                     	;# 
   163  000A                     	;# 
   164  000B                     	;# 
   165  000C                     	;# 
   166  000D                     	;# 
   167  000E                     	;# 
   168  000E                     	;# 
   169  000F                     	;# 
   170  0010                     	;# 
   171  0011                     	;# 
   172  0012                     	;# 
   173  0013                     	;# 
   174  0014                     	;# 
   175  0015                     	;# 
   176  0015                     	;# 
   177  0016                     	;# 
   178  0017                     	;# 
   179  0018                     	;# 
   180  0019                     	;# 
   181  001A                     	;# 
   182  001B                     	;# 
   183  001B                     	;# 
   184  001C                     	;# 
   185  001D                     	;# 
   186  001E                     	;# 
   187  001F                     	;# 
   188  0081                     	;# 
   189  0085                     	;# 
   190  0086                     	;# 
   191  0087                     	;# 
   192  008C                     	;# 
   193  008D                     	;# 
   194  008E                     	;# 
   195  0092                     	;# 
   196  0093                     	;# 
   197  0094                     	;# 
   198  0098                     	;# 
   199  0099                     	;# 
   200  009F                     	;# 
   201  010C                     	;# 
   202  010D                     	;# 
   203  010E                     	;# 
   204  010F                     	;# 
   205  018C                     	;# 
   206  0000                     	;# 
   207  0001                     	;# 
   208  0002                     	;# 
   209  0003                     	;# 
   210  0004                     	;# 
   211  0005                     	;# 
   212  0006                     	;# 
   213  0007                     	;# 
   214  000A                     	;# 
   215  000B                     	;# 
   216  000C                     	;# 
   217  000D                     	;# 
   218  000E                     	;# 
   219  000E                     	;# 
   220  000F                     	;# 
   221  0010                     	;# 
   222  0011                     	;# 
   223  0012                     	;# 
   224  0013                     	;# 
   225  0014                     	;# 
   226  0015                     	;# 
   227  0015                     	;# 
   228  0016                     	;# 
   229  0017                     	;# 
   230  0018                     	;# 
   231  0019                     	;# 
   232  001A                     	;# 
   233  001B                     	;# 
   234  001B                     	;# 
   235  001C                     	;# 
   236  001D                     	;# 
   237  001E                     	;# 
   238  001F                     	;# 
   239  0081                     	;# 
   240  0085                     	;# 
   241  0086                     	;# 
   242  0087                     	;# 
   243  008C                     	;# 
   244  008D                     	;# 
   245  008E                     	;# 
   246  0092                     	;# 
   247  0093                     	;# 
   248  0094                     	;# 
   249  0098                     	;# 
   250  0099                     	;# 
   251  009F                     	;# 
   252  010C                     	;# 
   253  010D                     	;# 
   254  010E                     	;# 
   255  010F                     	;# 
   256  018C                     	;# 
   257  0000                     	;# 
   258  0001                     	;# 
   259  0002                     	;# 
   260  0003                     	;# 
   261  0004                     	;# 
   262  0005                     	;# 
   263  0006                     	;# 
   264  0007                     	;# 
   265  000A                     	;# 
   266  000B                     	;# 
   267  000C                     	;# 
   268  000D                     	;# 
   269  000E                     	;# 
   270  000E                     	;# 
   271  000F                     	;# 
   272  0010                     	;# 
   273  0011                     	;# 
   274  0012                     	;# 
   275  0013                     	;# 
   276  0014                     	;# 
   277  0015                     	;# 
   278  0015                     	;# 
   279  0016                     	;# 
   280  0017                     	;# 
   281  0018                     	;# 
   282  0019                     	;# 
   283  001A                     	;# 
   284  001B                     	;# 
   285  001B                     	;# 
   286  001C                     	;# 
   287  001D                     	;# 
   288  001E                     	;# 
   289  001F                     	;# 
   290  0081                     	;# 
   291  0085                     	;# 
   292  0086                     	;# 
   293  0087                     	;# 
   294  008C                     	;# 
   295  008D                     	;# 
   296  008E                     	;# 
   297  0092                     	;# 
   298  0093                     	;# 
   299  0094                     	;# 
   300  0098                     	;# 
   301  0099                     	;# 
   302  009F                     	;# 
   303  010C                     	;# 
   304  010D                     	;# 
   305  010E                     	;# 
   306  010F                     	;# 
   307  018C                     	;# 
   308  0000                     	;# 
   309  0001                     	;# 
   310  0002                     	;# 
   311  0003                     	;# 
   312  0004                     	;# 
   313  0005                     	;# 
   314  0006                     	;# 
   315  0007                     	;# 
   316  000A                     	;# 
   317  000B                     	;# 
   318  000C                     	;# 
   319  000D                     	;# 
   320  000E                     	;# 
   321  000E                     	;# 
   322  000F                     	;# 
   323  0010                     	;# 
   324  0011                     	;# 
   325  0012                     	;# 
   326  0013                     	;# 
   327  0014                     	;# 
   328  0015                     	;# 
   329  0015                     	;# 
   330  0016                     	;# 
   331  0017                     	;# 
   332  0018                     	;# 
   333  0019                     	;# 
   334  001A                     	;# 
   335  001B                     	;# 
   336  001B                     	;# 
   337  001C                     	;# 
   338  001D                     	;# 
   339  001E                     	;# 
   340  001F                     	;# 
   341  0081                     	;# 
   342  0085                     	;# 
   343  0086                     	;# 
   344  0087                     	;# 
   345  008C                     	;# 
   346  008D                     	;# 
   347  008E                     	;# 
   348  0092                     	;# 
   349  0093                     	;# 
   350  0094                     	;# 
   351  0098                     	;# 
   352  0099                     	;# 
   353  009F                     	;# 
   354  010C                     	;# 
   355  010D                     	;# 
   356  010E                     	;# 
   357  010F                     	;# 
   358  018C                     	;# 
   359  0000                     	;# 
   360  0001                     	;# 
   361  0002                     	;# 
   362  0003                     	;# 
   363  0004                     	;# 
   364  0005                     	;# 
   365  0006                     	;# 
   366  0007                     	;# 
   367  000A                     	;# 
   368  000B                     	;# 
   369  000C                     	;# 
   370  000D                     	;# 
   371  000E                     	;# 
   372  000E                     	;# 
   373  000F                     	;# 
   374  0010                     	;# 
   375  0011                     	;# 
   376  0012                     	;# 
   377  0013                     	;# 
   378  0014                     	;# 
   379  0015                     	;# 
   380  0015                     	;# 
   381  0016                     	;# 
   382  0017                     	;# 
   383  0018                     	;# 
   384  0019                     	;# 
   385  001A                     	;# 
   386  001B                     	;# 
   387  001B                     	;# 
   388  001C                     	;# 
   389  001D                     	;# 
   390  001E                     	;# 
   391  001F                     	;# 
   392  0081                     	;# 
   393  0085                     	;# 
   394  0086                     	;# 
   395  0087                     	;# 
   396  008C                     	;# 
   397  008D                     	;# 
   398  008E                     	;# 
   399  0092                     	;# 
   400  0093                     	;# 
   401  0094                     	;# 
   402  0098                     	;# 
   403  0099                     	;# 
   404  009F                     	;# 
   405  010C                     	;# 
   406  010D                     	;# 
   407  010E                     	;# 
   408  010F                     	;# 
   409  018C                     	;# 
   410  0000                     	;# 
   411  0001                     	;# 
   412  0002                     	;# 
   413  0003                     	;# 
   414  0004                     	;# 
   415  0005                     	;# 
   416  0006                     	;# 
   417  0007                     	;# 
   418  000A                     	;# 
   419  000B                     	;# 
   420  000C                     	;# 
   421  000D                     	;# 
   422  000E                     	;# 
   423  000E                     	;# 
   424  000F                     	;# 
   425  0010                     	;# 
   426  0011                     	;# 
   427  0012                     	;# 
   428  0013                     	;# 
   429  0014                     	;# 
   430  0015                     	;# 
   431  0015                     	;# 
   432  0016                     	;# 
   433  0017                     	;# 
   434  0018                     	;# 
   435  0019                     	;# 
   436  001A                     	;# 
   437  001B                     	;# 
   438  001B                     	;# 
   439  001C                     	;# 
   440  001D                     	;# 
   441  001E                     	;# 
   442  001F                     	;# 
   443  0081                     	;# 
   444  0085                     	;# 
   445  0086                     	;# 
   446  0087                     	;# 
   447  008C                     	;# 
   448  008D                     	;# 
   449  008E                     	;# 
   450  0092                     	;# 
   451  0093                     	;# 
   452  0094                     	;# 
   453  0098                     	;# 
   454  0099                     	;# 
   455  009F                     	;# 
   456  010C                     	;# 
   457  010D                     	;# 
   458  010E                     	;# 
   459  010F                     	;# 
   460  018C                     	;# 
   461  0000                     	;# 
   462  0001                     	;# 
   463  0002                     	;# 
   464  0003                     	;# 
   465  0004                     	;# 
   466  0005                     	;# 
   467  0006                     	;# 
   468  0007                     	;# 
   469  000A                     	;# 
   470  000B                     	;# 
   471  000C                     	;# 
   472  000D                     	;# 
   473  000E                     	;# 
   474  000E                     	;# 
   475  000F                     	;# 
   476  0010                     	;# 
   477  0011                     	;# 
   478  0012                     	;# 
   479  0013                     	;# 
   480  0014                     	;# 
   481  0015                     	;# 
   482  0015                     	;# 
   483  0016                     	;# 
   484  0017                     	;# 
   485  0018                     	;# 
   486  0019                     	;# 
   487  001A                     	;# 
   488  001B                     	;# 
   489  001B                     	;# 
   490  001C                     	;# 
   491  001D                     	;# 
   492  001E                     	;# 
   493  001F                     	;# 
   494  0081                     	;# 
   495  0085                     	;# 
   496  0086                     	;# 
   497  0087                     	;# 
   498  008C                     	;# 
   499  008D                     	;# 
   500  008E                     	;# 
   501  0092                     	;# 
   502  0093                     	;# 
   503  0094                     	;# 
   504  0098                     	;# 
   505  0099                     	;# 
   506  009F                     	;# 
   507  010C                     	;# 
   508  010D                     	;# 
   509  010E                     	;# 
   510  010F                     	;# 
   511  018C                     	;# 
   512                           
   513                           	psect	idataCOMMON
   514  1C1A                     __pidataCOMMON:
   515                           
   516                           ;initializer for __MenuNav
   517  1C1A  3401               	retlw	1
   518  1C1B  3400               	retlw	0
   519                           
   520                           	psect	idataBANK3
   521  1D21                     __pidataBANK3:
   522                           
   523                           ;initializer for __SubMenuArr
   524  1D21  3402               	retlw	2
   525  1D22  3401               	retlw	1
   526  1D23  3402               	retlw	2
   527  1D24  3401               	retlw	1
   528  1D25  3401               	retlw	1
   529  1D26  3402               	retlw	2
   530  1D27  3401               	retlw	1
   531  1D28  3401               	retlw	1
   532  1D29  3401               	retlw	1
   533  1D2A  3400               	retlw	0
   534  1D2B  3400               	retlw	0
   535  1D2C  3400               	retlw	0
   536  1D2D  3401               	retlw	1
   537  1D2E  3401               	retlw	1
   538  1D2F  3401               	retlw	1
   539  1D30  3400               	retlw	0
   540  1D31  3400               	retlw	0
   541  1D32  3400               	retlw	0
   542  1D33  3400               	retlw	0
   543  1D34  3400               	retlw	0
   544  1D35  3400               	retlw	0
   545  1D36  3400               	retlw	0
   546  1D37  3400               	retlw	0
   547  1D38  3400               	retlw	0
   548                           
   549                           ;initializer for __MenuArr
   550  1D39  3404               	retlw	4
   551  1D3A  3406               	retlw	6
   552  1D3B  3403               	retlw	3
   553  1D3C  3403               	retlw	3
   554  1D3D  3400               	retlw	0
   555  1D3E  3400               	retlw	0
   556  1D3F  3400               	retlw	0
   557  1D40  3400               	retlw	0
   558  1D41  3400               	retlw	0
   559  1D42  3400               	retlw	0
   560                           
   561                           	psect	stringtext
   562  1000                     __pstringtext:
   563  1000                     stringtab:
   564  1000                     __stringtab:
   565                           
   566                           ;	String table - string pointers are 2 bytes each
   567  1000  1BFF               	btfsc	btemp+1,7
   568  1001  280A               	ljmp	stringcode
   569  1002  1383               	bcf	3,7
   570  1003  187F               	btfsc	btemp+1,0
   571  1004  1783               	bsf	3,7
   572  1005  0800               	movf	0,w
   573  1006  0A84               	incf	4,f
   574  1007  1903               	skipnz
   575  1008  0AFF               	incf	btemp+1,f
   576  1009  0008               	return
   577  100A                     stringcode:
   578  100A  087F               	movf	btemp+1,w
   579  100B  397F               	andlw	127
   580  100C  008A               	movwf	10
   581  100D  0804               	movf	4,w
   582  100E  0A84               	incf	4,f
   583  100F  1903               	skipnz
   584  1010  0AFF               	incf	btemp+1,f
   585  1011  0082               	movwf	2
   586  1012                     __stringbase:
   587  1012                     __end_of__stringtab:
   588  1012                     _SHRIFT:
   589  1012  3441               	retlw	65
   590  1013  34A0               	retlw	160
   591  1014  3442               	retlw	66
   592  1015  34A1               	retlw	161
   593  1016  34E0               	retlw	224
   594  1017  3445               	retlw	69
   595  1018  34A3               	retlw	163
   596  1019  34A4               	retlw	164
   597  101A  34A5               	retlw	165
   598  101B  34A6               	retlw	166
   599  101C  344B               	retlw	75
   600  101D  34A7               	retlw	167
   601  101E  344D               	retlw	77
   602  101F  3448               	retlw	72
   603  1020  344F               	retlw	79
   604  1021  34A8               	retlw	168
   605  1022  3450               	retlw	80
   606  1023  3443               	retlw	67
   607  1024  3454               	retlw	84
   608  1025  34A9               	retlw	169
   609  1026  34AA               	retlw	170
   610  1027  3458               	retlw	88
   611  1028  34E1               	retlw	225
   612  1029  34AB               	retlw	171
   613  102A  34AC               	retlw	172
   614  102B  34E2               	retlw	226
   615  102C  34AD               	retlw	173
   616  102D  34AE               	retlw	174
   617  102E  3462               	retlw	98
   618  102F  34AF               	retlw	175
   619  1030  34B0               	retlw	176
   620  1031  34B1               	retlw	177
   621  1032  3461               	retlw	97
   622  1033  34B2               	retlw	178
   623  1034  34B3               	retlw	179
   624  1035  34B4               	retlw	180
   625  1036  34E3               	retlw	227
   626  1037  3465               	retlw	101
   627  1038  34B6               	retlw	182
   628  1039  34B7               	retlw	183
   629  103A  34B8               	retlw	184
   630  103B  34B9               	retlw	185
   631  103C  34BA               	retlw	186
   632  103D  34BB               	retlw	187
   633  103E  34BC               	retlw	188
   634  103F  34BD               	retlw	189
   635  1040  346F               	retlw	111
   636  1041  34BE               	retlw	190
   637  1042  3470               	retlw	112
   638  1043  3463               	retlw	99
   639  1044  34BF               	retlw	191
   640  1045  3479               	retlw	121
   641  1046  34E4               	retlw	228
   642  1047  3478               	retlw	120
   643  1048  34E5               	retlw	229
   644  1049  34C0               	retlw	192
   645  104A  34C1               	retlw	193
   646  104B  34E6               	retlw	230
   647  104C  34C2               	retlw	194
   648  104D  34C3               	retlw	195
   649  104E  34C4               	retlw	196
   650  104F  34C5               	retlw	197
   651  1050  34C6               	retlw	198
   652  1051  34C7               	retlw	199
   653  1052                     __end_of_SHRIFT:
   654  1052                     _dpowers:
   655  1052  3401               	retlw	1
   656  1053  3400               	retlw	0
   657  1054  340A               	retlw	10
   658  1055  3400               	retlw	0
   659  1056  3464               	retlw	100
   660  1057  3400               	retlw	0
   661  1058  34E8               	retlw	232
   662  1059  3403               	retlw	3
   663  105A  3410               	retlw	16
   664  105B  3427               	retlw	39
   665  105C                     __end_of_dpowers:
   666  105C                     log@coeff:
   667  105C  3400               	retlw	0
   668  105D  3400               	retlw	0
   669  105E  3400               	retlw	0
   670  105F  3400               	retlw	0
   671  1060  3480               	retlw	128
   672  1061  343F               	retlw	63
   673  1062  34F0               	retlw	240
   674  1063  34FF               	retlw	255
   675  1064  34BE               	retlw	190
   676  1065  34E2               	retlw	226
   677  1066  34A9               	retlw	169
   678  1067  343E               	retlw	62
   679  1068  3483               	retlw	131
   680  1069  3476               	retlw	118
   681  106A  34BE               	retlw	190
   682  106B  34AE               	retlw	174
   683  106C  342B               	retlw	43
   684  106D  343E               	retlw	62
   685  106E  343C               	retlw	60
   686  106F  34C3               	retlw	195
   687  1070  34BD               	retlw	189
   688  1071  34D2               	retlw	210
   689  1072  3413               	retlw	19
   690  1073  343D               	retlw	61
   691  1074  3478               	retlw	120
   692  1075  34D3               	retlw	211
   693  1076  34BB               	retlw	187
   694  1077                     __end_oflog@coeff:
   695  0013                     _SSPBUF	set	19
   696  0005                     _PORTAbits	set	5
   697  000E                     _TMR1L	set	14
   698  000F                     _TMR1H	set	15
   699  0006                     _PORTBbits	set	6
   700  0018                     _RCSTAbits	set	24
   701  0014                     _SSPCONbits	set	20
   702  0011                     _TMR2	set	17
   703  0012                     _T2CONbits	set	18
   704  0007                     _PORTC	set	7
   705  0006                     _PORTB	set	6
   706  0005                     _PORTA	set	5
   707  001E                     _ADRES	set	30
   708  001F                     _ADCON0bits	set	31
   709  000C                     _PIR1bits	set	12
   710  0010                     _T1CONbits	set	16
   711  0001                     _TMR0	set	1
   712  000B                     _INTCONbits	set	11
   713  0036                     _RB6	set	54
   714  0035                     _RB5	set	53
   715  0034                     _RB4	set	52
   716  0033                     _RB3	set	51
   717  00FA                     _GO_DONE	set	250
   718  009F                     _ADCON1bits	set	159
   719  0099                     _SPBRG	set	153
   720  0098                     _TXSTAbits	set	152
   721  0094                     _SSPSTATbits	set	148
   722  008D                     _PIE2bits	set	141
   723  0081                     _OPTION_REGbits	set	129
   724  0087                     _TRISCbits	set	135
   725  0086                     _TRISBbits	set	134
   726  0085                     _TRISAbits	set	133
   727  008C                     _PIE1bits	set	140
   728  1077                     STR_71:
   729  1077  3425               	retlw	37	;'%'
   730  1078  3434               	retlw	52	;'4'
   731  1079  3473               	retlw	115	;'s'
   732  107A  3425               	retlw	37	;'%'
   733  107B  3433               	retlw	51	;'3'
   734  107C  3464               	retlw	100	;'d'
   735  107D  3420               	retlw	32	;' '
   736  107E  3425               	retlw	37	;'%'
   737  107F  3435               	retlw	53	;'5'
   738  1080  3473               	retlw	115	;'s'
   739  1081  3425               	retlw	37	;'%'
   740  1082  3433               	retlw	51	;'3'
   741  1083  3464               	retlw	100	;'d'
   742  1084  3425               	retlw	37	;'%'
   743  1085  3433               	retlw	51	;'3'
   744  1086  3473               	retlw	115	;'s'
   745  1087  3425               	retlw	37	;'%'
   746  1088  3434               	retlw	52	;'4'
   747  1089  3473               	retlw	115	;'s'
   748  108A  3425               	retlw	37	;'%'
   749  108B  3435               	retlw	53	;'5'
   750  108C  3473               	retlw	115	;'s'
   751  108D  3425               	retlw	37	;'%'
   752  108E  3434               	retlw	52	;'4'
   753  108F  3473               	retlw	115	;'s'
   754  1090  3400               	retlw	0
   755  1091                     STR_62:
   756  1091  34D1               	retlw	-47
   757  1092  34E1               	retlw	-31
   758  1093  34F0               	retlw	-16
   759  1094  34EE               	retlw	-18
   760  1095  34F1               	retlw	-15
   761  1096  3420               	retlw	32	;' '
   762  1097  34ED               	retlw	-19
   763  1098  34E0               	retlw	-32
   764  1099  34F1               	retlw	-15
   765  109A  34F2               	retlw	-14
   766  109B  34F0               	retlw	-16
   767  109C  342E               	retlw	46	;'.'
   768  109D  3420               	retlw	32	;' '
   769  109E  34CE               	retlw	-50
   770  109F  34C7               	retlw	-57
   771  10A0  34D3               	retlw	-45
   772  10A1  3400               	retlw	0
   773  10A2                     STR_67:
   774  10A2  34D1               	retlw	-47
   775  10A3  34E1               	retlw	-31
   776  10A4  34F0               	retlw	-16
   777  10A5  34EE               	retlw	-18
   778  10A6  34F1               	retlw	-15
   779  10A7  3420               	retlw	32	;' '
   780  10A8  34ED               	retlw	-19
   781  10A9  34E0               	retlw	-32
   782  10AA  34F1               	retlw	-15
   783  10AB  34F2               	retlw	-14
   784  10AC  34F0               	retlw	-16
   785  10AD  342E               	retlw	46	;'.'
   786  10AE  3420               	retlw	32	;' '
   787  10AF  34CF               	retlw	-49
   788  10B0  34C7               	retlw	-57
   789  10B1  34D3               	retlw	-45
   790  10B2  3400               	retlw	0
   791  10B3                     STR_29:
   792  10B3  34C4               	retlw	-60
   793  10B4  34CE               	retlw	-50
   794  10B5  3432               	retlw	50	;'2'
   795  10B6  342D               	retlw	45	;'-'
   796  10B7  34D2               	retlw	-46
   797  10B8  34E0               	retlw	-32
   798  10B9  34E9               	retlw	-23
   799  10BA  34EC               	retlw	-20
   800  10BB  34E5               	retlw	-27
   801  10BC  34F0               	retlw	-16
   802  10BD  3420               	retlw	32	;' '
   803  10BE  34E2               	retlw	-30
   804  10BF  34FB               	retlw	-5
   805  10C0  34EA               	retlw	-22
   806  10C1  34EB               	retlw	-21
   807  10C2  3400               	retlw	0
   808  10C3                     STR_32:
   809  10C3  34C4               	retlw	-60
   810  10C4  34CE               	retlw	-50
   811  10C5  3432               	retlw	50	;'2'
   812  10C6  342D               	retlw	45	;'-'
   813  10C7  34C2               	retlw	-62
   814  10C8  34EA               	retlw	-22
   815  10C9  34EB               	retlw	-21
   816  10CA  3420               	retlw	32	;' '
   817  10CB  34EF               	retlw	-17
   818  10CC  34EE               	retlw	-18
   819  10CD  3420               	retlw	32	;' '
   820  10CE  34F2               	retlw	-14
   821  10CF  34E5               	retlw	-27
   822  10D0  34EC               	retlw	-20
   823  10D1  34EF               	retlw	-17
   824  10D2  3400               	retlw	0
   825  10D3                     STR_57:
   826  10D3  34D1               	retlw	-47
   827  10D4  34EE               	retlw	-18
   828  10D5  34F5               	retlw	-11
   829  10D6  34F0               	retlw	-16
   830  10D7  342E               	retlw	46	;'.'
   831  10D8  34F2               	retlw	-14
   832  10D9  34E5               	retlw	-27
   833  10DA  34EA               	retlw	-22
   834  10DB  342E               	retlw	46	;'.'
   835  10DC  34ED               	retlw	-19
   836  10DD  34E0               	retlw	-32
   837  10DE  34F1               	retlw	-15
   838  10DF  34F2               	retlw	-14
   839  10E0  34F0               	retlw	-16
   840  10E1  342E               	retlw	46	;'.'
   841  10E2  3400               	retlw	0
   842  10E3                     STR_26:
   843  10E3  34C4               	retlw	-60
   844  10E4  34CE               	retlw	-50
   845  10E5  3432               	retlw	50	;'2'
   846  10E6  342D               	retlw	45	;'-'
   847  10E7  34D2               	retlw	-46
   848  10E8  34E0               	retlw	-32
   849  10E9  34E9               	retlw	-23
   850  10EA  34EC               	retlw	-20
   851  10EB  34E5               	retlw	-27
   852  10EC  34F0               	retlw	-16
   853  10ED  3420               	retlw	32	;' '
   854  10EE  34E2               	retlw	-30
   855  10EF  34EA               	retlw	-22
   856  10F0  34EB               	retlw	-21
   857  10F1  3400               	retlw	0
   858  10F2                     STR_18:
   859  10F2  34C4               	retlw	-60
   860  10F3  34CE               	retlw	-50
   861  10F4  3432               	retlw	50	;'2'
   862  10F5  342D               	retlw	45	;'-'
   863  10F6  34C2               	retlw	-62
   864  10F7  34EA               	retlw	-22
   865  10F8  34EB               	retlw	-21
   866  10F9  3420               	retlw	32	;' '
   867  10FA  34F2               	retlw	-14
   868  10FB  34E0               	retlw	-32
   869  10FC  34E9               	retlw	-23
   870  10FD  34EC               	retlw	-20
   871  10FE  34E5               	retlw	-27
   872  10FF  34F0               	retlw	-16
   873  1100  3400               	retlw	0
   874  1101                     STR_43:
   875  1101  3425               	retlw	37	;'%'
   876  1102  3433               	retlw	51	;'3'
   877  1103  3473               	retlw	115	;'s'
   878  1104  3425               	retlw	37	;'%'
   879  1105  3433               	retlw	51	;'3'
   880  1106  3475               	retlw	117	;'u'
   881  1107  3420               	retlw	32	;' '
   882  1108  3420               	retlw	32	;' '
   883  1109  3425               	retlw	37	;'%'
   884  110A  3433               	retlw	51	;'3'
   885  110B  3473               	retlw	115	;'s'
   886  110C  3425               	retlw	37	;'%'
   887  110D  3433               	retlw	51	;'3'
   888  110E  3475               	retlw	117	;'u'
   889  110F  3400               	retlw	0
   890  1110                     STR_15:
   891  1110  34C4               	retlw	-60
   892  1111  34CE               	retlw	-50
   893  1112  3431               	retlw	49	;'1'
   894  1113  342D               	retlw	45	;'-'
   895  1114  34C2               	retlw	-62
   896  1115  34F0               	retlw	-16
   897  1116  34E5               	retlw	-27
   898  1117  34EC               	retlw	-20
   899  1118  34FF               	retlw	-1
   900  1119  3420               	retlw	32	;' '
   901  111A  34E8               	retlw	-24
   902  111B  34EC               	retlw	-20
   903  111C  34EF               	retlw	-17
   904  111D  3400               	retlw	0
   905  111E                     STR_42:
   906  111E  34C0               	retlw	-64
   907  111F  34ED               	retlw	-19
   908  1120  34E0               	retlw	-32
   909  1121  34EB               	retlw	-21
   910  1122  34EE               	retlw	-18
   911  1123  34E3               	retlw	-29
   912  1124  342E               	retlw	46	;'.'
   913  1125  3420               	retlw	32	;' '
   914  1126  34E2               	retlw	-30
   915  1127  34E2               	retlw	-30
   916  1128  34EE               	retlw	-18
   917  1129  34E4               	retlw	-28
   918  112A  3400               	retlw	0
   919  112B                     STR_7:
   920  112B  34C4               	retlw	-60
   921  112C  34CE               	retlw	-50
   922  112D  3431               	retlw	49	;'1'
   923  112E  342D               	retlw	45	;'-'
   924  112F  34C8               	retlw	-56
   925  1130  34EC               	retlw	-20
   926  1131  34EF               	retlw	-17
   927  1132  342F               	retlw	47	;'/'
   928  1133  34EF               	retlw	-17
   929  1134  34EE               	retlw	-18
   930  1135  34F1               	retlw	-15
   931  1136  34F2               	retlw	-14
   932  1137  3400               	retlw	0
   933  1138                     STR_48:
   934  1138  3425               	retlw	37	;'%'
   935  1139  3431               	retlw	49	;'1'
   936  113A  3432               	retlw	50	;'2'
   937  113B  3473               	retlw	115	;'s'
   938  113C  3425               	retlw	37	;'%'
   939  113D  3464               	retlw	100	;'d'
   940  113E  3425               	retlw	37	;'%'
   941  113F  3464               	retlw	100	;'d'
   942  1140  3425               	retlw	37	;'%'
   943  1141  3464               	retlw	100	;'d'
   944  1142  3425               	retlw	37	;'%'
   945  1143  3464               	retlw	100	;'d'
   946  1144  3400               	retlw	0
   947  1145                     STR_1:
   948  1145  34C7               	retlw	-57
   949  1146  34E0               	retlw	-32
   950  1147  34E3               	retlw	-29
   951  1148  34F0               	retlw	-16
   952  1149  34F3               	retlw	-13
   953  114A  34E7               	retlw	-25
   954  114B  34EA               	retlw	-22
   955  114C  34E0               	retlw	-32
   956  114D  342E               	retlw	46	;'.'
   957  114E  342E               	retlw	46	;'.'
   958  114F  342E               	retlw	46	;'.'
   959  1150  342E               	retlw	46	;'.'
   960  1151  3400               	retlw	0
   961  1152                     STR_51:
   962  1152  34D6               	retlw	-42
   963  1153  34E8               	retlw	-24
   964  1154  34F4               	retlw	-12
   965  1155  34F0               	retlw	-16
   966  1156  342E               	retlw	46	;'.'
   967  1157  3420               	retlw	32	;' '
   968  1158  34E2               	retlw	-30
   969  1159  34FB               	retlw	-5
   970  115A  34E2               	retlw	-30
   971  115B  34EE               	retlw	-18
   972  115C  34E4               	retlw	-28
   973  115D  3400               	retlw	0
   974  115E                     STR_47:
   975  115E  34D6               	retlw	-42
   976  115F  34E8               	retlw	-24
   977  1160  34F4               	retlw	-12
   978  1161  34F0               	retlw	-16
   979  1162  342E               	retlw	46	;'.'
   980  1163  3420               	retlw	32	;' '
   981  1164  34E2               	retlw	-30
   982  1165  34E2               	retlw	-30
   983  1166  34EE               	retlw	-18
   984  1167  34E4               	retlw	-28
   985  1168  3400               	retlw	0
   986  1169                     STR_12:
   987  1169  34CF               	retlw	-49
   988  116A  34EE               	retlw	-18
   989  116B  34F1               	retlw	-15
   990  116C  34F2               	retlw	-14
   991  116D  34EE               	retlw	-18
   992  116E  34FF               	retlw	-1
   993  116F  34ED               	retlw	-19
   994  1170  34ED               	retlw	-19
   995  1171  34FB               	retlw	-5
   996  1172  34E9               	retlw	-23
   997  1173  3400               	retlw	0
   998  1174                     STR_5:
   999  1174  34CD               	retlw	-51
  1000  1175  34E0               	retlw	-32
  1001  1176  34F1               	retlw	-15
  1002  1177  34F2               	retlw	-14
  1003  1178  34F0               	retlw	-16
  1004  1179  34EE               	retlw	-18
  1005  117A  34E9               	retlw	-23
  1006  117B  34EA               	retlw	-22
  1007  117C  34E8               	retlw	-24
  1008  117D  3400               	retlw	0
  1009  117E                     STR_40:
  1010  117E  34CF               	retlw	-49
  1011  117F  34EE               	retlw	-18
  1012  1180  34EA               	retlw	-22
  1013  1181  34E0               	retlw	-32
  1014  1182  34E7               	retlw	-25
  1015  1183  34E0               	retlw	-32
  1016  1184  34ED               	retlw	-19
  1017  1185  34E8               	retlw	-24
  1018  1186  34FF               	retlw	-1
  1019  1187  3400               	retlw	0
  1020  1188                     STR_53:
  1021  1188  34C4               	retlw	-60
  1022  1189  342E               	retlw	46	;'.'
  1023  118A  34E2               	retlw	-30
  1024  118B  34FB               	retlw	-5
  1025  118C  34F5               	retlw	-11
  1026  118D  34EE               	retlw	-18
  1027  118E  34E4               	retlw	-28
  1028  118F  34FB               	retlw	-5
  1029  1190  343A               	retlw	58	;':'
  1030  1191  3400               	retlw	0
  1031  1192                     STR_16:
  1032  1192  3425               	retlw	37	;'%'
  1033  1193  3434               	retlw	52	;'4'
  1034  1194  3464               	retlw	100	;'d'
  1035  1195  3420               	retlw	32	;' '
  1036  1196  34F1               	retlw	-15
  1037  1197  34E5               	retlw	-27
  1038  1198  34EA               	retlw	-22
  1039  1199  342E               	retlw	46	;'.'
  1040  119A  3400               	retlw	0
  1041  119B                     STR_27:
  1042  119B  3425               	retlw	37	;'%'
  1043  119C  3434               	retlw	52	;'4'
  1044  119D  3464               	retlw	100	;'d'
  1045  119E  3420               	retlw	32	;' '
  1046  119F  34EC               	retlw	-20
  1047  11A0  34E8               	retlw	-24
  1048  11A1  34ED               	retlw	-19
  1049  11A2  342E               	retlw	46	;'.'
  1050  11A3  3400               	retlw	0
  1051  11A4                     STR_49:
  1052  11A4  34C4               	retlw	-60
  1053  11A5  342E               	retlw	46	;'.'
  1054  11A6  34E2               	retlw	-30
  1055  11A7  34F5               	retlw	-11
  1056  11A8  34EE               	retlw	-18
  1057  11A9  34E4               	retlw	-28
  1058  11AA  34FB               	retlw	-5
  1059  11AB  343A               	retlw	58	;':'
  1060  11AC  3400               	retlw	0
  1061  11AD                     STR_9:
  1062  11AD  34C8               	retlw	-56
  1063  11AE  34EC               	retlw	-20
  1064  11AF  34EF               	retlw	-17
  1065  11B0  34F3               	retlw	-13
  1066  11B1  34EB               	retlw	-21
  1067  11B2  34FC               	retlw	-4
  1068  11B3  34F1               	retlw	-15
  1069  11B4  3400               	retlw	0
  1070  11B5                     STR_76:
  1071  11B5  3428               	retlw	40	;'('
  1072  11B6  346E               	retlw	110	;'n'
  1073  11B7  3475               	retlw	117	;'u'
  1074  11B8  346C               	retlw	108	;'l'
  1075  11B9  346C               	retlw	108	;'l'
  1076  11BA  3429               	retlw	41	;')'
  1077  11BB  3400               	retlw	0
  1078  11BC                     STR_55:
  1079  11BC  34CF               	retlw	-49
  1080  11BD  34E0               	retlw	-32
  1081  11BE  34EC               	retlw	-20
  1082  11BF  34FF               	retlw	-1
  1083  11C0  34F2               	retlw	-14
  1084  11C1  34FC               	retlw	-4
  1085  11C2  3400               	retlw	0
  1086  11C3                     STR_75:
  1087  11C3  34CD               	retlw	-51
  1088  11C4  34C0               	retlw	-64
  1089  11C5  34C3               	retlw	-61
  1090  11C6  34D0               	retlw	-48
  1091  11C7  343A               	retlw	58	;':'
  1092  11C8  3400               	retlw	0
  1093  11C9                     STR_73:
  1094  11C9  34D2               	retlw	-46
  1095  11CA  34ED               	retlw	-19
  1096  11CB  34E0               	retlw	-32
  1097  11CC  34F0               	retlw	-16
  1098  11CD  343A               	retlw	58	;':'
  1099  11CE  3400               	retlw	0
  1100  11CF                     STR_72:
  1101  11CF  34D2               	retlw	-46
  1102  11D0  34E2               	retlw	-30
  1103  11D1  34ED               	retlw	-19
  1104  11D2  343A               	retlw	58	;':'
  1105  11D3  3400               	retlw	0
  1106  11D4                     STR_44:
  1107  11D4  34C0               	retlw	-64
  1108  11D5  34ED               	retlw	-19
  1109  11D6  3431               	retlw	49	;'1'
  1110  11D7  343A               	retlw	58	;':'
  1111  11D8  3400               	retlw	0
  1112  11D9                     STR_45:
  1113  11D9  3441               	retlw	65	;'A'
  1114  11DA  34ED               	retlw	-19
  1115  11DB  3432               	retlw	50	;'2'
  1116  11DC  343A               	retlw	58	;':'
  1117  11DD  3400               	retlw	0
  1118  11DE                     STR_4:
  1119  11DE  3425               	retlw	37	;'%'
  1120  11DF  3431               	retlw	49	;'1'
  1121  11E0  3436               	retlw	54	;'6'
  1122  11E1  3473               	retlw	115	;'s'
  1123  11E2  3400               	retlw	0
  1124  11E3                     STR_3:
  1125  11E3  34C2               	retlw	-62
  1126  11E4  34FB               	retlw	-5
  1127  11E5  34EA               	retlw	-22
  1128  11E6  34EB               	retlw	-21
  1129  11E7  3400               	retlw	0
  1130  11E8                     STR_23:
  1131  11E8  34CD               	retlw	-51
  1132  11E9  34E5               	retlw	-27
  1133  11EA  34F2               	retlw	-14
  1134  11EB  3400               	retlw	0
  1135  11EC                     STR_74:
  1136  11EC  34C4               	retlw	-60
  1137  11ED  34D3               	retlw	-45
  1138  11EE  343A               	retlw	58	;':'
  1139  11EF  3400               	retlw	0
  1140  11F0                     STR_2:
  1141  11F0  34C2               	retlw	-62
  1142  11F1  34EA               	retlw	-22
  1143  11F2  34EB               	retlw	-21
  1144  11F3  3400               	retlw	0
  1145  11F4                     STR_20:
  1146  11F4  34C4               	retlw	-60
  1147  11F5  34E0               	retlw	-32
  1148  11F6  3400               	retlw	0
  1149  11F7                     STR_8:
  1150  11F7  3425               	retlw	37	;'%'
  1151  11F8  3473               	retlw	115	;'s'
  1152  11F9  3400               	retlw	0
  1153  11FA                     STR_10:
  1154  11FA  342A               	retlw	42	;'*'
  1155  11FB  3400               	retlw	0
  1156  11F4                     
  1157                           	psect	cinit
  1158  0011                     start_initialization:	
  1159                           ; #config settings
  1160                           
  1161  0011                     __initialization:
  1162                           
  1163                           ; Initialize objects allocated to BANK3
  1164  0011  1783               	bsf	3,7	;select IRP bank2
  1165  0012  30B2               	movlw	low (__pdataBANK3+34)
  1166  0013  00FD               	movwf	btemp+-1
  1167  0014  301D               	movlw	high __pidataBANK3
  1168  0015  00FE               	movwf	btemp
  1169  0016  3021               	movlw	low __pidataBANK3
  1170  0017  00FF               	movwf	btemp+1
  1171  0018  3090               	movlw	low __pdataBANK3
  1172  0019  0084               	movwf	4
  1173  001A  160A  158A  2468  120A  118A  	fcall	init_ram0
  1174                           
  1175                           ; Initialize objects allocated to COMMON
  1176  001F  160A  158A  241A  120A  118A  	fcall	__pidataCOMMON	;fetch initializer
  1177  0024  00FB               	movwf	__pdataCOMMON& (0+127)
  1178  0025  160A  158A  241B  120A  118A  	fcall	__pidataCOMMON+1	;fetch initializer
  1179  002A  00FC               	movwf	(__pdataCOMMON+1)& (0+127)
  1180                           
  1181                           ; Clear objects allocated to BANK3
  1182  002B  30B2               	movlw	low __pbssBANK3
  1183  002C  0084               	movwf	4
  1184  002D  30D2               	movlw	low (__pbssBANK3+32)
  1185  002E  160A  158A  242B  120A  118A  	fcall	clear_ram0
  1186                           
  1187                           ; Clear objects allocated to BANK1
  1188  0033  1383               	bcf	3,7	;select IRP bank0
  1189  0034  30A0               	movlw	low __pbssBANK1
  1190  0035  0084               	movwf	4
  1191  0036  30C8               	movlw	low (__pbssBANK1+40)
  1192  0037  160A  158A  242B   	fcall	clear_ram0
  1193                           
  1194                           ; Clear objects allocated to BITBANK1
  1195  003A  1683               	bsf	3,5	;RP0=1, select bank1
  1196  003B  01EA               	clrf	(__pbitbssBANK1/(0+8))& (0+127)
  1197                           
  1198                           ; Clear objects allocated to COMMON
  1199  003C  01FD               	clrf	__pbssCOMMON& (0+127)
  1200                           
  1201                           ; Clear objects allocated to BITCOMMON
  1202  003D  01FA               	clrf	(__pbitbssCOMMON/(0+8))& (0+127)
  1203  003E                     end_of_initialization:	
  1204                           ;End of C runtime variable initialization code
  1205                           
  1206  003E                     __end_of__initialization:
  1207  003E  0183               	clrf	3
  1208  003F  120A  118A  2A45   	ljmp	_main	;jump to C main() function
  1209                           
  1210                           	psect	bitbssCOMMON
  1211  03D0                     __pbitbssCOMMON:
  1212  03D0                     _flSwitchButton:
  1213  03D0                     	ds	1
  1214  03D1                     _flClearLCD:
  1215  03D1                     	ds	1
  1216  03D2                     _flUpdate:
  1217  03D2                     	ds	1
  1218  03D3                     _flStopBitRecieve:
  1219  03D3                     	ds	1
  1220  03D4                     _flStartBitRecieve:
  1221  03D4                     	ds	1
  1222  03D5                     _flDO1:
  1223  03D5                     	ds	1
  1224  03D6                     __minute:
  1225  03D6                     	ds	1
  1226  03D7                     __second:
  1227  03D7                     	ds	1
  1228                           
  1229                           	psect	bssCOMMON
  1230  007D                     __pbssCOMMON:
  1231  007D                     _flModeStep:
  1232  007D                     	ds	1
  1233                           
  1234                           	psect	dataCOMMON
  1235  007B                     __pdataCOMMON:
  1236  007B                     __MenuNav:
  1237  007B                     	ds	2
  1238                           
  1239                           	psect	bitbssBANK1
  1240  0750                     __pbitbssBANK1:
  1241  0750                     __hour:
  1242  0750                     	ds	1
  1243  0751                     __flashSecond:
  1244  0751                     	ds	1
  1245  0752                     __500ms:
  1246  0752                     	ds	1
  1247  0753                     __250ms:
  1248  0753                     	ds	1
  1249  0754                     __100ms:
  1250  0754                     	ds	1
  1251                           
  1252                           	psect	bssBANK1
  1253  00A0                     __pbssBANK1:
  1254  00A0                     _arrCmd:
  1255  00A0                     	ds	4
  1256  00A4                     _Analog:
  1257  00A4                     	ds	4
  1258  00A8                     _errno:
  1259  00A8                     	ds	2
  1260  00AA                     __tempDigit:
  1261  00AA                     	ds	2
  1262  00AC                     __timerDO2:
  1263  00AC                     	ds	2
  1264  00AE                     __timerDO1:
  1265  00AE                     	ds	2
  1266  00B0                     __settingTimerOffDO2:
  1267  00B0                     	ds	2
  1268  00B2                     __settingTimerOnDO2:
  1269  00B2                     	ds	2
  1270  00B4                     __settingTimeImpDO1:
  1271  00B4                     	ds	2
  1272  00B6                     __countSecond:
  1273  00B6                     	ds	2
  1274  00B8                     _temperatureAI2:
  1275  00B8                     	ds	1
  1276  00B9                     _temperatureAI1:
  1277  00B9                     	ds	1
  1278  00BA                     __tempTwoDigit:
  1279  00BA                     	ds	1
  1280  00BB                     __cellTwoDigit:
  1281  00BB                     	ds	1
  1282  00BC                     __secondCell:
  1283  00BC                     	ds	1
  1284  00BD                     __firstCell:
  1285  00BD                     	ds	1
  1286  00BE                     _flMenuStrip:
  1287  00BE                     	ds	1
  1288  00BF                     _carrCmd:
  1289  00BF                     	ds	1
  1290  00C0                     _cQuantity:
  1291  00C0                     	ds	1
  1292  00C1                     _cTMR0:
  1293  00C1                     	ds	1
  1294  00C2                     _TMR0_Value:
  1295  00C2                     	ds	1
  1296  00C3                     __tempPinDO:
  1297  00C3                     	ds	1
  1298  00C4                     __settingsBit:
  1299  00C4                     	ds	1
  1300  00C5                     __countTMR2trigger:
  1301  00C5                     	ds	1
  1302  00C6                     _counter:
  1303  00C6                     	ds	1
  1304  00C7                     _cACP:
  1305  00C7                     	ds	1
  1306                           
  1307                           	psect	bssBANK3
  1308  01B2                     __pbssBANK3:
  1309  01B2                     _str2:
  1310  01B2                     	ds	16
  1311  01C2                     _str:
  1312  01C2                     	ds	16
  1313                           
  1314                           	psect	dataBANK3
  1315  0190                     __pdataBANK3:
  1316  0190                     __SubMenuArr:
  1317  0190                     	ds	24
  1318  01A8                     __MenuArr:
  1319  01A8                     	ds	10
  1320                           
  1321                           	psect	inittext
  1322  1C64                     init_fetch0:	
  1323                           ;	Called with low address in FSR and high address in W
  1324                           
  1325  1C64  087E               	movf	126,w
  1326  1C65  008A               	movwf	10
  1327  1C66  087F               	movf	127,w
  1328  1C67  0082               	movwf	2
  1329  1C68                     init_ram0:	
  1330                           ;Called with:
  1331                           ;	high address of idata address in btemp 
  1332                           ;	low address of idata address in btemp+1 
  1333                           ;	low address of data in FSR
  1334                           ;	high address + 1 of data in btemp-1
  1335                           
  1336  1C68  2464  160A  158A   	fcall	init_fetch0
  1337  1C6B  0080               	movwf	0
  1338  1C6C  0A84               	incf	4,f
  1339  1C6D  0804               	movf	4,w
  1340  1C6E  067D               	xorwf	125,w
  1341  1C6F  1903               	btfsc	3,2
  1342  1C70  3400               	retlw	0
  1343  1C71  0AFF               	incf	127,f
  1344  1C72  1903               	btfsc	3,2
  1345  1C73  0AFE               	incf	126,f
  1346  1C74  2C68               	goto	init_ram0
  1347                           
  1348                           	psect	clrtext
  1349  1C2B                     clear_ram0:	
  1350                           ;	Called with FSR containing the base address, and
  1351                           ;	W with the last address+1
  1352                           
  1353  1C2B  0064               	clrwdt	;clear the watchdog before getting into this loop
  1354  1C2C                     clrloop0:
  1355  1C2C  0180               	clrf	0	;clear RAM location pointed to by FSR
  1356  1C2D  0A84               	incf	4,f	;increment pointer
  1357  1C2E  0604               	xorwf	4,w	;XOR with final address
  1358  1C2F  1903               	btfsc	3,2	;have we reached the end yet?
  1359  1C30  3400               	retlw	0	;all done for this memory range, return
  1360  1C31  0604               	xorwf	4,w	;XOR again to restore value
  1361  1C32  2C2C               	goto	clrloop0	;do the next byte
  1362                           
  1363                           	psect	cstackBANK1
  1364  00C8                     __pcstackBANK1:
  1365  00C8                     ___fttol@sign1:
  1366                           
  1367                           ; 1 bytes @ 0x0
  1368  00C8                     	ds	1
  1369  00C9                     ___fttol@lval:
  1370                           
  1371                           ; 4 bytes @ 0x1
  1372  00C9                     	ds	4
  1373  00CD                     ___fttol@exp1:
  1374                           
  1375                           ; 1 bytes @ 0x5
  1376  00CD                     	ds	1
  1377  00CE                     rThermistor@A:
  1378                           
  1379                           ; 3 bytes @ 0x6
  1380  00CE                     	ds	3
  1381  00D1                     rThermistor@analogAI:
  1382                           
  1383                           ; 1 bytes @ 0x9
  1384  00D1                     	ds	1
  1385  00D2                     ?___awtoft:
  1386  00D2                     ___awtoft@c:	
  1387                           ; 3 bytes @ 0xA
  1388                           
  1389                           
  1390                           ; 2 bytes @ 0xA
  1391  00D2                     	ds	3
  1392  00D5                     ___awtoft@sign:
  1393                           
  1394                           ; 1 bytes @ 0xD
  1395  00D5                     	ds	1
  1396  00D6                     ?_log:
  1397  00D6                     log@x:	
  1398                           ; 3 bytes @ 0xE
  1399                           
  1400                           
  1401                           ; 3 bytes @ 0xE
  1402  00D6                     	ds	3
  1403  00D9                     ??_log:
  1404                           
  1405                           ; 1 bytes @ 0x11
  1406  00D9                     	ds	1
  1407  00DA                     log@exponent:
  1408                           
  1409                           ; 2 bytes @ 0x12
  1410  00DA                     	ds	2
  1411  00DC                     _rTemperature$1775:
  1412                           
  1413                           ; 3 bytes @ 0x14
  1414  00DC                     	ds	3
  1415  00DF                     _rTemperature$1776:
  1416                           
  1417                           ; 3 bytes @ 0x17
  1418  00DF                     	ds	3
  1419  00E2                     _rTemperature$1777:
  1420                           
  1421                           ; 3 bytes @ 0x1A
  1422  00E2                     	ds	3
  1423  00E5                     rTemperature@analogAI:
  1424                           
  1425                           ; 1 bytes @ 0x1D
  1426  00E5                     	ds	1
  1427  00E6                     ??_main:
  1428                           
  1429                           ; 1 bytes @ 0x1E
  1430  00E6                     	ds	3
  1431  00E9                     main@SPI_i:
  1432                           
  1433                           ; 1 bytes @ 0x21
  1434  00E9                     	ds	1
  1435                           
  1436                           	psect	cstackCOMMON
  1437  0070                     __pcstackCOMMON:
  1438  0070                     ?_isdigit:
  1439  0070                     ?_fInterruptRecieveDevice:	
  1440                           ; 1 bit 
  1441                           
  1442  0070                     ??_fInterruptRecieveDevice:	
  1443                           ; 1 bytes @ 0x0
  1444                           
  1445  0070                     ?_init:	
  1446                           ; 1 bytes @ 0x0
  1447                           
  1448  0070                     ?_SPI_init:	
  1449                           ; 1 bytes @ 0x0
  1450                           
  1451  0070                     ?_LCD_init:	
  1452                           ; 1 bytes @ 0x0
  1453                           
  1454  0070                     ?_fShiftData:	
  1455                           ; 1 bytes @ 0x0
  1456                           
  1457  0070                     ?_rTemperature:	
  1458                           ; 1 bytes @ 0x0
  1459                           
  1460  0070                     ?_fMenuStrip:	
  1461                           ; 1 bytes @ 0x0
  1462                           
  1463  0070                     ?_sendhalfbyte:	
  1464                           ; 1 bytes @ 0x0
  1465                           
  1466  0070                     ?_LCD_clear:	
  1467                           ; 1 bytes @ 0x0
  1468                           
  1469  0070                     ?_SPI_notRDY:	
  1470                           ; 1 bytes @ 0x0
  1471                           
  1472  0070                     ?_linkup:	
  1473                           ; 1 bytes @ 0x0
  1474                           
  1475  0070                     ?_fACP:	
  1476                           ; 1 bytes @ 0x0
  1477                           
  1478  0070                     ?_main:	
  1479                           ; 1 bytes @ 0x0
  1480                           
  1481  0070                     ?_fEraseString:	
  1482                           ; 1 bytes @ 0x0
  1483                           
  1484  0070                     ?_SPI_WriteByte:	
  1485                           ; 1 bytes @ 0x0
  1486                           
  1487  0070                     ?_SPI_ReadByte:	
  1488                           ; 1 bytes @ 0x0
  1489                           
  1490  0070                     ?_SPI_ReadStatus:	
  1491                           ; 1 bytes @ 0x0
  1492                           
  1493  0070                     ?i1___lwmod:	
  1494                           ; 1 bytes @ 0x0
  1495                           
  1496  0070                     i1___lwmod@divisor:	
  1497                           ; 2 bytes @ 0x0
  1498                           
  1499                           
  1500                           ; 2 bytes @ 0x0
  1501  0070                     	ds	2
  1502  0072                     i1___lwmod@dividend:
  1503                           
  1504                           ; 2 bytes @ 0x2
  1505  0072                     	ds	2
  1506  0074                     ??i1___lwmod:
  1507                           
  1508                           ; 1 bytes @ 0x4
  1509  0074                     	ds	1
  1510  0075                     i1___lwmod@counter:
  1511                           
  1512                           ; 1 bytes @ 0x5
  1513  0075                     	ds	1
  1514  0076                     ??_linkup:
  1515                           
  1516                           ; 1 bytes @ 0x6
  1517  0076                     	ds	4
  1518                           
  1519                           	psect	cstackBANK0
  1520  0020                     __pcstackBANK0:
  1521  0020                     ?___ftge:
  1522  0020                     ??_init:	
  1523                           ; 1 bit 
  1524                           
  1525  0020                     ??_SPI_init:	
  1526                           ; 1 bytes @ 0x0
  1527                           
  1528  0020                     ??_fShiftData:	
  1529                           ; 1 bytes @ 0x0
  1530                           
  1531  0020                     ?_strcat:	
  1532                           ; 1 bytes @ 0x0
  1533                           
  1534  0020                     ??_isdigit:	
  1535                           ; 1 bytes @ 0x0
  1536                           
  1537  0020                     ??_fACP:	
  1538                           ; 1 bytes @ 0x0
  1539                           
  1540  0020                     ??_fEraseString:	
  1541                           ; 1 bytes @ 0x0
  1542                           
  1543  0020                     ??_SPI_WriteByte:	
  1544                           ; 1 bytes @ 0x0
  1545                           
  1546  0020                     ?_LCD_StringOnOff:	
  1547                           ; 1 bytes @ 0x0
  1548                           
  1549  0020                     ?___wmul:	
  1550                           ; 2 bytes @ 0x0
  1551                           
  1552  0020                     ?___awdiv:	
  1553                           ; 2 bytes @ 0x0
  1554                           
  1555  0020                     ?___lwdiv:	
  1556                           ; 2 bytes @ 0x0
  1557                           
  1558  0020                     ?___ftpack:	
  1559                           ; 2 bytes @ 0x0
  1560                           
  1561  0020                     ?_frexp:	
  1562                           ; 3 bytes @ 0x0
  1563                           
  1564  0020                     fEraseString@string:	
  1565                           ; 3 bytes @ 0x0
  1566                           
  1567  0020                     LCD_StringOnOff@numb:	
  1568                           ; 1 bytes @ 0x0
  1569                           
  1570  0020                     SPI_WriteByte@data:	
  1571                           ; 1 bytes @ 0x0
  1572                           
  1573  0020                     _isdigit$1566:	
  1574                           ; 1 bytes @ 0x0
  1575                           
  1576  0020                     ___wmul@multiplier:	
  1577                           ; 1 bytes @ 0x0
  1578                           
  1579  0020                     ___awdiv@divisor:	
  1580                           ; 2 bytes @ 0x0
  1581                           
  1582  0020                     ___lwdiv@divisor:	
  1583                           ; 2 bytes @ 0x0
  1584                           
  1585  0020                     strcat@from:	
  1586                           ; 2 bytes @ 0x0
  1587                           
  1588  0020                     ___ftpack@arg:	
  1589                           ; 2 bytes @ 0x0
  1590                           
  1591  0020                     ___ftge@ff1:	
  1592                           ; 3 bytes @ 0x0
  1593                           
  1594  0020                     frexp@value:	
  1595                           ; 3 bytes @ 0x0
  1596                           
  1597                           
  1598                           ; 3 bytes @ 0x0
  1599  0020                     	ds	1
  1600  0021                     ??_LCD_StringOnOff:
  1601  0021                     ??_SPI_ReadByte:	
  1602                           ; 1 bytes @ 0x1
  1603                           
  1604  0021                     SPI_ReadByte@data:	
  1605                           ; 1 bytes @ 0x1
  1606                           
  1607  0021                     isdigit@c:	
  1608                           ; 1 bytes @ 0x1
  1609                           
  1610                           
  1611                           ; 1 bytes @ 0x1
  1612  0021                     	ds	1
  1613  0022                     ??_strcat:
  1614  0022                     ??_SPI_ReadStatus:	
  1615                           ; 1 bytes @ 0x2
  1616                           
  1617  0022                     LCD_StringOnOff@st:	
  1618                           ; 1 bytes @ 0x2
  1619                           
  1620  0022                     fShiftData@shiftVar:	
  1621                           ; 1 bytes @ 0x2
  1622                           
  1623  0022                     ___wmul@multiplicand:	
  1624                           ; 1 bytes @ 0x2
  1625                           
  1626  0022                     ___awdiv@dividend:	
  1627                           ; 2 bytes @ 0x2
  1628                           
  1629  0022                     ___lwdiv@dividend:	
  1630                           ; 2 bytes @ 0x2
  1631                           
  1632                           
  1633                           ; 2 bytes @ 0x2
  1634  0022                     	ds	1
  1635  0023                     SPI_ReadStatus@status:
  1636  0023                     ___ftpack@exp:	
  1637                           ; 1 bytes @ 0x3
  1638                           
  1639  0023                     frexp@eptr:	
  1640                           ; 1 bytes @ 0x3
  1641                           
  1642  0023                     strcat@cp:	
  1643                           ; 1 bytes @ 0x3
  1644                           
  1645  0023                     fShiftData@shiftVariable:	
  1646                           ; 1 bytes @ 0x3
  1647                           
  1648  0023                     ___ftge@ff2:	
  1649                           ; 2 bytes @ 0x3
  1650                           
  1651                           
  1652                           ; 3 bytes @ 0x3
  1653  0023                     	ds	1
  1654  0024                     ??_SPI_notRDY:
  1655  0024                     ??_frexp:	
  1656                           ; 1 bytes @ 0x4
  1657                           
  1658  0024                     ??___wmul:	
  1659                           ; 1 bytes @ 0x4
  1660                           
  1661  0024                     ??___awdiv:	
  1662                           ; 1 bytes @ 0x4
  1663                           
  1664  0024                     ??___lwdiv:	
  1665                           ; 1 bytes @ 0x4
  1666                           
  1667  0024                     ___ftpack@sign:	
  1668                           ; 1 bytes @ 0x4
  1669                           
  1670  0024                     strcat@to:	
  1671                           ; 1 bytes @ 0x4
  1672                           
  1673  0024                     ___wmul@product:	
  1674                           ; 1 bytes @ 0x4
  1675                           
  1676                           
  1677                           ; 2 bytes @ 0x4
  1678  0024                     	ds	1
  1679  0025                     ??___ftpack:
  1680  0025                     fShiftData@i:	
  1681                           ; 1 bytes @ 0x5
  1682                           
  1683  0025                     SPI_notRDY@notRDY:	
  1684                           ; 1 bytes @ 0x5
  1685                           
  1686  0025                     ___awdiv@counter:	
  1687                           ; 1 bytes @ 0x5
  1688                           
  1689  0025                     ___lwdiv@quotient:	
  1690                           ; 1 bytes @ 0x5
  1691                           
  1692                           
  1693                           ; 2 bytes @ 0x5
  1694  0025                     	ds	1
  1695  0026                     ?_SPI_Read:
  1696  0026                     ?_SPI_Write:	
  1697                           ; 1 bytes @ 0x6
  1698                           
  1699  0026                     ??_sendhalfbyte:	
  1700                           ; 1 bytes @ 0x6
  1701                           
  1702  0026                     ??___ftge:	
  1703                           ; 1 bytes @ 0x6
  1704                           
  1705  0026                     ___awdiv@sign:	
  1706                           ; 1 bytes @ 0x6
  1707                           
  1708  0026                     SPI_Write@address:	
  1709                           ; 1 bytes @ 0x6
  1710                           
  1711  0026                     SPI_Read@address:	
  1712                           ; 2 bytes @ 0x6
  1713                           
  1714                           
  1715                           ; 2 bytes @ 0x6
  1716  0026                     	ds	1
  1717  0027                     sendhalfbyte@c:
  1718  0027                     ___lwdiv@counter:	
  1719                           ; 1 bytes @ 0x7
  1720                           
  1721  0027                     ___awdiv@quotient:	
  1722                           ; 1 bytes @ 0x7
  1723                           
  1724                           
  1725                           ; 2 bytes @ 0x7
  1726  0027                     	ds	1
  1727  0028                     ??_SPI_Read:
  1728  0028                     ?_sendbyte:	
  1729                           ; 1 bytes @ 0x8
  1730                           
  1731  0028                     ?___lwmod:	
  1732                           ; 1 bytes @ 0x8
  1733                           
  1734  0028                     ?___ftmul:	
  1735                           ; 2 bytes @ 0x8
  1736                           
  1737  0028                     ?___lbtoft:	
  1738                           ; 3 bytes @ 0x8
  1739                           
  1740  0028                     sendbyte@mode:	
  1741                           ; 3 bytes @ 0x8
  1742                           
  1743  0028                     SPI_Write@data:	
  1744                           ; 1 bytes @ 0x8
  1745                           
  1746  0028                     ___lwmod@divisor:	
  1747                           ; 1 bytes @ 0x8
  1748                           
  1749  0028                     ___ftmul@f1:	
  1750                           ; 2 bytes @ 0x8
  1751                           
  1752                           
  1753                           ; 3 bytes @ 0x8
  1754  0028                     	ds	1
  1755  0029                     ??_SPI_Write:
  1756  0029                     ??_sendbyte:	
  1757                           ; 1 bytes @ 0x9
  1758                           
  1759  0029                     ?___bmul:	
  1760                           ; 1 bytes @ 0x9
  1761                           
  1762  0029                     ?___awmod:	
  1763                           ; 1 bytes @ 0x9
  1764                           
  1765  0029                     ___bmul@multiplicand:	
  1766                           ; 2 bytes @ 0x9
  1767                           
  1768  0029                     _SPI_Write$1308:	
  1769                           ; 1 bytes @ 0x9
  1770                           
  1771  0029                     _SPI_Read$1311:	
  1772                           ; 2 bytes @ 0x9
  1773                           
  1774  0029                     ___awmod@divisor:	
  1775                           ; 2 bytes @ 0x9
  1776                           
  1777                           
  1778                           ; 2 bytes @ 0x9
  1779  0029                     	ds	1
  1780  002A                     ??___bmul:
  1781  002A                     sendbyte@hb:	
  1782                           ; 1 bytes @ 0xA
  1783                           
  1784  002A                     ___lwmod@dividend:	
  1785                           ; 1 bytes @ 0xA
  1786                           
  1787                           
  1788                           ; 2 bytes @ 0xA
  1789  002A                     	ds	1
  1790  002B                     ??___lbtoft:
  1791  002B                     sendbyte@c:	
  1792                           ; 1 bytes @ 0xB
  1793                           
  1794  002B                     SPI_Read@data:	
  1795                           ; 1 bytes @ 0xB
  1796                           
  1797  002B                     ___bmul@product:	
  1798                           ; 1 bytes @ 0xB
  1799                           
  1800  002B                     ___awmod@dividend:	
  1801                           ; 1 bytes @ 0xB
  1802                           
  1803  002B                     ___ftmul@f2:	
  1804                           ; 2 bytes @ 0xB
  1805                           
  1806                           
  1807                           ; 3 bytes @ 0xB
  1808  002B                     	ds	1
  1809  002C                     ?_LCD_SetPos:
  1810  002C                     ??_LCD_clear:	
  1811                           ; 1 bytes @ 0xC
  1812                           
  1813  002C                     ??___lwmod:	
  1814                           ; 1 bytes @ 0xC
  1815                           
  1816  002C                     LCD_SetPos@y:	
  1817                           ; 1 bytes @ 0xC
  1818                           
  1819  002C                     ___bmul@multiplier:	
  1820                           ; 1 bytes @ 0xC
  1821                           
  1822                           
  1823                           ; 1 bytes @ 0xC
  1824  002C                     	ds	1
  1825  002D                     ??_LCD_SetPos:
  1826  002D                     ??___awmod:	
  1827                           ; 1 bytes @ 0xD
  1828                           
  1829  002D                     LCD_SetPos@x:	
  1830                           ; 1 bytes @ 0xD
  1831                           
  1832  002D                     ___lwmod@counter:	
  1833                           ; 1 bytes @ 0xD
  1834                           
  1835                           
  1836                           ; 1 bytes @ 0xD
  1837  002D                     	ds	1
  1838  002E                     ??_LCD_init:
  1839  002E                     ?_LCD_string:	
  1840                           ; 1 bytes @ 0xE
  1841                           
  1842  002E                     ??___ftmul:	
  1843                           ; 1 bytes @ 0xE
  1844                           
  1845  002E                     ?_sprintf:	
  1846                           ; 1 bytes @ 0xE
  1847                           
  1848  002E                     ___awmod@counter:	
  1849                           ; 2 bytes @ 0xE
  1850                           
  1851  002E                     LCD_string@st:	
  1852                           ; 1 bytes @ 0xE
  1853                           
  1854  002E                     sprintf@f:	
  1855                           ; 2 bytes @ 0xE
  1856                           
  1857                           
  1858                           ; 2 bytes @ 0xE
  1859  002E                     	ds	1
  1860  002F                     ___awmod@sign:
  1861  002F                     ___lbtoft@c:	
  1862                           ; 1 bytes @ 0xF
  1863                           
  1864                           
  1865                           ; 1 bytes @ 0xF
  1866  002F                     	ds	1
  1867  0030                     ??_LCD_string:
  1868                           
  1869                           ; 1 bytes @ 0x10
  1870  0030                     	ds	1
  1871  0031                     LCD_string@symbol:
  1872                           
  1873                           ; 1 bytes @ 0x11
  1874  0031                     	ds	1
  1875  0032                     LCD_string@i:
  1876  0032                     ___ftmul@exp:	
  1877                           ; 1 bytes @ 0x12
  1878                           
  1879                           
  1880                           ; 1 bytes @ 0x12
  1881  0032                     	ds	1
  1882  0033                     ___ftmul@f3_as_product:
  1883                           
  1884                           ; 3 bytes @ 0x13
  1885  0033                     	ds	3
  1886  0036                     ___ftmul@cntr:
  1887                           
  1888                           ; 1 bytes @ 0x16
  1889  0036                     	ds	1
  1890  0037                     ___ftmul@sign:
  1891                           
  1892                           ; 1 bytes @ 0x17
  1893  0037                     	ds	1
  1894  0038                     ?___ftadd:
  1895  0038                     ___ftadd@f1:	
  1896                           ; 3 bytes @ 0x18
  1897                           
  1898                           
  1899                           ; 3 bytes @ 0x18
  1900  0038                     	ds	3
  1901  003B                     ___ftadd@f2:
  1902                           
  1903                           ; 3 bytes @ 0x1B
  1904  003B                     	ds	3
  1905  003E                     ??___ftadd:
  1906                           
  1907                           ; 1 bytes @ 0x1E
  1908  003E                     	ds	2
  1909  0040                     ??_sprintf:
  1910                           
  1911                           ; 1 bytes @ 0x20
  1912  0040                     	ds	2
  1913  0042                     ___ftadd@sign:
  1914                           
  1915                           ; 1 bytes @ 0x22
  1916  0042                     	ds	1
  1917  0043                     sprintf@prec:
  1918  0043                     ___ftadd@exp2:	
  1919                           ; 1 bytes @ 0x23
  1920                           
  1921                           
  1922                           ; 1 bytes @ 0x23
  1923  0043                     	ds	1
  1924  0044                     ___ftadd@exp1:
  1925  0044                     sprintf@cp:	
  1926                           ; 1 bytes @ 0x24
  1927                           
  1928                           
  1929                           ; 2 bytes @ 0x24
  1930  0044                     	ds	1
  1931  0045                     ?_eval_poly:
  1932  0045                     eval_poly@x:	
  1933                           ; 3 bytes @ 0x25
  1934                           
  1935                           
  1936                           ; 3 bytes @ 0x25
  1937  0045                     	ds	1
  1938  0046                     sprintf@flag:
  1939                           
  1940                           ; 1 bytes @ 0x26
  1941  0046                     	ds	1
  1942  0047                     sprintf@ap:
  1943                           
  1944                           ; 1 bytes @ 0x27
  1945  0047                     	ds	1
  1946  0048                     sprintf@len:
  1947  0048                     eval_poly@d:	
  1948                           ; 2 bytes @ 0x28
  1949                           
  1950                           
  1951                           ; 2 bytes @ 0x28
  1952  0048                     	ds	2
  1953  004A                     sprintf@val:
  1954  004A                     eval_poly@n:	
  1955                           ; 2 bytes @ 0x2A
  1956                           
  1957                           
  1958                           ; 2 bytes @ 0x2A
  1959  004A                     	ds	2
  1960  004C                     ??_eval_poly:
  1961  004C                     sprintf@width:	
  1962                           ; 1 bytes @ 0x2C
  1963                           
  1964                           
  1965                           ; 2 bytes @ 0x2C
  1966  004C                     	ds	2
  1967  004E                     sprintf@c:
  1968                           
  1969                           ; 1 bytes @ 0x2E
  1970  004E                     	ds	1
  1971  004F                     sprintf@sp:
  1972                           
  1973                           ; 1 bytes @ 0x2F
  1974  004F                     	ds	1
  1975  0050                     ??_fMenuStrip:
  1976                           
  1977                           ; 1 bytes @ 0x30
  1978  0050                     	ds	1
  1979  0051                     eval_poly@res:
  1980                           
  1981                           ; 3 bytes @ 0x31
  1982  0051                     	ds	3
  1983  0054                     ?___ftdiv:
  1984  0054                     ___ftdiv@f2:	
  1985                           ; 3 bytes @ 0x34
  1986                           
  1987                           
  1988                           ; 3 bytes @ 0x34
  1989  0054                     	ds	3
  1990  0057                     ___ftdiv@f1:
  1991                           
  1992                           ; 3 bytes @ 0x37
  1993  0057                     	ds	3
  1994  005A                     ??___ftdiv:
  1995                           
  1996                           ; 1 bytes @ 0x3A
  1997  005A                     	ds	4
  1998  005E                     ___ftdiv@cntr:
  1999                           
  2000                           ; 1 bytes @ 0x3E
  2001  005E                     	ds	1
  2002  005F                     ___ftdiv@f3:
  2003                           
  2004                           ; 3 bytes @ 0x3F
  2005  005F                     	ds	3
  2006  0062                     ___ftdiv@exp:
  2007                           
  2008                           ; 1 bytes @ 0x42
  2009  0062                     	ds	1
  2010  0063                     ___ftdiv@sign:
  2011                           
  2012                           ; 1 bytes @ 0x43
  2013  0063                     	ds	1
  2014  0064                     ?___fttol:
  2015  0064                     ___fttol@f1:	
  2016                           ; 4 bytes @ 0x44
  2017                           
  2018                           
  2019                           ; 3 bytes @ 0x44
  2020  0064                     	ds	4
  2021  0068                     ??___fttol:
  2022                           
  2023                           ; 1 bytes @ 0x48
  2024  0068                     	ds	4
  2025  006C                     ?_rThermistor:
  2026                           
  2027                           ; 2 bytes @ 0x4C
  2028  006C                     	ds	2
  2029  006E                     ??_rThermistor:
  2030  006E                     ??___awtoft:	
  2031                           ; 1 bytes @ 0x4E
  2032                           
  2033                           
  2034                           ; 1 bytes @ 0x4E
  2035  006E                     	ds	2
  2036  0070                     ??_rTemperature:
  2037                           
  2038                           	psect	maintext
  2039  0245                     __pmaintext:	
  2040                           ; 1 bytes @ 0x50
  2041 ;;
  2042 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
  2043 ;;
  2044 ;; *************** function _main *****************
  2045 ;; Defined at:
  2046 ;;		line 94 in file "newmain.c"
  2047 ;; Parameters:    Size  Location     Type
  2048 ;;		None
  2049 ;; Auto vars:     Size  Location     Type
  2050 ;;  SPI_i           1   33[BANK1 ] unsigned char 
  2051 ;; Return value:  Size  Location     Type
  2052 ;;                  1    wreg      void 
  2053 ;; Registers used:
  2054 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2055 ;; Tracked objects:
  2056 ;;		On entry : B00/0
  2057 ;;		On exit  : 300/100
  2058 ;;		Unchanged: 0/0
  2059 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2060 ;;      Params:         0       0       0       0       0
  2061 ;;      Locals:         0       0       1       0       0
  2062 ;;      Temps:          0       0       3       0       0
  2063 ;;      Totals:         0       0       4       0       0
  2064 ;;Total ram usage:        4 bytes
  2065 ;; Hardware stack levels required when called: 8
  2066 ;; This function calls:
  2067 ;;		_LCD_SetPos
  2068 ;;		_LCD_init
  2069 ;;		_LCD_string
  2070 ;;		_SPI_Read
  2071 ;;		_SPI_Write
  2072 ;;		_SPI_init
  2073 ;;		_fACP
  2074 ;;		_fMenuStrip
  2075 ;;		_fShiftData
  2076 ;;		_init
  2077 ;;		_rTemperature
  2078 ;; This function is called by:
  2079 ;;		Startup code after reset
  2080 ;; This function uses a non-reentrant model
  2081 ;;
  2082                           
  2083                           
  2084                           ;psect for function _main
  2085  0245                     _main:
  2086                           
  2087                           ;newmain.c: 95: init();
  2088                           
  2089                           ;incstack = 0
  2090                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2091  0245  160A  118A  23B6  120A  118A  	fcall	_init
  2092                           
  2093                           ;newmain.c: 96: SPI_init();
  2094  024A  160A  158A  249C  120A  118A  	fcall	_SPI_init
  2095                           
  2096                           ;newmain.c: 97: LCD_init();
  2097  024F  160A  118A  2339  120A  118A  	fcall	_LCD_init
  2098                           
  2099                           ;newmain.c: 98: fShiftData(0x00);
  2100  0254  3000               	movlw	0
  2101  0255  160A  158A  26D4  120A  118A  	fcall	_fShiftData
  2102                           
  2103                           ;newmain.c: 99: LCD_SetPos(0,0);
  2104  025A  01AC               	clrf	LCD_SetPos@y
  2105  025B  3000               	movlw	0
  2106  025C  160A  158A  24CB  120A  118A  	fcall	_LCD_SetPos
  2107                           
  2108                           ;newmain.c: 100: LCD_string((char*)"Çàãðóçêà....");
  2109  0261  3045               	movlw	low (STR_1| (0+32768))
  2110  0262  1283               	bcf	3,5	;RP0=0, select bank0
  2111  0263  1303               	bcf	3,6	;RP1=0, select bank0
  2112  0264  00AE               	movwf	LCD_string@st
  2113  0265  3091               	movlw	high (STR_1| (0+32768))
  2114  0266  00AF               	movwf	LCD_string@st+1
  2115  0267  160A  158A  27B1  120A  118A  	fcall	_LCD_string
  2116                           
  2117                           ;newmain.c: 102: if(SPI_Read(100) == 0xFF)
  2118  026C  3064               	movlw	100
  2119  026D  00A6               	movwf	SPI_Read@address
  2120  026E  3000               	movlw	0
  2121  026F  00A7               	movwf	SPI_Read@address+1
  2122  0270  160A  158A  259A  120A  118A  	fcall	_SPI_Read
  2123  0275  3AFF               	xorlw	255
  2124  0276  1D03               	skipz
  2125  0277  2AA0               	goto	l5034
  2126                           
  2127                           ;newmain.c: 103: {;newmain.c: 104: for(unsigned char SPI_i = 0; SPI_i < 100; SPI_i++)
  2128  0278  1683               	bsf	3,5	;RP0=1, select bank1
  2129  0279  01E9               	clrf	main@SPI_i^(0+128)
  2130  027A                     l5026:
  2131                           
  2132                           ;newmain.c: 105: SPI_Write(SPI_i,0x00);
  2133  027A  0869               	movf	main@SPI_i^(0+128),w
  2134  027B  00E6               	movwf	??_main^(0+128)
  2135  027C  01E7               	clrf	(??_main^(0+128)+1)
  2136  027D  0866               	movf	??_main^(0+128),w
  2137  027E  1283               	bcf	3,5	;RP0=0, select bank0
  2138  027F  00A6               	movwf	SPI_Write@address
  2139  0280  1683               	bsf	3,5	;RP0=1, select bank1
  2140  0281  0867               	movf	(??_main+1)^(0+128),w
  2141  0282  1283               	bcf	3,5	;RP0=0, select bank0
  2142  0283  00A7               	movwf	SPI_Write@address+1
  2143  0284  01A8               	clrf	SPI_Write@data
  2144  0285  120A  118A  27CB  120A  118A  	fcall	_SPI_Write
  2145  028A  3001               	movlw	1
  2146  028B  1683               	bsf	3,5	;RP0=1, select bank1
  2147  028C  00E6               	movwf	??_main^(0+128)
  2148  028D  0866               	movf	??_main^(0+128),w
  2149  028E  07E9               	addwf	main@SPI_i^(0+128),f
  2150  028F  3064               	movlw	100
  2151  0290  0269               	subwf	main@SPI_i^(0+128),w
  2152  0291  1C03               	skipc
  2153  0292  2A7A               	goto	l5026
  2154                           
  2155                           ;newmain.c: 106: SPI_Write(100,0x01);
  2156  0293  3064               	movlw	100
  2157  0294  1283               	bcf	3,5	;RP0=0, select bank0
  2158  0295  00A6               	movwf	SPI_Write@address
  2159  0296  3000               	movlw	0
  2160  0297  00A7               	movwf	SPI_Write@address+1
  2161  0298  01A8               	clrf	SPI_Write@data
  2162  0299  0AA8               	incf	SPI_Write@data,f
  2163  029A  120A  118A  27CB  120A  118A  	fcall	_SPI_Write
  2164                           
  2165                           ;newmain.c: 107: }
  2166  029F  2B33               	goto	l181
  2167  02A0                     l5034:
  2168                           
  2169                           ;newmain.c: 108: else if(SPI_Read(100) == 0x01)
  2170  02A0  3064               	movlw	100
  2171  02A1  00A6               	movwf	SPI_Read@address
  2172  02A2  3000               	movlw	0
  2173  02A3  00A7               	movwf	SPI_Read@address+1
  2174  02A4  160A  158A  259A  120A  118A  	fcall	_SPI_Read
  2175  02A9  3A01               	xorlw	1
  2176  02AA  1D03               	skipz
  2177  02AB  2B33               	goto	l181
  2178                           
  2179                           ;newmain.c: 109: {;newmain.c: 110: _settingsBit = SPI_Read(0);
  2180  02AC  3000               	movlw	0
  2181  02AD  00A6               	movwf	SPI_Read@address
  2182  02AE  00A7               	movwf	SPI_Read@address+1
  2183  02AF  160A  158A  259A  120A  118A  	fcall	_SPI_Read
  2184  02B4  1683               	bsf	3,5	;RP0=1, select bank1
  2185  02B5  00E6               	movwf	??_main^(0+128)
  2186  02B6  0866               	movf	??_main^(0+128),w
  2187  02B7  00C4               	movwf	__settingsBit^(0+128)
  2188                           
  2189                           ;newmain.c: 112: _settingTimeImpDO1 = SPI_Read(1);
  2190  02B8  3001               	movlw	1
  2191  02B9  1283               	bcf	3,5	;RP0=0, select bank0
  2192  02BA  00A6               	movwf	SPI_Read@address
  2193  02BB  3000               	movlw	0
  2194  02BC  00A7               	movwf	SPI_Read@address+1
  2195  02BD  160A  158A  259A  120A  118A  	fcall	_SPI_Read
  2196  02C2  1683               	bsf	3,5	;RP0=1, select bank1
  2197  02C3  00E6               	movwf	??_main^(0+128)
  2198  02C4  01E7               	clrf	(??_main^(0+128)+1)
  2199  02C5  0866               	movf	??_main^(0+128),w
  2200  02C6  00B4               	movwf	__settingTimeImpDO1^(0+128)
  2201  02C7  0867               	movf	(??_main+1)^(0+128),w
  2202  02C8  00B5               	movwf	(__settingTimeImpDO1+1)^(0+128)
  2203                           
  2204                           ;newmain.c: 113: _settingTimeImpDO1 <<=8;
  2205  02C9  3008               	movlw	8
  2206  02CA                     u6055:
  2207  02CA  1003               	clrc
  2208  02CB  0DB4               	rlf	__settingTimeImpDO1^(0+128),f
  2209  02CC  0DB5               	rlf	(__settingTimeImpDO1+1)^(0+128),f
  2210  02CD  3EFF               	addlw	-1
  2211  02CE  1D03               	skipz
  2212  02CF  2ACA               	goto	u6055
  2213                           
  2214                           ;newmain.c: 114: _settingTimeImpDO1 |= SPI_Read(2);
  2215  02D0  3002               	movlw	2
  2216  02D1  1283               	bcf	3,5	;RP0=0, select bank0
  2217  02D2  00A6               	movwf	SPI_Read@address
  2218  02D3  3000               	movlw	0
  2219  02D4  00A7               	movwf	SPI_Read@address+1
  2220  02D5  160A  158A  259A  120A  118A  	fcall	_SPI_Read
  2221  02DA  1683               	bsf	3,5	;RP0=1, select bank1
  2222  02DB  00E6               	movwf	??_main^(0+128)
  2223  02DC  01E7               	clrf	(??_main^(0+128)+1)
  2224  02DD  0866               	movf	??_main^(0+128),w
  2225  02DE  04B4               	iorwf	__settingTimeImpDO1^(0+128),f
  2226  02DF  0867               	movf	(??_main+1)^(0+128),w
  2227  02E0  04B5               	iorwf	(__settingTimeImpDO1+1)^(0+128),f
  2228                           
  2229                           ;newmain.c: 116: _settingTimerOnDO2 = SPI_Read(3);
  2230  02E1  3003               	movlw	3
  2231  02E2  1283               	bcf	3,5	;RP0=0, select bank0
  2232  02E3  00A6               	movwf	SPI_Read@address
  2233  02E4  3000               	movlw	0
  2234  02E5  00A7               	movwf	SPI_Read@address+1
  2235  02E6  160A  158A  259A  120A  118A  	fcall	_SPI_Read
  2236  02EB  1683               	bsf	3,5	;RP0=1, select bank1
  2237  02EC  00E6               	movwf	??_main^(0+128)
  2238  02ED  01E7               	clrf	(??_main^(0+128)+1)
  2239  02EE  0866               	movf	??_main^(0+128),w
  2240  02EF  00B2               	movwf	__settingTimerOnDO2^(0+128)
  2241  02F0  0867               	movf	(??_main+1)^(0+128),w
  2242  02F1  00B3               	movwf	(__settingTimerOnDO2+1)^(0+128)
  2243                           
  2244                           ;newmain.c: 117: _settingTimerOnDO2 <<=8;
  2245  02F2  3008               	movlw	8
  2246  02F3                     u6065:
  2247  02F3  1003               	clrc
  2248  02F4  0DB2               	rlf	__settingTimerOnDO2^(0+128),f
  2249  02F5  0DB3               	rlf	(__settingTimerOnDO2+1)^(0+128),f
  2250  02F6  3EFF               	addlw	-1
  2251  02F7  1D03               	skipz
  2252  02F8  2AF3               	goto	u6065
  2253                           
  2254                           ;newmain.c: 118: _settingTimerOnDO2 |= SPI_Read(4);
  2255  02F9  3004               	movlw	4
  2256  02FA  1283               	bcf	3,5	;RP0=0, select bank0
  2257  02FB  00A6               	movwf	SPI_Read@address
  2258  02FC  3000               	movlw	0
  2259  02FD  00A7               	movwf	SPI_Read@address+1
  2260  02FE  160A  158A  259A  120A  118A  	fcall	_SPI_Read
  2261  0303  1683               	bsf	3,5	;RP0=1, select bank1
  2262  0304  00E6               	movwf	??_main^(0+128)
  2263  0305  01E7               	clrf	(??_main^(0+128)+1)
  2264  0306  0866               	movf	??_main^(0+128),w
  2265  0307  04B2               	iorwf	__settingTimerOnDO2^(0+128),f
  2266  0308  0867               	movf	(??_main+1)^(0+128),w
  2267  0309  04B3               	iorwf	(__settingTimerOnDO2+1)^(0+128),f
  2268                           
  2269                           ;newmain.c: 120: _settingTimerOffDO2 = SPI_Read(5);
  2270  030A  3005               	movlw	5
  2271  030B  1283               	bcf	3,5	;RP0=0, select bank0
  2272  030C  00A6               	movwf	SPI_Read@address
  2273  030D  3000               	movlw	0
  2274  030E  00A7               	movwf	SPI_Read@address+1
  2275  030F  160A  158A  259A  120A  118A  	fcall	_SPI_Read
  2276  0314  1683               	bsf	3,5	;RP0=1, select bank1
  2277  0315  00E6               	movwf	??_main^(0+128)
  2278  0316  01E7               	clrf	(??_main^(0+128)+1)
  2279  0317  0866               	movf	??_main^(0+128),w
  2280  0318  00B0               	movwf	__settingTimerOffDO2^(0+128)
  2281  0319  0867               	movf	(??_main+1)^(0+128),w
  2282  031A  00B1               	movwf	(__settingTimerOffDO2+1)^(0+128)
  2283                           
  2284                           ;newmain.c: 121: _settingTimerOffDO2 <<=8;
  2285  031B  3008               	movlw	8
  2286  031C                     u6075:
  2287  031C  1003               	clrc
  2288  031D  0DB0               	rlf	__settingTimerOffDO2^(0+128),f
  2289  031E  0DB1               	rlf	(__settingTimerOffDO2+1)^(0+128),f
  2290  031F  3EFF               	addlw	-1
  2291  0320  1D03               	skipz
  2292  0321  2B1C               	goto	u6075
  2293                           
  2294                           ;newmain.c: 122: _settingTimerOffDO2 |= SPI_Read(6);
  2295  0322  3006               	movlw	6
  2296  0323  1283               	bcf	3,5	;RP0=0, select bank0
  2297  0324  00A6               	movwf	SPI_Read@address
  2298  0325  3000               	movlw	0
  2299  0326  00A7               	movwf	SPI_Read@address+1
  2300  0327  160A  158A  259A  120A  118A  	fcall	_SPI_Read
  2301  032C  1683               	bsf	3,5	;RP0=1, select bank1
  2302  032D  00E6               	movwf	??_main^(0+128)
  2303  032E  01E7               	clrf	(??_main^(0+128)+1)
  2304  032F  0866               	movf	??_main^(0+128),w
  2305  0330  04B0               	iorwf	__settingTimerOffDO2^(0+128),f
  2306  0331  0867               	movf	(??_main+1)^(0+128),w
  2307  0332  04B1               	iorwf	(__settingTimerOffDO2+1)^(0+128),f
  2308  0333                     l181:
  2309                           
  2310                           ;newmain.c: 123: };newmain.c: 124: _delay((unsigned long)((500)*(8000000/4000.0)));
  2311  0333  3006               	movlw	6
  2312  0334  1683               	bsf	3,5	;RP0=1, select bank1
  2313  0335  1303               	bcf	3,6	;RP1=0, select bank1
  2314  0336  00E8               	movwf	(??_main^(0+128)+2)
  2315  0337  3013               	movlw	19
  2316  0338  00E7               	movwf	(??_main^(0+128)+1)
  2317  0339  30AD               	movlw	173
  2318  033A  00E6               	movwf	??_main^(0+128)
  2319  033B                     u6437:
  2320  033B  0BE6               	decfsz	??_main^(0+128),f
  2321  033C  2B3B               	goto	u6437
  2322  033D  0BE7               	decfsz	(??_main^(0+128)+1),f
  2323  033E  2B3B               	goto	u6437
  2324  033F  0BE8               	decfsz	(??_main^(0+128)+2),f
  2325  0340  2B3B               	goto	u6437
  2326  0341                     l5050:
  2327                           
  2328                           ;newmain.c: 128: _second = 0;
  2329  0341  13FA               	bcf	__second/(0+8),__second& (0+7)
  2330                           
  2331                           ;newmain.c: 129: _100ms = 0;
  2332  0342  1683               	bsf	3,5	;RP0=1, select bank1
  2333  0343  1303               	bcf	3,6	;RP1=0, select bank1
  2334  0344  126A               	bcf	(__100ms/(0+8))^(0+128),__100ms& (0+7)
  2335                           
  2336                           ;newmain.c: 130: _minute = 0;
  2337  0345  137A               	bcf	__minute/(0+8),__minute& (0+7)
  2338                           
  2339                           ;newmain.c: 131: _hour = 0;
  2340  0346  106A               	bcf	(__hour/(0+8))^(0+128),__hour& (0+7)
  2341                           
  2342                           ;newmain.c: 134: fACP();
  2343  0347  160A  158A  2762  120A  118A  	fcall	_fACP
  2344                           
  2345                           ;newmain.c: 135: temperatureAI1 = rTemperature(Analog.AI1);
  2346  034C  0825               	movf	(_Analog^(0+128)+1),w
  2347  034D  160A  118A  274E  120A  118A  	fcall	_rTemperature
  2348  0352  1683               	bsf	3,5	;RP0=1, select bank1
  2349  0353  00E6               	movwf	??_main^(0+128)
  2350  0354  0866               	movf	??_main^(0+128),w
  2351  0355  00B9               	movwf	_temperatureAI1^(0+128)
  2352                           
  2353                           ;newmain.c: 136: temperatureAI2 = rTemperature(Analog.AI2);
  2354  0356  0826               	movf	(_Analog^(0+128)+2),w
  2355  0357  160A  118A  274E  120A  118A  	fcall	_rTemperature
  2356  035C  1683               	bsf	3,5	;RP0=1, select bank1
  2357  035D  00E6               	movwf	??_main^(0+128)
  2358  035E  0866               	movf	??_main^(0+128),w
  2359  035F  00B8               	movwf	_temperatureAI2^(0+128)
  2360                           
  2361                           ;newmain.c: 137: fMenuStrip();
  2362  0360  120A  118A  241B  120A  118A  	fcall	_fMenuStrip
  2363                           
  2364                           ;newmain.c: 138: if(flStopBitRecieve)
  2365  0365  1DFA               	btfss	_flStopBitRecieve/(0+8),_flStopBitRecieve& (0+7)
  2366  0366  2B83               	goto	l5084
  2367                           
  2368                           ;newmain.c: 139: {;newmain.c: 140: if(arrCmd[0] == 0xF0 && arrCmd[1] == 0x00 && arrCmd[3
      +                          ] == 0x0F)
  2369  0367  30F0               	movlw	240
  2370  0368  1683               	bsf	3,5	;RP0=1, select bank1
  2371  0369  0620               	xorwf	_arrCmd^(0+128),w
  2372  036A  1D03               	btfss	3,2
  2373  036B  2B83               	goto	l5084
  2374  036C  0821               	movf	(_arrCmd^(0+128)+1),w
  2375  036D  1D03               	btfss	3,2
  2376  036E  2B83               	goto	l5084
  2377  036F  300F               	movlw	15
  2378  0370  0623               	xorwf	(_arrCmd^(0+128)+3),w
  2379  0371  1D03               	btfss	3,2
  2380  0372  2B83               	goto	l5084
  2381                           
  2382                           ;newmain.c: 141: {;newmain.c: 142: if(arrCmd[2] == 0x11 && flDO1 == 0)
  2383  0373  3011               	movlw	17
  2384  0374  0622               	xorwf	(_arrCmd^(0+128)+2),w
  2385  0375  1903               	btfsc	3,2
  2386  0376  1AFA               	btfsc	_flDO1/(0+8),_flDO1& (0+7)
  2387  0377  2B7B               	goto	l5080
  2388                           
  2389                           ;newmain.c: 143: {;newmain.c: 144: ((_tempPinDO) |= 1UL << (3));
  2390  0378  15C3               	bsf	__tempPinDO^(0+128),3
  2391                           
  2392                           ;newmain.c: 145: flDO1 = 1;
  2393  0379  16FA               	bsf	_flDO1/(0+8),_flDO1& (0+7)
  2394                           
  2395                           ;newmain.c: 146: }
  2396  037A  2B83               	goto	l5084
  2397  037B                     l5080:
  2398                           
  2399                           ;newmain.c: 147: else if(arrCmd[2] == 0x22)
  2400  037B  3022               	movlw	34
  2401  037C  0622               	xorwf	(_arrCmd^(0+128)+2),w
  2402  037D  1D03               	btfss	3,2
  2403  037E  2B83               	goto	l5084
  2404                           
  2405                           ;newmain.c: 148: {;newmain.c: 149: ((_tempPinDO) &= ~(1UL << (3)));
  2406  037F  30F7               	movlw	247
  2407  0380  00E6               	movwf	??_main^(0+128)
  2408  0381  0866               	movf	??_main^(0+128),w
  2409  0382  05C3               	andwf	__tempPinDO^(0+128),f
  2410  0383                     l5084:
  2411                           
  2412                           ;newmain.c: 150: };newmain.c: 151: };newmain.c: 152: };newmain.c: 154: if((_settingsBit 
      +                          & (1 << 1)) && (_tempPinDO & (1 << 3)))
  2413  0383  1683               	bsf	3,5	;RP0=1, select bank1
  2414  0384  18C4               	btfsc	__settingsBit^(0+128),1
  2415  0385  1DC3               	btfss	__tempPinDO^(0+128),3
  2416  0386  2BA4               	goto	l189
  2417                           
  2418                           ;newmain.c: 155: {;newmain.c: 156: if(_second) _timerDO1++;
  2419  0387  1FFA               	btfss	__second/(0+8),__second& (0+7)
  2420  0388  2B8F               	goto	l190
  2421  0389  3001               	movlw	1
  2422  038A  07AE               	addwf	__timerDO1^(0+128),f
  2423  038B  1803               	skipnc
  2424  038C  0AAF               	incf	(__timerDO1+1)^(0+128),f
  2425  038D  3000               	movlw	0
  2426  038E  07AF               	addwf	(__timerDO1+1)^(0+128),f
  2427  038F                     l190:
  2428                           
  2429                           ;newmain.c: 157: if(_timerDO1 > (short int)(_settingTimeImpDO1))
  2430  038F  0835               	movf	(__settingTimeImpDO1+1)^(0+128),w
  2431  0390  3A80               	xorlw	128
  2432  0391  00E6               	movwf	??_main^(0+128)
  2433  0392  082F               	movf	(__timerDO1+1)^(0+128),w
  2434  0393  3A80               	xorlw	128
  2435  0394  0266               	subwf	??_main^(0+128),w
  2436  0395  1D03               	skipz
  2437  0396  2B99               	goto	u6185
  2438  0397  082E               	movf	__timerDO1^(0+128),w
  2439  0398  0234               	subwf	__settingTimeImpDO1^(0+128),w
  2440  0399                     u6185:
  2441  0399  1803               	skipnc
  2442  039A  2BB0               	goto	l5102
  2443                           
  2444                           ;newmain.c: 158: {;newmain.c: 159: ((_tempPinDO) &= ~(1UL << (3)));
  2445  039B  30F7               	movlw	247
  2446  039C  1683               	bsf	3,5	;RP0=1, select bank1
  2447  039D  1303               	bcf	3,6	;RP1=0, select bank1
  2448  039E  00E6               	movwf	??_main^(0+128)
  2449  039F  0866               	movf	??_main^(0+128),w
  2450  03A0  05C3               	andwf	__tempPinDO^(0+128),f
  2451                           
  2452                           ;newmain.c: 160: _timerDO1 = 0;
  2453  03A1  01AE               	clrf	__timerDO1^(0+128)
  2454  03A2  01AF               	clrf	(__timerDO1+1)^(0+128)
  2455  03A3  2BB0               	goto	l5102
  2456  03A4                     l189:
  2457                           
  2458                           ;newmain.c: 163: else if(!(_settingsBit & (1 << 1)))
  2459  03A4  18C4               	btfsc	__settingsBit^(0+128),1
  2460  03A5  2BB0               	goto	l5102
  2461                           
  2462                           ;newmain.c: 164: {;newmain.c: 165: if(_tempPinDO & (1 << 3))
  2463  03A6  1DC3               	btfss	__tempPinDO^(0+128),3
  2464  03A7  2BAA               	goto	l194
  2465                           
  2466                           ;newmain.c: 166: ((_tempPinDO) |= 1UL << (3));
  2467  03A8  15C3               	bsf	__tempPinDO^(0+128),3
  2468  03A9  2BB0               	goto	l5102
  2469  03AA                     l194:
  2470                           
  2471                           ;newmain.c: 167: else if (!(_tempPinDO & (1 << 3)))
  2472  03AA  19C3               	btfsc	__tempPinDO^(0+128),3
  2473  03AB  2BB0               	goto	l5102
  2474                           
  2475                           ;newmain.c: 168: ((_tempPinDO) &= ~(1UL << (3)));
  2476  03AC  30F7               	movlw	247
  2477  03AD  00E6               	movwf	??_main^(0+128)
  2478  03AE  0866               	movf	??_main^(0+128),w
  2479  03AF  05C3               	andwf	__tempPinDO^(0+128),f
  2480  03B0                     l5102:
  2481                           
  2482                           ;newmain.c: 169: };newmain.c: 171: if(_settingsBit & (1 << 3))
  2483  03B0  1683               	bsf	3,5	;RP0=1, select bank1
  2484  03B1  1303               	bcf	3,6	;RP1=0, select bank1
  2485  03B2  1DC4               	btfss	__settingsBit^(0+128),3
  2486  03B3  2BEF               	goto	l5132
  2487                           
  2488                           ;newmain.c: 172: {;newmain.c: 173: if(_minute) _timerDO2++;
  2489  03B4  1F7A               	btfss	__minute/(0+8),__minute& (0+7)
  2490  03B5  2BBC               	goto	l5108
  2491  03B6  3001               	movlw	1
  2492  03B7  07AC               	addwf	__timerDO2^(0+128),f
  2493  03B8  1803               	skipnc
  2494  03B9  0AAD               	incf	(__timerDO2+1)^(0+128),f
  2495  03BA  3000               	movlw	0
  2496  03BB  07AD               	addwf	(__timerDO2+1)^(0+128),f
  2497  03BC                     l5108:
  2498                           
  2499                           ;newmain.c: 174: if((_settingsBit & (1 << 4)) && temperatureAI2 <= 20 && !(_tempPinDO & 
      +                          (1 << 4))){
  2500  03BC  1E44               	btfss	__settingsBit^(0+128),4
  2501  03BD  2BC7               	goto	l5118
  2502  03BE  0838               	movf	_temperatureAI2^(0+128),w
  2503  03BF  3A80               	xorlw	128
  2504  03C0  3E6B               	addlw	-149
  2505  03C1  1C03               	btfss	3,0
  2506  03C2  1A43               	btfsc	__tempPinDO^(0+128),4
  2507  03C3  2BC7               	goto	l5118
  2508                           
  2509                           ;newmain.c: 175: ((_tempPinDO) |= 1UL << (4));
  2510  03C4  1643               	bsf	__tempPinDO^(0+128),4
  2511                           
  2512                           ;newmain.c: 176: _timerDO2 = 0;
  2513  03C5  01AC               	clrf	__timerDO2^(0+128)
  2514  03C6  01AD               	clrf	(__timerDO2+1)^(0+128)
  2515  03C7                     l5118:
  2516                           
  2517                           ;newmain.c: 177: };newmain.c: 178: if(!(_tempPinDO & (1 << 4)))
  2518  03C7  1A43               	btfsc	__tempPinDO^(0+128),4
  2519  03C8  2BD9               	goto	l200
  2520                           
  2521                           ;newmain.c: 179: {;newmain.c: 180: if(_timerDO2 >= (short int)(_settingTimerOnDO2))
  2522  03C9  082D               	movf	(__timerDO2+1)^(0+128),w
  2523  03CA  3A80               	xorlw	128
  2524  03CB  00E6               	movwf	??_main^(0+128)
  2525  03CC  0833               	movf	(__settingTimerOnDO2+1)^(0+128),w
  2526  03CD  3A80               	xorlw	128
  2527  03CE  0266               	subwf	??_main^(0+128),w
  2528  03CF  1D03               	skipz
  2529  03D0  2BD3               	goto	u6285
  2530  03D1  0832               	movf	__settingTimerOnDO2^(0+128),w
  2531  03D2  022C               	subwf	__timerDO2^(0+128),w
  2532  03D3                     u6285:
  2533  03D3  1C03               	skipc
  2534  03D4  2BEF               	goto	l5132
  2535                           
  2536                           ;newmain.c: 181: {;newmain.c: 182: ((_tempPinDO) |= 1UL << (4));
  2537  03D5  1683               	bsf	3,5	;RP0=1, select bank1
  2538  03D6  1303               	bcf	3,6	;RP1=0, select bank1
  2539  03D7  1643               	bsf	__tempPinDO^(0+128),4
  2540  03D8  2BED               	goto	l5124
  2541  03D9                     l200:
  2542                           
  2543                           ;newmain.c: 186: else if(_tempPinDO & (1 << 4))
  2544  03D9  1E43               	btfss	__tempPinDO^(0+128),4
  2545  03DA  2BEF               	goto	l5132
  2546                           
  2547                           ;newmain.c: 187: {;newmain.c: 188: if(_timerDO2 >= (short int)(_settingTimerOffDO2))
  2548  03DB  082D               	movf	(__timerDO2+1)^(0+128),w
  2549  03DC  3A80               	xorlw	128
  2550  03DD  00E6               	movwf	??_main^(0+128)
  2551  03DE  0831               	movf	(__settingTimerOffDO2+1)^(0+128),w
  2552  03DF  3A80               	xorlw	128
  2553  03E0  0266               	subwf	??_main^(0+128),w
  2554  03E1  1D03               	skipz
  2555  03E2  2BE5               	goto	u6305
  2556  03E3  0830               	movf	__settingTimerOffDO2^(0+128),w
  2557  03E4  022C               	subwf	__timerDO2^(0+128),w
  2558  03E5                     u6305:
  2559  03E5  1C03               	skipc
  2560  03E6  2BEF               	goto	l5132
  2561                           
  2562                           ;newmain.c: 189: {;newmain.c: 190: ((_tempPinDO) &= ~(1UL << (4)));
  2563  03E7  30EF               	movlw	239
  2564  03E8  1683               	bsf	3,5	;RP0=1, select bank1
  2565  03E9  1303               	bcf	3,6	;RP1=0, select bank1
  2566  03EA  00E6               	movwf	??_main^(0+128)
  2567  03EB  0866               	movf	??_main^(0+128),w
  2568  03EC  05C3               	andwf	__tempPinDO^(0+128),f
  2569  03ED                     l5124:
  2570                           
  2571                           ;newmain.c: 183: _timerDO2 = 0;
  2572  03ED  01AC               	clrf	__timerDO2^(0+128)
  2573  03EE  01AD               	clrf	(__timerDO2+1)^(0+128)
  2574  03EF                     l5132:
  2575                           
  2576                           ;newmain.c: 192: };newmain.c: 193: };newmain.c: 194: };newmain.c: 197: if((RB3 && RB4) &
      +                          & (!(_tempPinDO & (1 << 5))))
  2577  03EF  1283               	bcf	3,5	;RP0=0, select bank0
  2578  03F0  1303               	bcf	3,6	;RP1=0, select bank0
  2579  03F1  1986               	btfsc	6,3	;volatile
  2580  03F2  1E06               	btfss	6,4	;volatile
  2581  03F3  2BF9               	goto	l205
  2582  03F4  1683               	bsf	3,5	;RP0=1, select bank1
  2583  03F5  1AC3               	btfsc	__tempPinDO^(0+128),5
  2584  03F6  2BF9               	goto	l205
  2585                           
  2586                           ;newmain.c: 198: ((_tempPinDO) |= 1UL << (5));
  2587  03F7  16C3               	bsf	__tempPinDO^(0+128),5
  2588  03F8  2C05               	goto	l5144
  2589  03F9                     l205:
  2590                           
  2591                           ;newmain.c: 199: else if (!(RB3 && RB4) && (_tempPinDO & (1 << 5)))
  2592  03F9  1283               	bcf	3,5	;RP0=0, select bank0
  2593  03FA  1D86               	btfss	6,3	;volatile
  2594  03FB  2BFE               	goto	l209
  2595  03FC  1A06               	btfsc	6,4	;volatile
  2596  03FD  2C05               	goto	l5144
  2597  03FE                     l209:
  2598  03FE  1683               	bsf	3,5	;RP0=1, select bank1
  2599  03FF  1EC3               	btfss	__tempPinDO^(0+128),5
  2600  0400  2C05               	goto	l5144
  2601                           
  2602                           ;newmain.c: 200: ((_tempPinDO) &= ~(1UL << (5)));
  2603  0401  30DF               	movlw	223
  2604  0402  00E6               	movwf	??_main^(0+128)
  2605  0403  0866               	movf	??_main^(0+128),w
  2606  0404  05C3               	andwf	__tempPinDO^(0+128),f
  2607  0405                     l5144:
  2608                           
  2609                           ;newmain.c: 203: if((RB5 || RB6) && (!(_tempPinDO & (1 << 6))))
  2610  0405  1283               	bcf	3,5	;RP0=0, select bank0
  2611  0406  1A86               	btfsc	6,5	;volatile
  2612  0407  2C0A               	goto	l212
  2613  0408  1F06               	btfss	6,6	;volatile
  2614  0409  2C0F               	goto	l210
  2615  040A                     l212:
  2616  040A  1683               	bsf	3,5	;RP0=1, select bank1
  2617  040B  1B43               	btfsc	__tempPinDO^(0+128),6
  2618  040C  2C0F               	goto	l210
  2619                           
  2620                           ;newmain.c: 204: ((_tempPinDO) |= 1UL << (6));
  2621  040D  1743               	bsf	__tempPinDO^(0+128),6
  2622  040E  2B41               	goto	l5050
  2623  040F                     l210:
  2624                           
  2625                           ;newmain.c: 205: else if (!(RB5 || RB6) && (_tempPinDO & (1 << 6)))
  2626  040F  1283               	bcf	3,5	;RP0=0, select bank0
  2627  0410  1E86               	btfss	6,5	;volatile
  2628  0411  1B06               	btfsc	6,6	;volatile
  2629  0412  2B41               	goto	l5050
  2630  0413  1683               	bsf	3,5	;RP0=1, select bank1
  2631  0414  1F43               	btfss	__tempPinDO^(0+128),6
  2632  0415  2B41               	goto	l5050
  2633                           
  2634                           ;newmain.c: 206: ((_tempPinDO) &= ~(1UL << (6)));
  2635  0416  30BF               	movlw	191
  2636  0417  00E6               	movwf	??_main^(0+128)
  2637  0418  0866               	movf	??_main^(0+128),w
  2638  0419  05C3               	andwf	__tempPinDO^(0+128),f
  2639  041A  2B41               	goto	l5050
  2640  041B                     __end_of_main:
  2641                           
  2642                           	psect	text1
  2643  174E                     __ptext1:	
  2644 ;; *************** function _rTemperature *****************
  2645 ;; Defined at:
  2646 ;;		line 8 in file "temp_ntc.c"
  2647 ;; Parameters:    Size  Location     Type
  2648 ;;  analogAI        1    wreg     unsigned char 
  2649 ;; Auto vars:     Size  Location     Type
  2650 ;;  analogAI        1   29[BANK1 ] unsigned char 
  2651 ;; Return value:  Size  Location     Type
  2652 ;;                  1    wreg      char 
  2653 ;; Registers used:
  2654 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2655 ;; Tracked objects:
  2656 ;;		On entry : 300/100
  2657 ;;		On exit  : 200/0
  2658 ;;		Unchanged: 0/0
  2659 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2660 ;;      Params:         0       0       0       0       0
  2661 ;;      Locals:         0       0      10       0       0
  2662 ;;      Temps:          0       0       0       0       0
  2663 ;;      Totals:         0       0      10       0       0
  2664 ;;Total ram usage:       10 bytes
  2665 ;; Hardware stack levels used: 1
  2666 ;; Hardware stack levels required when called: 6
  2667 ;; This function calls:
  2668 ;;		___awtoft
  2669 ;;		___ftadd
  2670 ;;		___ftdiv
  2671 ;;		___fttol
  2672 ;;		_log
  2673 ;;		_rThermistor
  2674 ;; This function is called by:
  2675 ;;		_main
  2676 ;; This function uses a non-reentrant model
  2677 ;;
  2678                           
  2679                           
  2680                           ;psect for function _rTemperature
  2681  174E                     _rTemperature:
  2682                           
  2683                           ;incstack = 0
  2684                           ; Regs used in _rTemperature: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2685                           ;rTemperature@analogAI stored from wreg
  2686  174E  00E5               	movwf	rTemperature@analogAI^(0+128)
  2687                           
  2688                           ;temp_ntc.c: 9: if(analogAI == 255) return 0;
  2689  174F  0A65               	incf	rTemperature@analogAI^(0+128),w
  2690  1750  1D03               	btfss	3,2
  2691  1751  2F54               	goto	l4488
  2692  1752  3000               	movlw	0
  2693  1753  0008               	return
  2694  1754                     l4488:
  2695                           
  2696                           ;temp_ntc.c: 10: return (1 / ((log(10000.0 / rThermistor(analogAI)) / 3892.48) + (1.0 / 
      +                          (25 + 273.15)))) - 273.15;
  2697  1754  0865               	movf	rTemperature@analogAI^(0+128),w
  2698  1755  160A  118A  2273  160A  118A  	fcall	_rThermistor
  2699  175A  086D               	movf	?_rThermistor+1,w
  2700  175B  1683               	bsf	3,5	;RP0=1, select bank1
  2701  175C  00D3               	movwf	(___awtoft@c+1)^(0+128)
  2702  175D  1283               	bcf	3,5	;RP0=0, select bank0
  2703  175E  086C               	movf	?_rThermistor,w
  2704  175F  1683               	bsf	3,5	;RP0=1, select bank1
  2705  1760  00D2               	movwf	___awtoft@c^(0+128)
  2706  1761  160A  158A  2543  160A  118A  	fcall	___awtoft
  2707  1766  0852               	movf	?___awtoft^(0+128),w
  2708  1767  00DC               	movwf	_rTemperature$1775^(0+128)
  2709  1768  0853               	movf	(?___awtoft+1)^(0+128),w
  2710  1769  00DD               	movwf	(_rTemperature$1775+1)^(0+128)
  2711  176A  0854               	movf	(?___awtoft+2)^(0+128),w
  2712  176B  00DE               	movwf	(_rTemperature$1775+2)^(0+128)
  2713                           
  2714                           ;temp_ntc.c: 10: return (1 / ((log(10000.0 / rThermistor(analogAI)) / 3892.48) + (1.0 / 
      +                          (25 + 273.15)))) - 273.15;
  2715  176C  3040               	movlw	64
  2716  176D  1283               	bcf	3,5	;RP0=0, select bank0
  2717  176E  00D7               	movwf	___ftdiv@f1
  2718  176F  301C               	movlw	28
  2719  1770  00D8               	movwf	___ftdiv@f1+1
  2720  1771  3046               	movlw	70
  2721  1772  00D9               	movwf	___ftdiv@f1+2
  2722  1773  1683               	bsf	3,5	;RP0=1, select bank1
  2723  1774  085C               	movf	_rTemperature$1775^(0+128),w
  2724  1775  1283               	bcf	3,5	;RP0=0, select bank0
  2725  1776  00D4               	movwf	___ftdiv@f2
  2726  1777  1683               	bsf	3,5	;RP0=1, select bank1
  2727  1778  085D               	movf	(_rTemperature$1775+1)^(0+128),w
  2728  1779  1283               	bcf	3,5	;RP0=0, select bank0
  2729  177A  00D5               	movwf	___ftdiv@f2+1
  2730  177B  1683               	bsf	3,5	;RP0=1, select bank1
  2731  177C  085E               	movf	(_rTemperature$1775+2)^(0+128),w
  2732  177D  1283               	bcf	3,5	;RP0=0, select bank0
  2733  177E  00D6               	movwf	___ftdiv@f2+2
  2734  177F  160A  118A  255B  160A  118A  	fcall	___ftdiv
  2735  1784  0854               	movf	?___ftdiv,w
  2736  1785  1683               	bsf	3,5	;RP0=1, select bank1
  2737  1786  00D6               	movwf	log@x^(0+128)
  2738  1787  1283               	bcf	3,5	;RP0=0, select bank0
  2739  1788  0855               	movf	?___ftdiv+1,w
  2740  1789  1683               	bsf	3,5	;RP0=1, select bank1
  2741  178A  00D7               	movwf	(log@x+1)^(0+128)
  2742  178B  1283               	bcf	3,5	;RP0=0, select bank0
  2743  178C  0856               	movf	?___ftdiv+2,w
  2744  178D  1683               	bsf	3,5	;RP0=1, select bank1
  2745  178E  00D8               	movwf	(log@x+2)^(0+128)
  2746  178F  120A  118A  2635  160A  118A  	fcall	_log
  2747  1794  0856               	movf	?_log^(0+128),w
  2748  1795  00DF               	movwf	_rTemperature$1776^(0+128)
  2749  1796  0857               	movf	(?_log+1)^(0+128),w
  2750  1797  00E0               	movwf	(_rTemperature$1776+1)^(0+128)
  2751  1798  0858               	movf	(?_log+2)^(0+128),w
  2752  1799  00E1               	movwf	(_rTemperature$1776+2)^(0+128)
  2753                           
  2754                           ;temp_ntc.c: 10: return (1 / ((log(10000.0 / rThermistor(analogAI)) / 3892.48) + (1.0 / 
      +                          (25 + 273.15)))) - 273.15;
  2755  179A  085F               	movf	_rTemperature$1776^(0+128),w
  2756  179B  1283               	bcf	3,5	;RP0=0, select bank0
  2757  179C  00D7               	movwf	___ftdiv@f1
  2758  179D  1683               	bsf	3,5	;RP0=1, select bank1
  2759  179E  0860               	movf	(_rTemperature$1776+1)^(0+128),w
  2760  179F  1283               	bcf	3,5	;RP0=0, select bank0
  2761  17A0  00D8               	movwf	___ftdiv@f1+1
  2762  17A1  1683               	bsf	3,5	;RP0=1, select bank1
  2763  17A2  0861               	movf	(_rTemperature$1776+2)^(0+128),w
  2764  17A3  1283               	bcf	3,5	;RP0=0, select bank0
  2765  17A4  00D9               	movwf	___ftdiv@f1+2
  2766  17A5  3048               	movlw	72
  2767  17A6  00D4               	movwf	___ftdiv@f2
  2768  17A7  3073               	movlw	115
  2769  17A8  00D5               	movwf	___ftdiv@f2+1
  2770  17A9  3045               	movlw	69
  2771  17AA  00D6               	movwf	___ftdiv@f2+2
  2772  17AB  160A  118A  255B  160A  118A  	fcall	___ftdiv
  2773  17B0  0854               	movf	?___ftdiv,w
  2774  17B1  00BB               	movwf	___ftadd@f2
  2775  17B2  0855               	movf	?___ftdiv+1,w
  2776  17B3  00BC               	movwf	___ftadd@f2+1
  2777  17B4  0856               	movf	?___ftdiv+2,w
  2778  17B5  00BD               	movwf	___ftadd@f2+2
  2779  17B6  30CF               	movlw	207
  2780  17B7  00B8               	movwf	___ftadd@f1
  2781  17B8  305B               	movlw	91
  2782  17B9  00B9               	movwf	___ftadd@f1+1
  2783  17BA  303B               	movlw	59
  2784  17BB  00BA               	movwf	___ftadd@f1+2
  2785  17BC  120A  118A  2530  160A  118A  	fcall	___ftadd
  2786  17C1  0838               	movf	?___ftadd,w
  2787  17C2  1683               	bsf	3,5	;RP0=1, select bank1
  2788  17C3  00E2               	movwf	_rTemperature$1777^(0+128)
  2789  17C4  1283               	bcf	3,5	;RP0=0, select bank0
  2790  17C5  0839               	movf	?___ftadd+1,w
  2791  17C6  1683               	bsf	3,5	;RP0=1, select bank1
  2792  17C7  00E3               	movwf	(_rTemperature$1777+1)^(0+128)
  2793  17C8  1283               	bcf	3,5	;RP0=0, select bank0
  2794  17C9  083A               	movf	?___ftadd+2,w
  2795  17CA  1683               	bsf	3,5	;RP0=1, select bank1
  2796  17CB  00E4               	movwf	(_rTemperature$1777+2)^(0+128)
  2797                           
  2798                           ;temp_ntc.c: 10: return (1 / ((log(10000.0 / rThermistor(analogAI)) / 3892.48) + (1.0 / 
      +                          (25 + 273.15)))) - 273.15;
  2799  17CC  3000               	movlw	0
  2800  17CD  1283               	bcf	3,5	;RP0=0, select bank0
  2801  17CE  00D7               	movwf	___ftdiv@f1
  2802  17CF  3080               	movlw	128
  2803  17D0  00D8               	movwf	___ftdiv@f1+1
  2804  17D1  303F               	movlw	63
  2805  17D2  00D9               	movwf	___ftdiv@f1+2
  2806  17D3  1683               	bsf	3,5	;RP0=1, select bank1
  2807  17D4  0862               	movf	_rTemperature$1777^(0+128),w
  2808  17D5  1283               	bcf	3,5	;RP0=0, select bank0
  2809  17D6  00D4               	movwf	___ftdiv@f2
  2810  17D7  1683               	bsf	3,5	;RP0=1, select bank1
  2811  17D8  0863               	movf	(_rTemperature$1777+1)^(0+128),w
  2812  17D9  1283               	bcf	3,5	;RP0=0, select bank0
  2813  17DA  00D5               	movwf	___ftdiv@f2+1
  2814  17DB  1683               	bsf	3,5	;RP0=1, select bank1
  2815  17DC  0864               	movf	(_rTemperature$1777+2)^(0+128),w
  2816  17DD  1283               	bcf	3,5	;RP0=0, select bank0
  2817  17DE  00D6               	movwf	___ftdiv@f2+2
  2818  17DF  160A  118A  255B  160A  118A  	fcall	___ftdiv
  2819  17E4  0854               	movf	?___ftdiv,w
  2820  17E5  00BB               	movwf	___ftadd@f2
  2821  17E6  0855               	movf	?___ftdiv+1,w
  2822  17E7  00BC               	movwf	___ftadd@f2+1
  2823  17E8  0856               	movf	?___ftdiv+2,w
  2824  17E9  00BD               	movwf	___ftadd@f2+2
  2825  17EA  3093               	movlw	147
  2826  17EB  00B8               	movwf	___ftadd@f1
  2827  17EC  3088               	movlw	136
  2828  17ED  00B9               	movwf	___ftadd@f1+1
  2829  17EE  30C3               	movlw	195
  2830  17EF  00BA               	movwf	___ftadd@f1+2
  2831  17F0  120A  118A  2530  160A  118A  	fcall	___ftadd
  2832  17F5  0838               	movf	?___ftadd,w
  2833  17F6  00E4               	movwf	___fttol@f1
  2834  17F7  0839               	movf	?___ftadd+1,w
  2835  17F8  00E5               	movwf	___fttol@f1+1
  2836  17F9  083A               	movf	?___ftadd+2,w
  2837  17FA  00E6               	movwf	___fttol@f1+2
  2838  17FB  160A  118A  24C9   	fcall	___fttol
  2839  17FE  0864               	movf	?___fttol,w
  2840  17FF  0008               	return
  2841  1800                     __end_of_rTemperature:
  2842                           
  2843                           	psect	text2
  2844  1273                     __ptext2:	
  2845 ;; *************** function _rThermistor *****************
  2846 ;; Defined at:
  2847 ;;		line 3 in file "temp_ntc.c"
  2848 ;; Parameters:    Size  Location     Type
  2849 ;;  analogAI        1    wreg     unsigned char 
  2850 ;; Auto vars:     Size  Location     Type
  2851 ;;  analogAI        1    9[BANK1 ] unsigned char 
  2852 ;;  A               3    6[BANK1 ] float 
  2853 ;; Return value:  Size  Location     Type
  2854 ;;                  2   76[BANK0 ] short 
  2855 ;; Registers used:
  2856 ;;		wreg, status,2, status,0, pclath, cstack
  2857 ;; Tracked objects:
  2858 ;;		On entry : 300/100
  2859 ;;		On exit  : 300/0
  2860 ;;		Unchanged: 0/0
  2861 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2862 ;;      Params:         0       2       0       0       0
  2863 ;;      Locals:         0       0       4       0       0
  2864 ;;      Temps:          0       0       0       0       0
  2865 ;;      Totals:         0       2       4       0       0
  2866 ;;Total ram usage:        6 bytes
  2867 ;; Hardware stack levels used: 1
  2868 ;; Hardware stack levels required when called: 4
  2869 ;; This function calls:
  2870 ;;		___ftadd
  2871 ;;		___ftdiv
  2872 ;;		___ftmul
  2873 ;;		___fttol
  2874 ;;		___lbtoft
  2875 ;; This function is called by:
  2876 ;;		_rTemperature
  2877 ;; This function uses a non-reentrant model
  2878 ;;
  2879                           
  2880                           
  2881                           ;psect for function _rThermistor
  2882  1273                     _rThermistor:
  2883                           
  2884                           ;incstack = 0
  2885                           ; Regs used in _rThermistor: [wreg+status,2+status,0+pclath+cstack]
  2886                           ;rThermistor@analogAI stored from wreg
  2887  1273  00D1               	movwf	rThermistor@analogAI^(0+128)
  2888                           
  2889                           ;temp_ntc.c: 4: float A = (255.0 / (float)analogAI) - 1.0;
  2890  1274  3000               	movlw	0
  2891  1275  1283               	bcf	3,5	;RP0=0, select bank0
  2892  1276  00B8               	movwf	___ftadd@f1
  2893  1277  3080               	movlw	128
  2894  1278  00B9               	movwf	___ftadd@f1+1
  2895  1279  30BF               	movlw	191
  2896  127A  00BA               	movwf	___ftadd@f1+2
  2897  127B  1683               	bsf	3,5	;RP0=1, select bank1
  2898  127C  0851               	movf	rThermistor@analogAI^(0+128),w
  2899  127D  160A  158A  24E5  160A  118A  	fcall	___lbtoft
  2900  1282  0828               	movf	?___lbtoft,w
  2901  1283  00D4               	movwf	___ftdiv@f2
  2902  1284  0829               	movf	?___lbtoft+1,w
  2903  1285  00D5               	movwf	___ftdiv@f2+1
  2904  1286  082A               	movf	?___lbtoft+2,w
  2905  1287  00D6               	movwf	___ftdiv@f2+2
  2906  1288  3000               	movlw	0
  2907  1289  00D7               	movwf	___ftdiv@f1
  2908  128A  307F               	movlw	127
  2909  128B  00D8               	movwf	___ftdiv@f1+1
  2910  128C  3043               	movlw	67
  2911  128D  00D9               	movwf	___ftdiv@f1+2
  2912  128E  160A  118A  255B  160A  118A  	fcall	___ftdiv
  2913  1293  0854               	movf	?___ftdiv,w
  2914  1294  00BB               	movwf	___ftadd@f2
  2915  1295  0855               	movf	?___ftdiv+1,w
  2916  1296  00BC               	movwf	___ftadd@f2+1
  2917  1297  0856               	movf	?___ftdiv+2,w
  2918  1298  00BD               	movwf	___ftadd@f2+2
  2919  1299  120A  118A  2530  160A  118A  	fcall	___ftadd
  2920  129E  0838               	movf	?___ftadd,w
  2921  129F  1683               	bsf	3,5	;RP0=1, select bank1
  2922  12A0  00CE               	movwf	rThermistor@A^(0+128)
  2923  12A1  1283               	bcf	3,5	;RP0=0, select bank0
  2924  12A2  0839               	movf	?___ftadd+1,w
  2925  12A3  1683               	bsf	3,5	;RP0=1, select bank1
  2926  12A4  00CF               	movwf	(rThermistor@A+1)^(0+128)
  2927  12A5  1283               	bcf	3,5	;RP0=0, select bank0
  2928  12A6  083A               	movf	?___ftadd+2,w
  2929  12A7  1683               	bsf	3,5	;RP0=1, select bank1
  2930  12A8  00D0               	movwf	(rThermistor@A+2)^(0+128)
  2931                           
  2932                           ;temp_ntc.c: 5: return A * 10000;
  2933  12A9  084E               	movf	rThermistor@A^(0+128),w
  2934  12AA  1283               	bcf	3,5	;RP0=0, select bank0
  2935  12AB  00AB               	movwf	___ftmul@f2
  2936  12AC  1683               	bsf	3,5	;RP0=1, select bank1
  2937  12AD  084F               	movf	(rThermistor@A+1)^(0+128),w
  2938  12AE  1283               	bcf	3,5	;RP0=0, select bank0
  2939  12AF  00AC               	movwf	___ftmul@f2+1
  2940  12B0  1683               	bsf	3,5	;RP0=1, select bank1
  2941  12B1  0850               	movf	(rThermistor@A+2)^(0+128),w
  2942  12B2  1283               	bcf	3,5	;RP0=0, select bank0
  2943  12B3  00AD               	movwf	___ftmul@f2+2
  2944  12B4  3040               	movlw	64
  2945  12B5  00A8               	movwf	___ftmul@f1
  2946  12B6  301C               	movlw	28
  2947  12B7  00A9               	movwf	___ftmul@f1+1
  2948  12B8  3046               	movlw	70
  2949  12B9  00AA               	movwf	___ftmul@f1+2
  2950  12BA  120A  118A  2718  160A  118A  	fcall	___ftmul
  2951  12BF  0828               	movf	?___ftmul,w
  2952  12C0  00E4               	movwf	___fttol@f1
  2953  12C1  0829               	movf	?___ftmul+1,w
  2954  12C2  00E5               	movwf	___fttol@f1+1
  2955  12C3  082A               	movf	?___ftmul+2,w
  2956  12C4  00E6               	movwf	___fttol@f1+2
  2957  12C5  160A  118A  24C9   	fcall	___fttol
  2958  12C8  0865               	movf	?___fttol+1,w
  2959  12C9  00ED               	movwf	?_rThermistor+1
  2960  12CA  0864               	movf	?___fttol,w
  2961  12CB  00EC               	movwf	?_rThermistor
  2962  12CC  0008               	return
  2963  12CD                     __end_of_rThermistor:
  2964                           
  2965                           	psect	text3
  2966  1CE5                     __ptext3:	
  2967 ;; *************** function ___lbtoft *****************
  2968 ;; Defined at:
  2969 ;;		line 27 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\lbtoft.c"
  2970 ;; Parameters:    Size  Location     Type
  2971 ;;  c               1    wreg     unsigned char 
  2972 ;; Auto vars:     Size  Location     Type
  2973 ;;  c               1   15[BANK0 ] unsigned char 
  2974 ;; Return value:  Size  Location     Type
  2975 ;;                  3    8[BANK0 ] float 
  2976 ;; Registers used:
  2977 ;;		wreg, status,2, status,0, pclath, cstack
  2978 ;; Tracked objects:
  2979 ;;		On entry : 300/100
  2980 ;;		On exit  : 300/0
  2981 ;;		Unchanged: 0/0
  2982 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2983 ;;      Params:         0       3       0       0       0
  2984 ;;      Locals:         0       1       0       0       0
  2985 ;;      Temps:          0       4       0       0       0
  2986 ;;      Totals:         0       8       0       0       0
  2987 ;;Total ram usage:        8 bytes
  2988 ;; Hardware stack levels used: 1
  2989 ;; Hardware stack levels required when called: 3
  2990 ;; This function calls:
  2991 ;;		___ftpack
  2992 ;; This function is called by:
  2993 ;;		_rThermistor
  2994 ;; This function uses a non-reentrant model
  2995 ;;
  2996                           
  2997                           
  2998                           ;psect for function ___lbtoft
  2999  1CE5                     ___lbtoft:
  3000                           
  3001                           ;incstack = 0
  3002                           ; Regs used in ___lbtoft: [wreg+status,2+status,0+pclath+cstack]
  3003                           ;___lbtoft@c stored from wreg
  3004  1CE5  1283               	bcf	3,5	;RP0=0, select bank0
  3005  1CE6  00AF               	movwf	___lbtoft@c
  3006  1CE7  082F               	movf	___lbtoft@c,w
  3007  1CE8  00AB               	movwf	??___lbtoft
  3008  1CE9  01AC               	clrf	??___lbtoft+1
  3009  1CEA  01AD               	clrf	??___lbtoft+2
  3010  1CEB  082B               	movf	??___lbtoft,w
  3011  1CEC  00A0               	movwf	___ftpack@arg
  3012  1CED  082C               	movf	??___lbtoft+1,w
  3013  1CEE  00A1               	movwf	___ftpack@arg+1
  3014  1CEF  082D               	movf	??___lbtoft+2,w
  3015  1CF0  00A2               	movwf	___ftpack@arg+2
  3016  1CF1  308E               	movlw	142
  3017  1CF2  00AE               	movwf	??___lbtoft+3
  3018  1CF3  082E               	movf	??___lbtoft+3,w
  3019  1CF4  00A3               	movwf	___ftpack@exp
  3020  1CF5  01A4               	clrf	___ftpack@sign
  3021  1CF6  160A  118A  22CD   	fcall	___ftpack
  3022  1CF9  0820               	movf	?___ftpack,w
  3023  1CFA  00A8               	movwf	?___lbtoft
  3024  1CFB  0821               	movf	?___ftpack+1,w
  3025  1CFC  00A9               	movwf	?___lbtoft+1
  3026  1CFD  0822               	movf	?___ftpack+2,w
  3027  1CFE  00AA               	movwf	?___lbtoft+2
  3028  1CFF  0008               	return
  3029  1D00                     __end_of___lbtoft:
  3030                           
  3031                           	psect	text4
  3032  14C9                     __ptext4:	
  3033 ;; *************** function ___fttol *****************
  3034 ;; Defined at:
  3035 ;;		line 44 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\fttol.c"
  3036 ;; Parameters:    Size  Location     Type
  3037 ;;  f1              3   68[BANK0 ] float 
  3038 ;; Auto vars:     Size  Location     Type
  3039 ;;  lval            4    1[BANK1 ] unsigned long 
  3040 ;;  exp1            1    5[BANK1 ] unsigned char 
  3041 ;;  sign1           1    0[BANK1 ] unsigned char 
  3042 ;; Return value:  Size  Location     Type
  3043 ;;                  4   68[BANK0 ] long 
  3044 ;; Registers used:
  3045 ;;		wreg, status,2, status,0
  3046 ;; Tracked objects:
  3047 ;;		On entry : 300/0
  3048 ;;		On exit  : 300/0
  3049 ;;		Unchanged: 0/0
  3050 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3051 ;;      Params:         0       4       0       0       0
  3052 ;;      Locals:         0       0       6       0       0
  3053 ;;      Temps:          0       4       0       0       0
  3054 ;;      Totals:         0       8       6       0       0
  3055 ;;Total ram usage:       14 bytes
  3056 ;; Hardware stack levels used: 1
  3057 ;; Hardware stack levels required when called: 2
  3058 ;; This function calls:
  3059 ;;		Nothing
  3060 ;; This function is called by:
  3061 ;;		_rThermistor
  3062 ;;		_rTemperature
  3063 ;; This function uses a non-reentrant model
  3064 ;;
  3065                           
  3066                           
  3067                           ;psect for function ___fttol
  3068  14C9                     ___fttol:
  3069                           
  3070                           ;incstack = 0
  3071                           ; Regs used in ___fttol: [wreg+status,2+status,0]
  3072  14C9  0864               	movf	___fttol@f1,w
  3073  14CA  00E8               	movwf	??___fttol
  3074  14CB  0865               	movf	___fttol@f1+1,w
  3075  14CC  00E9               	movwf	??___fttol+1
  3076  14CD  0866               	movf	___fttol@f1+2,w
  3077  14CE  00EA               	movwf	??___fttol+2
  3078  14CF  1003               	clrc
  3079  14D0  0D69               	rlf	??___fttol+1,w
  3080  14D1  0D6A               	rlf	??___fttol+2,w
  3081  14D2  00EB               	movwf	??___fttol+3
  3082  14D3  086B               	movf	??___fttol+3,w
  3083  14D4  1683               	bsf	3,5	;RP0=1, select bank1
  3084  14D5  00CD               	movwf	___fttol@exp1^(0+128)
  3085  14D6  084D               	movf	___fttol@exp1^(0+128),w
  3086  14D7  1D03               	btfss	3,2
  3087  14D8  2CE3               	goto	l3708
  3088  14D9                     l3704:
  3089  14D9  3000               	movlw	0
  3090  14DA  1283               	bcf	3,5	;RP0=0, select bank0
  3091  14DB  00E7               	movwf	?___fttol+3
  3092  14DC  3000               	movlw	0
  3093  14DD  00E6               	movwf	?___fttol+2
  3094  14DE  3000               	movlw	0
  3095  14DF  00E5               	movwf	?___fttol+1
  3096  14E0  3000               	movlw	0
  3097  14E1  00E4               	movwf	?___fttol
  3098  14E2  0008               	return
  3099  14E3                     l3708:
  3100  14E3  1283               	bcf	3,5	;RP0=0, select bank0
  3101  14E4  0864               	movf	___fttol@f1,w
  3102  14E5  00E8               	movwf	??___fttol
  3103  14E6  0865               	movf	___fttol@f1+1,w
  3104  14E7  00E9               	movwf	??___fttol+1
  3105  14E8  0866               	movf	___fttol@f1+2,w
  3106  14E9  00EA               	movwf	??___fttol+2
  3107  14EA  3017               	movlw	23
  3108  14EB                     u3985:
  3109  14EB  1003               	clrc
  3110  14EC  0CEA               	rrf	??___fttol+2,f
  3111  14ED  0CE9               	rrf	??___fttol+1,f
  3112  14EE  0CE8               	rrf	??___fttol,f
  3113  14EF  3EFF               	addlw	-1
  3114  14F0  1D03               	skipz
  3115  14F1  2CEB               	goto	u3985
  3116  14F2  0868               	movf	??___fttol,w
  3117  14F3  00EB               	movwf	??___fttol+3
  3118  14F4  086B               	movf	??___fttol+3,w
  3119  14F5  1683               	bsf	3,5	;RP0=1, select bank1
  3120  14F6  00C8               	movwf	___fttol@sign1^(0+128)
  3121  14F7  1283               	bcf	3,5	;RP0=0, select bank0
  3122  14F8  17E5               	bsf	___fttol@f1+1,7
  3123  14F9  30FF               	movlw	255
  3124  14FA  05E4               	andwf	___fttol@f1,f
  3125  14FB  30FF               	movlw	255
  3126  14FC  05E5               	andwf	___fttol@f1+1,f
  3127  14FD  3000               	movlw	0
  3128  14FE  05E6               	andwf	___fttol@f1+2,f
  3129  14FF  0864               	movf	___fttol@f1,w
  3130  1500  1683               	bsf	3,5	;RP0=1, select bank1
  3131  1501  00C9               	movwf	___fttol@lval^(0+128)
  3132  1502  1283               	bcf	3,5	;RP0=0, select bank0
  3133  1503  0865               	movf	___fttol@f1+1,w
  3134  1504  1683               	bsf	3,5	;RP0=1, select bank1
  3135  1505  00CA               	movwf	(___fttol@lval^(0+128)+1)
  3136  1506  1283               	bcf	3,5	;RP0=0, select bank0
  3137  1507  0866               	movf	___fttol@f1+2,w
  3138  1508  1683               	bsf	3,5	;RP0=1, select bank1
  3139  1509  00CB               	movwf	(___fttol@lval^(0+128)+2)
  3140  150A  01CC               	clrf	(___fttol@lval^(0+128)+3)
  3141  150B  308E               	movlw	142
  3142  150C  02CD               	subwf	___fttol@exp1^(0+128),f
  3143  150D  1FCD               	btfss	___fttol@exp1^(0+128),7
  3144  150E  2D26               	goto	l3728
  3145  150F  084D               	movf	___fttol@exp1^(0+128),w
  3146  1510  3A80               	xorlw	128
  3147  1511  3E8F               	addlw	143
  3148  1512  1C03               	btfss	3,0
  3149  1513  2CD9               	goto	l3704
  3150  1514                     l3726:
  3151  1514  3001               	movlw	1
  3152  1515                     u4015:
  3153  1515  1003               	clrc
  3154  1516  0CCC               	rrf	(___fttol@lval+3)^(0+128),f
  3155  1517  0CCB               	rrf	(___fttol@lval+2)^(0+128),f
  3156  1518  0CCA               	rrf	(___fttol@lval+1)^(0+128),f
  3157  1519  0CC9               	rrf	___fttol@lval^(0+128),f
  3158  151A  3EFF               	addlw	-1
  3159  151B  1D03               	skipz
  3160  151C  2D15               	goto	u4015
  3161  151D  3001               	movlw	1
  3162  151E  1283               	bcf	3,5	;RP0=0, select bank0
  3163  151F  00E8               	movwf	??___fttol
  3164  1520  0868               	movf	??___fttol,w
  3165  1521  1683               	bsf	3,5	;RP0=1, select bank1
  3166  1522  07CD               	addwf	___fttol@exp1^(0+128),f
  3167  1523  1903               	btfsc	3,2
  3168  1524  2D3D               	goto	l3736
  3169  1525  2D14               	goto	l3726
  3170  1526                     l3728:
  3171  1526  3018               	movlw	24
  3172  1527  024D               	subwf	___fttol@exp1^(0+128),w
  3173  1528  1803               	btfsc	3,0
  3174  1529  2CD9               	goto	l3704
  3175  152A                     l1118:
  3176  152A  084D               	movf	___fttol@exp1^(0+128),w
  3177  152B  1903               	btfsc	3,2
  3178  152C  2D3D               	goto	l3736
  3179  152D  3001               	movlw	1
  3180  152E  1283               	bcf	3,5	;RP0=0, select bank0
  3181  152F  00E8               	movwf	??___fttol
  3182  1530                     u4045:
  3183  1530  1003               	clrc
  3184  1531  1683               	bsf	3,5	;RP0=1, select bank1
  3185  1532  0DC9               	rlf	___fttol@lval^(0+128),f
  3186  1533  0DCA               	rlf	(___fttol@lval+1)^(0+128),f
  3187  1534  0DCB               	rlf	(___fttol@lval+2)^(0+128),f
  3188  1535  0DCC               	rlf	(___fttol@lval+3)^(0+128),f
  3189  1536  1283               	bcf	3,5	;RP0=0, select bank0
  3190  1537  0BE8               	decfsz	??___fttol,f
  3191  1538  2D30               	goto	u4045
  3192  1539  3001               	movlw	1
  3193  153A  1683               	bsf	3,5	;RP0=1, select bank1
  3194  153B  02CD               	subwf	___fttol@exp1^(0+128),f
  3195  153C  2D2A               	goto	l1118
  3196  153D                     l3736:
  3197  153D  0848               	movf	___fttol@sign1^(0+128),w
  3198  153E  1903               	btfsc	3,2
  3199  153F  2D4B               	goto	l3740
  3200  1540  09C9               	comf	___fttol@lval^(0+128),f
  3201  1541  09CA               	comf	(___fttol@lval+1)^(0+128),f
  3202  1542  09CB               	comf	(___fttol@lval+2)^(0+128),f
  3203  1543  09CC               	comf	(___fttol@lval+3)^(0+128),f
  3204  1544  0AC9               	incf	___fttol@lval^(0+128),f
  3205  1545  1903               	skipnz
  3206  1546  0ACA               	incf	(___fttol@lval+1)^(0+128),f
  3207  1547  1903               	skipnz
  3208  1548  0ACB               	incf	(___fttol@lval+2)^(0+128),f
  3209  1549  1903               	skipnz
  3210  154A  0ACC               	incf	(___fttol@lval+3)^(0+128),f
  3211  154B                     l3740:
  3212  154B  084C               	movf	(___fttol@lval+3)^(0+128),w
  3213  154C  1283               	bcf	3,5	;RP0=0, select bank0
  3214  154D  00E7               	movwf	?___fttol+3
  3215  154E  1683               	bsf	3,5	;RP0=1, select bank1
  3216  154F  084B               	movf	(___fttol@lval+2)^(0+128),w
  3217  1550  1283               	bcf	3,5	;RP0=0, select bank0
  3218  1551  00E6               	movwf	?___fttol+2
  3219  1552  1683               	bsf	3,5	;RP0=1, select bank1
  3220  1553  084A               	movf	(___fttol@lval+1)^(0+128),w
  3221  1554  1283               	bcf	3,5	;RP0=0, select bank0
  3222  1555  00E5               	movwf	?___fttol+1
  3223  1556  1683               	bsf	3,5	;RP0=1, select bank1
  3224  1557  0849               	movf	___fttol@lval^(0+128),w
  3225  1558  1283               	bcf	3,5	;RP0=0, select bank0
  3226  1559  00E4               	movwf	?___fttol
  3227  155A  0008               	return
  3228  155B                     __end_of___fttol:
  3229                           
  3230                           	psect	text5
  3231  155B                     __ptext5:	
  3232 ;; *************** function ___ftdiv *****************
  3233 ;; Defined at:
  3234 ;;		line 56 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\ftdiv.c"
  3235 ;; Parameters:    Size  Location     Type
  3236 ;;  f2              3   52[BANK0 ] float 
  3237 ;;  f1              3   55[BANK0 ] float 
  3238 ;; Auto vars:     Size  Location     Type
  3239 ;;  f3              3   63[BANK0 ] float 
  3240 ;;  sign            1   67[BANK0 ] unsigned char 
  3241 ;;  exp             1   66[BANK0 ] unsigned char 
  3242 ;;  cntr            1   62[BANK0 ] unsigned char 
  3243 ;; Return value:  Size  Location     Type
  3244 ;;                  3   52[BANK0 ] float 
  3245 ;; Registers used:
  3246 ;;		wreg, status,2, status,0, pclath, cstack
  3247 ;; Tracked objects:
  3248 ;;		On entry : 300/0
  3249 ;;		On exit  : 300/0
  3250 ;;		Unchanged: 0/0
  3251 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3252 ;;      Params:         0       6       0       0       0
  3253 ;;      Locals:         0       6       0       0       0
  3254 ;;      Temps:          0       4       0       0       0
  3255 ;;      Totals:         0      16       0       0       0
  3256 ;;Total ram usage:       16 bytes
  3257 ;; Hardware stack levels used: 1
  3258 ;; Hardware stack levels required when called: 3
  3259 ;; This function calls:
  3260 ;;		___ftpack
  3261 ;; This function is called by:
  3262 ;;		_rThermistor
  3263 ;;		_rTemperature
  3264 ;; This function uses a non-reentrant model
  3265 ;;
  3266                           
  3267                           
  3268                           ;psect for function ___ftdiv
  3269  155B                     ___ftdiv:
  3270                           
  3271                           ;incstack = 0
  3272                           ; Regs used in ___ftdiv: [wreg+status,2+status,0+pclath+cstack]
  3273  155B  0857               	movf	___ftdiv@f1,w
  3274  155C  00DA               	movwf	??___ftdiv
  3275  155D  0858               	movf	___ftdiv@f1+1,w
  3276  155E  00DB               	movwf	??___ftdiv+1
  3277  155F  0859               	movf	___ftdiv@f1+2,w
  3278  1560  00DC               	movwf	??___ftdiv+2
  3279  1561  1003               	clrc
  3280  1562  0D5B               	rlf	??___ftdiv+1,w
  3281  1563  0D5C               	rlf	??___ftdiv+2,w
  3282  1564  00DD               	movwf	??___ftdiv+3
  3283  1565  085D               	movf	??___ftdiv+3,w
  3284  1566  00E2               	movwf	___ftdiv@exp
  3285  1567  0862               	movf	___ftdiv@exp,w
  3286  1568  1D03               	btfss	3,2
  3287  1569  2D71               	goto	l3646
  3288  156A  3000               	movlw	0
  3289  156B  00D4               	movwf	?___ftdiv
  3290  156C  3000               	movlw	0
  3291  156D  00D5               	movwf	?___ftdiv+1
  3292  156E  3000               	movlw	0
  3293  156F  00D6               	movwf	?___ftdiv+2
  3294  1570  0008               	return
  3295  1571                     l3646:
  3296  1571  0854               	movf	___ftdiv@f2,w
  3297  1572  00DA               	movwf	??___ftdiv
  3298  1573  0855               	movf	___ftdiv@f2+1,w
  3299  1574  00DB               	movwf	??___ftdiv+1
  3300  1575  0856               	movf	___ftdiv@f2+2,w
  3301  1576  00DC               	movwf	??___ftdiv+2
  3302  1577  1003               	clrc
  3303  1578  0D5B               	rlf	??___ftdiv+1,w
  3304  1579  0D5C               	rlf	??___ftdiv+2,w
  3305  157A  00DD               	movwf	??___ftdiv+3
  3306  157B  085D               	movf	??___ftdiv+3,w
  3307  157C  00E3               	movwf	___ftdiv@sign
  3308  157D  0863               	movf	___ftdiv@sign,w
  3309  157E  1D03               	btfss	3,2
  3310  157F  2D87               	goto	l3652
  3311  1580  3000               	movlw	0
  3312  1581  00D4               	movwf	?___ftdiv
  3313  1582  3000               	movlw	0
  3314  1583  00D5               	movwf	?___ftdiv+1
  3315  1584  3000               	movlw	0
  3316  1585  00D6               	movwf	?___ftdiv+2
  3317  1586  0008               	return
  3318  1587                     l3652:
  3319  1587  3000               	movlw	0
  3320  1588  00DF               	movwf	___ftdiv@f3
  3321  1589  3000               	movlw	0
  3322  158A  00E0               	movwf	___ftdiv@f3+1
  3323  158B  3000               	movlw	0
  3324  158C  00E1               	movwf	___ftdiv@f3+2
  3325  158D  3089               	movlw	137
  3326  158E  0763               	addwf	___ftdiv@sign,w
  3327  158F  00DA               	movwf	??___ftdiv
  3328  1590  085A               	movf	??___ftdiv,w
  3329  1591  02E2               	subwf	___ftdiv@exp,f
  3330  1592  0859               	movf	___ftdiv@f1+2,w
  3331  1593  00DA               	movwf	??___ftdiv
  3332  1594  085A               	movf	??___ftdiv,w
  3333  1595  00E3               	movwf	___ftdiv@sign
  3334  1596  0856               	movf	___ftdiv@f2+2,w
  3335  1597  00DA               	movwf	??___ftdiv
  3336  1598  085A               	movf	??___ftdiv,w
  3337  1599  06E3               	xorwf	___ftdiv@sign,f
  3338  159A  3080               	movlw	128
  3339  159B  00DA               	movwf	??___ftdiv
  3340  159C  085A               	movf	??___ftdiv,w
  3341  159D  05E3               	andwf	___ftdiv@sign,f
  3342  159E  17D8               	bsf	___ftdiv@f1+1,7
  3343  159F  30FF               	movlw	255
  3344  15A0  05D7               	andwf	___ftdiv@f1,f
  3345  15A1  30FF               	movlw	255
  3346  15A2  05D8               	andwf	___ftdiv@f1+1,f
  3347  15A3  3000               	movlw	0
  3348  15A4  05D9               	andwf	___ftdiv@f1+2,f
  3349  15A5  17D5               	bsf	___ftdiv@f2+1,7
  3350  15A6  30FF               	movlw	255
  3351  15A7  05D4               	andwf	___ftdiv@f2,f
  3352  15A8  30FF               	movlw	255
  3353  15A9  05D5               	andwf	___ftdiv@f2+1,f
  3354  15AA  3000               	movlw	0
  3355  15AB  05D6               	andwf	___ftdiv@f2+2,f
  3356  15AC  3018               	movlw	24
  3357  15AD  00DA               	movwf	??___ftdiv
  3358  15AE  085A               	movf	??___ftdiv,w
  3359  15AF  00DE               	movwf	___ftdiv@cntr
  3360  15B0                     l3668:
  3361  15B0  3001               	movlw	1
  3362  15B1                     u3905:
  3363  15B1  1003               	clrc
  3364  15B2  0DDF               	rlf	___ftdiv@f3,f
  3365  15B3  0DE0               	rlf	___ftdiv@f3+1,f
  3366  15B4  0DE1               	rlf	___ftdiv@f3+2,f
  3367  15B5  3EFF               	addlw	-1
  3368  15B6  1D03               	skipz
  3369  15B7  2DB1               	goto	u3905
  3370  15B8  0856               	movf	___ftdiv@f2+2,w
  3371  15B9  0259               	subwf	___ftdiv@f1+2,w
  3372  15BA  1D03               	skipz
  3373  15BB  2DC2               	goto	u3915
  3374  15BC  0855               	movf	___ftdiv@f2+1,w
  3375  15BD  0258               	subwf	___ftdiv@f1+1,w
  3376  15BE  1D03               	skipz
  3377  15BF  2DC2               	goto	u3915
  3378  15C0  0854               	movf	___ftdiv@f2,w
  3379  15C1  0257               	subwf	___ftdiv@f1,w
  3380  15C2                     u3915:
  3381  15C2  1C03               	skipc
  3382  15C3  2DCF               	goto	l3674
  3383  15C4  0854               	movf	___ftdiv@f2,w
  3384  15C5  02D7               	subwf	___ftdiv@f1,f
  3385  15C6  0855               	movf	___ftdiv@f2+1,w
  3386  15C7  1C03               	skipc
  3387  15C8  0F55               	incfsz	___ftdiv@f2+1,w
  3388  15C9  02D8               	subwf	___ftdiv@f1+1,f
  3389  15CA  0856               	movf	___ftdiv@f2+2,w
  3390  15CB  1C03               	skipc
  3391  15CC  0A56               	incf	___ftdiv@f2+2,w
  3392  15CD  02D9               	subwf	___ftdiv@f1+2,f
  3393  15CE  145F               	bsf	___ftdiv@f3,0
  3394  15CF                     l3674:
  3395  15CF  3001               	movlw	1
  3396  15D0                     u3925:
  3397  15D0  1003               	clrc
  3398  15D1  0DD7               	rlf	___ftdiv@f1,f
  3399  15D2  0DD8               	rlf	___ftdiv@f1+1,f
  3400  15D3  0DD9               	rlf	___ftdiv@f1+2,f
  3401  15D4  3EFF               	addlw	-1
  3402  15D5  1D03               	skipz
  3403  15D6  2DD0               	goto	u3925
  3404  15D7  3001               	movlw	1
  3405  15D8  02DE               	subwf	___ftdiv@cntr,f
  3406  15D9  1D03               	btfss	3,2
  3407  15DA  2DB0               	goto	l3668
  3408  15DB  085F               	movf	___ftdiv@f3,w
  3409  15DC  00A0               	movwf	___ftpack@arg
  3410  15DD  0860               	movf	___ftdiv@f3+1,w
  3411  15DE  00A1               	movwf	___ftpack@arg+1
  3412  15DF  0861               	movf	___ftdiv@f3+2,w
  3413  15E0  00A2               	movwf	___ftpack@arg+2
  3414  15E1  0862               	movf	___ftdiv@exp,w
  3415  15E2  00DA               	movwf	??___ftdiv
  3416  15E3  085A               	movf	??___ftdiv,w
  3417  15E4  00A3               	movwf	___ftpack@exp
  3418  15E5  0863               	movf	___ftdiv@sign,w
  3419  15E6  00DB               	movwf	??___ftdiv+1
  3420  15E7  085B               	movf	??___ftdiv+1,w
  3421  15E8  00A4               	movwf	___ftpack@sign
  3422  15E9  160A  118A  22CD   	fcall	___ftpack
  3423  15EC  0820               	movf	?___ftpack,w
  3424  15ED  00D4               	movwf	?___ftdiv
  3425  15EE  0821               	movf	?___ftpack+1,w
  3426  15EF  00D5               	movwf	?___ftdiv+1
  3427  15F0  0822               	movf	?___ftpack+2,w
  3428  15F1  00D6               	movwf	?___ftdiv+2
  3429  15F2  0008               	return
  3430  15F3                     __end_of___ftdiv:
  3431                           
  3432                           	psect	text6
  3433  0635                     __ptext6:	
  3434 ;; *************** function _log *****************
  3435 ;; Defined at:
  3436 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\log.c"
  3437 ;; Parameters:    Size  Location     Type
  3438 ;;  x               3   14[BANK1 ] float 
  3439 ;; Auto vars:     Size  Location     Type
  3440 ;;  exponent        2   18[BANK1 ] int 
  3441 ;; Return value:  Size  Location     Type
  3442 ;;                  3   14[BANK1 ] int 
  3443 ;; Registers used:
  3444 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3445 ;; Tracked objects:
  3446 ;;		On entry : 300/100
  3447 ;;		On exit  : 300/100
  3448 ;;		Unchanged: 0/0
  3449 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3450 ;;      Params:         0       0       3       0       0
  3451 ;;      Locals:         0       0       2       0       0
  3452 ;;      Temps:          0       0       1       0       0
  3453 ;;      Totals:         0       0       6       0       0
  3454 ;;Total ram usage:        6 bytes
  3455 ;; Hardware stack levels used: 1
  3456 ;; Hardware stack levels required when called: 5
  3457 ;; This function calls:
  3458 ;;		___awtoft
  3459 ;;		___ftadd
  3460 ;;		___ftge
  3461 ;;		___ftmul
  3462 ;;		_eval_poly
  3463 ;;		_frexp
  3464 ;; This function is called by:
  3465 ;;		_rTemperature
  3466 ;; This function uses a non-reentrant model
  3467 ;;
  3468                           
  3469                           
  3470                           ;psect for function _log
  3471  0635                     _log:
  3472                           
  3473                           ;incstack = 0
  3474                           ; Regs used in _log: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  3475  0635  0856               	movf	log@x^(0+128),w
  3476  0636  1283               	bcf	3,5	;RP0=0, select bank0
  3477  0637  00A0               	movwf	___ftge@ff1
  3478  0638  1683               	bsf	3,5	;RP0=1, select bank1
  3479  0639  0857               	movf	(log@x+1)^(0+128),w
  3480  063A  1283               	bcf	3,5	;RP0=0, select bank0
  3481  063B  00A1               	movwf	___ftge@ff1+1
  3482  063C  1683               	bsf	3,5	;RP0=1, select bank1
  3483  063D  0858               	movf	(log@x+2)^(0+128),w
  3484  063E  1283               	bcf	3,5	;RP0=0, select bank0
  3485  063F  00A2               	movwf	___ftge@ff1+2
  3486  0640  3000               	movlw	0
  3487  0641  00A3               	movwf	___ftge@ff2
  3488  0642  3000               	movlw	0
  3489  0643  00A4               	movwf	___ftge@ff2+1
  3490  0644  3000               	movlw	0
  3491  0645  00A5               	movwf	___ftge@ff2+2
  3492  0646  160A  158A  25C7  120A  118A  	fcall	___ftge
  3493  064B  1803               	btfsc	3,0
  3494  064C  2E59               	goto	l4034
  3495  064D  3021               	movlw	33
  3496  064E  1683               	bsf	3,5	;RP0=1, select bank1
  3497  064F  00A8               	movwf	_errno^(0+128)
  3498  0650  3000               	movlw	0
  3499  0651  00A9               	movwf	(_errno^(0+128)+1)
  3500  0652  3000               	movlw	0
  3501  0653  00D6               	movwf	?_log^(0+128)
  3502  0654  3000               	movlw	0
  3503  0655  00D7               	movwf	(?_log+1)^(0+128)
  3504  0656  3000               	movlw	0
  3505  0657  00D8               	movwf	(?_log+2)^(0+128)
  3506  0658  0008               	return
  3507  0659                     l4034:
  3508  0659  1683               	bsf	3,5	;RP0=1, select bank1
  3509  065A  0858               	movf	(log@x+2)^(0+128),w
  3510  065B  0457               	iorwf	(log@x+1)^(0+128),w
  3511  065C  0456               	iorwf	log@x^(0+128),w
  3512  065D  1D03               	skipz
  3513  065E  2E6A               	goto	l4040
  3514  065F  3022               	movlw	34
  3515  0660  00A8               	movwf	_errno^(0+128)
  3516  0661  3000               	movlw	0
  3517  0662  00A9               	movwf	(_errno^(0+128)+1)
  3518  0663  3000               	movlw	0
  3519  0664  00D6               	movwf	?_log^(0+128)
  3520  0665  3000               	movlw	0
  3521  0666  00D7               	movwf	(?_log+1)^(0+128)
  3522  0667  3000               	movlw	0
  3523  0668  00D8               	movwf	(?_log+2)^(0+128)
  3524  0669  0008               	return
  3525  066A                     l4040:
  3526  066A  3000               	movlw	0
  3527  066B  1283               	bcf	3,5	;RP0=0, select bank0
  3528  066C  00B8               	movwf	___ftadd@f1
  3529  066D  3080               	movlw	128
  3530  066E  00B9               	movwf	___ftadd@f1+1
  3531  066F  30BF               	movlw	191
  3532  0670  00BA               	movwf	___ftadd@f1+2
  3533  0671  3000               	movlw	0
  3534  0672  00A8               	movwf	___ftmul@f1
  3535  0673  3000               	movlw	0
  3536  0674  00A9               	movwf	___ftmul@f1+1
  3537  0675  3040               	movlw	64
  3538  0676  00AA               	movwf	___ftmul@f1+2
  3539  0677  30DA               	movlw	(low (log@exponent| 0))& (0+255)
  3540  0678  1683               	bsf	3,5	;RP0=1, select bank1
  3541  0679  00D9               	movwf	??_log^(0+128)
  3542  067A  0859               	movf	??_log^(0+128),w
  3543  067B  1283               	bcf	3,5	;RP0=0, select bank0
  3544  067C  00A3               	movwf	frexp@eptr
  3545  067D  1683               	bsf	3,5	;RP0=1, select bank1
  3546  067E  0856               	movf	log@x^(0+128),w
  3547  067F  1283               	bcf	3,5	;RP0=0, select bank0
  3548  0680  00A0               	movwf	frexp@value
  3549  0681  1683               	bsf	3,5	;RP0=1, select bank1
  3550  0682  0857               	movf	(log@x+1)^(0+128),w
  3551  0683  1283               	bcf	3,5	;RP0=0, select bank0
  3552  0684  00A1               	movwf	frexp@value+1
  3553  0685  1683               	bsf	3,5	;RP0=1, select bank1
  3554  0686  0858               	movf	(log@x+2)^(0+128),w
  3555  0687  1283               	bcf	3,5	;RP0=0, select bank0
  3556  0688  00A2               	movwf	frexp@value+2
  3557  0689  160A  158A  2694  120A  118A  	fcall	_frexp
  3558  068E  0820               	movf	?_frexp,w
  3559  068F  00AB               	movwf	___ftmul@f2
  3560  0690  0821               	movf	?_frexp+1,w
  3561  0691  00AC               	movwf	___ftmul@f2+1
  3562  0692  0822               	movf	?_frexp+2,w
  3563  0693  00AD               	movwf	___ftmul@f2+2
  3564  0694  120A  118A  2718  120A  118A  	fcall	___ftmul
  3565  0699  0828               	movf	?___ftmul,w
  3566  069A  00BB               	movwf	___ftadd@f2
  3567  069B  0829               	movf	?___ftmul+1,w
  3568  069C  00BC               	movwf	___ftadd@f2+1
  3569  069D  082A               	movf	?___ftmul+2,w
  3570  069E  00BD               	movwf	___ftadd@f2+2
  3571  069F  120A  118A  2530  120A  118A  	fcall	___ftadd
  3572  06A4  0838               	movf	?___ftadd,w
  3573  06A5  1683               	bsf	3,5	;RP0=1, select bank1
  3574  06A6  00D6               	movwf	log@x^(0+128)
  3575  06A7  1283               	bcf	3,5	;RP0=0, select bank0
  3576  06A8  0839               	movf	?___ftadd+1,w
  3577  06A9  1683               	bsf	3,5	;RP0=1, select bank1
  3578  06AA  00D7               	movwf	(log@x+1)^(0+128)
  3579  06AB  1283               	bcf	3,5	;RP0=0, select bank0
  3580  06AC  083A               	movf	?___ftadd+2,w
  3581  06AD  1683               	bsf	3,5	;RP0=1, select bank1
  3582  06AE  00D8               	movwf	(log@x+2)^(0+128)
  3583  06AF  30FF               	movlw	255
  3584  06B0  07DA               	addwf	log@exponent^(0+128),f
  3585  06B1  1803               	skipnc
  3586  06B2  0ADB               	incf	(log@exponent+1)^(0+128),f
  3587  06B3  30FF               	movlw	255
  3588  06B4  07DB               	addwf	(log@exponent+1)^(0+128),f
  3589  06B5  0856               	movf	log@x^(0+128),w
  3590  06B6  1283               	bcf	3,5	;RP0=0, select bank0
  3591  06B7  00C5               	movwf	eval_poly@x
  3592  06B8  1683               	bsf	3,5	;RP0=1, select bank1
  3593  06B9  0857               	movf	(log@x+1)^(0+128),w
  3594  06BA  1283               	bcf	3,5	;RP0=0, select bank0
  3595  06BB  00C6               	movwf	eval_poly@x+1
  3596  06BC  1683               	bsf	3,5	;RP0=1, select bank1
  3597  06BD  0858               	movf	(log@x+2)^(0+128),w
  3598  06BE  1283               	bcf	3,5	;RP0=0, select bank0
  3599  06BF  00C7               	movwf	eval_poly@x+2
  3600  06C0  305C               	movlw	low (log@coeff| (0+32768))
  3601  06C1  00C8               	movwf	eval_poly@d
  3602  06C2  3090               	movlw	high (log@coeff| (0+32768))
  3603  06C3  00C9               	movwf	eval_poly@d+1
  3604  06C4  3008               	movlw	8
  3605  06C5  00CA               	movwf	eval_poly@n
  3606  06C6  3000               	movlw	0
  3607  06C7  00CB               	movwf	eval_poly@n+1
  3608  06C8  160A  118A  243E  120A  118A  	fcall	_eval_poly
  3609  06CD  0845               	movf	?_eval_poly,w
  3610  06CE  1683               	bsf	3,5	;RP0=1, select bank1
  3611  06CF  00D6               	movwf	log@x^(0+128)
  3612  06D0  1283               	bcf	3,5	;RP0=0, select bank0
  3613  06D1  0846               	movf	?_eval_poly+1,w
  3614  06D2  1683               	bsf	3,5	;RP0=1, select bank1
  3615  06D3  00D7               	movwf	(log@x+1)^(0+128)
  3616  06D4  1283               	bcf	3,5	;RP0=0, select bank0
  3617  06D5  0847               	movf	?_eval_poly+2,w
  3618  06D6  1683               	bsf	3,5	;RP0=1, select bank1
  3619  06D7  00D8               	movwf	(log@x+2)^(0+128)
  3620  06D8  0856               	movf	log@x^(0+128),w
  3621  06D9  1283               	bcf	3,5	;RP0=0, select bank0
  3622  06DA  00B8               	movwf	___ftadd@f1
  3623  06DB  1683               	bsf	3,5	;RP0=1, select bank1
  3624  06DC  0857               	movf	(log@x+1)^(0+128),w
  3625  06DD  1283               	bcf	3,5	;RP0=0, select bank0
  3626  06DE  00B9               	movwf	___ftadd@f1+1
  3627  06DF  1683               	bsf	3,5	;RP0=1, select bank1
  3628  06E0  0858               	movf	(log@x+2)^(0+128),w
  3629  06E1  1283               	bcf	3,5	;RP0=0, select bank0
  3630  06E2  00BA               	movwf	___ftadd@f1+2
  3631  06E3  3072               	movlw	114
  3632  06E4  00A8               	movwf	___ftmul@f1
  3633  06E5  3031               	movlw	49
  3634  06E6  00A9               	movwf	___ftmul@f1+1
  3635  06E7  303F               	movlw	63
  3636  06E8  00AA               	movwf	___ftmul@f1+2
  3637  06E9  1683               	bsf	3,5	;RP0=1, select bank1
  3638  06EA  085B               	movf	(log@exponent+1)^(0+128),w
  3639  06EB  00D3               	movwf	(___awtoft@c+1)^(0+128)
  3640  06EC  085A               	movf	log@exponent^(0+128),w
  3641  06ED  00D2               	movwf	___awtoft@c^(0+128)
  3642  06EE  160A  158A  2543  120A  118A  	fcall	___awtoft
  3643  06F3  0852               	movf	?___awtoft^(0+128),w
  3644  06F4  1283               	bcf	3,5	;RP0=0, select bank0
  3645  06F5  00AB               	movwf	___ftmul@f2
  3646  06F6  1683               	bsf	3,5	;RP0=1, select bank1
  3647  06F7  0853               	movf	(?___awtoft+1)^(0+128),w
  3648  06F8  1283               	bcf	3,5	;RP0=0, select bank0
  3649  06F9  00AC               	movwf	___ftmul@f2+1
  3650  06FA  1683               	bsf	3,5	;RP0=1, select bank1
  3651  06FB  0854               	movf	(?___awtoft+2)^(0+128),w
  3652  06FC  1283               	bcf	3,5	;RP0=0, select bank0
  3653  06FD  00AD               	movwf	___ftmul@f2+2
  3654  06FE  120A  118A  2718  120A  118A  	fcall	___ftmul
  3655  0703  0828               	movf	?___ftmul,w
  3656  0704  00BB               	movwf	___ftadd@f2
  3657  0705  0829               	movf	?___ftmul+1,w
  3658  0706  00BC               	movwf	___ftadd@f2+1
  3659  0707  082A               	movf	?___ftmul+2,w
  3660  0708  00BD               	movwf	___ftadd@f2+2
  3661  0709  120A  118A  2530   	fcall	___ftadd
  3662  070C  0838               	movf	?___ftadd,w
  3663  070D  1683               	bsf	3,5	;RP0=1, select bank1
  3664  070E  00D6               	movwf	?_log^(0+128)
  3665  070F  1283               	bcf	3,5	;RP0=0, select bank0
  3666  0710  0839               	movf	?___ftadd+1,w
  3667  0711  1683               	bsf	3,5	;RP0=1, select bank1
  3668  0712  00D7               	movwf	(?_log+1)^(0+128)
  3669  0713  1283               	bcf	3,5	;RP0=0, select bank0
  3670  0714  083A               	movf	?___ftadd+2,w
  3671  0715  1683               	bsf	3,5	;RP0=1, select bank1
  3672  0716  00D8               	movwf	(?_log+2)^(0+128)
  3673  0717  0008               	return
  3674  0718                     __end_of_log:
  3675                           
  3676                           	psect	text7
  3677  1E94                     __ptext7:	
  3678 ;; *************** function _frexp *****************
  3679 ;; Defined at:
  3680 ;;		line 254 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\frexp.c"
  3681 ;; Parameters:    Size  Location     Type
  3682 ;;  value           3    0[BANK0 ] int 
  3683 ;;  eptr            1    3[BANK0 ] PTR int 
  3684 ;;		 -> log@exponent(2), 
  3685 ;; Auto vars:     Size  Location     Type
  3686 ;;		None
  3687 ;; Return value:  Size  Location     Type
  3688 ;;                  3    0[BANK0 ] PTR int 
  3689 ;; Registers used:
  3690 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1
  3691 ;; Tracked objects:
  3692 ;;		On entry : 300/0
  3693 ;;		On exit  : B00/0
  3694 ;;		Unchanged: 0/0
  3695 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3696 ;;      Params:         0       4       0       0       0
  3697 ;;      Locals:         0       0       0       0       0
  3698 ;;      Temps:          0       2       0       0       0
  3699 ;;      Totals:         0       6       0       0       0
  3700 ;;Total ram usage:        6 bytes
  3701 ;; Hardware stack levels used: 1
  3702 ;; Hardware stack levels required when called: 2
  3703 ;; This function calls:
  3704 ;;		Nothing
  3705 ;; This function is called by:
  3706 ;;		_log
  3707 ;; This function uses a non-reentrant model
  3708 ;;
  3709                           
  3710                           
  3711                           ;psect for function _frexp
  3712  1E94                     _frexp:
  3713                           
  3714                           ;incstack = 0
  3715                           ; Regs used in _frexp: [wreg-fsr0h+status,2+status,0+btemp+1]
  3716  1E94  0822               	movf	frexp@value+2,w
  3717  1E95  0421               	iorwf	frexp@value+1,w
  3718  1E96  0420               	iorwf	frexp@value,w
  3719  1E97  1D03               	skipz
  3720  1E98  2EA6               	goto	l3804
  3721  1E99  0823               	movf	frexp@eptr,w
  3722  1E9A  0084               	movwf	4
  3723  1E9B  1383               	bcf	3,7	;select IRP bank0
  3724  1E9C  0180               	clrf	0
  3725  1E9D  0A84               	incf	4,f
  3726  1E9E  0180               	clrf	0
  3727  1E9F  3000               	movlw	0
  3728  1EA0  00A0               	movwf	?_frexp
  3729  1EA1  3000               	movlw	0
  3730  1EA2  00A1               	movwf	?_frexp+1
  3731  1EA3  3000               	movlw	0
  3732  1EA4  00A2               	movwf	?_frexp+2
  3733  1EA5  0008               	return
  3734  1EA6                     l3804:
  3735  1EA6  0822               	movf	frexp@value+2,w
  3736  1EA7  397F               	andlw	127
  3737  1EA8  00A4               	movwf	??_frexp
  3738  1EA9  01A5               	clrf	??_frexp+1
  3739  1EAA  1003               	clrc
  3740  1EAB  0DA4               	rlf	??_frexp,f
  3741  1EAC  0DA5               	rlf	??_frexp+1,f
  3742  1EAD  0823               	movf	frexp@eptr,w
  3743  1EAE  0084               	movwf	4
  3744  1EAF  0824               	movf	??_frexp,w
  3745  1EB0  1383               	bcf	3,7	;select IRP bank0
  3746  1EB1  0080               	movwf	0
  3747  1EB2  0A84               	incf	4,f
  3748  1EB3  0825               	movf	??_frexp+1,w
  3749  1EB4  0080               	movwf	0
  3750  1EB5  0D21               	rlf	frexp@value+1,w
  3751  1EB6  0D21               	rlf	frexp@value+1,w
  3752  1EB7  3901               	andlw	1
  3753  1EB8  00A4               	movwf	??_frexp
  3754  1EB9  01A5               	clrf	??_frexp+1
  3755  1EBA  0823               	movf	frexp@eptr,w
  3756  1EBB  0084               	movwf	4
  3757  1EBC  0824               	movf	??_frexp,w
  3758  1EBD  0480               	iorwf	0,f
  3759  1EBE  0A84               	incf	4,f
  3760  1EBF  0825               	movf	??_frexp+1,w
  3761  1EC0  0480               	iorwf	0,f
  3762  1EC1  0823               	movf	frexp@eptr,w
  3763  1EC2  0084               	movwf	4
  3764  1EC3  3082               	movlw	130
  3765  1EC4  0780               	addwf	0,f
  3766  1EC5  0F84               	incfsz	4,f
  3767  1EC6  0800               	movf	0,w
  3768  1EC7  1803               	skipnc
  3769  1EC8  0A00               	incf	0,w
  3770  1EC9  00FF               	movwf	127
  3771  1ECA  30FF               	movlw	255
  3772  1ECB  077F               	addwf	127,w
  3773  1ECC  0080               	movwf	0
  3774  1ECD  0384               	decf	4,f
  3775  1ECE  0822               	movf	frexp@value+2,w
  3776  1ECF  3980               	andlw	-128
  3777  1ED0  383F               	iorlw	63
  3778  1ED1  00A2               	movwf	frexp@value+2
  3779  1ED2  13A1               	bcf	frexp@value+1,7
  3780  1ED3  0008               	return
  3781  1ED4                     __end_of_frexp:
  3782                           
  3783                           	psect	text8
  3784  143E                     __ptext8:	
  3785 ;; *************** function _eval_poly *****************
  3786 ;; Defined at:
  3787 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\evalpoly.c"
  3788 ;; Parameters:    Size  Location     Type
  3789 ;;  x               3   37[BANK0 ] PTR int 
  3790 ;;  d               2   40[BANK0 ] PTR const 
  3791 ;;		 -> log@coeff(27), 
  3792 ;;  n               2   42[BANK0 ] int 
  3793 ;; Auto vars:     Size  Location     Type
  3794 ;;  res             3   49[BANK0 ] int 
  3795 ;; Return value:  Size  Location     Type
  3796 ;;                  3   37[BANK0 ] int 
  3797 ;; Registers used:
  3798 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3799 ;; Tracked objects:
  3800 ;;		On entry : 300/0
  3801 ;;		On exit  : 300/0
  3802 ;;		Unchanged: 0/0
  3803 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3804 ;;      Params:         0       7       0       0       0
  3805 ;;      Locals:         0       3       0       0       0
  3806 ;;      Temps:          0       5       0       0       0
  3807 ;;      Totals:         0      15       0       0       0
  3808 ;;Total ram usage:       15 bytes
  3809 ;; Hardware stack levels used: 1
  3810 ;; Hardware stack levels required when called: 4
  3811 ;; This function calls:
  3812 ;;		___bmul
  3813 ;;		___ftadd
  3814 ;;		___ftmul
  3815 ;; This function is called by:
  3816 ;;		_log
  3817 ;; This function uses a non-reentrant model
  3818 ;;
  3819                           
  3820                           
  3821                           ;psect for function _eval_poly
  3822  143E                     _eval_poly:
  3823                           
  3824                           ;incstack = 0
  3825                           ; Regs used in _eval_poly: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  3826  143E  3003               	movlw	3
  3827  143F  00CC               	movwf	??_eval_poly
  3828  1440  084C               	movf	??_eval_poly,w
  3829  1441  00A9               	movwf	___bmul@multiplicand
  3830  1442  084A               	movf	eval_poly@n,w
  3831  1443  160A  158A  2475  160A  118A  	fcall	___bmul
  3832  1448  00CD               	movwf	??_eval_poly+1
  3833  1449  084D               	movf	??_eval_poly+1,w
  3834  144A  0748               	addwf	eval_poly@d,w
  3835  144B  00CF               	movwf	??_eval_poly+3
  3836  144C  0849               	movf	eval_poly@d+1,w
  3837  144D  00CE               	movwf	??_eval_poly+2
  3838  144E  1803               	skipnc
  3839  144F  0ACE               	incf	??_eval_poly+2,f
  3840  1450  1BCD               	btfsc	??_eval_poly+1,7
  3841  1451  03CE               	decf	??_eval_poly+2,f
  3842  1452  084E               	movf	??_eval_poly+2,w
  3843  1453  00D0               	movwf	??_eval_poly+4
  3844  1454  0850               	movf	??_eval_poly+4,w
  3845  1455  00FF               	movwf	127
  3846  1456  084F               	movf	??_eval_poly+3,w
  3847  1457  0084               	movwf	4
  3848  1458  160A  118A  2000  160A  118A  	fcall	stringtab
  3849  145D  00D1               	movwf	eval_poly@res
  3850  145E  160A  118A  2000  160A  118A  	fcall	stringtab
  3851  1463  00D2               	movwf	eval_poly@res+1
  3852  1464  160A  118A  2000  160A  118A  	fcall	stringtab
  3853  1469                     L1:
  3854  1469  00D3               	movwf	eval_poly@res+2
  3855  146A  084A               	movf	eval_poly@n,w
  3856  146B  044B               	iorwf	eval_poly@n+1,w
  3857  146C  1903               	btfsc	3,2
  3858  146D  2CC2               	goto	l3822
  3859  146E  3003               	movlw	3
  3860  146F  00CC               	movwf	??_eval_poly
  3861  1470  084C               	movf	??_eval_poly,w
  3862  1471  00A9               	movwf	___bmul@multiplicand
  3863  1472  30FF               	movlw	255
  3864  1473  07CA               	addwf	eval_poly@n,f
  3865  1474  1803               	skipnc
  3866  1475  0ACB               	incf	eval_poly@n+1,f
  3867  1476  30FF               	movlw	255
  3868  1477  07CB               	addwf	eval_poly@n+1,f
  3869  1478  084A               	movf	eval_poly@n,w
  3870  1479  160A  158A  2475  160A  118A  	fcall	___bmul
  3871  147E  00CD               	movwf	??_eval_poly+1
  3872  147F  084D               	movf	??_eval_poly+1,w
  3873  1480  0748               	addwf	eval_poly@d,w
  3874  1481  00CF               	movwf	??_eval_poly+3
  3875  1482  0849               	movf	eval_poly@d+1,w
  3876  1483  00CE               	movwf	??_eval_poly+2
  3877  1484  1803               	skipnc
  3878  1485  0ACE               	incf	??_eval_poly+2,f
  3879  1486  1BCD               	btfsc	??_eval_poly+1,7
  3880  1487  03CE               	decf	??_eval_poly+2,f
  3881  1488  084E               	movf	??_eval_poly+2,w
  3882  1489  00D0               	movwf	??_eval_poly+4
  3883  148A  0850               	movf	??_eval_poly+4,w
  3884  148B  00FF               	movwf	127
  3885  148C  084F               	movf	??_eval_poly+3,w
  3886  148D  0084               	movwf	4
  3887  148E  160A  118A  2000  160A  118A  	fcall	stringtab
  3888  1493  00B8               	movwf	___ftadd@f1
  3889  1494  160A  118A  2000  160A  118A  	fcall	stringtab
  3890  1499  00B9               	movwf	___ftadd@f1+1
  3891  149A  160A  118A  2000  160A  118A  	fcall	stringtab
  3892  149F  00BA               	movwf	___ftadd@f1+2
  3893  14A0  0851               	movf	eval_poly@res,w
  3894  14A1  00A8               	movwf	___ftmul@f1
  3895  14A2  0852               	movf	eval_poly@res+1,w
  3896  14A3  00A9               	movwf	___ftmul@f1+1
  3897  14A4  0853               	movf	eval_poly@res+2,w
  3898  14A5  00AA               	movwf	___ftmul@f1+2
  3899  14A6  0845               	movf	eval_poly@x,w
  3900  14A7  00AB               	movwf	___ftmul@f2
  3901  14A8  0846               	movf	eval_poly@x+1,w
  3902  14A9  00AC               	movwf	___ftmul@f2+1
  3903  14AA  0847               	movf	eval_poly@x+2,w
  3904  14AB  00AD               	movwf	___ftmul@f2+2
  3905  14AC  120A  118A  2718  160A  118A  	fcall	___ftmul
  3906  14B1  0828               	movf	?___ftmul,w
  3907  14B2  00BB               	movwf	___ftadd@f2
  3908  14B3  0829               	movf	?___ftmul+1,w
  3909  14B4  00BC               	movwf	___ftadd@f2+1
  3910  14B5  082A               	movf	?___ftmul+2,w
  3911  14B6  00BD               	movwf	___ftadd@f2+2
  3912  14B7  120A  118A  2530  160A  118A  	fcall	___ftadd
  3913  14BC  0838               	movf	?___ftadd,w
  3914  14BD  00D1               	movwf	eval_poly@res
  3915  14BE  0839               	movf	?___ftadd+1,w
  3916  14BF  00D2               	movwf	eval_poly@res+1
  3917  14C0  083A               	movf	?___ftadd+2,w
  3918  14C1  2C69               	goto	L1
  3919  14C2                     l3822:
  3920  14C2  0851               	movf	eval_poly@res,w
  3921  14C3  00C5               	movwf	?_eval_poly
  3922  14C4  0852               	movf	eval_poly@res+1,w
  3923  14C5  00C6               	movwf	?_eval_poly+1
  3924  14C6  0853               	movf	eval_poly@res+2,w
  3925  14C7  00C7               	movwf	?_eval_poly+2
  3926  14C8  0008               	return
  3927  14C9                     __end_of_eval_poly:
  3928                           
  3929                           	psect	text9
  3930  0718                     __ptext9:	
  3931 ;; *************** function ___ftmul *****************
  3932 ;; Defined at:
  3933 ;;		line 62 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\ftmul.c"
  3934 ;; Parameters:    Size  Location     Type
  3935 ;;  f1              3    8[BANK0 ] float 
  3936 ;;  f2              3   11[BANK0 ] float 
  3937 ;; Auto vars:     Size  Location     Type
  3938 ;;  f3_as_produc    3   19[BANK0 ] unsigned um
  3939 ;;  sign            1   23[BANK0 ] unsigned char 
  3940 ;;  cntr            1   22[BANK0 ] unsigned char 
  3941 ;;  exp             1   18[BANK0 ] unsigned char 
  3942 ;; Return value:  Size  Location     Type
  3943 ;;                  3    8[BANK0 ] float 
  3944 ;; Registers used:
  3945 ;;		wreg, status,2, status,0, pclath, cstack
  3946 ;; Tracked objects:
  3947 ;;		On entry : 300/0
  3948 ;;		On exit  : 300/0
  3949 ;;		Unchanged: 0/0
  3950 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3951 ;;      Params:         0       6       0       0       0
  3952 ;;      Locals:         0       6       0       0       0
  3953 ;;      Temps:          0       4       0       0       0
  3954 ;;      Totals:         0      16       0       0       0
  3955 ;;Total ram usage:       16 bytes
  3956 ;; Hardware stack levels used: 1
  3957 ;; Hardware stack levels required when called: 3
  3958 ;; This function calls:
  3959 ;;		___ftpack
  3960 ;; This function is called by:
  3961 ;;		_rThermistor
  3962 ;;		_log
  3963 ;;		_eval_poly
  3964 ;; This function uses a non-reentrant model
  3965 ;;
  3966                           
  3967                           
  3968                           ;psect for function ___ftmul
  3969  0718                     ___ftmul:
  3970                           
  3971                           ;incstack = 0
  3972                           ; Regs used in ___ftmul: [wreg+status,2+status,0+pclath+cstack]
  3973  0718  0828               	movf	___ftmul@f1,w
  3974  0719  00AE               	movwf	??___ftmul
  3975  071A  0829               	movf	___ftmul@f1+1,w
  3976  071B  00AF               	movwf	??___ftmul+1
  3977  071C  082A               	movf	___ftmul@f1+2,w
  3978  071D  00B0               	movwf	??___ftmul+2
  3979  071E  1003               	clrc
  3980  071F  0D2F               	rlf	??___ftmul+1,w
  3981  0720  0D30               	rlf	??___ftmul+2,w
  3982  0721  00B1               	movwf	??___ftmul+3
  3983  0722  0831               	movf	??___ftmul+3,w
  3984  0723  00B2               	movwf	___ftmul@exp
  3985  0724  0832               	movf	___ftmul@exp,w
  3986  0725  1D03               	btfss	3,2
  3987  0726  2F2E               	goto	l3536
  3988  0727  3000               	movlw	0
  3989  0728  00A8               	movwf	?___ftmul
  3990  0729  3000               	movlw	0
  3991  072A  00A9               	movwf	?___ftmul+1
  3992  072B  3000               	movlw	0
  3993  072C  00AA               	movwf	?___ftmul+2
  3994  072D  0008               	return
  3995  072E                     l3536:
  3996  072E  082B               	movf	___ftmul@f2,w
  3997  072F  00AE               	movwf	??___ftmul
  3998  0730  082C               	movf	___ftmul@f2+1,w
  3999  0731  00AF               	movwf	??___ftmul+1
  4000  0732  082D               	movf	___ftmul@f2+2,w
  4001  0733  00B0               	movwf	??___ftmul+2
  4002  0734  1003               	clrc
  4003  0735  0D2F               	rlf	??___ftmul+1,w
  4004  0736  0D30               	rlf	??___ftmul+2,w
  4005  0737  00B1               	movwf	??___ftmul+3
  4006  0738  0831               	movf	??___ftmul+3,w
  4007  0739  00B7               	movwf	___ftmul@sign
  4008  073A  0837               	movf	___ftmul@sign,w
  4009  073B  1D03               	btfss	3,2
  4010  073C  2F44               	goto	l3542
  4011  073D  3000               	movlw	0
  4012  073E  00A8               	movwf	?___ftmul
  4013  073F  3000               	movlw	0
  4014  0740  00A9               	movwf	?___ftmul+1
  4015  0741  3000               	movlw	0
  4016  0742  00AA               	movwf	?___ftmul+2
  4017  0743  0008               	return
  4018  0744                     l3542:
  4019  0744  0837               	movf	___ftmul@sign,w
  4020  0745  3E7B               	addlw	123
  4021  0746  00AE               	movwf	??___ftmul
  4022  0747  082E               	movf	??___ftmul,w
  4023  0748  07B2               	addwf	___ftmul@exp,f
  4024  0749  082A               	movf	___ftmul@f1+2,w
  4025  074A  00AE               	movwf	??___ftmul
  4026  074B  082E               	movf	??___ftmul,w
  4027  074C  00B7               	movwf	___ftmul@sign
  4028  074D  082D               	movf	___ftmul@f2+2,w
  4029  074E  00AE               	movwf	??___ftmul
  4030  074F  082E               	movf	??___ftmul,w
  4031  0750  06B7               	xorwf	___ftmul@sign,f
  4032  0751  3080               	movlw	128
  4033  0752  00AE               	movwf	??___ftmul
  4034  0753  082E               	movf	??___ftmul,w
  4035  0754  05B7               	andwf	___ftmul@sign,f
  4036  0755  17A9               	bsf	___ftmul@f1+1,7
  4037  0756  17AC               	bsf	___ftmul@f2+1,7
  4038  0757  30FF               	movlw	255
  4039  0758  05AB               	andwf	___ftmul@f2,f
  4040  0759  30FF               	movlw	255
  4041  075A  05AC               	andwf	___ftmul@f2+1,f
  4042  075B  3000               	movlw	0
  4043  075C  05AD               	andwf	___ftmul@f2+2,f
  4044  075D  3000               	movlw	0
  4045  075E  00B3               	movwf	___ftmul@f3_as_product
  4046  075F  3000               	movlw	0
  4047  0760  00B4               	movwf	___ftmul@f3_as_product+1
  4048  0761  3000               	movlw	0
  4049  0762  00B5               	movwf	___ftmul@f3_as_product+2
  4050  0763  3007               	movlw	7
  4051  0764  00AE               	movwf	??___ftmul
  4052  0765  082E               	movf	??___ftmul,w
  4053  0766  00B6               	movwf	___ftmul@cntr
  4054  0767                     l3560:
  4055  0767  1C28               	btfss	___ftmul@f1,0
  4056  0768  2F77               	goto	l3564
  4057  0769  082B               	movf	___ftmul@f2,w
  4058  076A  07B3               	addwf	___ftmul@f3_as_product,f
  4059  076B  082C               	movf	___ftmul@f2+1,w
  4060  076C  1103               	clrz
  4061  076D  1803               	skipnc
  4062  076E  0A2C               	incf	___ftmul@f2+1,w
  4063  076F  1D03               	btfss	3,2
  4064  0770  07B4               	addwf	___ftmul@f3_as_product+1,f
  4065  0771  082D               	movf	___ftmul@f2+2,w
  4066  0772  1103               	clrz
  4067  0773  1803               	skipnc
  4068  0774  0A2D               	incf	___ftmul@f2+2,w
  4069  0775  1D03               	btfss	3,2
  4070  0776  07B5               	addwf	___ftmul@f3_as_product+2,f
  4071  0777                     l3564:
  4072  0777  3001               	movlw	1
  4073  0778                     u3735:
  4074  0778  1003               	clrc
  4075  0779  0CAA               	rrf	___ftmul@f1+2,f
  4076  077A  0CA9               	rrf	___ftmul@f1+1,f
  4077  077B  0CA8               	rrf	___ftmul@f1,f
  4078  077C  3EFF               	addlw	-1
  4079  077D  1D03               	skipz
  4080  077E  2F78               	goto	u3735
  4081  077F  3001               	movlw	1
  4082  0780                     u3745:
  4083  0780  1003               	clrc
  4084  0781  0DAB               	rlf	___ftmul@f2,f
  4085  0782  0DAC               	rlf	___ftmul@f2+1,f
  4086  0783  0DAD               	rlf	___ftmul@f2+2,f
  4087  0784  3EFF               	addlw	-1
  4088  0785  1D03               	skipz
  4089  0786  2F80               	goto	u3745
  4090  0787  3001               	movlw	1
  4091  0788  02B6               	subwf	___ftmul@cntr,f
  4092  0789  1D03               	btfss	3,2
  4093  078A  2F67               	goto	l3560
  4094  078B  3009               	movlw	9
  4095  078C  00AE               	movwf	??___ftmul
  4096  078D  082E               	movf	??___ftmul,w
  4097  078E  00B6               	movwf	___ftmul@cntr
  4098  078F                     l3572:
  4099  078F  1C28               	btfss	___ftmul@f1,0
  4100  0790  2F9F               	goto	l3576
  4101  0791  082B               	movf	___ftmul@f2,w
  4102  0792  07B3               	addwf	___ftmul@f3_as_product,f
  4103  0793  082C               	movf	___ftmul@f2+1,w
  4104  0794  1103               	clrz
  4105  0795  1803               	skipnc
  4106  0796  0A2C               	incf	___ftmul@f2+1,w
  4107  0797  1D03               	btfss	3,2
  4108  0798  07B4               	addwf	___ftmul@f3_as_product+1,f
  4109  0799  082D               	movf	___ftmul@f2+2,w
  4110  079A  1103               	clrz
  4111  079B  1803               	skipnc
  4112  079C  0A2D               	incf	___ftmul@f2+2,w
  4113  079D  1D03               	btfss	3,2
  4114  079E  07B5               	addwf	___ftmul@f3_as_product+2,f
  4115  079F                     l3576:
  4116  079F  3001               	movlw	1
  4117  07A0                     u3785:
  4118  07A0  1003               	clrc
  4119  07A1  0CAA               	rrf	___ftmul@f1+2,f
  4120  07A2  0CA9               	rrf	___ftmul@f1+1,f
  4121  07A3  0CA8               	rrf	___ftmul@f1,f
  4122  07A4  3EFF               	addlw	-1
  4123  07A5  1D03               	skipz
  4124  07A6  2FA0               	goto	u3785
  4125  07A7  3001               	movlw	1
  4126  07A8                     u3795:
  4127  07A8  1003               	clrc
  4128  07A9  0CB5               	rrf	___ftmul@f3_as_product+2,f
  4129  07AA  0CB4               	rrf	___ftmul@f3_as_product+1,f
  4130  07AB  0CB3               	rrf	___ftmul@f3_as_product,f
  4131  07AC  3EFF               	addlw	-1
  4132  07AD  1D03               	skipz
  4133  07AE  2FA8               	goto	u3795
  4134  07AF  3001               	movlw	1
  4135  07B0  02B6               	subwf	___ftmul@cntr,f
  4136  07B1  1D03               	btfss	3,2
  4137  07B2  2F8F               	goto	l3572
  4138  07B3  0833               	movf	___ftmul@f3_as_product,w
  4139  07B4  00A0               	movwf	___ftpack@arg
  4140  07B5  0834               	movf	___ftmul@f3_as_product+1,w
  4141  07B6  00A1               	movwf	___ftpack@arg+1
  4142  07B7  0835               	movf	___ftmul@f3_as_product+2,w
  4143  07B8  00A2               	movwf	___ftpack@arg+2
  4144  07B9  0832               	movf	___ftmul@exp,w
  4145  07BA  00AE               	movwf	??___ftmul
  4146  07BB  082E               	movf	??___ftmul,w
  4147  07BC  00A3               	movwf	___ftpack@exp
  4148  07BD  0837               	movf	___ftmul@sign,w
  4149  07BE  00AF               	movwf	??___ftmul+1
  4150  07BF  082F               	movf	??___ftmul+1,w
  4151  07C0  00A4               	movwf	___ftpack@sign
  4152  07C1  160A  118A  22CD   	fcall	___ftpack
  4153  07C4  0820               	movf	?___ftpack,w
  4154  07C5  00A8               	movwf	?___ftmul
  4155  07C6  0821               	movf	?___ftpack+1,w
  4156  07C7  00A9               	movwf	?___ftmul+1
  4157  07C8  0822               	movf	?___ftpack+2,w
  4158  07C9  00AA               	movwf	?___ftmul+2
  4159  07CA  0008               	return
  4160  07CB                     __end_of___ftmul:
  4161                           
  4162                           	psect	text10
  4163  0530                     __ptext10:	
  4164 ;; *************** function ___ftadd *****************
  4165 ;; Defined at:
  4166 ;;		line 86 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\ftadd.c"
  4167 ;; Parameters:    Size  Location     Type
  4168 ;;  f1              3   24[BANK0 ] float 
  4169 ;;  f2              3   27[BANK0 ] float 
  4170 ;; Auto vars:     Size  Location     Type
  4171 ;;  exp1            1   36[BANK0 ] unsigned char 
  4172 ;;  exp2            1   35[BANK0 ] unsigned char 
  4173 ;;  sign            1   34[BANK0 ] unsigned char 
  4174 ;; Return value:  Size  Location     Type
  4175 ;;                  3   24[BANK0 ] float 
  4176 ;; Registers used:
  4177 ;;		wreg, status,2, status,0, pclath, cstack
  4178 ;; Tracked objects:
  4179 ;;		On entry : 300/0
  4180 ;;		On exit  : 300/0
  4181 ;;		Unchanged: 0/0
  4182 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4183 ;;      Params:         0       6       0       0       0
  4184 ;;      Locals:         0       3       0       0       0
  4185 ;;      Temps:          0       4       0       0       0
  4186 ;;      Totals:         0      13       0       0       0
  4187 ;;Total ram usage:       13 bytes
  4188 ;; Hardware stack levels used: 1
  4189 ;; Hardware stack levels required when called: 3
  4190 ;; This function calls:
  4191 ;;		___ftpack
  4192 ;; This function is called by:
  4193 ;;		_rThermistor
  4194 ;;		_rTemperature
  4195 ;;		_log
  4196 ;;		_eval_poly
  4197 ;; This function uses a non-reentrant model
  4198 ;;
  4199                           
  4200                           
  4201                           ;psect for function ___ftadd
  4202  0530                     ___ftadd:
  4203                           
  4204                           ;incstack = 0
  4205                           ; Regs used in ___ftadd: [wreg+status,2+status,0+pclath+cstack]
  4206  0530  0838               	movf	___ftadd@f1,w
  4207  0531  00BE               	movwf	??___ftadd
  4208  0532  0839               	movf	___ftadd@f1+1,w
  4209  0533  00BF               	movwf	??___ftadd+1
  4210  0534  083A               	movf	___ftadd@f1+2,w
  4211  0535  00C0               	movwf	??___ftadd+2
  4212  0536  1003               	clrc
  4213  0537  0D3F               	rlf	??___ftadd+1,w
  4214  0538  0D40               	rlf	??___ftadd+2,w
  4215  0539  00C1               	movwf	??___ftadd+3
  4216  053A  0841               	movf	??___ftadd+3,w
  4217  053B  00C4               	movwf	___ftadd@exp1
  4218  053C  083B               	movf	___ftadd@f2,w
  4219  053D  00BE               	movwf	??___ftadd
  4220  053E  083C               	movf	___ftadd@f2+1,w
  4221  053F  00BF               	movwf	??___ftadd+1
  4222  0540  083D               	movf	___ftadd@f2+2,w
  4223  0541  00C0               	movwf	??___ftadd+2
  4224  0542  1003               	clrc
  4225  0543  0D3F               	rlf	??___ftadd+1,w
  4226  0544  0D40               	rlf	??___ftadd+2,w
  4227  0545  00C1               	movwf	??___ftadd+3
  4228  0546  0841               	movf	??___ftadd+3,w
  4229  0547  00C3               	movwf	___ftadd@exp2
  4230  0548  0844               	movf	___ftadd@exp1,w
  4231  0549  1903               	btfsc	3,2
  4232  054A  2D57               	goto	l3466
  4233  054B  0843               	movf	___ftadd@exp2,w
  4234  054C  0244               	subwf	___ftadd@exp1,w
  4235  054D  1803               	skipnc
  4236  054E  2D5E               	goto	l3470
  4237  054F  0843               	movf	___ftadd@exp2,w
  4238  0550  00BE               	movwf	??___ftadd
  4239  0551  0844               	movf	___ftadd@exp1,w
  4240  0552  02BE               	subwf	??___ftadd,f
  4241  0553  3019               	movlw	25
  4242  0554  023E               	subwf	??___ftadd,w
  4243  0555  1C03               	skipc
  4244  0556  2D5E               	goto	l3470
  4245  0557                     l3466:
  4246  0557  083B               	movf	___ftadd@f2,w
  4247  0558  00B8               	movwf	?___ftadd
  4248  0559  083C               	movf	___ftadd@f2+1,w
  4249  055A  00B9               	movwf	?___ftadd+1
  4250  055B  083D               	movf	___ftadd@f2+2,w
  4251  055C  00BA               	movwf	?___ftadd+2
  4252  055D  0008               	return
  4253  055E                     l3470:
  4254  055E  0843               	movf	___ftadd@exp2,w
  4255  055F  1903               	btfsc	3,2
  4256  0560  0008               	return
  4257  0561  0844               	movf	___ftadd@exp1,w
  4258  0562  0243               	subwf	___ftadd@exp2,w
  4259  0563  1803               	skipnc
  4260  0564  2D6D               	goto	l3476
  4261  0565  0844               	movf	___ftadd@exp1,w
  4262  0566  00BE               	movwf	??___ftadd
  4263  0567  0843               	movf	___ftadd@exp2,w
  4264  0568  02BE               	subwf	??___ftadd,f
  4265  0569  3019               	movlw	25
  4266  056A  023E               	subwf	??___ftadd,w
  4267  056B  1803               	btfsc	3,0
  4268  056C  0008               	return
  4269  056D                     l3476:
  4270  056D  3006               	movlw	6
  4271  056E  00BE               	movwf	??___ftadd
  4272  056F  083E               	movf	??___ftadd,w
  4273  0570  00C2               	movwf	___ftadd@sign
  4274  0571  1BBA               	btfsc	___ftadd@f1+2,7
  4275  0572  17C2               	bsf	___ftadd@sign,7
  4276  0573  1BBD               	btfsc	___ftadd@f2+2,7
  4277  0574  1742               	bsf	___ftadd@sign,6
  4278  0575  17B9               	bsf	___ftadd@f1+1,7
  4279  0576  30FF               	movlw	255
  4280  0577  05B8               	andwf	___ftadd@f1,f
  4281  0578  30FF               	movlw	255
  4282  0579  05B9               	andwf	___ftadd@f1+1,f
  4283  057A  3000               	movlw	0
  4284  057B  05BA               	andwf	___ftadd@f1+2,f
  4285  057C  17BC               	bsf	___ftadd@f2+1,7
  4286  057D  30FF               	movlw	255
  4287  057E  05BB               	andwf	___ftadd@f2,f
  4288  057F  30FF               	movlw	255
  4289  0580  05BC               	andwf	___ftadd@f2+1,f
  4290  0581  3000               	movlw	0
  4291  0582  05BD               	andwf	___ftadd@f2+2,f
  4292  0583  0843               	movf	___ftadd@exp2,w
  4293  0584  0244               	subwf	___ftadd@exp1,w
  4294  0585  1803               	skipnc
  4295  0586  2DAD               	goto	l3498
  4296  0587                     l3488:
  4297  0587  3001               	movlw	1
  4298  0588                     u3545:
  4299  0588  1003               	clrc
  4300  0589  0DBB               	rlf	___ftadd@f2,f
  4301  058A  0DBC               	rlf	___ftadd@f2+1,f
  4302  058B  0DBD               	rlf	___ftadd@f2+2,f
  4303  058C  3EFF               	addlw	-1
  4304  058D  1D03               	skipz
  4305  058E  2D88               	goto	u3545
  4306  058F  3001               	movlw	1
  4307  0590  02C3               	subwf	___ftadd@exp2,f
  4308  0591  0843               	movf	___ftadd@exp2,w
  4309  0592  0644               	xorwf	___ftadd@exp1,w
  4310  0593  1903               	skipnz
  4311  0594  2DA8               	goto	l3496
  4312  0595  3001               	movlw	1
  4313  0596  02C2               	subwf	___ftadd@sign,f
  4314  0597  0842               	movf	___ftadd@sign,w
  4315  0598  3907               	andlw	7
  4316  0599  1903               	btfsc	3,2
  4317  059A  2DA8               	goto	l3496
  4318  059B  2D87               	goto	l3488
  4319  059C                     l3494:
  4320  059C  3001               	movlw	1
  4321  059D                     u3575:
  4322  059D  1003               	clrc
  4323  059E  0CBA               	rrf	___ftadd@f1+2,f
  4324  059F  0CB9               	rrf	___ftadd@f1+1,f
  4325  05A0  0CB8               	rrf	___ftadd@f1,f
  4326  05A1  3EFF               	addlw	-1
  4327  05A2  1D03               	skipz
  4328  05A3  2D9D               	goto	u3575
  4329  05A4  3001               	movlw	1
  4330  05A5  00BE               	movwf	??___ftadd
  4331  05A6  083E               	movf	??___ftadd,w
  4332  05A7  07C4               	addwf	___ftadd@exp1,f
  4333  05A8                     l3496:
  4334  05A8  0844               	movf	___ftadd@exp1,w
  4335  05A9  0643               	xorwf	___ftadd@exp2,w
  4336  05AA  1903               	btfsc	3,2
  4337  05AB  2DD6               	goto	l1058
  4338  05AC  2D9C               	goto	l3494
  4339  05AD                     l3498:
  4340  05AD  0844               	movf	___ftadd@exp1,w
  4341  05AE  0243               	subwf	___ftadd@exp2,w
  4342  05AF  1803               	skipnc
  4343  05B0  2DD6               	goto	l1058
  4344  05B1                     l3500:
  4345  05B1  3001               	movlw	1
  4346  05B2                     u3605:
  4347  05B2  1003               	clrc
  4348  05B3  0DB8               	rlf	___ftadd@f1,f
  4349  05B4  0DB9               	rlf	___ftadd@f1+1,f
  4350  05B5  0DBA               	rlf	___ftadd@f1+2,f
  4351  05B6  3EFF               	addlw	-1
  4352  05B7  1D03               	skipz
  4353  05B8  2DB2               	goto	u3605
  4354  05B9  3001               	movlw	1
  4355  05BA  02C4               	subwf	___ftadd@exp1,f
  4356  05BB  0843               	movf	___ftadd@exp2,w
  4357  05BC  0644               	xorwf	___ftadd@exp1,w
  4358  05BD  1903               	skipnz
  4359  05BE  2DD2               	goto	l3508
  4360  05BF  3001               	movlw	1
  4361  05C0  02C2               	subwf	___ftadd@sign,f
  4362  05C1  0842               	movf	___ftadd@sign,w
  4363  05C2  3907               	andlw	7
  4364  05C3  1903               	btfsc	3,2
  4365  05C4  2DD2               	goto	l3508
  4366  05C5  2DB1               	goto	l3500
  4367  05C6                     l3506:
  4368  05C6  3001               	movlw	1
  4369  05C7                     u3635:
  4370  05C7  1003               	clrc
  4371  05C8  0CBD               	rrf	___ftadd@f2+2,f
  4372  05C9  0CBC               	rrf	___ftadd@f2+1,f
  4373  05CA  0CBB               	rrf	___ftadd@f2,f
  4374  05CB  3EFF               	addlw	-1
  4375  05CC  1D03               	skipz
  4376  05CD  2DC7               	goto	u3635
  4377  05CE  3001               	movlw	1
  4378  05CF  00BE               	movwf	??___ftadd
  4379  05D0  083E               	movf	??___ftadd,w
  4380  05D1  07C3               	addwf	___ftadd@exp2,f
  4381  05D2                     l3508:
  4382  05D2  0844               	movf	___ftadd@exp1,w
  4383  05D3  0643               	xorwf	___ftadd@exp2,w
  4384  05D4  1D03               	skipz
  4385  05D5  2DC6               	goto	l3506
  4386  05D6                     l1058:
  4387  05D6  1FC2               	btfss	___ftadd@sign,7
  4388  05D7  2DE8               	goto	l3512
  4389  05D8  30FF               	movlw	255
  4390  05D9  06B8               	xorwf	___ftadd@f1,f
  4391  05DA  30FF               	movlw	255
  4392  05DB  06B9               	xorwf	___ftadd@f1+1,f
  4393  05DC  30FF               	movlw	255
  4394  05DD  06BA               	xorwf	___ftadd@f1+2,f
  4395  05DE  3001               	movlw	1
  4396  05DF  07B8               	addwf	___ftadd@f1,f
  4397  05E0  3000               	movlw	0
  4398  05E1  1803               	skipnc
  4399  05E2  3001               	movlw	1
  4400  05E3  07B9               	addwf	___ftadd@f1+1,f
  4401  05E4  3000               	movlw	0
  4402  05E5  1803               	skipnc
  4403  05E6  3001               	movlw	1
  4404  05E7  07BA               	addwf	___ftadd@f1+2,f
  4405  05E8                     l3512:
  4406  05E8  1F42               	btfss	___ftadd@sign,6
  4407  05E9  2DFA               	goto	l3516
  4408  05EA  30FF               	movlw	255
  4409  05EB  06BB               	xorwf	___ftadd@f2,f
  4410  05EC  30FF               	movlw	255
  4411  05ED  06BC               	xorwf	___ftadd@f2+1,f
  4412  05EE  30FF               	movlw	255
  4413  05EF  06BD               	xorwf	___ftadd@f2+2,f
  4414  05F0  3001               	movlw	1
  4415  05F1  07BB               	addwf	___ftadd@f2,f
  4416  05F2  3000               	movlw	0
  4417  05F3  1803               	skipnc
  4418  05F4  3001               	movlw	1
  4419  05F5  07BC               	addwf	___ftadd@f2+1,f
  4420  05F6  3000               	movlw	0
  4421  05F7  1803               	skipnc
  4422  05F8  3001               	movlw	1
  4423  05F9  07BD               	addwf	___ftadd@f2+2,f
  4424  05FA                     l3516:
  4425  05FA  01C2               	clrf	___ftadd@sign
  4426  05FB  0838               	movf	___ftadd@f1,w
  4427  05FC  07BB               	addwf	___ftadd@f2,f
  4428  05FD  0839               	movf	___ftadd@f1+1,w
  4429  05FE  1103               	clrz
  4430  05FF  1803               	skipnc
  4431  0600  0A39               	incf	___ftadd@f1+1,w
  4432  0601  1D03               	btfss	3,2
  4433  0602  07BC               	addwf	___ftadd@f2+1,f
  4434  0603  083A               	movf	___ftadd@f1+2,w
  4435  0604  1103               	clrz
  4436  0605  1803               	skipnc
  4437  0606  0A3A               	incf	___ftadd@f1+2,w
  4438  0607  1D03               	btfss	3,2
  4439  0608  07BD               	addwf	___ftadd@f2+2,f
  4440  0609  1FBD               	btfss	___ftadd@f2+2,7
  4441  060A  2E1D               	goto	l3526
  4442  060B  30FF               	movlw	255
  4443  060C  06BB               	xorwf	___ftadd@f2,f
  4444  060D  30FF               	movlw	255
  4445  060E  06BC               	xorwf	___ftadd@f2+1,f
  4446  060F  30FF               	movlw	255
  4447  0610  06BD               	xorwf	___ftadd@f2+2,f
  4448  0611  3001               	movlw	1
  4449  0612  07BB               	addwf	___ftadd@f2,f
  4450  0613  3000               	movlw	0
  4451  0614  1803               	skipnc
  4452  0615  3001               	movlw	1
  4453  0616  07BC               	addwf	___ftadd@f2+1,f
  4454  0617  3000               	movlw	0
  4455  0618  1803               	skipnc
  4456  0619  3001               	movlw	1
  4457  061A  07BD               	addwf	___ftadd@f2+2,f
  4458  061B  01C2               	clrf	___ftadd@sign
  4459  061C  0AC2               	incf	___ftadd@sign,f
  4460  061D                     l3526:
  4461  061D  083B               	movf	___ftadd@f2,w
  4462  061E  00A0               	movwf	___ftpack@arg
  4463  061F  083C               	movf	___ftadd@f2+1,w
  4464  0620  00A1               	movwf	___ftpack@arg+1
  4465  0621  083D               	movf	___ftadd@f2+2,w
  4466  0622  00A2               	movwf	___ftpack@arg+2
  4467  0623  0844               	movf	___ftadd@exp1,w
  4468  0624  00BE               	movwf	??___ftadd
  4469  0625  083E               	movf	??___ftadd,w
  4470  0626  00A3               	movwf	___ftpack@exp
  4471  0627  0842               	movf	___ftadd@sign,w
  4472  0628  00BF               	movwf	??___ftadd+1
  4473  0629  083F               	movf	??___ftadd+1,w
  4474  062A  00A4               	movwf	___ftpack@sign
  4475  062B  160A  118A  22CD   	fcall	___ftpack
  4476  062E  0820               	movf	?___ftpack,w
  4477  062F  00B8               	movwf	?___ftadd
  4478  0630  0821               	movf	?___ftpack+1,w
  4479  0631  00B9               	movwf	?___ftadd+1
  4480  0632  0822               	movf	?___ftpack+2,w
  4481  0633  00BA               	movwf	?___ftadd+2
  4482  0634  0008               	return
  4483  0635                     __end_of___ftadd:
  4484                           
  4485                           	psect	text11
  4486  1DC7                     __ptext11:	
  4487 ;; *************** function ___ftge *****************
  4488 ;; Defined at:
  4489 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\ftge.c"
  4490 ;; Parameters:    Size  Location     Type
  4491 ;;  ff1             3    0[BANK0 ] float 
  4492 ;;  ff2             3    3[BANK0 ] float 
  4493 ;; Auto vars:     Size  Location     Type
  4494 ;;		None
  4495 ;; Return value:  Size  Location     Type
  4496 ;;		None               void
  4497 ;; Registers used:
  4498 ;;		wreg, status,2, status,0
  4499 ;; Tracked objects:
  4500 ;;		On entry : 300/0
  4501 ;;		On exit  : 300/0
  4502 ;;		Unchanged: 0/0
  4503 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4504 ;;      Params:         0       6       0       0       0
  4505 ;;      Locals:         0       0       0       0       0
  4506 ;;      Temps:          0       0       0       0       0
  4507 ;;      Totals:         0       6       0       0       0
  4508 ;;Total ram usage:        6 bytes
  4509 ;; Hardware stack levels used: 1
  4510 ;; Hardware stack levels required when called: 2
  4511 ;; This function calls:
  4512 ;;		Nothing
  4513 ;; This function is called by:
  4514 ;;		_log
  4515 ;; This function uses a non-reentrant model
  4516 ;;
  4517                           
  4518                           
  4519                           ;psect for function ___ftge
  4520  1DC7                     ___ftge:
  4521                           
  4522                           ;incstack = 0
  4523                           ; Regs used in ___ftge: [wreg+status,2+status,0]
  4524  1DC7  1FA2               	btfss	___ftge@ff1+2,7
  4525  1DC8  2DD6               	goto	l3686
  4526  1DC9  0820               	movf	___ftge@ff1,w
  4527  1DCA  3C00               	sublw	0
  4528  1DCB  00A0               	movwf	___ftge@ff1
  4529  1DCC  0821               	movf	___ftge@ff1+1,w
  4530  1DCD  1C03               	skipc
  4531  1DCE  0F21               	incfsz	___ftge@ff1+1,w
  4532  1DCF  3C00               	sublw	0
  4533  1DD0  00A1               	movwf	___ftge@ff1+1
  4534  1DD1  0822               	movf	___ftge@ff1+2,w
  4535  1DD2  1C03               	skipc
  4536  1DD3  0F22               	incfsz	___ftge@ff1+2,w
  4537  1DD4  3C80               	sublw	128
  4538  1DD5  00A2               	movwf	___ftge@ff1+2
  4539  1DD6                     l3686:
  4540  1DD6  1FA5               	btfss	___ftge@ff2+2,7
  4541  1DD7  2DE5               	goto	l3690
  4542  1DD8  0823               	movf	___ftge@ff2,w
  4543  1DD9  3C00               	sublw	0
  4544  1DDA  00A3               	movwf	___ftge@ff2
  4545  1DDB  0824               	movf	___ftge@ff2+1,w
  4546  1DDC  1C03               	skipc
  4547  1DDD  0F24               	incfsz	___ftge@ff2+1,w
  4548  1DDE  3C00               	sublw	0
  4549  1DDF  00A4               	movwf	___ftge@ff2+1
  4550  1DE0  0825               	movf	___ftge@ff2+2,w
  4551  1DE1  1C03               	skipc
  4552  1DE2  0F25               	incfsz	___ftge@ff2+2,w
  4553  1DE3  3C80               	sublw	128
  4554  1DE4  00A5               	movwf	___ftge@ff2+2
  4555  1DE5                     l3690:
  4556  1DE5  3080               	movlw	128
  4557  1DE6  06A2               	xorwf	___ftge@ff1+2,f
  4558  1DE7  3080               	movlw	128
  4559  1DE8  06A5               	xorwf	___ftge@ff2+2,f
  4560  1DE9  0825               	movf	___ftge@ff2+2,w
  4561  1DEA  0222               	subwf	___ftge@ff1+2,w
  4562  1DEB  1D03               	skipz
  4563  1DEC  0008               	return
  4564  1DED  0824               	movf	___ftge@ff2+1,w
  4565  1DEE  0221               	subwf	___ftge@ff1+1,w
  4566  1DEF  1D03               	skipz
  4567  1DF0  0008               	return
  4568  1DF1  0823               	movf	___ftge@ff2,w
  4569  1DF2  0220               	subwf	___ftge@ff1,w
  4570  1DF3  0008               	return
  4571  1DF4                     __end_of___ftge:
  4572                           
  4573                           	psect	text12
  4574  1D43                     __ptext12:	
  4575 ;; *************** function ___awtoft *****************
  4576 ;; Defined at:
  4577 ;;		line 32 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\awtoft.c"
  4578 ;; Parameters:    Size  Location     Type
  4579 ;;  c               2   10[BANK1 ] int 
  4580 ;; Auto vars:     Size  Location     Type
  4581 ;;  sign            1   13[BANK1 ] unsigned char 
  4582 ;; Return value:  Size  Location     Type
  4583 ;;                  3   10[BANK1 ] float 
  4584 ;; Registers used:
  4585 ;;		wreg, status,2, status,0, pclath, cstack
  4586 ;; Tracked objects:
  4587 ;;		On entry : 300/100
  4588 ;;		On exit  : 300/100
  4589 ;;		Unchanged: 0/0
  4590 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4591 ;;      Params:         0       0       3       0       0
  4592 ;;      Locals:         0       0       1       0       0
  4593 ;;      Temps:          0       2       0       0       0
  4594 ;;      Totals:         0       2       4       0       0
  4595 ;;Total ram usage:        6 bytes
  4596 ;; Hardware stack levels used: 1
  4597 ;; Hardware stack levels required when called: 3
  4598 ;; This function calls:
  4599 ;;		___ftpack
  4600 ;; This function is called by:
  4601 ;;		_rTemperature
  4602 ;;		_log
  4603 ;; This function uses a non-reentrant model
  4604 ;;
  4605                           
  4606                           
  4607                           ;psect for function ___awtoft
  4608  1D43                     ___awtoft:
  4609                           
  4610                           ;incstack = 0
  4611                           ; Regs used in ___awtoft: [wreg+status,2+status,0+pclath+cstack]
  4612  1D43  01D5               	clrf	___awtoft@sign^(0+128)
  4613  1D44  1FD3               	btfss	(___awtoft@c+1)^(0+128),7
  4614  1D45  2D4D               	goto	l3636
  4615  1D46  09D2               	comf	___awtoft@c^(0+128),f
  4616  1D47  09D3               	comf	(___awtoft@c+1)^(0+128),f
  4617  1D48  0AD2               	incf	___awtoft@c^(0+128),f
  4618  1D49  1903               	skipnz
  4619  1D4A  0AD3               	incf	(___awtoft@c+1)^(0+128),f
  4620  1D4B  01D5               	clrf	___awtoft@sign^(0+128)
  4621  1D4C  0AD5               	incf	___awtoft@sign^(0+128),f
  4622  1D4D                     l3636:
  4623  1D4D  0852               	movf	___awtoft@c^(0+128),w
  4624  1D4E  1283               	bcf	3,5	;RP0=0, select bank0
  4625  1D4F  00A0               	movwf	___ftpack@arg
  4626  1D50  1683               	bsf	3,5	;RP0=1, select bank1
  4627  1D51  0853               	movf	(___awtoft@c+1)^(0+128),w
  4628  1D52  1283               	bcf	3,5	;RP0=0, select bank0
  4629  1D53  00A1               	movwf	___ftpack@arg+1
  4630  1D54  01A2               	clrf	___ftpack@arg+2
  4631  1D55  308E               	movlw	142
  4632  1D56  00EE               	movwf	??___awtoft
  4633  1D57  086E               	movf	??___awtoft,w
  4634  1D58  00A3               	movwf	___ftpack@exp
  4635  1D59  1683               	bsf	3,5	;RP0=1, select bank1
  4636  1D5A  0855               	movf	___awtoft@sign^(0+128),w
  4637  1D5B  1283               	bcf	3,5	;RP0=0, select bank0
  4638  1D5C  00EF               	movwf	??___awtoft+1
  4639  1D5D  086F               	movf	??___awtoft+1,w
  4640  1D5E  00A4               	movwf	___ftpack@sign
  4641  1D5F  160A  118A  22CD   	fcall	___ftpack
  4642  1D62  0820               	movf	?___ftpack,w
  4643  1D63  1683               	bsf	3,5	;RP0=1, select bank1
  4644  1D64  00D2               	movwf	?___awtoft^(0+128)
  4645  1D65  1283               	bcf	3,5	;RP0=0, select bank0
  4646  1D66  0821               	movf	?___ftpack+1,w
  4647  1D67  1683               	bsf	3,5	;RP0=1, select bank1
  4648  1D68  00D3               	movwf	(?___awtoft+1)^(0+128)
  4649  1D69  1283               	bcf	3,5	;RP0=0, select bank0
  4650  1D6A  0822               	movf	?___ftpack+2,w
  4651  1D6B  1683               	bsf	3,5	;RP0=1, select bank1
  4652  1D6C  00D4               	movwf	(?___awtoft+2)^(0+128)
  4653  1D6D  0008               	return
  4654  1D6E                     __end_of___awtoft:
  4655                           
  4656                           	psect	text13
  4657  12CD                     __ptext13:	
  4658 ;; *************** function ___ftpack *****************
  4659 ;; Defined at:
  4660 ;;		line 62 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\float.c"
  4661 ;; Parameters:    Size  Location     Type
  4662 ;;  arg             3    0[BANK0 ] unsigned um
  4663 ;;  exp             1    3[BANK0 ] unsigned char 
  4664 ;;  sign            1    4[BANK0 ] unsigned char 
  4665 ;; Auto vars:     Size  Location     Type
  4666 ;;		None
  4667 ;; Return value:  Size  Location     Type
  4668 ;;                  3    0[BANK0 ] float 
  4669 ;; Registers used:
  4670 ;;		wreg, status,2, status,0
  4671 ;; Tracked objects:
  4672 ;;		On entry : 300/0
  4673 ;;		On exit  : 300/0
  4674 ;;		Unchanged: 0/0
  4675 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4676 ;;      Params:         0       5       0       0       0
  4677 ;;      Locals:         0       0       0       0       0
  4678 ;;      Temps:          0       3       0       0       0
  4679 ;;      Totals:         0       8       0       0       0
  4680 ;;Total ram usage:        8 bytes
  4681 ;; Hardware stack levels used: 1
  4682 ;; Hardware stack levels required when called: 2
  4683 ;; This function calls:
  4684 ;;		Nothing
  4685 ;; This function is called by:
  4686 ;;		___awtoft
  4687 ;;		___ftadd
  4688 ;;		___ftdiv
  4689 ;;		___ftmul
  4690 ;;		___lbtoft
  4691 ;; This function uses a non-reentrant model
  4692 ;;
  4693                           
  4694                           
  4695                           ;psect for function ___ftpack
  4696  12CD                     ___ftpack:
  4697                           
  4698                           ;incstack = 0
  4699                           ; Regs used in ___ftpack: [wreg+status,2+status,0]
  4700  12CD  0823               	movf	___ftpack@exp,w
  4701  12CE  1903               	btfsc	3,2
  4702  12CF  2AD5               	goto	l3394
  4703  12D0  0822               	movf	___ftpack@arg+2,w
  4704  12D1  0421               	iorwf	___ftpack@arg+1,w
  4705  12D2  0420               	iorwf	___ftpack@arg,w
  4706  12D3  1D03               	skipz
  4707  12D4  2AE8               	goto	l3400
  4708  12D5                     l3394:
  4709  12D5  3000               	movlw	0
  4710  12D6  00A0               	movwf	?___ftpack
  4711  12D7  3000               	movlw	0
  4712  12D8  00A1               	movwf	?___ftpack+1
  4713  12D9  3000               	movlw	0
  4714  12DA  00A2               	movwf	?___ftpack+2
  4715  12DB  0008               	return
  4716  12DC                     l3398:
  4717  12DC  3001               	movlw	1
  4718  12DD  00A5               	movwf	??___ftpack
  4719  12DE  0825               	movf	??___ftpack,w
  4720  12DF  07A3               	addwf	___ftpack@exp,f
  4721  12E0  3001               	movlw	1
  4722  12E1                     u3325:
  4723  12E1  1003               	clrc
  4724  12E2  0CA2               	rrf	___ftpack@arg+2,f
  4725  12E3  0CA1               	rrf	___ftpack@arg+1,f
  4726  12E4  0CA0               	rrf	___ftpack@arg,f
  4727  12E5  3EFF               	addlw	-1
  4728  12E6  1D03               	skipz
  4729  12E7  2AE1               	goto	u3325
  4730  12E8                     l3400:
  4731  12E8  30FE               	movlw	254
  4732  12E9  0522               	andwf	___ftpack@arg+2,w
  4733  12EA  1903               	btfsc	3,2
  4734  12EB  2B03               	goto	l1027
  4735  12EC  2ADC               	goto	l3398
  4736  12ED                     l3402:
  4737  12ED  3001               	movlw	1
  4738  12EE  00A5               	movwf	??___ftpack
  4739  12EF  0825               	movf	??___ftpack,w
  4740  12F0  07A3               	addwf	___ftpack@exp,f
  4741  12F1  3001               	movlw	1
  4742  12F2  07A0               	addwf	___ftpack@arg,f
  4743  12F3  3000               	movlw	0
  4744  12F4  1803               	skipnc
  4745  12F5  3001               	movlw	1
  4746  12F6  07A1               	addwf	___ftpack@arg+1,f
  4747  12F7  3000               	movlw	0
  4748  12F8  1803               	skipnc
  4749  12F9  3001               	movlw	1
  4750  12FA  07A2               	addwf	___ftpack@arg+2,f
  4751  12FB  3001               	movlw	1
  4752  12FC                     u3345:
  4753  12FC  1003               	clrc
  4754  12FD  0CA2               	rrf	___ftpack@arg+2,f
  4755  12FE  0CA1               	rrf	___ftpack@arg+1,f
  4756  12FF  0CA0               	rrf	___ftpack@arg,f
  4757  1300  3EFF               	addlw	-1
  4758  1301  1D03               	skipz
  4759  1302  2AFC               	goto	u3345
  4760  1303                     l1027:
  4761  1303  30FF               	movlw	255
  4762  1304  0522               	andwf	___ftpack@arg+2,w
  4763  1305  1903               	btfsc	3,2
  4764  1306  2B16               	goto	l3410
  4765  1307  2AED               	goto	l3402
  4766  1308                     l3412:
  4767  1308  3002               	movlw	2
  4768  1309  0223               	subwf	___ftpack@exp,w
  4769  130A  1C03               	btfss	3,0
  4770  130B  2B18               	goto	l1034
  4771  130C  3001               	movlw	1
  4772  130D  02A3               	subwf	___ftpack@exp,f
  4773  130E  3001               	movlw	1
  4774  130F                     u3365:
  4775  130F  1003               	clrc
  4776  1310  0DA0               	rlf	___ftpack@arg,f
  4777  1311  0DA1               	rlf	___ftpack@arg+1,f
  4778  1312  0DA2               	rlf	___ftpack@arg+2,f
  4779  1313  3EFF               	addlw	-1
  4780  1314  1D03               	skipz
  4781  1315  2B0F               	goto	u3365
  4782  1316                     l3410:
  4783  1316  1FA1               	btfss	___ftpack@arg+1,7
  4784  1317  2B08               	goto	l3412
  4785  1318                     l1034:
  4786  1318  1823               	btfsc	___ftpack@exp,0
  4787  1319  2B20               	goto	l1035
  4788  131A  30FF               	movlw	255
  4789  131B  05A0               	andwf	___ftpack@arg,f
  4790  131C  307F               	movlw	127
  4791  131D  05A1               	andwf	___ftpack@arg+1,f
  4792  131E  30FF               	movlw	255
  4793  131F  05A2               	andwf	___ftpack@arg+2,f
  4794  1320                     l1035:
  4795  1320  1003               	clrc
  4796  1321  0CA3               	rrf	___ftpack@exp,f
  4797  1322  0823               	movf	___ftpack@exp,w
  4798  1323  00A5               	movwf	??___ftpack
  4799  1324  01A6               	clrf	??___ftpack+1
  4800  1325  01A7               	clrf	??___ftpack+2
  4801  1326  3010               	movlw	16
  4802  1327                     u3405:
  4803  1327  1003               	clrc
  4804  1328  0DA5               	rlf	??___ftpack,f
  4805  1329  0DA6               	rlf	??___ftpack+1,f
  4806  132A  0DA7               	rlf	??___ftpack+2,f
  4807  132B  3EFF               	addlw	-1
  4808  132C  1D03               	skipz
  4809  132D  2B27               	goto	u3405
  4810  132E  0825               	movf	??___ftpack,w
  4811  132F  04A0               	iorwf	___ftpack@arg,f
  4812  1330  0826               	movf	??___ftpack+1,w
  4813  1331  04A1               	iorwf	___ftpack@arg+1,f
  4814  1332  0827               	movf	??___ftpack+2,w
  4815  1333  04A2               	iorwf	___ftpack@arg+2,f
  4816  1334  0824               	movf	___ftpack@sign,w
  4817  1335  1903               	btfsc	3,2
  4818  1336  0008               	return
  4819  1337  17A2               	bsf	___ftpack@arg+2,7
  4820  1338  0008               	return
  4821  1339                     __end_of___ftpack:
  4822                           
  4823                           	psect	text14
  4824  13B6                     __ptext14:	
  4825 ;; *************** function _init *****************
  4826 ;; Defined at:
  4827 ;;		line 5 in file "config.c"
  4828 ;; Parameters:    Size  Location     Type
  4829 ;;		None
  4830 ;; Auto vars:     Size  Location     Type
  4831 ;;		None
  4832 ;; Return value:  Size  Location     Type
  4833 ;;                  1    wreg      void 
  4834 ;; Registers used:
  4835 ;;		wreg, status,2
  4836 ;; Tracked objects:
  4837 ;;		On entry : B00/0
  4838 ;;		On exit  : 0/0
  4839 ;;		Unchanged: 0/0
  4840 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4841 ;;      Params:         0       0       0       0       0
  4842 ;;      Locals:         0       0       0       0       0
  4843 ;;      Temps:          0       2       0       0       0
  4844 ;;      Totals:         0       2       0       0       0
  4845 ;;Total ram usage:        2 bytes
  4846 ;; Hardware stack levels used: 1
  4847 ;; Hardware stack levels required when called: 2
  4848 ;; This function calls:
  4849 ;;		Nothing
  4850 ;; This function is called by:
  4851 ;;		_main
  4852 ;; This function uses a non-reentrant model
  4853 ;;
  4854                           
  4855                           
  4856                           ;psect for function _init
  4857  13B6                     _init:
  4858                           
  4859                           ;config.c: 7: TRISAbits.TRISA0 = 1;
  4860                           
  4861                           ;incstack = 0
  4862                           ; Regs used in _init: [wreg+status,2]
  4863  13B6  1683               	bsf	3,5	;RP0=1, select bank1
  4864  13B7  1405               	bsf	5,0	;volatile
  4865                           
  4866                           ;config.c: 8: TRISAbits.TRISA1 = 1;
  4867  13B8  1485               	bsf	5,1	;volatile
  4868                           
  4869                           ;config.c: 9: TRISAbits.TRISA2 = 0;
  4870  13B9  1105               	bcf	5,2	;volatile
  4871                           
  4872                           ;config.c: 10: TRISAbits.TRISA3 = 1;
  4873  13BA  1585               	bsf	5,3	;volatile
  4874                           
  4875                           ;config.c: 11: TRISAbits.TRISA4 = 0;
  4876  13BB  1205               	bcf	5,4	;volatile
  4877                           
  4878                           ;config.c: 12: TRISAbits.TRISA5 = 0;
  4879  13BC  1285               	bcf	5,5	;volatile
  4880                           
  4881                           ;config.c: 14: TRISBbits.TRISB0 = 0;
  4882  13BD  1006               	bcf	6,0	;volatile
  4883                           
  4884                           ;config.c: 15: TRISBbits.TRISB1 = 0;
  4885  13BE  1086               	bcf	6,1	;volatile
  4886                           
  4887                           ;config.c: 16: TRISBbits.TRISB2 = 0;
  4888  13BF  1106               	bcf	6,2	;volatile
  4889                           
  4890                           ;config.c: 17: TRISBbits.TRISB3 = 1;
  4891  13C0  1586               	bsf	6,3	;volatile
  4892                           
  4893                           ;config.c: 18: TRISBbits.TRISB4 = 1;
  4894  13C1  1606               	bsf	6,4	;volatile
  4895                           
  4896                           ;config.c: 19: TRISBbits.TRISB5 = 1;
  4897  13C2  1686               	bsf	6,5	;volatile
  4898                           
  4899                           ;config.c: 20: TRISBbits.TRISB6 = 1;
  4900  13C3  1706               	bsf	6,6	;volatile
  4901                           
  4902                           ;config.c: 21: TRISBbits.TRISB7 = 1;
  4903  13C4  1786               	bsf	6,7	;volatile
  4904                           
  4905                           ;config.c: 23: TRISCbits.TRISC0 = 0;
  4906  13C5  1007               	bcf	7,0	;volatile
  4907                           
  4908                           ;config.c: 24: TRISCbits.TRISC1 = 0;
  4909  13C6  1087               	bcf	7,1	;volatile
  4910                           
  4911                           ;config.c: 25: TRISCbits.TRISC2 = 0;
  4912  13C7  1107               	bcf	7,2	;volatile
  4913                           
  4914                           ;config.c: 26: TRISCbits.TRISC3 = 0;
  4915  13C8  1187               	bcf	7,3	;volatile
  4916                           
  4917                           ;config.c: 27: TRISCbits.TRISC4 = 0;
  4918  13C9  1207               	bcf	7,4	;volatile
  4919                           
  4920                           ;config.c: 28: TRISCbits.TRISC5 = 0;
  4921  13CA  1287               	bcf	7,5	;volatile
  4922                           
  4923                           ;config.c: 29: TRISCbits.TRISC6 = 1;
  4924  13CB  1707               	bsf	7,6	;volatile
  4925                           
  4926                           ;config.c: 30: TRISCbits.TRISC7 = 1;
  4927  13CC  1787               	bsf	7,7	;volatile
  4928                           
  4929                           ;config.c: 32: PORTA = 0x0;
  4930  13CD  1283               	bcf	3,5	;RP0=0, select bank0
  4931  13CE  0185               	clrf	5	;volatile
  4932                           
  4933                           ;config.c: 33: PORTB = 0x0;
  4934  13CF  0186               	clrf	6	;volatile
  4935                           
  4936                           ;config.c: 34: PORTC = 0x0;
  4937  13D0  0187               	clrf	7	;volatile
  4938                           
  4939                           ;config.c: 36: OPTION_REGbits.nRBPU = 1;
  4940  13D1  1683               	bsf	3,5	;RP0=1, select bank1
  4941  13D2  1781               	bsf	1,7	;volatile
  4942                           
  4943                           ;config.c: 37: OPTION_REGbits.INTEDG = 0;
  4944  13D3  1301               	bcf	1,6	;volatile
  4945                           
  4946                           ;config.c: 38: OPTION_REGbits.T0CS = 0;
  4947  13D4  1281               	bcf	1,5	;volatile
  4948                           
  4949                           ;config.c: 39: OPTION_REGbits.T0SE = 0;
  4950  13D5  1201               	bcf	1,4	;volatile
  4951                           
  4952                           ;config.c: 40: OPTION_REGbits.PSA = 0;
  4953  13D6  1181               	bcf	1,3	;volatile
  4954                           
  4955                           ;config.c: 41: OPTION_REGbits.PS2 = 1;
  4956  13D7  1501               	bsf	1,2	;volatile
  4957                           
  4958                           ;config.c: 42: OPTION_REGbits.PS1 = 1;
  4959  13D8  1481               	bsf	1,1	;volatile
  4960                           
  4961                           ;config.c: 43: OPTION_REGbits.PS0 = 1;
  4962  13D9  1401               	bsf	1,0	;volatile
  4963                           
  4964                           ;config.c: 45: INTCONbits.GIE = 1;
  4965  13DA  178B               	bsf	11,7	;volatile
  4966                           
  4967                           ;config.c: 46: INTCONbits.PEIE = 1;
  4968  13DB  170B               	bsf	11,6	;volatile
  4969                           
  4970                           ;config.c: 47: INTCONbits.T0IE = 0;
  4971  13DC  128B               	bcf	11,5	;volatile
  4972                           
  4973                           ;config.c: 48: INTCONbits.INTE = 0;
  4974  13DD  120B               	bcf	11,4	;volatile
  4975                           
  4976                           ;config.c: 49: INTCONbits.RBIE = 1;
  4977  13DE  158B               	bsf	11,3	;volatile
  4978                           
  4979                           ;config.c: 51: PIE1bits.ADIE = 1;
  4980  13DF  170C               	bsf	12,6	;volatile
  4981                           
  4982                           ;config.c: 52: PIE1bits.RCIE = 1;
  4983  13E0  168C               	bsf	12,5	;volatile
  4984                           
  4985                           ;config.c: 53: PIE1bits.TXIE = 0;
  4986  13E1  120C               	bcf	12,4	;volatile
  4987                           
  4988                           ;config.c: 54: PIE1bits.SSPIE = 0;
  4989  13E2  118C               	bcf	12,3	;volatile
  4990                           
  4991                           ;config.c: 55: PIE1bits.TMR2IE = 1;
  4992  13E3  148C               	bsf	12,1	;volatile
  4993                           
  4994                           ;config.c: 56: PIE1bits.TMR1IE = 1;
  4995  13E4  140C               	bsf	12,0	;volatile
  4996                           
  4997                           ;config.c: 58: PIE2bits.CCP2IE = 0;
  4998  13E5  100D               	bcf	13,0	;volatile
  4999                           
  5000                           ;config.c: 60: T1CONbits.T1CKPS1 = 0;
  5001  13E6  1283               	bcf	3,5	;RP0=0, select bank0
  5002  13E7  1290               	bcf	16,5	;volatile
  5003                           
  5004                           ;config.c: 61: T1CONbits.T1CKPS0 = 1;
  5005  13E8  1610               	bsf	16,4	;volatile
  5006                           
  5007                           ;config.c: 62: T1CONbits.T1OSCEN = 0;
  5008  13E9  1190               	bcf	16,3	;volatile
  5009                           
  5010                           ;config.c: 63: T1CONbits.nT1SYNC = 0;
  5011  13EA  1110               	bcf	16,2	;volatile
  5012                           
  5013                           ;config.c: 64: T1CONbits.TMR1CS = 0;
  5014  13EB  1090               	bcf	16,1	;volatile
  5015                           
  5016                           ;config.c: 65: T1CONbits.TMR1ON = 0;
  5017  13EC  1010               	bcf	16,0	;volatile
  5018                           
  5019                           ;config.c: 67: T2CONbits.TOUTPS3 = 1;
  5020  13ED  1712               	bsf	18,6	;volatile
  5021                           
  5022                           ;config.c: 68: T2CONbits.TOUTPS2 = 1;
  5023  13EE  1692               	bsf	18,5	;volatile
  5024                           
  5025                           ;config.c: 69: T2CONbits.TOUTPS1 = 1;
  5026  13EF  1612               	bsf	18,4	;volatile
  5027                           
  5028                           ;config.c: 70: T2CONbits.TOUTPS0 = 1;
  5029  13F0  1592               	bsf	18,3	;volatile
  5030                           
  5031                           ;config.c: 71: T2CONbits.TMR2ON = 1;
  5032  13F1  1512               	bsf	18,2	;volatile
  5033                           
  5034                           ;config.c: 72: T2CONbits.T2CKPS1 = 1;
  5035  13F2  1492               	bsf	18,1	;volatile
  5036                           
  5037                           ;config.c: 73: T2CONbits.T2CKPS0 = 0;
  5038  13F3  1012               	bcf	18,0	;volatile
  5039                           
  5040                           ;config.c: 75: TMR2 = 195;
  5041  13F4  30C3               	movlw	195
  5042  13F5  0091               	movwf	17	;volatile
  5043                           
  5044                           ;config.c: 77: SSPSTATbits.SMP = 0;
  5045  13F6  1683               	bsf	3,5	;RP0=1, select bank1
  5046  13F7  1394               	bcf	20,7	;volatile
  5047                           
  5048                           ;config.c: 78: SSPSTATbits.CKE = 0;
  5049  13F8  1314               	bcf	20,6	;volatile
  5050                           
  5051                           ;config.c: 79: SSPSTATbits.D_nA = 0;
  5052  13F9  1294               	bcf	20,5	;volatile
  5053                           
  5054                           ;config.c: 80: SSPSTATbits.P = 0;
  5055  13FA  1214               	bcf	20,4	;volatile
  5056                           
  5057                           ;config.c: 81: SSPSTATbits.S = 0;
  5058  13FB  1194               	bcf	20,3	;volatile
  5059                           
  5060                           ;config.c: 82: SSPSTATbits.R_nW = 0;
  5061  13FC  1114               	bcf	20,2	;volatile
  5062                           
  5063                           ;config.c: 83: SSPSTATbits.UA = 0;
  5064  13FD  1094               	bcf	20,1	;volatile
  5065                           
  5066                           ;config.c: 84: SSPSTATbits.BF = 0;
  5067  13FE  1014               	bcf	20,0	;volatile
  5068                           
  5069                           ;config.c: 86: SSPCONbits.WCOL = 0;
  5070  13FF  1283               	bcf	3,5	;RP0=0, select bank0
  5071  1400  1394               	bcf	20,7	;volatile
  5072                           
  5073                           ;config.c: 87: SSPCONbits.SSPOV = 0;
  5074  1401  1314               	bcf	20,6	;volatile
  5075                           
  5076                           ;config.c: 88: SSPCONbits.SSPEN = 0;
  5077  1402  1294               	bcf	20,5	;volatile
  5078                           
  5079                           ;config.c: 89: SSPCONbits.CKP = 0;
  5080  1403  1214               	bcf	20,4	;volatile
  5081                           
  5082                           ;config.c: 90: SSPCONbits.SSPM3 = 0;
  5083  1404  1194               	bcf	20,3	;volatile
  5084                           
  5085                           ;config.c: 91: SSPCONbits.SSPM2 = 0;
  5086  1405  1114               	bcf	20,2	;volatile
  5087                           
  5088                           ;config.c: 92: SSPCONbits.SSPM1 = 0;
  5089  1406  1094               	bcf	20,1	;volatile
  5090                           
  5091                           ;config.c: 93: SSPCONbits.SSPM0 = 0;
  5092  1407  1014               	bcf	20,0	;volatile
  5093                           
  5094                           ;config.c: 95: TXSTAbits.CSRC = 0;
  5095  1408  1683               	bsf	3,5	;RP0=1, select bank1
  5096  1409  1398               	bcf	24,7	;volatile
  5097                           
  5098                           ;config.c: 96: TXSTAbits.TX9 = 0;
  5099  140A  1318               	bcf	24,6	;volatile
  5100                           
  5101                           ;config.c: 97: TXSTAbits.TXEN = 1;
  5102  140B  1698               	bsf	24,5	;volatile
  5103                           
  5104                           ;config.c: 98: TXSTAbits.SYNC = 0;
  5105  140C  1218               	bcf	24,4	;volatile
  5106                           
  5107                           ;config.c: 99: TXSTAbits.BRGH = 1;
  5108  140D  1518               	bsf	24,2	;volatile
  5109                           
  5110                           ;config.c: 100: TXSTAbits.TRMT = 0;
  5111  140E  1098               	bcf	24,1	;volatile
  5112                           
  5113                           ;config.c: 101: TXSTAbits.TX9D = 0;
  5114  140F  1018               	bcf	24,0	;volatile
  5115                           
  5116                           ;config.c: 103: RCSTAbits.SPEN = 1;
  5117  1410  1283               	bcf	3,5	;RP0=0, select bank0
  5118  1411  1798               	bsf	24,7	;volatile
  5119                           
  5120                           ;config.c: 104: RCSTAbits.RX9 = 0;
  5121  1412  1318               	bcf	24,6	;volatile
  5122                           
  5123                           ;config.c: 105: RCSTAbits.SREN = 0;
  5124  1413  1298               	bcf	24,5	;volatile
  5125                           
  5126                           ;config.c: 106: RCSTAbits.CREN = 1;
  5127  1414  1618               	bsf	24,4	;volatile
  5128                           
  5129                           ;config.c: 107: RCSTAbits.FERR = 0;
  5130  1415  1118               	bcf	24,2	;volatile
  5131                           
  5132                           ;config.c: 108: RCSTAbits.OERR = 0;
  5133  1416  1098               	bcf	24,1	;volatile
  5134                           
  5135                           ;config.c: 109: RCSTAbits.RX9D = 0;
  5136  1417  1018               	bcf	24,0	;volatile
  5137                           
  5138                           ;config.c: 111: if(TXSTAbits.BRGH)
  5139  1418  1683               	bsf	3,5	;RP0=1, select bank1
  5140  1419  1D18               	btfss	24,2	;volatile
  5141  141A  2C1D               	goto	l4410
  5142                           
  5143                           ;config.c: 112: SPBRG = (char)((8000000/38400)/16)-1;
  5144  141B  300C               	movlw	12
  5145  141C  2C1E               	goto	L3
  5146  141D                     l4410:
  5147                           
  5148                           ;config.c: 113: else;config.c: 114: SPBRG = (char)((8000000/38400)/64)-1;
  5149  141D  3002               	movlw	2
  5150  141E                     L3:
  5151  141E  0099               	movwf	25	;volatile
  5152                           
  5153                           ;config.c: 116: ADCON0bits.ADCS1 = 0;
  5154  141F  1283               	bcf	3,5	;RP0=0, select bank0
  5155  1420  139F               	bcf	31,7	;volatile
  5156                           
  5157                           ;config.c: 117: ADCON0bits.ADCS0 = 1;
  5158  1421  171F               	bsf	31,6	;volatile
  5159                           
  5160                           ;config.c: 118: ADCON0bits.CHS2 = 0;
  5161  1422  129F               	bcf	31,5	;volatile
  5162                           
  5163                           ;config.c: 119: ADCON0bits.CHS1 = 1;
  5164  1423  161F               	bsf	31,4	;volatile
  5165                           
  5166                           ;config.c: 120: ADCON0bits.CHS0 = 1;
  5167  1424  159F               	bsf	31,3	;volatile
  5168                           
  5169                           ;config.c: 121: ADCON0bits.GO_nDONE = 0;
  5170  1425  111F               	bcf	31,2	;volatile
  5171                           
  5172                           ;config.c: 122: ADCON0bits.ADON = 0;
  5173  1426  101F               	bcf	31,0	;volatile
  5174                           
  5175                           ;config.c: 124: ADCON1bits.PCFG2 = 1;
  5176  1427  1683               	bsf	3,5	;RP0=1, select bank1
  5177  1428  151F               	bsf	31,2	;volatile
  5178                           
  5179                           ;config.c: 125: ADCON1bits.PCFG1 = 0;
  5180  1429  109F               	bcf	31,1	;volatile
  5181                           
  5182                           ;config.c: 126: ADCON1bits.PCFG0 = 0;
  5183  142A  101F               	bcf	31,0	;volatile
  5184                           
  5185                           ;config.c: 128: TMR0_Value = 127;
  5186  142B  307F               	movlw	127
  5187  142C  1283               	bcf	3,5	;RP0=0, select bank0
  5188  142D  00A0               	movwf	??_init
  5189  142E  0820               	movf	??_init,w
  5190  142F  1683               	bsf	3,5	;RP0=1, select bank1
  5191  1430  00C2               	movwf	_TMR0_Value^(0+128)
  5192                           
  5193                           ;config.c: 129: cTMR0 = 0;
  5194  1431  01C1               	clrf	_cTMR0^(0+128)
  5195                           
  5196                           ;config.c: 131: _delay((unsigned long)((10)*(8000000/4000.0)));
  5197  1432  301A               	movlw	26
  5198  1433  1283               	bcf	3,5	;RP0=0, select bank0
  5199  1434  1303               	bcf	3,6	;RP1=0, select bank0
  5200  1435  00A1               	movwf	??_init+1
  5201  1436  30F7               	movlw	247
  5202  1437  00A0               	movwf	??_init
  5203  1438                     u6447:
  5204  1438  0BA0               	decfsz	??_init,f
  5205  1439  2C38               	goto	u6447
  5206  143A  0BA1               	decfsz	??_init+1,f
  5207  143B  2C38               	goto	u6447
  5208  143C  2C3D               	nop2
  5209  143D  0008               	return
  5210  143E                     __end_of_init:
  5211                           
  5212                           	psect	text15
  5213  041B                     __ptext15:	
  5214 ;; *************** function _fMenuStrip *****************
  5215 ;; Defined at:
  5216 ;;		line 3 in file "menu.c"
  5217 ;; Parameters:    Size  Location     Type
  5218 ;;		None
  5219 ;; Auto vars:     Size  Location     Type
  5220 ;;		None
  5221 ;; Return value:  Size  Location     Type
  5222 ;;                  1    wreg      void 
  5223 ;; Registers used:
  5224 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  5225 ;; Tracked objects:
  5226 ;;		On entry : 300/100
  5227 ;;		On exit  : 300/0
  5228 ;;		Unchanged: 0/0
  5229 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5230 ;;      Params:         0       0       0       0       0
  5231 ;;      Locals:         0       0       0       0       0
  5232 ;;      Temps:          0       8       0       0       0
  5233 ;;      Totals:         0       8       0       0       0
  5234 ;;Total ram usage:        8 bytes
  5235 ;; Hardware stack levels used: 1
  5236 ;; Hardware stack levels required when called: 7
  5237 ;; This function calls:
  5238 ;;		_LCD_SetPos
  5239 ;;		_LCD_StringOnOff
  5240 ;;		_LCD_clear
  5241 ;;		_LCD_string
  5242 ;;		_SPI_Write
  5243 ;;		___awdiv
  5244 ;;		___awmod
  5245 ;;		___bmul
  5246 ;;		___wmul
  5247 ;;		_fEraseString
  5248 ;;		_sprintf
  5249 ;;		_strcat
  5250 ;; This function is called by:
  5251 ;;		_main
  5252 ;; This function uses a non-reentrant model
  5253 ;;
  5254                           
  5255                           
  5256                           ;psect for function _fMenuStrip
  5257  041B                     _fMenuStrip:
  5258                           
  5259                           ;menu.c: 4: if(flMenuStrip == 0x01 && flSwitchButton == 0){
  5260                           
  5261                           ;incstack = 0
  5262                           ; Regs used in _fMenuStrip: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  5263  041B  033E               	decf	_flMenuStrip^(0+128),w
  5264  041C  1903               	btfsc	3,2
  5265  041D  187A               	btfsc	_flSwitchButton/(0+8),_flSwitchButton& (0+7)
  5266  041E  2CDC               	goto	l4532
  5267                           
  5268                           ;menu.c: 5: if(_MenuNav == 1) _MenuNav = 2;
  5269  041F  037B               	decf	__MenuNav,w
  5270  0420  047C               	iorwf	__MenuNav+1,w
  5271  0421  1D03               	btfss	3,2
  5272  0422  2C25               	goto	l4506
  5273  0423  3002               	movlw	2
  5274  0424  2CD3               	goto	L4
  5275  0425                     l4506:
  5276                           
  5277                           ;menu.c: 6: else if(_MenuNav >= 20 && _MenuNav < _MenuArr[0] * 10 + 9) _MenuNav /= 10;
  5278  0425  087C               	movf	__MenuNav+1,w
  5279  0426  3A80               	xorlw	128
  5280  0427  00FF               	movwf	127
  5281  0428  3080               	movlw	128
  5282  0429  027F               	subwf	127,w
  5283  042A  1D03               	skipz
  5284  042B  2C2E               	goto	u5105
  5285  042C  3014               	movlw	20
  5286  042D  027B               	subwf	__MenuNav,w
  5287  042E                     u5105:
  5288  042E  1C03               	skipc
  5289  042F  2C6C               	goto	l4512
  5290  0430  1683               	bsf	3,5	;RP0=1, select bank3
  5291  0431  1703               	bsf	3,6	;RP1=1, select bank3
  5292  0432  0828               	movf	__MenuArr^(0+384),w
  5293  0433  1283               	bcf	3,5	;RP0=0, select bank0
  5294  0434  1303               	bcf	3,6	;RP1=0, select bank0
  5295  0435  00D0               	movwf	??_fMenuStrip
  5296  0436  01D1               	clrf	??_fMenuStrip+1
  5297  0437  0850               	movf	??_fMenuStrip,w
  5298  0438  00A0               	movwf	___wmul@multiplier
  5299  0439  0851               	movf	??_fMenuStrip+1,w
  5300  043A  00A1               	movwf	___wmul@multiplier+1
  5301  043B  300A               	movlw	10
  5302  043C  00A2               	movwf	___wmul@multiplicand
  5303  043D  3000               	movlw	0
  5304  043E  00A3               	movwf	___wmul@multiplicand+1
  5305  043F  160A  158A  2500  120A  118A  	fcall	___wmul
  5306  0444  0820               	movf	?___wmul,w
  5307  0445  3E09               	addlw	9
  5308  0446  00D2               	movwf	??_fMenuStrip+2
  5309  0447  0821               	movf	?___wmul+1,w
  5310  0448  1803               	skipnc
  5311  0449  3E01               	addlw	1
  5312  044A  3E00               	addlw	0
  5313  044B  00D3               	movwf	??_fMenuStrip+3
  5314  044C  087C               	movf	__MenuNav+1,w
  5315  044D  3A80               	xorlw	128
  5316  044E  00D4               	movwf	??_fMenuStrip+4
  5317  044F  0853               	movf	??_fMenuStrip+3,w
  5318  0450  3A80               	xorlw	128
  5319  0451  0254               	subwf	??_fMenuStrip+4,w
  5320  0452  1D03               	skipz
  5321  0453  2C56               	goto	u5115
  5322  0454  0852               	movf	??_fMenuStrip+2,w
  5323  0455  027B               	subwf	__MenuNav,w
  5324  0456                     u5115:
  5325  0456  1803               	skipnc
  5326  0457  2C6C               	goto	l4512
  5327  0458                     l4510:
  5328  0458  300A               	movlw	10
  5329  0459  1283               	bcf	3,5	;RP0=0, select bank0
  5330  045A  1303               	bcf	3,6	;RP1=0, select bank0
  5331  045B  00A0               	movwf	___awdiv@divisor
  5332  045C  3000               	movlw	0
  5333  045D  00A1               	movwf	___awdiv@divisor+1
  5334  045E  087C               	movf	__MenuNav+1,w
  5335  045F  00A3               	movwf	___awdiv@dividend+1
  5336  0460  087B               	movf	__MenuNav,w
  5337  0461  00A2               	movwf	___awdiv@dividend
  5338  0462  160A  118A  221A  120A  118A  	fcall	___awdiv
  5339  0467  0821               	movf	?___awdiv+1,w
  5340  0468  00FC               	movwf	__MenuNav+1
  5341  0469  0820               	movf	?___awdiv,w
  5342  046A  00FB               	movwf	__MenuNav
  5343  046B  2CD6               	goto	l4526
  5344  046C                     l4512:
  5345                           
  5346                           ;menu.c: 7: else if(_MenuNav >= 100 && _MenuNav < _MenuArr[0] * 100 + 99) _MenuNav /= 10
      +                          ;
  5347  046C  087C               	movf	__MenuNav+1,w
  5348  046D  3A80               	xorlw	128
  5349  046E  00FF               	movwf	127
  5350  046F  3080               	movlw	128
  5351  0470  027F               	subwf	127,w
  5352  0471  1D03               	skipz
  5353  0472  2C75               	goto	u5125
  5354  0473  3064               	movlw	100
  5355  0474  027B               	subwf	__MenuNav,w
  5356  0475                     u5125:
  5357  0475  1C03               	skipc
  5358  0476  2C9F               	goto	l4518
  5359  0477  1683               	bsf	3,5	;RP0=1, select bank3
  5360  0478  1703               	bsf	3,6	;RP1=1, select bank3
  5361  0479  0828               	movf	__MenuArr^(0+384),w
  5362  047A  1283               	bcf	3,5	;RP0=0, select bank0
  5363  047B  1303               	bcf	3,6	;RP1=0, select bank0
  5364  047C  00D0               	movwf	??_fMenuStrip
  5365  047D  01D1               	clrf	??_fMenuStrip+1
  5366  047E  0850               	movf	??_fMenuStrip,w
  5367  047F  00A0               	movwf	___wmul@multiplier
  5368  0480  0851               	movf	??_fMenuStrip+1,w
  5369  0481  00A1               	movwf	___wmul@multiplier+1
  5370  0482  3064               	movlw	100
  5371  0483  00A2               	movwf	___wmul@multiplicand
  5372  0484  3000               	movlw	0
  5373  0485  00A3               	movwf	___wmul@multiplicand+1
  5374  0486  160A  158A  2500  120A  118A  	fcall	___wmul
  5375  048B  0820               	movf	?___wmul,w
  5376  048C  3E63               	addlw	99
  5377  048D  00D2               	movwf	??_fMenuStrip+2
  5378  048E  0821               	movf	?___wmul+1,w
  5379  048F  1803               	skipnc
  5380  0490  3E01               	addlw	1
  5381  0491  3E00               	addlw	0
  5382  0492  00D3               	movwf	??_fMenuStrip+3
  5383  0493  087C               	movf	__MenuNav+1,w
  5384  0494  3A80               	xorlw	128
  5385  0495  00D4               	movwf	??_fMenuStrip+4
  5386  0496  0853               	movf	??_fMenuStrip+3,w
  5387  0497  3A80               	xorlw	128
  5388  0498  0254               	subwf	??_fMenuStrip+4,w
  5389  0499  1D03               	skipz
  5390  049A  2C9D               	goto	u5135
  5391  049B  0852               	movf	??_fMenuStrip+2,w
  5392  049C  027B               	subwf	__MenuNav,w
  5393  049D                     u5135:
  5394  049D  1C03               	btfss	3,0
  5395  049E  2C58               	goto	l4510
  5396  049F                     l4518:
  5397                           
  5398                           ;menu.c: 8: else if(_MenuNav >= 1000 && _MenuNav < _MenuArr[0] * 1000 + 999) _MenuNav /=
      +                           10;
  5399  049F  087C               	movf	__MenuNav+1,w
  5400  04A0  3A80               	xorlw	128
  5401  04A1  00FF               	movwf	127
  5402  04A2  3083               	movlw	131
  5403  04A3  027F               	subwf	127,w
  5404  04A4  1D03               	skipz
  5405  04A5  2CA8               	goto	u5145
  5406  04A6  30E8               	movlw	232
  5407  04A7  027B               	subwf	__MenuNav,w
  5408  04A8                     u5145:
  5409  04A8  1C03               	skipc
  5410  04A9  2CD2               	goto	l4524
  5411  04AA  1683               	bsf	3,5	;RP0=1, select bank3
  5412  04AB  1703               	bsf	3,6	;RP1=1, select bank3
  5413  04AC  0828               	movf	__MenuArr^(0+384),w
  5414  04AD  1283               	bcf	3,5	;RP0=0, select bank0
  5415  04AE  1303               	bcf	3,6	;RP1=0, select bank0
  5416  04AF  00D0               	movwf	??_fMenuStrip
  5417  04B0  01D1               	clrf	??_fMenuStrip+1
  5418  04B1  0850               	movf	??_fMenuStrip,w
  5419  04B2  00A0               	movwf	___wmul@multiplier
  5420  04B3  0851               	movf	??_fMenuStrip+1,w
  5421  04B4  00A1               	movwf	___wmul@multiplier+1
  5422  04B5  30E8               	movlw	232
  5423  04B6  00A2               	movwf	___wmul@multiplicand
  5424  04B7  3003               	movlw	3
  5425  04B8  00A3               	movwf	___wmul@multiplicand+1
  5426  04B9  160A  158A  2500  120A  118A  	fcall	___wmul
  5427  04BE  0820               	movf	?___wmul,w
  5428  04BF  3EE7               	addlw	231
  5429  04C0  00D2               	movwf	??_fMenuStrip+2
  5430  04C1  0821               	movf	?___wmul+1,w
  5431  04C2  1803               	skipnc
  5432  04C3  3E01               	addlw	1
  5433  04C4  3E03               	addlw	3
  5434  04C5  00D3               	movwf	??_fMenuStrip+3
  5435  04C6  087C               	movf	__MenuNav+1,w
  5436  04C7  3A80               	xorlw	128
  5437  04C8  00D4               	movwf	??_fMenuStrip+4
  5438  04C9  0853               	movf	??_fMenuStrip+3,w
  5439  04CA  3A80               	xorlw	128
  5440  04CB  0254               	subwf	??_fMenuStrip+4,w
  5441  04CC  1D03               	skipz
  5442  04CD  2CD0               	goto	u5155
  5443  04CE  0852               	movf	??_fMenuStrip+2,w
  5444  04CF  027B               	subwf	__MenuNav,w
  5445  04D0                     u5155:
  5446  04D0  1C03               	btfss	3,0
  5447  04D1  2C58               	goto	l4510
  5448  04D2                     l4524:
  5449                           
  5450                           ;menu.c: 9: else _MenuNav = 1;
  5451  04D2  3001               	movlw	1
  5452  04D3                     L4:
  5453  04D3  00FB               	movwf	__MenuNav
  5454  04D4  3000               	movlw	0
  5455  04D5  00FC               	movwf	__MenuNav+1
  5456  04D6                     l4526:
  5457                           
  5458                           ;menu.c: 10: flSwitchButton = 1;
  5459  04D6  147A               	bsf	_flSwitchButton/(0+8),_flSwitchButton& (0+7)
  5460                           
  5461                           ;menu.c: 11: flClearLCD = 0;
  5462  04D7  10FA               	bcf	_flClearLCD/(0+8),_flClearLCD& (0+7)
  5463                           
  5464                           ;menu.c: 12: flUpdate = 0;
  5465  04D8  117A               	bcf	_flUpdate/(0+8),_flUpdate& (0+7)
  5466                           
  5467                           ;menu.c: 13: }
  5468  04D9  120A  158A  29EE   	goto	l4654
  5469  04DC                     l4532:
  5470                           
  5471                           ;menu.c: 14: else if(flMenuStrip == 0x02 && flSwitchButton == 0){
  5472  04DC  3002               	movlw	2
  5473  04DD  063E               	xorwf	_flMenuStrip^(0+128),w
  5474  04DE  1903               	btfsc	3,2
  5475  04DF  187A               	btfsc	_flSwitchButton/(0+8),_flSwitchButton& (0+7)
  5476  04E0  2D2A               	goto	L30
  5477                           
  5478                           ;menu.c: 15: if(_MenuNav <= 1) _MenuNav = _MenuArr[0];
  5479  04E1  087C               	movf	__MenuNav+1,w
  5480  04E2  3A80               	xorlw	128
  5481  04E3  00FF               	movwf	127
  5482  04E4  3080               	movlw	128
  5483  04E5  027F               	subwf	127,w
  5484  04E6  1D03               	skipz
  5485  04E7  2CEA               	goto	u5185
  5486  04E8  3002               	movlw	2
  5487  04E9  027B               	subwf	__MenuNav,w
  5488  04EA                     u5185:
  5489  04EA  1803               	skipnc
  5490  04EB  2CF4               	goto	l4540
  5491  04EC  1683               	bsf	3,5	;RP0=1, select bank3
  5492  04ED  1703               	bsf	3,6	;RP1=1, select bank3
  5493  04EE  0828               	movf	__MenuArr^(0+384),w
  5494  04EF  1283               	bcf	3,5	;RP0=0, select bank0
  5495  04F0  1303               	bcf	3,6	;RP1=0, select bank0
  5496  04F1  120A  158A  292A   	goto	L23
  5497  04F4                     l4540:
  5498                           
  5499                           ;menu.c: 16: else if(_MenuNav >= 10 && _MenuNav < 100){
  5500  04F4  087C               	movf	__MenuNav+1,w
  5501  04F5  3A80               	xorlw	128
  5502  04F6  00FF               	movwf	127
  5503  04F7  3080               	movlw	128
  5504  04F8  027F               	subwf	127,w
  5505  04F9  1D03               	skipz
  5506  04FA  2CFD               	goto	u5195
  5507  04FB  300A               	movlw	10
  5508  04FC  027B               	subwf	__MenuNav,w
  5509  04FD                     u5195:
  5510  04FD  1C03               	skipc
  5511  04FE  2D2D               	goto	L32
  5512  04FF  087C               	movf	__MenuNav+1,w
  5513  0500  3A80               	xorlw	128
  5514  0501  00FF               	movwf	127
  5515  0502  3080               	movlw	128
  5516  0503  027F               	subwf	127,w
  5517  0504  1D03               	skipz
  5518  0505  2D08               	goto	u5205
  5519  0506  3064               	movlw	100
  5520  0507  027B               	subwf	__MenuNav,w
  5521  0508                     u5205:
  5522  0508  1803               	skipnc
  5523  0509  2D2D               	goto	L32
  5524                           
  5525                           ;menu.c: 17: if(_MenuNav <= _tempTwoDigit)
  5526  050A  087C               	movf	__MenuNav+1,w
  5527  050B  3A80               	xorlw	128
  5528  050C  3C80               	sublw	128
  5529  050D  1D03               	skipz
  5530  050E  2D13               	goto	u5215
  5531  050F  087B               	movf	__MenuNav,w
  5532  0510  1683               	bsf	3,5	;RP0=1, select bank1
  5533  0511  1303               	bcf	3,6	;RP1=0, select bank1
  5534  0512  023A               	subwf	__tempTwoDigit^(0+128),w
  5535  0513                     u5215:
  5536  0513  120A  158A  1C03   	skipc
  5537  0516  2838               	goto	l4548
  5538                           
  5539                           ;menu.c: 18: _MenuNav = _tempTwoDigit + _MenuArr[_cellTwoDigit] - 1;
  5540  0517  1683               	bsf	3,5	;RP0=1, select bank1
  5541  0518  1303               	bcf	3,6	;RP1=0, select bank1
  5542  0519  083B               	movf	__cellTwoDigit^(0+128),w
  5543  051A  3EA8               	addlw	(low (__MenuArr| (0+256)))& (0+255)
  5544  051B  0084               	movwf	4
  5545  051C  083A               	movf	__tempTwoDigit^(0+128),w
  5546  051D  1783               	bsf	3,7	;select IRP bank3
  5547  051E  0700               	addwf	0,w
  5548  051F  1283               	bcf	3,5	;RP0=0, select bank0
  5549  0520  00D0               	movwf	??_fMenuStrip
  5550  0521  01D1               	clrf	??_fMenuStrip+1
  5551  0522  0DD1               	rlf	??_fMenuStrip+1,f
  5552  0523  0850               	movf	??_fMenuStrip,w
  5553  0524  3EFF               	addlw	255
  5554  0525  00FB               	movwf	__MenuNav
  5555  0526  0851               	movf	??_fMenuStrip+1,w
  5556  0527  120A  158A  28BE   	goto	L24
  5557  052A                     L30:
  5558  052A                     L29:
  5559  052A  120A  158A  28CE   	ljmp	l4588
  5560  052D                     L32:
  5561  052D                     L31:
  5562  052D  120A  158A  283E   	ljmp	l4550
  5563                           
  5564                           	psect	text16
  5565  1D6E                     __ptext16:	
  5566 ;; *************** function _strcat *****************
  5567 ;; Defined at:
  5568 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\strcat.c"
  5569 ;; Parameters:    Size  Location     Type
  5570 ;;  to              1    wreg     PTR unsigned char 
  5571 ;;		 -> str2(16), 
  5572 ;;  from            2    0[BANK0 ] PTR const unsigned char 
  5573 ;;		 -> ROM(8192), 
  5574 ;; Auto vars:     Size  Location     Type
  5575 ;;  to              1    4[BANK0 ] PTR unsigned char 
  5576 ;;		 -> str2(16), 
  5577 ;;  cp              1    3[BANK0 ] PTR unsigned char 
  5578 ;;		 -> str2(16), 
  5579 ;; Return value:  Size  Location     Type
  5580 ;;                  1    wreg      PTR unsigned char 
  5581 ;; Registers used:
  5582 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath
  5583 ;; Tracked objects:
  5584 ;;		On entry : B00/800
  5585 ;;		On exit  : B00/800
  5586 ;;		Unchanged: 0/0
  5587 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5588 ;;      Params:         0       2       0       0       0
  5589 ;;      Locals:         0       2       0       0       0
  5590 ;;      Temps:          0       1       0       0       0
  5591 ;;      Totals:         0       5       0       0       0
  5592 ;;Total ram usage:        5 bytes
  5593 ;; Hardware stack levels used: 1
  5594 ;; Hardware stack levels required when called: 2
  5595 ;; This function calls:
  5596 ;;		Nothing
  5597 ;; This function is called by:
  5598 ;;		_fMenuStrip
  5599 ;; This function uses a non-reentrant model
  5600 ;;
  5601                           
  5602                           
  5603                           ;psect for function _strcat
  5604  1D6E                     _strcat:
  5605                           
  5606                           ;incstack = 0
  5607                           ; Regs used in _strcat: [wreg-fsr0h+status,2+status,0+btemp+1+pclath]
  5608                           ;strcat@to stored from wreg
  5609  1D6E  00A4               	movwf	strcat@to
  5610  1D6F  0824               	movf	strcat@to,w
  5611  1D70  00A2               	movwf	??_strcat
  5612  1D71  0822               	movf	??_strcat,w
  5613  1D72  00A3               	movwf	strcat@cp
  5614  1D73                     l4016:
  5615  1D73  0823               	movf	strcat@cp,w
  5616  1D74  0084               	movwf	4
  5617  1D75  0800               	movf	0,w
  5618  1D76  1903               	btfsc	3,2
  5619  1D77  2D87               	goto	l4022
  5620  1D78  3001               	movlw	1
  5621  1D79  00A2               	movwf	??_strcat
  5622  1D7A  0822               	movf	??_strcat,w
  5623  1D7B  07A3               	addwf	strcat@cp,f
  5624  1D7C  2D73               	goto	l4016
  5625  1D7D                     l4018:
  5626  1D7D  3001               	movlw	1
  5627  1D7E  00A2               	movwf	??_strcat
  5628  1D7F  0822               	movf	??_strcat,w
  5629  1D80  07A3               	addwf	strcat@cp,f
  5630  1D81  3001               	movlw	1
  5631  1D82  07A0               	addwf	strcat@from,f
  5632  1D83  1803               	skipnc
  5633  1D84  0AA1               	incf	strcat@from+1,f
  5634  1D85  3000               	movlw	0
  5635  1D86  07A1               	addwf	strcat@from+1,f
  5636  1D87                     l4022:
  5637  1D87  0821               	movf	strcat@from+1,w
  5638  1D88  00FF               	movwf	127
  5639  1D89  0820               	movf	strcat@from,w
  5640  1D8A  0084               	movwf	4
  5641  1D8B  160A  118A  2000  160A  158A  	fcall	stringtab
  5642  1D90  00A2               	movwf	??_strcat
  5643  1D91  0823               	movf	strcat@cp,w
  5644  1D92  0084               	movwf	4
  5645  1D93  0822               	movf	??_strcat,w
  5646  1D94  1783               	bsf	3,7	;select IRP bank2
  5647  1D95  0080               	movwf	0
  5648  1D96  0800               	movf	0,w
  5649  1D97  1903               	btfsc	3,2
  5650  1D98  0008               	return
  5651  1D99  2D7D               	goto	l4018
  5652  1D9A                     __end_of_strcat:
  5653                           
  5654                           	psect	text17
  5655  0042                     __ptext17:	
  5656 ;; *************** function _sprintf *****************
  5657 ;; Defined at:
  5658 ;;		line 505 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\doprnt.c"
  5659 ;; Parameters:    Size  Location     Type
  5660 ;;  sp              1    wreg     PTR unsigned char 
  5661 ;;		 -> str2(16), str(16), 
  5662 ;;  f               2   14[BANK0 ] PTR const unsigned char 
  5663 ;;		 -> STR_71(26), STR_68(5), STR_66(5), STR_63(5), 
  5664 ;;		 -> STR_61(5), STR_58(3), STR_56(5), STR_54(5), 
  5665 ;;		 -> STR_52(13), STR_50(5), STR_48(13), STR_46(5), 
  5666 ;;		 -> STR_43(15), STR_41(5), STR_39(5), STR_36(3), 
  5667 ;;		 -> STR_33(3), STR_31(5), STR_30(9), STR_28(5), 
  5668 ;;		 -> STR_27(9), STR_25(5), STR_22(3), STR_19(3), 
  5669 ;;		 -> STR_17(5), STR_16(9), STR_14(5), STR_11(3), 
  5670 ;;		 -> STR_8(3), STR_6(5), STR_4(5), 
  5671 ;; Auto vars:     Size  Location     Type
  5672 ;;  sp              1   47[BANK0 ] PTR unsigned char 
  5673 ;;		 -> str2(16), str(16), 
  5674 ;;  tmpval          4    0        struct .
  5675 ;;  width           2   44[BANK0 ] int 
  5676 ;;  val             2   42[BANK0 ] unsigned int 
  5677 ;;  len             2   40[BANK0 ] unsigned int 
  5678 ;;  cp              2   36[BANK0 ] PTR const unsigned char 
  5679 ;;		 -> STR_76(7), ?_sprintf(2), STR_75(6), STR_74(4), 
  5680 ;;		 -> STR_73(6), STR_72(5), STR_69(3), STR_67(17), 
  5681 ;;		 -> STR_64(3), STR_62(17), STR_59(3), STR_57(16), 
  5682 ;;		 -> STR_55(7), STR_53(10), STR_51(12), STR_49(9), 
  5683 ;;		 -> STR_47(11), STR_45(5), STR_44(5), STR_42(13), 
  5684 ;;		 -> STR_40(10), STR_37(4), STR_34(3), STR_32(16), 
  5685 ;;		 -> STR_29(16), STR_26(15), STR_23(4), STR_20(3), 
  5686 ;;		 -> STR_18(15), STR_15(14), STR_12(11), STR_9(8), 
  5687 ;;		 -> STR_7(13), STR_5(10), STR_3(5), STR_2(4), 
  5688 ;;  c               1   46[BANK0 ] unsigned char 
  5689 ;;  ap              1   39[BANK0 ] PTR void [1]
  5690 ;;		 -> ?_sprintf(2), 
  5691 ;;  flag            1   38[BANK0 ] unsigned char 
  5692 ;;  prec            1   35[BANK0 ] char 
  5693 ;; Return value:  Size  Location     Type
  5694 ;;                  2   14[BANK0 ] int 
  5695 ;; Registers used:
  5696 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  5697 ;; Tracked objects:
  5698 ;;		On entry : 300/0
  5699 ;;		On exit  : B00/800
  5700 ;;		Unchanged: 0/0
  5701 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5702 ;;      Params:         0      18       0       0       0
  5703 ;;      Locals:         0      13       0       0       0
  5704 ;;      Temps:          0       3       0       0       0
  5705 ;;      Totals:         0      34       0       0       0
  5706 ;;Total ram usage:       34 bytes
  5707 ;; Hardware stack levels used: 1
  5708 ;; Hardware stack levels required when called: 3
  5709 ;; This function calls:
  5710 ;;		___lwdiv
  5711 ;;		___lwmod
  5712 ;;		___wmul
  5713 ;;		_isdigit
  5714 ;; This function is called by:
  5715 ;;		_fMenuStrip
  5716 ;; This function uses a non-reentrant model
  5717 ;;
  5718                           
  5719                           
  5720                           ;psect for function _sprintf
  5721  0042                     _sprintf:
  5722                           
  5723                           ;incstack = 0
  5724                           ; Regs used in _sprintf: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  5725                           ;sprintf@sp stored from wreg
  5726  0042  00CF               	movwf	sprintf@sp
  5727                           
  5728                           ;doprnt.c: 507: va_list ap;;doprnt.c: 512: char c;;doprnt.c: 514: int width;;doprnt.c: 5
      +                          21: signed char prec;;doprnt.c: 525: unsigned char flag;;doprnt.c: 540: union {;doprnt.c
      +                          : 541: unsigned long vd;;doprnt.c: 542: double integ;;doprnt.c: 543: } tmpval;;doprnt.c:
      +                           545: unsigned int val;;doprnt.c: 546: unsigned len;;doprnt.c: 547: const char * cp;;dop
      +                          rnt.c: 550: *ap = __va_start();
  5729  0043  3030               	movlw	(low ((?_sprintf| 0+2)))& (0+255)
  5730  0044  00C0               	movwf	??_sprintf
  5731  0045  0840               	movf	??_sprintf,w
  5732  0046  00C7               	movwf	sprintf@ap
  5733  0047                     l4006:	
  5734                           ;doprnt.c: 553: while((c = *f++)) {
  5735                           
  5736  0047  082F               	movf	sprintf@f+1,w
  5737  0048  00C1               	movwf	??_sprintf+1
  5738  0049  082E               	movf	sprintf@f,w
  5739  004A  00C0               	movwf	??_sprintf
  5740  004B  0AAE               	incf	sprintf@f,f
  5741  004C  1903               	skipnz
  5742  004D  0AAF               	incf	sprintf@f+1,f
  5743  004E  0841               	movf	??_sprintf+1,w
  5744  004F  00FF               	movwf	127
  5745  0050  0840               	movf	??_sprintf,w
  5746  0051  0084               	movwf	4
  5747  0052  160A  118A  2000  120A  118A  	fcall	stringtab
  5748  0057  00C2               	movwf	??_sprintf+2
  5749  0058  0842               	movf	??_sprintf+2,w
  5750  0059  00CE               	movwf	sprintf@c
  5751  005A  084E               	movf	sprintf@c,w
  5752  005B  1903               	btfsc	3,2
  5753  005C  2A40               	goto	l4008
  5754                           
  5755                           ;doprnt.c: 555: if(c != '%')
  5756  005D  3025               	movlw	37
  5757  005E  064E               	xorwf	sprintf@c,w
  5758  005F  1903               	btfsc	3,2
  5759  0060  286D               	goto	l3894
  5760                           
  5761                           ;doprnt.c: 557: {;doprnt.c: 558: ((*sp++ = (c)));
  5762  0061  084E               	movf	sprintf@c,w
  5763  0062  00C0               	movwf	??_sprintf
  5764  0063  084F               	movf	sprintf@sp,w
  5765  0064  0084               	movwf	4
  5766  0065  0840               	movf	??_sprintf,w
  5767  0066  1783               	bsf	3,7	;select IRP bank2
  5768  0067  0080               	movwf	0
  5769  0068  3001               	movlw	1
  5770  0069  00C0               	movwf	??_sprintf
  5771  006A  0840               	movf	??_sprintf,w
  5772  006B  07CF               	addwf	sprintf@sp,f
  5773                           
  5774                           ;doprnt.c: 559: continue;
  5775  006C  2847               	goto	l4006
  5776  006D                     l3894:
  5777                           
  5778                           ;doprnt.c: 560: };doprnt.c: 563: width = 0;
  5779  006D  01CC               	clrf	sprintf@width
  5780  006E  01CD               	clrf	sprintf@width+1
  5781                           
  5782                           ;doprnt.c: 565: flag = 0;
  5783  006F  01C6               	clrf	sprintf@flag
  5784                           
  5785                           ;doprnt.c: 614: if(isdigit((unsigned)*f)) {
  5786  0070  082F               	movf	sprintf@f+1,w
  5787  0071  00FF               	movwf	127
  5788  0072  082E               	movf	sprintf@f,w
  5789  0073  0084               	movwf	4
  5790  0074  160A  118A  2000  120A  118A  	fcall	stringtab
  5791  0079  160A  158A  2445  120A  118A  	fcall	_isdigit
  5792  007E  1C03               	btfss	3,0
  5793  007F  293C               	goto	l3944
  5794                           
  5795                           ;doprnt.c: 615: width = 0;
  5796  0080  01CC               	clrf	sprintf@width
  5797  0081  01CD               	clrf	sprintf@width+1
  5798  0082                     l3900:
  5799                           
  5800                           ;doprnt.c: 617: width *= 10;
  5801  0082  300A               	movlw	10
  5802  0083  00A0               	movwf	___wmul@multiplier
  5803  0084  3000               	movlw	0
  5804  0085  00A1               	movwf	___wmul@multiplier+1
  5805  0086  084D               	movf	sprintf@width+1,w
  5806  0087  00A3               	movwf	___wmul@multiplicand+1
  5807  0088  084C               	movf	sprintf@width,w
  5808  0089  00A2               	movwf	___wmul@multiplicand
  5809  008A  160A  158A  2500  120A  118A  	fcall	___wmul
  5810  008F  0821               	movf	?___wmul+1,w
  5811  0090  00CD               	movwf	sprintf@width+1
  5812  0091  0820               	movf	?___wmul,w
  5813  0092  00CC               	movwf	sprintf@width
  5814                           
  5815                           ;doprnt.c: 618: width += *f++ - '0';
  5816  0093  082F               	movf	sprintf@f+1,w
  5817  0094  00FF               	movwf	127
  5818  0095  082E               	movf	sprintf@f,w
  5819  0096  0084               	movwf	4
  5820  0097  160A  118A  2000  120A  118A  	fcall	stringtab
  5821  009C  3ED0               	addlw	208
  5822  009D  00C0               	movwf	??_sprintf
  5823  009E  30FF               	movlw	255
  5824  009F  1803               	skipnc
  5825  00A0  3000               	movlw	0
  5826  00A1  00C1               	movwf	??_sprintf+1
  5827  00A2  0840               	movf	??_sprintf,w
  5828  00A3  07CC               	addwf	sprintf@width,f
  5829  00A4  1803               	skipnc
  5830  00A5  0ACD               	incf	sprintf@width+1,f
  5831  00A6  0841               	movf	??_sprintf+1,w
  5832  00A7  07CD               	addwf	sprintf@width+1,f
  5833  00A8  3001               	movlw	1
  5834  00A9  07AE               	addwf	sprintf@f,f
  5835  00AA  1803               	skipnc
  5836  00AB  0AAF               	incf	sprintf@f+1,f
  5837  00AC  3000               	movlw	0
  5838  00AD  07AF               	addwf	sprintf@f+1,f
  5839                           
  5840                           ;doprnt.c: 619: } while(isdigit((unsigned)*f));
  5841  00AE  082F               	movf	sprintf@f+1,w
  5842  00AF  00FF               	movwf	127
  5843  00B0  082E               	movf	sprintf@f,w
  5844  00B1  0084               	movwf	4
  5845  00B2  160A  118A  2000  120A  118A  	fcall	stringtab
  5846  00B7  160A  158A  2445  120A  118A  	fcall	_isdigit
  5847  00BC  1C03               	btfss	3,0
  5848  00BD  293C               	goto	l3944
  5849  00BE  2882               	goto	l3900
  5850  00BF                     l3908:
  5851                           
  5852                           ;doprnt.c: 760: cp = (*(const char * *)__va_arg((*(const char * **)ap), (const char *)0)
      +                          );
  5853  00BF  0847               	movf	sprintf@ap,w
  5854  00C0  0084               	movwf	4
  5855  00C1  1383               	bcf	3,7	;select IRP bank0
  5856  00C2  0800               	movf	0,w
  5857  00C3  00C4               	movwf	sprintf@cp
  5858  00C4  0A84               	incf	4,f
  5859  00C5  0800               	movf	0,w
  5860  00C6  0384               	decf	4,f
  5861  00C7  00C5               	movwf	sprintf@cp+1
  5862  00C8  3002               	movlw	2
  5863  00C9  00C0               	movwf	??_sprintf
  5864  00CA  0840               	movf	??_sprintf,w
  5865  00CB  07C7               	addwf	sprintf@ap,f
  5866                           
  5867                           ;doprnt.c: 766: if(!cp)
  5868  00CC  0844               	movf	sprintf@cp,w
  5869  00CD  0445               	iorwf	sprintf@cp+1,w
  5870  00CE  1D03               	btfss	3,2
  5871  00CF  28D4               	goto	l3916
  5872                           
  5873                           ;doprnt.c: 767: cp = "(null)";
  5874  00D0  30B5               	movlw	low (STR_76| (0+32768))
  5875  00D1  00C4               	movwf	sprintf@cp
  5876  00D2  3091               	movlw	high (STR_76| (0+32768))
  5877  00D3  00C5               	movwf	sprintf@cp+1
  5878  00D4                     l3916:
  5879                           
  5880                           ;doprnt.c: 771: len = 0;
  5881  00D4  01C8               	clrf	sprintf@len
  5882  00D5  01C9               	clrf	sprintf@len+1
  5883  00D6                     l3920:	
  5884                           ;doprnt.c: 772: while(cp[len])
  5885                           
  5886  00D6  0848               	movf	sprintf@len,w
  5887  00D7  0744               	addwf	sprintf@cp,w
  5888  00D8  0084               	movwf	4
  5889  00D9  0845               	movf	sprintf@cp+1,w
  5890  00DA  1803               	skipnc
  5891  00DB  0A45               	incf	sprintf@cp+1,w
  5892  00DC  00FF               	movwf	127
  5893  00DD  160A  118A  2000  120A  118A  	fcall	stringtab
  5894  00E2  3A00               	xorlw	0
  5895  00E3  1903               	btfsc	3,2
  5896  00E4  28EC               	goto	l3922
  5897                           
  5898                           ;doprnt.c: 773: len++;
  5899  00E5  3001               	movlw	1
  5900  00E6  07C8               	addwf	sprintf@len,f
  5901  00E7  1803               	skipnc
  5902  00E8  0AC9               	incf	sprintf@len+1,f
  5903  00E9  3000               	movlw	0
  5904  00EA  07C9               	addwf	sprintf@len+1,f
  5905  00EB  28D6               	goto	l3920
  5906  00EC                     l3922:
  5907                           
  5908                           ;doprnt.c: 783: if(((unsigned)width) > len)
  5909  00EC  084D               	movf	sprintf@width+1,w
  5910  00ED  0249               	subwf	sprintf@len+1,w
  5911  00EE  1D03               	skipz
  5912  00EF  28F2               	goto	u4345
  5913  00F0  084C               	movf	sprintf@width,w
  5914  00F1  0248               	subwf	sprintf@len,w
  5915  00F2                     u4345:
  5916  00F2  1803               	skipnc
  5917  00F3  28FB               	goto	l3926
  5918                           
  5919                           ;doprnt.c: 784: width -= len;
  5920  00F4  0848               	movf	sprintf@len,w
  5921  00F5  02CC               	subwf	sprintf@width,f
  5922  00F6  0849               	movf	sprintf@len+1,w
  5923  00F7  1C03               	skipc
  5924  00F8  03CD               	decf	sprintf@width+1,f
  5925  00F9  02CD               	subwf	sprintf@width+1,f
  5926  00FA  28FD               	goto	l3932
  5927  00FB                     l3926:
  5928                           
  5929                           ;doprnt.c: 785: else;doprnt.c: 786: width = 0;
  5930  00FB  01CC               	clrf	sprintf@width
  5931  00FC  01CD               	clrf	sprintf@width+1
  5932  00FD                     l3932:
  5933  00FD  30FF               	movlw	255
  5934  00FE  07CC               	addwf	sprintf@width,f
  5935  00FF  1803               	skipnc
  5936  0100  0ACD               	incf	sprintf@width+1,f
  5937  0101  30FF               	movlw	255
  5938  0102  07CD               	addwf	sprintf@width+1,f
  5939  0103  0A4C               	incf	sprintf@width,w
  5940  0104  1903               	btfsc	3,2
  5941  0105  0A4D               	incf	sprintf@width+1,w
  5942  0106  1903               	btfsc	3,2
  5943  0107  292D               	goto	l3940
  5944                           
  5945                           ;doprnt.c: 791: ((*sp++ = (' ')));
  5946  0108  3020               	movlw	32
  5947  0109  00C0               	movwf	??_sprintf
  5948  010A  084F               	movf	sprintf@sp,w
  5949  010B  0084               	movwf	4
  5950  010C  0840               	movf	??_sprintf,w
  5951  010D  1783               	bsf	3,7	;select IRP bank2
  5952  010E  0080               	movwf	0
  5953  010F  3001               	movlw	1
  5954  0110  00C0               	movwf	??_sprintf
  5955  0111  0840               	movf	??_sprintf,w
  5956  0112  07CF               	addwf	sprintf@sp,f
  5957  0113  28FD               	goto	l3932
  5958  0114                     l3934:
  5959                           
  5960                           ;doprnt.c: 794: ((*sp++ = (*cp++)));
  5961  0114  0845               	movf	sprintf@cp+1,w
  5962  0115  00FF               	movwf	127
  5963  0116  0844               	movf	sprintf@cp,w
  5964  0117  0084               	movwf	4
  5965  0118  160A  118A  2000  120A  118A  	fcall	stringtab
  5966  011D  00C0               	movwf	??_sprintf
  5967  011E  084F               	movf	sprintf@sp,w
  5968  011F  0084               	movwf	4
  5969  0120  0840               	movf	??_sprintf,w
  5970  0121  1783               	bsf	3,7	;select IRP bank2
  5971  0122  0080               	movwf	0
  5972  0123  3001               	movlw	1
  5973  0124  07C4               	addwf	sprintf@cp,f
  5974  0125  1803               	skipnc
  5975  0126  0AC5               	incf	sprintf@cp+1,f
  5976  0127  3000               	movlw	0
  5977  0128  07C5               	addwf	sprintf@cp+1,f
  5978  0129  3001               	movlw	1
  5979  012A  00C0               	movwf	??_sprintf
  5980  012B  0840               	movf	??_sprintf,w
  5981  012C  07CF               	addwf	sprintf@sp,f
  5982  012D                     l3940:
  5983  012D  3001               	movlw	1
  5984  012E  02C8               	subwf	sprintf@len,f
  5985  012F  3000               	movlw	0
  5986  0130  1C03               	skipc
  5987  0131  03C9               	decf	sprintf@len+1,f
  5988  0132  02C9               	subwf	sprintf@len+1,f
  5989  0133  0A48               	incf	sprintf@len,w
  5990  0134  1D03               	skipz
  5991  0135  2914               	goto	l3934
  5992  0136  0A49               	incf	sprintf@len+1,w
  5993  0137  1903               	btfsc	3,2
  5994  0138  2847               	goto	l4006
  5995  0139  2914               	goto	l3934
  5996  013A                     l793:	
  5997                           ;doprnt.c: 843: case 'u':
  5998                           
  5999                           
  6000                           ;doprnt.c: 844: flag |= 0x40;
  6001  013A  1746               	bsf	sprintf@flag,6
  6002                           
  6003                           ;doprnt.c: 845: break;
  6004  013B  295D               	goto	l778
  6005  013C                     l3944:
  6006  013C  082F               	movf	sprintf@f+1,w
  6007  013D  00C1               	movwf	??_sprintf+1
  6008  013E  082E               	movf	sprintf@f,w
  6009  013F  00C0               	movwf	??_sprintf
  6010  0140  0AAE               	incf	sprintf@f,f
  6011  0141  1903               	skipnz
  6012  0142  0AAF               	incf	sprintf@f+1,f
  6013  0143  0841               	movf	??_sprintf+1,w
  6014  0144  00FF               	movwf	127
  6015  0145  0840               	movf	??_sprintf,w
  6016  0146  0084               	movwf	4
  6017  0147  160A  118A  2000  120A  118A  	fcall	stringtab
  6018  014C  00CE               	movwf	sprintf@c
  6019                           
  6020                           ; Switch size 1, requested type "simple"
  6021                           ; Number of cases is 5, Range of values is 0 to 117
  6022                           ; switch strategies available:
  6023                           ; Name         Instructions Cycles
  6024                           ; simple_byte           16     9 (average)
  6025                           ; jumptable            260     6 (fixed)
  6026                           ;	Chosen strategy is simple_byte
  6027  014D  3A00               	xorlw	0	; case 0
  6028  014E  1903               	skipnz
  6029  014F  2A40               	goto	l4008
  6030  0150  3A64               	xorlw	100	; case 100
  6031  0151  1903               	skipnz
  6032  0152  295D               	goto	l778
  6033  0153  3A0D               	xorlw	13	; case 105
  6034  0154  1903               	skipnz
  6035  0155  295D               	goto	l778
  6036  0156  3A1A               	xorlw	26	; case 115
  6037  0157  1903               	skipnz
  6038  0158  28BF               	goto	l3908
  6039  0159  3A06               	xorlw	6	; case 117
  6040  015A  1903               	skipnz
  6041  015B  293A               	goto	l793
  6042  015C  2847               	goto	l4006
  6043  015D                     l778:
  6044                           
  6045                           ;doprnt.c: 1277: if((flag & 0x40) == 0x00)
  6046  015D  1B46               	btfsc	sprintf@flag,6
  6047  015E  2977               	goto	l3956
  6048                           
  6049                           ;doprnt.c: 1279: {;doprnt.c: 1285: val = (unsigned int)(*(int *)__va_arg((*(int **)ap), 
      +                          (int)0));
  6050  015F  0847               	movf	sprintf@ap,w
  6051  0160  0084               	movwf	4
  6052  0161  1383               	bcf	3,7	;select IRP bank0
  6053  0162  0800               	movf	0,w
  6054  0163  00CA               	movwf	sprintf@val
  6055  0164  0A84               	incf	4,f
  6056  0165  0800               	movf	0,w
  6057  0166  00CB               	movwf	sprintf@val+1
  6058  0167  3002               	movlw	2
  6059  0168  00C0               	movwf	??_sprintf
  6060  0169  0840               	movf	??_sprintf,w
  6061  016A  07C7               	addwf	sprintf@ap,f
  6062                           
  6063                           ;doprnt.c: 1287: if((int)val < 0) {
  6064  016B  1FCB               	btfss	sprintf@val+1,7
  6065  016C  2983               	goto	l3960
  6066                           
  6067                           ;doprnt.c: 1288: flag |= 0x03;
  6068  016D  3003               	movlw	3
  6069  016E  00C0               	movwf	??_sprintf
  6070  016F  0840               	movf	??_sprintf,w
  6071  0170  04C6               	iorwf	sprintf@flag,f
  6072                           
  6073                           ;doprnt.c: 1289: val = -val;
  6074  0171  09CA               	comf	sprintf@val,f
  6075  0172  09CB               	comf	sprintf@val+1,f
  6076  0173  0ACA               	incf	sprintf@val,f
  6077  0174  1903               	skipnz
  6078  0175  0ACB               	incf	sprintf@val+1,f
  6079  0176  2983               	goto	l3960
  6080  0177                     l3956:
  6081                           
  6082                           ;doprnt.c: 1294: else;doprnt.c: 1299: {;doprnt.c: 1312: val = (*(unsigned *)__va_arg((*(
      +                          unsigned **)ap), (unsigned)0));
  6083  0177  0847               	movf	sprintf@ap,w
  6084  0178  0084               	movwf	4
  6085  0179  1383               	bcf	3,7	;select IRP bank0
  6086  017A  0800               	movf	0,w
  6087  017B  00CA               	movwf	sprintf@val
  6088  017C  0A84               	incf	4,f
  6089  017D  0800               	movf	0,w
  6090  017E  00CB               	movwf	sprintf@val+1
  6091  017F  3002               	movlw	2
  6092  0180  00C0               	movwf	??_sprintf
  6093  0181  0840               	movf	??_sprintf,w
  6094  0182  07C7               	addwf	sprintf@ap,f
  6095  0183                     l3960:
  6096                           
  6097                           ;doprnt.c: 1313: };doprnt.c: 1331: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c
      +                          ++)
  6098  0183  01CE               	clrf	sprintf@c
  6099  0184  0ACE               	incf	sprintf@c,f
  6100  0185                     l3966:
  6101                           
  6102                           ;doprnt.c: 1332: if(val < dpowers[c])
  6103  0185  084E               	movf	sprintf@c,w
  6104  0186  00C0               	movwf	??_sprintf
  6105  0187  0740               	addwf	??_sprintf,w
  6106  0188  3E52               	addlw	low (_dpowers| (0+32768))
  6107  0189  0084               	movwf	4
  6108  018A  3090               	movlw	high (_dpowers| (0+32768))
  6109  018B  1803               	skipnc
  6110  018C  3E01               	addlw	1
  6111  018D  00FF               	movwf	127
  6112  018E  160A  118A  2000  120A  118A  	fcall	stringtab
  6113  0193  00C1               	movwf	??_sprintf+1
  6114  0194  160A  118A  2000  120A  118A  	fcall	stringtab
  6115  0199  00C2               	movwf	??_sprintf+2
  6116  019A  0842               	movf	??_sprintf+2,w
  6117  019B  024B               	subwf	sprintf@val+1,w
  6118  019C  1D03               	skipz
  6119  019D  29A0               	goto	u4395
  6120  019E  0841               	movf	??_sprintf+1,w
  6121  019F  024A               	subwf	sprintf@val,w
  6122  01A0                     u4395:
  6123  01A0  1C03               	btfss	3,0
  6124  01A1  29AA               	goto	l3972
  6125  01A2  3001               	movlw	1
  6126  01A3  00C0               	movwf	??_sprintf
  6127  01A4  0840               	movf	??_sprintf,w
  6128  01A5  07CE               	addwf	sprintf@c,f
  6129  01A6  3005               	movlw	5
  6130  01A7  064E               	xorwf	sprintf@c,w
  6131  01A8  1D03               	btfss	3,2
  6132  01A9  2985               	goto	l3966
  6133  01AA                     l3972:
  6134                           
  6135                           ;doprnt.c: 1371: if(width && flag & 0x03)
  6136  01AA  084C               	movf	sprintf@width,w
  6137  01AB  044D               	iorwf	sprintf@width+1,w
  6138  01AC  1903               	btfsc	3,2
  6139  01AD  29B8               	goto	l800
  6140  01AE  0846               	movf	sprintf@flag,w
  6141  01AF  3903               	andlw	3
  6142  01B0  1903               	btfsc	3,2
  6143  01B1  29B8               	goto	l800
  6144                           
  6145                           ;doprnt.c: 1372: width--;
  6146  01B2  30FF               	movlw	255
  6147  01B3  07CC               	addwf	sprintf@width,f
  6148  01B4  1803               	skipnc
  6149  01B5  0ACD               	incf	sprintf@width+1,f
  6150  01B6  30FF               	movlw	255
  6151  01B7  07CD               	addwf	sprintf@width+1,f
  6152  01B8                     l800:
  6153                           
  6154                           ;doprnt.c: 1407: if(width > c)
  6155  01B8  084D               	movf	sprintf@width+1,w
  6156  01B9  3A80               	xorlw	128
  6157  01BA  3C80               	sublw	128
  6158  01BB  1D03               	skipz
  6159  01BC  29BF               	goto	u4435
  6160  01BD  084C               	movf	sprintf@width,w
  6161  01BE  024E               	subwf	sprintf@c,w
  6162  01BF                     u4435:
  6163  01BF  1803               	skipnc
  6164  01C0  29CD               	goto	l3980
  6165                           
  6166                           ;doprnt.c: 1408: width -= c;
  6167  01C1  1283               	bcf	3,5	;RP0=0, select bank0
  6168  01C2  1303               	bcf	3,6	;RP1=0, select bank0
  6169  01C3  084E               	movf	sprintf@c,w
  6170  01C4  00C0               	movwf	??_sprintf
  6171  01C5  01C1               	clrf	??_sprintf+1
  6172  01C6  0840               	movf	??_sprintf,w
  6173  01C7  02CC               	subwf	sprintf@width,f
  6174  01C8  0841               	movf	??_sprintf+1,w
  6175  01C9  1C03               	skipc
  6176  01CA  03CD               	decf	sprintf@width+1,f
  6177  01CB  02CD               	subwf	sprintf@width+1,f
  6178  01CC  29D1               	goto	l3982
  6179  01CD                     l3980:
  6180                           
  6181                           ;doprnt.c: 1409: else;doprnt.c: 1410: width = 0;
  6182  01CD  1283               	bcf	3,5	;RP0=0, select bank0
  6183  01CE  1303               	bcf	3,6	;RP1=0, select bank0
  6184  01CF  01CC               	clrf	sprintf@width
  6185  01D0  01CD               	clrf	sprintf@width+1
  6186  01D1                     l3982:
  6187                           
  6188                           ;doprnt.c: 1448: {;doprnt.c: 1450: if(width;doprnt.c: 1454: )
  6189  01D1  084C               	movf	sprintf@width,w
  6190  01D2  044D               	iorwf	sprintf@width+1,w
  6191  01D3  1903               	btfsc	3,2
  6192  01D4  29EA               	goto	l3990
  6193  01D5                     l3984:
  6194                           
  6195                           ;doprnt.c: 1456: ((*sp++ = (' ')));
  6196  01D5  3020               	movlw	32
  6197  01D6  00C0               	movwf	??_sprintf
  6198  01D7  084F               	movf	sprintf@sp,w
  6199  01D8  0084               	movwf	4
  6200  01D9  0840               	movf	??_sprintf,w
  6201  01DA  1783               	bsf	3,7	;select IRP bank2
  6202  01DB  0080               	movwf	0
  6203  01DC  3001               	movlw	1
  6204  01DD  00C0               	movwf	??_sprintf
  6205  01DE  0840               	movf	??_sprintf,w
  6206  01DF  07CF               	addwf	sprintf@sp,f
  6207                           
  6208                           ;doprnt.c: 1457: while(--width);
  6209  01E0  30FF               	movlw	255
  6210  01E1  07CC               	addwf	sprintf@width,f
  6211  01E2  1803               	skipnc
  6212  01E3  0ACD               	incf	sprintf@width+1,f
  6213  01E4  30FF               	movlw	255
  6214  01E5  07CD               	addwf	sprintf@width+1,f
  6215  01E6  084C               	movf	sprintf@width,w
  6216  01E7  044D               	iorwf	sprintf@width+1,w
  6217  01E8  1D03               	btfss	3,2
  6218  01E9  29D5               	goto	l3984
  6219  01EA                     l3990:
  6220                           
  6221                           ;doprnt.c: 1464: if(flag & 0x03)
  6222  01EA  0846               	movf	sprintf@flag,w
  6223  01EB  3903               	andlw	3
  6224  01EC  1903               	btfsc	3,2
  6225  01ED  29F9               	goto	l3996
  6226                           
  6227                           ;doprnt.c: 1465: ((*sp++ = ('-')));
  6228  01EE  302D               	movlw	45
  6229  01EF  00C0               	movwf	??_sprintf
  6230  01F0  084F               	movf	sprintf@sp,w
  6231  01F1  0084               	movwf	4
  6232  01F2  0840               	movf	??_sprintf,w
  6233  01F3  1783               	bsf	3,7	;select IRP bank2
  6234  01F4  0080               	movwf	0
  6235  01F5  3001               	movlw	1
  6236  01F6  00C0               	movwf	??_sprintf
  6237  01F7  0840               	movf	??_sprintf,w
  6238  01F8  07CF               	addwf	sprintf@sp,f
  6239  01F9                     l3996:
  6240                           
  6241                           ;doprnt.c: 1495: };doprnt.c: 1498: prec = c;
  6242  01F9  084E               	movf	sprintf@c,w
  6243  01FA  00C0               	movwf	??_sprintf
  6244  01FB  0840               	movf	??_sprintf,w
  6245  01FC  00C3               	movwf	sprintf@prec
  6246  01FD                     l4004:	
  6247                           ;doprnt.c: 1500: while(prec--) {
  6248                           
  6249  01FD  30FF               	movlw	255
  6250  01FE  00C0               	movwf	??_sprintf
  6251  01FF  0840               	movf	??_sprintf,w
  6252  0200  07C3               	addwf	sprintf@prec,f
  6253  0201  0A43               	incf	sprintf@prec,w
  6254  0202  1903               	btfsc	3,2
  6255  0203  2847               	goto	l4006
  6256                           
  6257                           ;doprnt.c: 1504: {;doprnt.c: 1515: c = (val / dpowers[(unsigned char)prec]) % 10 + '0';
  6258  0204  300A               	movlw	10
  6259  0205  00A8               	movwf	___lwmod@divisor
  6260  0206  3000               	movlw	0
  6261  0207  00A9               	movwf	___lwmod@divisor+1
  6262  0208  0843               	movf	sprintf@prec,w
  6263  0209  00C0               	movwf	??_sprintf
  6264  020A  0740               	addwf	??_sprintf,w
  6265  020B  3E52               	addlw	low (_dpowers| (0+32768))
  6266  020C  0084               	movwf	4
  6267  020D  3090               	movlw	high (_dpowers| (0+32768))
  6268  020E  1803               	skipnc
  6269  020F  3E01               	addlw	1
  6270  0210  00FF               	movwf	127
  6271  0211  160A  118A  2000  120A  118A  	fcall	stringtab
  6272  0216  00A0               	movwf	___lwdiv@divisor
  6273  0217  160A  118A  2000  120A  118A  	fcall	stringtab
  6274  021C  00A1               	movwf	___lwdiv@divisor+1
  6275  021D  084B               	movf	sprintf@val+1,w
  6276  021E  00A3               	movwf	___lwdiv@dividend+1
  6277  021F  084A               	movf	sprintf@val,w
  6278  0220  00A2               	movwf	___lwdiv@dividend
  6279  0221  160A  158A  2658  120A  118A  	fcall	___lwdiv
  6280  0226  0821               	movf	?___lwdiv+1,w
  6281  0227  00AB               	movwf	___lwmod@dividend+1
  6282  0228  0820               	movf	?___lwdiv,w
  6283  0229  00AA               	movwf	___lwmod@dividend
  6284  022A  160A  158A  2626  120A  118A  	fcall	___lwmod
  6285  022F  0828               	movf	?___lwmod,w
  6286  0230  3E30               	addlw	48
  6287  0231  00C1               	movwf	??_sprintf+1
  6288  0232  0841               	movf	??_sprintf+1,w
  6289  0233  00CE               	movwf	sprintf@c
  6290                           
  6291                           ;doprnt.c: 1549: };doprnt.c: 1550: ((*sp++ = (c)));
  6292  0234  084E               	movf	sprintf@c,w
  6293  0235  00C0               	movwf	??_sprintf
  6294  0236  084F               	movf	sprintf@sp,w
  6295  0237  0084               	movwf	4
  6296  0238  0840               	movf	??_sprintf,w
  6297  0239  1783               	bsf	3,7	;select IRP bank2
  6298  023A  0080               	movwf	0
  6299  023B  3001               	movlw	1
  6300  023C  00C0               	movwf	??_sprintf
  6301  023D  0840               	movf	??_sprintf,w
  6302  023E  07CF               	addwf	sprintf@sp,f
  6303  023F  29FD               	goto	l4004
  6304  0240                     l4008:
  6305                           
  6306                           ;doprnt.c: 1564: *sp = 0;
  6307  0240  084F               	movf	sprintf@sp,w
  6308  0241  0084               	movwf	4
  6309  0242  1783               	bsf	3,7	;select IRP bank2
  6310  0243  0180               	clrf	0
  6311  0244  0008               	return
  6312  0245                     __end_of_sprintf:
  6313                           
  6314                           	psect	text18
  6315  1C45                     __ptext18:	
  6316 ;; *************** function _isdigit *****************
  6317 ;; Defined at:
  6318 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\isdigit.c"
  6319 ;; Parameters:    Size  Location     Type
  6320 ;;  c               1    wreg     unsigned char 
  6321 ;; Auto vars:     Size  Location     Type
  6322 ;;  c               1    1[BANK0 ] unsigned char 
  6323 ;; Return value:  Size  Location     Type
  6324 ;;		None               void
  6325 ;; Registers used:
  6326 ;;		wreg, status,2, status,0
  6327 ;; Tracked objects:
  6328 ;;		On entry : 300/0
  6329 ;;		On exit  : 300/0
  6330 ;;		Unchanged: 0/0
  6331 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6332 ;;      Params:         0       0       0       0       0
  6333 ;;      Locals:         0       2       0       0       0
  6334 ;;      Temps:          0       0       0       0       0
  6335 ;;      Totals:         0       2       0       0       0
  6336 ;;Total ram usage:        2 bytes
  6337 ;; Hardware stack levels used: 1
  6338 ;; Hardware stack levels required when called: 2
  6339 ;; This function calls:
  6340 ;;		Nothing
  6341 ;; This function is called by:
  6342 ;;		_sprintf
  6343 ;; This function uses a non-reentrant model
  6344 ;;
  6345                           
  6346                           
  6347                           ;psect for function _isdigit
  6348  1C45                     _isdigit:
  6349                           
  6350                           ;incstack = 0
  6351                           ; Regs used in _isdigit: [wreg+status,2+status,0]
  6352                           ;isdigit@c stored from wreg
  6353  1C45  00A1               	movwf	isdigit@c
  6354  1C46  01A0               	clrf	_isdigit$1566
  6355  1C47  303A               	movlw	58
  6356  1C48  0221               	subwf	isdigit@c,w
  6357  1C49  1803               	skipnc
  6358  1C4A  2C51               	goto	l3610
  6359  1C4B  3030               	movlw	48
  6360  1C4C  0221               	subwf	isdigit@c,w
  6361  1C4D  1C03               	skipc
  6362  1C4E  2C51               	goto	l3610
  6363  1C4F  01A0               	clrf	_isdigit$1566
  6364  1C50  0AA0               	incf	_isdigit$1566,f
  6365  1C51                     l3610:
  6366  1C51  0C20               	rrf	_isdigit$1566,w
  6367  1C52  0008               	return
  6368  1C53                     __end_of_isdigit:
  6369                           
  6370                           	psect	text19
  6371  1D00                     __ptext19:	
  6372 ;; *************** function ___wmul *****************
  6373 ;; Defined at:
  6374 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\Umul16.c"
  6375 ;; Parameters:    Size  Location     Type
  6376 ;;  multiplier      2    0[BANK0 ] unsigned int 
  6377 ;;  multiplicand    2    2[BANK0 ] unsigned int 
  6378 ;; Auto vars:     Size  Location     Type
  6379 ;;  product         2    4[BANK0 ] unsigned int 
  6380 ;; Return value:  Size  Location     Type
  6381 ;;                  2    0[BANK0 ] unsigned int 
  6382 ;; Registers used:
  6383 ;;		wreg, status,2, status,0
  6384 ;; Tracked objects:
  6385 ;;		On entry : 300/0
  6386 ;;		On exit  : 300/0
  6387 ;;		Unchanged: 0/0
  6388 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6389 ;;      Params:         0       4       0       0       0
  6390 ;;      Locals:         0       2       0       0       0
  6391 ;;      Temps:          0       0       0       0       0
  6392 ;;      Totals:         0       6       0       0       0
  6393 ;;Total ram usage:        6 bytes
  6394 ;; Hardware stack levels used: 1
  6395 ;; Hardware stack levels required when called: 2
  6396 ;; This function calls:
  6397 ;;		Nothing
  6398 ;; This function is called by:
  6399 ;;		_fMenuStrip
  6400 ;;		_sprintf
  6401 ;; This function uses a non-reentrant model
  6402 ;;
  6403                           
  6404                           
  6405                           ;psect for function ___wmul
  6406  1D00                     ___wmul:
  6407                           
  6408                           ;incstack = 0
  6409                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  6410  1D00  01A4               	clrf	___wmul@product
  6411  1D01  01A5               	clrf	___wmul@product+1
  6412  1D02                     l3616:
  6413  1D02  1C20               	btfss	___wmul@multiplier,0
  6414  1D03  2D0A               	goto	l815
  6415  1D04  0822               	movf	___wmul@multiplicand,w
  6416  1D05  07A4               	addwf	___wmul@product,f
  6417  1D06  1803               	skipnc
  6418  1D07  0AA5               	incf	___wmul@product+1,f
  6419  1D08  0823               	movf	___wmul@multiplicand+1,w
  6420  1D09  07A5               	addwf	___wmul@product+1,f
  6421  1D0A                     l815:
  6422  1D0A  3001               	movlw	1
  6423  1D0B                     u3845:
  6424  1D0B  1003               	clrc
  6425  1D0C  0DA2               	rlf	___wmul@multiplicand,f
  6426  1D0D  0DA3               	rlf	___wmul@multiplicand+1,f
  6427  1D0E  3EFF               	addlw	-1
  6428  1D0F  1D03               	skipz
  6429  1D10  2D0B               	goto	u3845
  6430  1D11  3001               	movlw	1
  6431  1D12                     u3855:
  6432  1D12  1003               	clrc
  6433  1D13  0CA1               	rrf	___wmul@multiplier+1,f
  6434  1D14  0CA0               	rrf	___wmul@multiplier,f
  6435  1D15  3EFF               	addlw	-1
  6436  1D16  1D03               	skipz
  6437  1D17  2D12               	goto	u3855
  6438  1D18  0820               	movf	___wmul@multiplier,w
  6439  1D19  0421               	iorwf	___wmul@multiplier+1,w
  6440  1D1A  1D03               	btfss	3,2
  6441  1D1B  2D02               	goto	l3616
  6442  1D1C  0825               	movf	___wmul@product+1,w
  6443  1D1D  00A1               	movwf	?___wmul+1
  6444  1D1E  0824               	movf	___wmul@product,w
  6445  1D1F  00A0               	movwf	?___wmul
  6446  1D20  0008               	return
  6447  1D21                     __end_of___wmul:
  6448                           
  6449                           	psect	text20
  6450  1E26                     __ptext20:	
  6451 ;; *************** function ___lwmod *****************
  6452 ;; Defined at:
  6453 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\lwmod.c"
  6454 ;; Parameters:    Size  Location     Type
  6455 ;;  divisor         2    8[BANK0 ] unsigned int 
  6456 ;;  dividend        2   10[BANK0 ] unsigned int 
  6457 ;; Auto vars:     Size  Location     Type
  6458 ;;  counter         1   13[BANK0 ] unsigned char 
  6459 ;; Return value:  Size  Location     Type
  6460 ;;                  2    8[BANK0 ] unsigned int 
  6461 ;; Registers used:
  6462 ;;		wreg, status,2, status,0
  6463 ;; Tracked objects:
  6464 ;;		On entry : 300/0
  6465 ;;		On exit  : 300/0
  6466 ;;		Unchanged: 0/0
  6467 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6468 ;;      Params:         0       4       0       0       0
  6469 ;;      Locals:         0       1       0       0       0
  6470 ;;      Temps:          0       1       0       0       0
  6471 ;;      Totals:         0       6       0       0       0
  6472 ;;Total ram usage:        6 bytes
  6473 ;; Hardware stack levels used: 1
  6474 ;; Hardware stack levels required when called: 2
  6475 ;; This function calls:
  6476 ;;		Nothing
  6477 ;; This function is called by:
  6478 ;;		_sprintf
  6479 ;; This function uses a non-reentrant model
  6480 ;;
  6481                           
  6482                           
  6483                           ;psect for function ___lwmod
  6484  1E26                     ___lwmod:
  6485                           
  6486                           ;incstack = 0
  6487                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  6488  1E26  0828               	movf	___lwmod@divisor,w
  6489  1E27  0429               	iorwf	___lwmod@divisor+1,w
  6490  1E28  1903               	btfsc	3,2
  6491  1E29  2E53               	goto	l3792
  6492  1E2A  01AD               	clrf	___lwmod@counter
  6493  1E2B  0AAD               	incf	___lwmod@counter,f
  6494  1E2C                     l3782:
  6495  1E2C  1BA9               	btfsc	___lwmod@divisor+1,7
  6496  1E2D  2E3A               	goto	l3784
  6497  1E2E  3001               	movlw	1
  6498  1E2F                     u4155:
  6499  1E2F  1003               	clrc
  6500  1E30  0DA8               	rlf	___lwmod@divisor,f
  6501  1E31  0DA9               	rlf	___lwmod@divisor+1,f
  6502  1E32  3EFF               	addlw	-1
  6503  1E33  1D03               	skipz
  6504  1E34  2E2F               	goto	u4155
  6505  1E35  3001               	movlw	1
  6506  1E36  00AC               	movwf	??___lwmod
  6507  1E37  082C               	movf	??___lwmod,w
  6508  1E38  07AD               	addwf	___lwmod@counter,f
  6509  1E39  2E2C               	goto	l3782
  6510  1E3A                     l3784:
  6511  1E3A  0829               	movf	___lwmod@divisor+1,w
  6512  1E3B  022B               	subwf	___lwmod@dividend+1,w
  6513  1E3C  1D03               	skipz
  6514  1E3D  2E40               	goto	u4175
  6515  1E3E  0828               	movf	___lwmod@divisor,w
  6516  1E3F  022A               	subwf	___lwmod@dividend,w
  6517  1E40                     u4175:
  6518  1E40  1C03               	skipc
  6519  1E41  2E48               	goto	l3788
  6520  1E42  0828               	movf	___lwmod@divisor,w
  6521  1E43  02AA               	subwf	___lwmod@dividend,f
  6522  1E44  0829               	movf	___lwmod@divisor+1,w
  6523  1E45  1C03               	skipc
  6524  1E46  03AB               	decf	___lwmod@dividend+1,f
  6525  1E47  02AB               	subwf	___lwmod@dividend+1,f
  6526  1E48                     l3788:
  6527  1E48  3001               	movlw	1
  6528  1E49                     u4185:
  6529  1E49  1003               	clrc
  6530  1E4A  0CA9               	rrf	___lwmod@divisor+1,f
  6531  1E4B  0CA8               	rrf	___lwmod@divisor,f
  6532  1E4C  3EFF               	addlw	-1
  6533  1E4D  1D03               	skipz
  6534  1E4E  2E49               	goto	u4185
  6535  1E4F  3001               	movlw	1
  6536  1E50  02AD               	subwf	___lwmod@counter,f
  6537  1E51  1D03               	btfss	3,2
  6538  1E52  2E3A               	goto	l3784
  6539  1E53                     l3792:
  6540  1E53  082B               	movf	___lwmod@dividend+1,w
  6541  1E54  00A9               	movwf	?___lwmod+1
  6542  1E55  082A               	movf	___lwmod@dividend,w
  6543  1E56  00A8               	movwf	?___lwmod
  6544  1E57  0008               	return
  6545  1E58                     __end_of___lwmod:
  6546                           
  6547                           	psect	text21
  6548  1E58                     __ptext21:	
  6549 ;; *************** function ___lwdiv *****************
  6550 ;; Defined at:
  6551 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\lwdiv.c"
  6552 ;; Parameters:    Size  Location     Type
  6553 ;;  divisor         2    0[BANK0 ] unsigned int 
  6554 ;;  dividend        2    2[BANK0 ] unsigned int 
  6555 ;; Auto vars:     Size  Location     Type
  6556 ;;  quotient        2    5[BANK0 ] unsigned int 
  6557 ;;  counter         1    7[BANK0 ] unsigned char 
  6558 ;; Return value:  Size  Location     Type
  6559 ;;                  2    0[BANK0 ] unsigned int 
  6560 ;; Registers used:
  6561 ;;		wreg, status,2, status,0
  6562 ;; Tracked objects:
  6563 ;;		On entry : 300/0
  6564 ;;		On exit  : 300/0
  6565 ;;		Unchanged: 0/0
  6566 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6567 ;;      Params:         0       4       0       0       0
  6568 ;;      Locals:         0       3       0       0       0
  6569 ;;      Temps:          0       1       0       0       0
  6570 ;;      Totals:         0       8       0       0       0
  6571 ;;Total ram usage:        8 bytes
  6572 ;; Hardware stack levels used: 1
  6573 ;; Hardware stack levels required when called: 2
  6574 ;; This function calls:
  6575 ;;		Nothing
  6576 ;; This function is called by:
  6577 ;;		_sprintf
  6578 ;; This function uses a non-reentrant model
  6579 ;;
  6580                           
  6581                           
  6582                           ;psect for function ___lwdiv
  6583  1E58                     ___lwdiv:
  6584                           
  6585                           ;incstack = 0
  6586                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  6587  1E58  01A5               	clrf	___lwdiv@quotient
  6588  1E59  01A6               	clrf	___lwdiv@quotient+1
  6589  1E5A  0820               	movf	___lwdiv@divisor,w
  6590  1E5B  0421               	iorwf	___lwdiv@divisor+1,w
  6591  1E5C  1903               	btfsc	3,2
  6592  1E5D  2E8F               	goto	l3770
  6593  1E5E  01A7               	clrf	___lwdiv@counter
  6594  1E5F  0AA7               	incf	___lwdiv@counter,f
  6595  1E60                     l3758:
  6596  1E60  1BA1               	btfsc	___lwdiv@divisor+1,7
  6597  1E61  2E6E               	goto	l3760
  6598  1E62  3001               	movlw	1
  6599  1E63                     u4085:
  6600  1E63  1003               	clrc
  6601  1E64  0DA0               	rlf	___lwdiv@divisor,f
  6602  1E65  0DA1               	rlf	___lwdiv@divisor+1,f
  6603  1E66  3EFF               	addlw	-1
  6604  1E67  1D03               	skipz
  6605  1E68  2E63               	goto	u4085
  6606  1E69  3001               	movlw	1
  6607  1E6A  00A4               	movwf	??___lwdiv
  6608  1E6B  0824               	movf	??___lwdiv,w
  6609  1E6C  07A7               	addwf	___lwdiv@counter,f
  6610  1E6D  2E60               	goto	l3758
  6611  1E6E                     l3760:
  6612  1E6E  3001               	movlw	1
  6613  1E6F                     u4105:
  6614  1E6F  1003               	clrc
  6615  1E70  0DA5               	rlf	___lwdiv@quotient,f
  6616  1E71  0DA6               	rlf	___lwdiv@quotient+1,f
  6617  1E72  3EFF               	addlw	-1
  6618  1E73  1D03               	skipz
  6619  1E74  2E6F               	goto	u4105
  6620  1E75  0821               	movf	___lwdiv@divisor+1,w
  6621  1E76  0223               	subwf	___lwdiv@dividend+1,w
  6622  1E77  1D03               	skipz
  6623  1E78  2E7B               	goto	u4115
  6624  1E79  0820               	movf	___lwdiv@divisor,w
  6625  1E7A  0222               	subwf	___lwdiv@dividend,w
  6626  1E7B                     u4115:
  6627  1E7B  1C03               	skipc
  6628  1E7C  2E84               	goto	l3766
  6629  1E7D  0820               	movf	___lwdiv@divisor,w
  6630  1E7E  02A2               	subwf	___lwdiv@dividend,f
  6631  1E7F  0821               	movf	___lwdiv@divisor+1,w
  6632  1E80  1C03               	skipc
  6633  1E81  03A3               	decf	___lwdiv@dividend+1,f
  6634  1E82  02A3               	subwf	___lwdiv@dividend+1,f
  6635  1E83  1425               	bsf	___lwdiv@quotient,0
  6636  1E84                     l3766:
  6637  1E84  3001               	movlw	1
  6638  1E85                     u4125:
  6639  1E85  1003               	clrc
  6640  1E86  0CA1               	rrf	___lwdiv@divisor+1,f
  6641  1E87  0CA0               	rrf	___lwdiv@divisor,f
  6642  1E88  3EFF               	addlw	-1
  6643  1E89  1D03               	skipz
  6644  1E8A  2E85               	goto	u4125
  6645  1E8B  3001               	movlw	1
  6646  1E8C  02A7               	subwf	___lwdiv@counter,f
  6647  1E8D  1D03               	btfss	3,2
  6648  1E8E  2E6E               	goto	l3760
  6649  1E8F                     l3770:
  6650  1E8F  0826               	movf	___lwdiv@quotient+1,w
  6651  1E90  00A1               	movwf	?___lwdiv+1
  6652  1E91  0825               	movf	___lwdiv@quotient,w
  6653  1E92  00A0               	movwf	?___lwdiv
  6654  1E93  0008               	return
  6655  1E94                     __end_of___lwdiv:
  6656                           
  6657                           	psect	text22
  6658  1C23                     __ptext22:	
  6659 ;; *************** function _fEraseString *****************
  6660 ;; Defined at:
  6661 ;;		line 149 in file "config.c"
  6662 ;; Parameters:    Size  Location     Type
  6663 ;;  string          1    wreg     PTR unsigned char 
  6664 ;;		 -> str2(16), 
  6665 ;; Auto vars:     Size  Location     Type
  6666 ;;  string          1    0[BANK0 ] PTR unsigned char 
  6667 ;;		 -> str2(16), 
  6668 ;; Return value:  Size  Location     Type
  6669 ;;                  1    wreg      void 
  6670 ;; Registers used:
  6671 ;;		wreg, fsr0l, fsr0h, status,2
  6672 ;; Tracked objects:
  6673 ;;		On entry : 0/800
  6674 ;;		On exit  : B00/800
  6675 ;;		Unchanged: 0/0
  6676 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6677 ;;      Params:         0       0       0       0       0
  6678 ;;      Locals:         0       1       0       0       0
  6679 ;;      Temps:          0       0       0       0       0
  6680 ;;      Totals:         0       1       0       0       0
  6681 ;;Total ram usage:        1 bytes
  6682 ;; Hardware stack levels used: 1
  6683 ;; Hardware stack levels required when called: 2
  6684 ;; This function calls:
  6685 ;;		Nothing
  6686 ;; This function is called by:
  6687 ;;		_fMenuStrip
  6688 ;; This function uses a non-reentrant model
  6689 ;;
  6690                           
  6691                           
  6692                           ;psect for function _fEraseString
  6693  1C23                     _fEraseString:
  6694                           
  6695                           ;incstack = 0
  6696                           ; Regs used in _fEraseString: [wreg-fsr0h+status,2]
  6697                           ;fEraseString@string stored from wreg
  6698  1C23  1283               	bcf	3,5	;RP0=0, select bank0
  6699  1C24  1303               	bcf	3,6	;RP1=0, select bank0
  6700  1C25  00A0               	movwf	fEraseString@string
  6701                           
  6702                           ;config.c: 150: string[0] = 0;
  6703  1C26  0820               	movf	fEraseString@string,w
  6704  1C27  0084               	movwf	4
  6705  1C28  1783               	bsf	3,7	;select IRP bank2
  6706  1C29  0180               	clrf	0
  6707  1C2A  0008               	return
  6708  1C2B                     __end_of_fEraseString:
  6709                           
  6710                           	psect	text23
  6711  1C75                     __ptext23:	
  6712 ;; *************** function ___bmul *****************
  6713 ;; Defined at:
  6714 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\Umul8.c"
  6715 ;; Parameters:    Size  Location     Type
  6716 ;;  multiplier      1    wreg     unsigned char 
  6717 ;;  multiplicand    1    9[BANK0 ] unsigned char 
  6718 ;; Auto vars:     Size  Location     Type
  6719 ;;  multiplier      1   12[BANK0 ] unsigned char 
  6720 ;;  product         1   11[BANK0 ] unsigned char 
  6721 ;; Return value:  Size  Location     Type
  6722 ;;                  1    wreg      unsigned char 
  6723 ;; Registers used:
  6724 ;;		wreg, status,2, status,0
  6725 ;; Tracked objects:
  6726 ;;		On entry : 200/0
  6727 ;;		On exit  : 300/0
  6728 ;;		Unchanged: 0/0
  6729 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6730 ;;      Params:         0       1       0       0       0
  6731 ;;      Locals:         0       2       0       0       0
  6732 ;;      Temps:          0       1       0       0       0
  6733 ;;      Totals:         0       4       0       0       0
  6734 ;;Total ram usage:        4 bytes
  6735 ;; Hardware stack levels used: 1
  6736 ;; Hardware stack levels required when called: 2
  6737 ;; This function calls:
  6738 ;;		Nothing
  6739 ;; This function is called by:
  6740 ;;		_fMenuStrip
  6741 ;;		_eval_poly
  6742 ;; This function uses a non-reentrant model
  6743 ;;
  6744                           
  6745                           
  6746                           ;psect for function ___bmul
  6747  1C75                     ___bmul:
  6748                           
  6749                           ;incstack = 0
  6750                           ; Regs used in ___bmul: [wreg+status,2+status,0]
  6751                           ;___bmul@multiplier stored from wreg
  6752  1C75  1283               	bcf	3,5	;RP0=0, select bank0
  6753  1C76  00AC               	movwf	___bmul@multiplier
  6754  1C77  01AB               	clrf	___bmul@product
  6755  1C78                     l3448:
  6756  1C78  1C2C               	btfss	___bmul@multiplier,0
  6757  1C79  2C7E               	goto	l3452
  6758  1C7A  0829               	movf	___bmul@multiplicand,w
  6759  1C7B  00AA               	movwf	??___bmul
  6760  1C7C  082A               	movf	??___bmul,w
  6761  1C7D  07AB               	addwf	___bmul@product,f
  6762  1C7E                     l3452:
  6763  1C7E  1003               	clrc
  6764  1C7F  0DA9               	rlf	___bmul@multiplicand,f
  6765  1C80  1003               	clrc
  6766  1C81  0CAC               	rrf	___bmul@multiplier,f
  6767  1C82  082C               	movf	___bmul@multiplier,w
  6768  1C83  1D03               	btfss	3,2
  6769  1C84  2C78               	goto	l3448
  6770  1C85  082B               	movf	___bmul@product,w
  6771  1C86  0008               	return
  6772  1C87                     __end_of___bmul:
  6773                           
  6774                           	psect	text24
  6775  1F17                     __ptext24:	
  6776 ;; *************** function ___awmod *****************
  6777 ;; Defined at:
  6778 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\awmod.c"
  6779 ;; Parameters:    Size  Location     Type
  6780 ;;  divisor         2    9[BANK0 ] int 
  6781 ;;  dividend        2   11[BANK0 ] int 
  6782 ;; Auto vars:     Size  Location     Type
  6783 ;;  sign            1   15[BANK0 ] unsigned char 
  6784 ;;  counter         1   14[BANK0 ] unsigned char 
  6785 ;; Return value:  Size  Location     Type
  6786 ;;                  2    9[BANK0 ] int 
  6787 ;; Registers used:
  6788 ;;		wreg, status,2, status,0
  6789 ;; Tracked objects:
  6790 ;;		On entry : 300/0
  6791 ;;		On exit  : 300/0
  6792 ;;		Unchanged: 0/0
  6793 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6794 ;;      Params:         0       4       0       0       0
  6795 ;;      Locals:         0       2       0       0       0
  6796 ;;      Temps:          0       1       0       0       0
  6797 ;;      Totals:         0       7       0       0       0
  6798 ;;Total ram usage:        7 bytes
  6799 ;; Hardware stack levels used: 1
  6800 ;; Hardware stack levels required when called: 2
  6801 ;; This function calls:
  6802 ;;		Nothing
  6803 ;; This function is called by:
  6804 ;;		_fMenuStrip
  6805 ;; This function uses a non-reentrant model
  6806 ;;
  6807                           
  6808                           
  6809                           ;psect for function ___awmod
  6810  1F17                     ___awmod:
  6811                           
  6812                           ;incstack = 0
  6813                           ; Regs used in ___awmod: [wreg+status,2+status,0]
  6814  1F17  01AF               	clrf	___awmod@sign
  6815  1F18  1FAC               	btfss	___awmod@dividend+1,7
  6816  1F19  2F21               	goto	l4102
  6817  1F1A  09AB               	comf	___awmod@dividend,f
  6818  1F1B  09AC               	comf	___awmod@dividend+1,f
  6819  1F1C  0AAB               	incf	___awmod@dividend,f
  6820  1F1D  1903               	skipnz
  6821  1F1E  0AAC               	incf	___awmod@dividend+1,f
  6822  1F1F  01AF               	clrf	___awmod@sign
  6823  1F20  0AAF               	incf	___awmod@sign,f
  6824  1F21                     l4102:
  6825  1F21  1FAA               	btfss	___awmod@divisor+1,7
  6826  1F22  2F28               	goto	l4106
  6827  1F23  09A9               	comf	___awmod@divisor,f
  6828  1F24  09AA               	comf	___awmod@divisor+1,f
  6829  1F25  0AA9               	incf	___awmod@divisor,f
  6830  1F26  1903               	skipnz
  6831  1F27  0AAA               	incf	___awmod@divisor+1,f
  6832  1F28                     l4106:
  6833  1F28  0829               	movf	___awmod@divisor,w
  6834  1F29  042A               	iorwf	___awmod@divisor+1,w
  6835  1F2A  1903               	btfsc	3,2
  6836  1F2B  2F55               	goto	l4124
  6837  1F2C  01AE               	clrf	___awmod@counter
  6838  1F2D  0AAE               	incf	___awmod@counter,f
  6839  1F2E                     l4114:
  6840  1F2E  1BAA               	btfsc	___awmod@divisor+1,7
  6841  1F2F  2F3C               	goto	l4116
  6842  1F30  3001               	movlw	1
  6843  1F31                     u4665:
  6844  1F31  1003               	clrc
  6845  1F32  0DA9               	rlf	___awmod@divisor,f
  6846  1F33  0DAA               	rlf	___awmod@divisor+1,f
  6847  1F34  3EFF               	addlw	-1
  6848  1F35  1D03               	skipz
  6849  1F36  2F31               	goto	u4665
  6850  1F37  3001               	movlw	1
  6851  1F38  00AD               	movwf	??___awmod
  6852  1F39  082D               	movf	??___awmod,w
  6853  1F3A  07AE               	addwf	___awmod@counter,f
  6854  1F3B  2F2E               	goto	l4114
  6855  1F3C                     l4116:
  6856  1F3C  082A               	movf	___awmod@divisor+1,w
  6857  1F3D  022C               	subwf	___awmod@dividend+1,w
  6858  1F3E  1D03               	skipz
  6859  1F3F  2F42               	goto	u4685
  6860  1F40  0829               	movf	___awmod@divisor,w
  6861  1F41  022B               	subwf	___awmod@dividend,w
  6862  1F42                     u4685:
  6863  1F42  1C03               	skipc
  6864  1F43  2F4A               	goto	l4120
  6865  1F44  0829               	movf	___awmod@divisor,w
  6866  1F45  02AB               	subwf	___awmod@dividend,f
  6867  1F46  082A               	movf	___awmod@divisor+1,w
  6868  1F47  1C03               	skipc
  6869  1F48  03AC               	decf	___awmod@dividend+1,f
  6870  1F49  02AC               	subwf	___awmod@dividend+1,f
  6871  1F4A                     l4120:
  6872  1F4A  3001               	movlw	1
  6873  1F4B                     u4695:
  6874  1F4B  1003               	clrc
  6875  1F4C  0CAA               	rrf	___awmod@divisor+1,f
  6876  1F4D  0CA9               	rrf	___awmod@divisor,f
  6877  1F4E  3EFF               	addlw	-1
  6878  1F4F  1D03               	skipz
  6879  1F50  2F4B               	goto	u4695
  6880  1F51  3001               	movlw	1
  6881  1F52  02AE               	subwf	___awmod@counter,f
  6882  1F53  1D03               	btfss	3,2
  6883  1F54  2F3C               	goto	l4116
  6884  1F55                     l4124:
  6885  1F55  082F               	movf	___awmod@sign,w
  6886  1F56  1903               	btfsc	3,2
  6887  1F57  2F5D               	goto	l4128
  6888  1F58  09AB               	comf	___awmod@dividend,f
  6889  1F59  09AC               	comf	___awmod@dividend+1,f
  6890  1F5A  0AAB               	incf	___awmod@dividend,f
  6891  1F5B  1903               	skipnz
  6892  1F5C  0AAC               	incf	___awmod@dividend+1,f
  6893  1F5D                     l4128:
  6894  1F5D  082C               	movf	___awmod@dividend+1,w
  6895  1F5E  00AA               	movwf	?___awmod+1
  6896  1F5F  082B               	movf	___awmod@dividend,w
  6897  1F60  00A9               	movwf	?___awmod
  6898  1F61  0008               	return
  6899  1F62                     __end_of___awmod:
  6900                           
  6901                           	psect	text25
  6902  121A                     __ptext25:	
  6903 ;; *************** function ___awdiv *****************
  6904 ;; Defined at:
  6905 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\awdiv.c"
  6906 ;; Parameters:    Size  Location     Type
  6907 ;;  divisor         2    0[BANK0 ] int 
  6908 ;;  dividend        2    2[BANK0 ] int 
  6909 ;; Auto vars:     Size  Location     Type
  6910 ;;  quotient        2    7[BANK0 ] int 
  6911 ;;  sign            1    6[BANK0 ] unsigned char 
  6912 ;;  counter         1    5[BANK0 ] unsigned char 
  6913 ;; Return value:  Size  Location     Type
  6914 ;;                  2    0[BANK0 ] int 
  6915 ;; Registers used:
  6916 ;;		wreg, status,2, status,0
  6917 ;; Tracked objects:
  6918 ;;		On entry : 300/0
  6919 ;;		On exit  : 300/0
  6920 ;;		Unchanged: 0/0
  6921 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6922 ;;      Params:         0       4       0       0       0
  6923 ;;      Locals:         0       4       0       0       0
  6924 ;;      Temps:          0       1       0       0       0
  6925 ;;      Totals:         0       9       0       0       0
  6926 ;;Total ram usage:        9 bytes
  6927 ;; Hardware stack levels used: 1
  6928 ;; Hardware stack levels required when called: 2
  6929 ;; This function calls:
  6930 ;;		Nothing
  6931 ;; This function is called by:
  6932 ;;		_fMenuStrip
  6933 ;; This function uses a non-reentrant model
  6934 ;;
  6935                           
  6936                           
  6937                           ;psect for function ___awdiv
  6938  121A                     ___awdiv:
  6939                           
  6940                           ;incstack = 0
  6941                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
  6942  121A  01A6               	clrf	___awdiv@sign
  6943  121B  1FA1               	btfss	___awdiv@divisor+1,7
  6944  121C  2A24               	goto	l4058
  6945  121D  09A0               	comf	___awdiv@divisor,f
  6946  121E  09A1               	comf	___awdiv@divisor+1,f
  6947  121F  0AA0               	incf	___awdiv@divisor,f
  6948  1220  1903               	skipnz
  6949  1221  0AA1               	incf	___awdiv@divisor+1,f
  6950  1222  01A6               	clrf	___awdiv@sign
  6951  1223  0AA6               	incf	___awdiv@sign,f
  6952  1224                     l4058:
  6953  1224  1FA3               	btfss	___awdiv@dividend+1,7
  6954  1225  2A2F               	goto	l4064
  6955  1226  09A2               	comf	___awdiv@dividend,f
  6956  1227  09A3               	comf	___awdiv@dividend+1,f
  6957  1228  0AA2               	incf	___awdiv@dividend,f
  6958  1229  1903               	skipnz
  6959  122A  0AA3               	incf	___awdiv@dividend+1,f
  6960  122B  3001               	movlw	1
  6961  122C  00A4               	movwf	??___awdiv
  6962  122D  0824               	movf	??___awdiv,w
  6963  122E  06A6               	xorwf	___awdiv@sign,f
  6964  122F                     l4064:
  6965  122F  01A7               	clrf	___awdiv@quotient
  6966  1230  01A8               	clrf	___awdiv@quotient+1
  6967  1231  0820               	movf	___awdiv@divisor,w
  6968  1232  0421               	iorwf	___awdiv@divisor+1,w
  6969  1233  1903               	btfsc	3,2
  6970  1234  2A66               	goto	l4086
  6971  1235  01A5               	clrf	___awdiv@counter
  6972  1236  0AA5               	incf	___awdiv@counter,f
  6973  1237                     l4074:
  6974  1237  1BA1               	btfsc	___awdiv@divisor+1,7
  6975  1238  2A45               	goto	l4076
  6976  1239  3001               	movlw	1
  6977  123A                     u4565:
  6978  123A  1003               	clrc
  6979  123B  0DA0               	rlf	___awdiv@divisor,f
  6980  123C  0DA1               	rlf	___awdiv@divisor+1,f
  6981  123D  3EFF               	addlw	-1
  6982  123E  1D03               	skipz
  6983  123F  2A3A               	goto	u4565
  6984  1240  3001               	movlw	1
  6985  1241  00A4               	movwf	??___awdiv
  6986  1242  0824               	movf	??___awdiv,w
  6987  1243  07A5               	addwf	___awdiv@counter,f
  6988  1244  2A37               	goto	l4074
  6989  1245                     l4076:
  6990  1245  3001               	movlw	1
  6991  1246                     u4585:
  6992  1246  1003               	clrc
  6993  1247  0DA7               	rlf	___awdiv@quotient,f
  6994  1248  0DA8               	rlf	___awdiv@quotient+1,f
  6995  1249  3EFF               	addlw	-1
  6996  124A  1D03               	skipz
  6997  124B  2A46               	goto	u4585
  6998  124C  0821               	movf	___awdiv@divisor+1,w
  6999  124D  0223               	subwf	___awdiv@dividend+1,w
  7000  124E  1D03               	skipz
  7001  124F  2A52               	goto	u4595
  7002  1250  0820               	movf	___awdiv@divisor,w
  7003  1251  0222               	subwf	___awdiv@dividend,w
  7004  1252                     u4595:
  7005  1252  1C03               	skipc
  7006  1253  2A5B               	goto	l4082
  7007  1254  0820               	movf	___awdiv@divisor,w
  7008  1255  02A2               	subwf	___awdiv@dividend,f
  7009  1256  0821               	movf	___awdiv@divisor+1,w
  7010  1257  1C03               	skipc
  7011  1258  03A3               	decf	___awdiv@dividend+1,f
  7012  1259  02A3               	subwf	___awdiv@dividend+1,f
  7013  125A  1427               	bsf	___awdiv@quotient,0
  7014  125B                     l4082:
  7015  125B  3001               	movlw	1
  7016  125C                     u4605:
  7017  125C  1003               	clrc
  7018  125D  0CA1               	rrf	___awdiv@divisor+1,f
  7019  125E  0CA0               	rrf	___awdiv@divisor,f
  7020  125F  3EFF               	addlw	-1
  7021  1260  1D03               	skipz
  7022  1261  2A5C               	goto	u4605
  7023  1262  3001               	movlw	1
  7024  1263  02A5               	subwf	___awdiv@counter,f
  7025  1264  1D03               	btfss	3,2
  7026  1265  2A45               	goto	l4076
  7027  1266                     l4086:
  7028  1266  0826               	movf	___awdiv@sign,w
  7029  1267  1903               	btfsc	3,2
  7030  1268  2A6E               	goto	l4090
  7031  1269  09A7               	comf	___awdiv@quotient,f
  7032  126A  09A8               	comf	___awdiv@quotient+1,f
  7033  126B  0AA7               	incf	___awdiv@quotient,f
  7034  126C  1903               	skipnz
  7035  126D  0AA8               	incf	___awdiv@quotient+1,f
  7036  126E                     l4090:
  7037  126E  0828               	movf	___awdiv@quotient+1,w
  7038  126F  00A1               	movwf	?___awdiv+1
  7039  1270  0827               	movf	___awdiv@quotient,w
  7040  1271  00A0               	movwf	?___awdiv
  7041  1272  0008               	return
  7042  1273                     __end_of___awdiv:
  7043                           
  7044                           	psect	text26
  7045  07CB                     __ptext26:	
  7046 ;; *************** function _SPI_Write *****************
  7047 ;; Defined at:
  7048 ;;		line 32 in file "spi_flash.c"
  7049 ;; Parameters:    Size  Location     Type
  7050 ;;  address         2    6[BANK0 ] unsigned int 
  7051 ;;  data            1    8[BANK0 ] unsigned char 
  7052 ;; Auto vars:     Size  Location     Type
  7053 ;;		None
  7054 ;; Return value:  Size  Location     Type
  7055 ;;                  1    wreg      void 
  7056 ;; Registers used:
  7057 ;;		wreg, status,2, status,0, pclath, cstack
  7058 ;; Tracked objects:
  7059 ;;		On entry : 300/0
  7060 ;;		On exit  : 300/0
  7061 ;;		Unchanged: 0/0
  7062 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7063 ;;      Params:         0       3       0       0       0
  7064 ;;      Locals:         0       2       0       0       0
  7065 ;;      Temps:          0       0       0       0       0
  7066 ;;      Totals:         0       5       0       0       0
  7067 ;;Total ram usage:        5 bytes
  7068 ;; Hardware stack levels used: 1
  7069 ;; Hardware stack levels required when called: 6
  7070 ;; This function calls:
  7071 ;;		_SPI_WriteByte
  7072 ;;		_SPI_notRDY
  7073 ;; This function is called by:
  7074 ;;		_main
  7075 ;;		_fMenuStrip
  7076 ;; This function uses a non-reentrant model
  7077 ;;
  7078                           
  7079                           
  7080                           ;psect for function _SPI_Write
  7081  07CB                     _SPI_Write:
  7082  07CB                     l3846:	
  7083                           ;spi_flash.c: 33: while(SPI_notRDY() == 1);
  7084                           
  7085                           ;incstack = 0
  7086                           ; Regs used in _SPI_Write: [wreg+status,2+status,0+pclath+cstack]
  7087                           
  7088  07CB  160A  158A  243C  120A  118A  	fcall	_SPI_notRDY
  7089  07D0  3A01               	xorlw	1
  7090  07D1  1903               	skipnz
  7091  07D2  2FCB               	goto	l3846
  7092                           
  7093                           ;spi_flash.c: 34: PORTAbits.RA5 = 0;
  7094  07D3  1285               	bcf	5,5	;volatile
  7095                           
  7096                           ;spi_flash.c: 35: SPI_WriteByte(0x06);
  7097  07D4  3006               	movlw	6
  7098  07D5  160A  158A  241C  120A  118A  	fcall	_SPI_WriteByte
  7099                           
  7100                           ;spi_flash.c: 36: PORTAbits.RA5 = 1;
  7101  07DA  1283               	bcf	3,5	;RP0=0, select bank0
  7102  07DB  1685               	bsf	5,5	;volatile
  7103                           
  7104                           ;spi_flash.c: 38: PORTAbits.RA5 = 0;
  7105  07DC  1285               	bcf	5,5	;volatile
  7106                           
  7107                           ;spi_flash.c: 39: SPI_WriteByte(address > 255 ? 0x02|0x08 : 0x02);
  7108  07DD  3001               	movlw	1
  7109  07DE  0227               	subwf	SPI_Write@address+1,w
  7110  07DF  3000               	movlw	0
  7111  07E0  1903               	skipnz
  7112  07E1  0226               	subwf	SPI_Write@address,w
  7113  07E2  1803               	skipnc
  7114  07E3  2FE6               	goto	l3858
  7115  07E4  3002               	movlw	2
  7116  07E5  2FE7               	goto	L25
  7117  07E6                     l3858:
  7118  07E6  300A               	movlw	10
  7119  07E7                     L25:
  7120  07E7  00A9               	movwf	_SPI_Write$1308
  7121  07E8  3000               	movlw	0
  7122  07E9  00AA               	movwf	_SPI_Write$1308+1
  7123  07EA  0829               	movf	_SPI_Write$1308,w
  7124  07EB  160A  158A  241C  120A  118A  	fcall	_SPI_WriteByte
  7125                           
  7126                           ;spi_flash.c: 42: SPI_WriteByte(address);
  7127  07F0  1283               	bcf	3,5	;RP0=0, select bank0
  7128  07F1  0826               	movf	SPI_Write@address,w
  7129  07F2  160A  158A  241C  120A  118A  	fcall	_SPI_WriteByte
  7130                           
  7131                           ;spi_flash.c: 43: SPI_WriteByte(data);
  7132  07F7  1283               	bcf	3,5	;RP0=0, select bank0
  7133  07F8  0828               	movf	SPI_Write@data,w
  7134  07F9  160A  158A  241C   	fcall	_SPI_WriteByte
  7135                           
  7136                           ;spi_flash.c: 44: PORTAbits.RA5 = 1;
  7137  07FC  1283               	bcf	3,5	;RP0=0, select bank0
  7138  07FD  1685               	bsf	5,5	;volatile
  7139  07FE  0008               	return
  7140  07FF                     __end_of_SPI_Write:
  7141                           
  7142                           	psect	text27
  7143  1FB1                     __ptext27:	
  7144 ;; *************** function _LCD_string *****************
  7145 ;; Defined at:
  7146 ;;		line 89 in file "lcd.c"
  7147 ;; Parameters:    Size  Location     Type
  7148 ;;  st              2   14[BANK0 ] PTR unsigned char 
  7149 ;;		 -> str2(16), str(16), STR_1(13), 
  7150 ;; Auto vars:     Size  Location     Type
  7151 ;;  i               1   18[BANK0 ] unsigned char 
  7152 ;;  symbol          1   17[BANK0 ] unsigned char 
  7153 ;; Return value:  Size  Location     Type
  7154 ;;                  1    wreg      void 
  7155 ;; Registers used:
  7156 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  7157 ;; Tracked objects:
  7158 ;;		On entry : 300/0
  7159 ;;		On exit  : 300/0
  7160 ;;		Unchanged: 0/0
  7161 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7162 ;;      Params:         0       2       0       0       0
  7163 ;;      Locals:         0       2       0       0       0
  7164 ;;      Temps:          0       1       0       0       0
  7165 ;;      Totals:         0       5       0       0       0
  7166 ;;Total ram usage:        5 bytes
  7167 ;; Hardware stack levels used: 1
  7168 ;; Hardware stack levels required when called: 6
  7169 ;; This function calls:
  7170 ;;		_LCD_SetPos
  7171 ;;		_sendbyte
  7172 ;; This function is called by:
  7173 ;;		_main
  7174 ;;		_fMenuStrip
  7175 ;; This function uses a non-reentrant model
  7176 ;;
  7177                           
  7178                           
  7179                           ;psect for function _LCD_string
  7180  1FB1                     _LCD_string:
  7181                           
  7182                           ;lcd.c: 90: unsigned char symbol;;lcd.c: 91: unsigned char i = 0;
  7183                           
  7184                           ;incstack = 0
  7185 ;; using string table level
  7186                           ; Regs used in _LCD_string: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  7187  1FB1  01B2               	clrf	LCD_string@i
  7188  1FB2                     l3842:	
  7189                           ;lcd.c: 93: while(st[i] != '\0'){
  7190                           
  7191  1FB2  1283               	bcf	3,5	;RP0=0, select bank0
  7192  1FB3  1303               	bcf	3,6	;RP1=0, select bank0
  7193  1FB4  0832               	movf	LCD_string@i,w
  7194  1FB5  072E               	addwf	LCD_string@st,w
  7195  1FB6  0084               	movwf	4
  7196  1FB7  082F               	movf	LCD_string@st+1,w
  7197  1FB8  1803               	skipnc
  7198  1FB9  0A2F               	incf	LCD_string@st+1,w
  7199  1FBA  00FF               	movwf	127
  7200  1FBB  160A  118A  2000  160A  158A  	fcall	stringtab
  7201  1FC0  3A00               	xorlw	0
  7202  1FC1  1903               	btfsc	3,2
  7203  1FC2  0008               	return
  7204                           
  7205                           ;lcd.c: 94: if(i == 16 ) LCD_SetPos(0,1);
  7206  1FC3  3010               	movlw	16
  7207  1FC4  0632               	xorwf	LCD_string@i,w
  7208  1FC5  1D03               	btfss	3,2
  7209  1FC6  2FCF               	goto	l3832
  7210  1FC7  01AC               	clrf	LCD_SetPos@y
  7211  1FC8  0AAC               	incf	LCD_SetPos@y,f
  7212  1FC9  3000               	movlw	0
  7213  1FCA  160A  158A  24CB  160A  158A  	fcall	_LCD_SetPos
  7214  1FCF                     l3832:
  7215                           
  7216                           ;lcd.c: 100: symbol = st[i++];
  7217  1FCF  1283               	bcf	3,5	;RP0=0, select bank0
  7218  1FD0  1303               	bcf	3,6	;RP1=0, select bank0
  7219  1FD1  0832               	movf	LCD_string@i,w
  7220  1FD2  072E               	addwf	LCD_string@st,w
  7221  1FD3  0084               	movwf	4
  7222  1FD4  082F               	movf	LCD_string@st+1,w
  7223  1FD5  1803               	skipnc
  7224  1FD6  0A2F               	incf	LCD_string@st+1,w
  7225  1FD7  00FF               	movwf	127
  7226  1FD8  160A  118A  2000  160A  158A  	fcall	stringtab
  7227  1FDD  00B0               	movwf	??_LCD_string
  7228  1FDE  0830               	movf	??_LCD_string,w
  7229  1FDF  00B1               	movwf	LCD_string@symbol
  7230  1FE0  3001               	movlw	1
  7231  1FE1  00B0               	movwf	??_LCD_string
  7232  1FE2  0830               	movf	??_LCD_string,w
  7233  1FE3  07B2               	addwf	LCD_string@i,f
  7234                           
  7235                           ;lcd.c: 101: if(symbol > 0xBFu) symbol = SHRIFT[(symbol-0xC0u)];
  7236  1FE4  30C0               	movlw	192
  7237  1FE5  0231               	subwf	LCD_string@symbol,w
  7238  1FE6  1C03               	skipc
  7239  1FE7  2FF7               	goto	l3840
  7240  1FE8  0831               	movf	LCD_string@symbol,w
  7241  1FE9  3E52               	addlw	low ((_SHRIFT| (0+32768)+65344))
  7242  1FEA  0084               	movwf	4
  7243  1FEB  308F               	movlw	high ((_SHRIFT| (0+32768)+65344))
  7244  1FEC  1803               	skipnc
  7245  1FED  3E01               	addlw	1
  7246  1FEE  00FF               	movwf	127
  7247  1FEF  160A  118A  2000  160A  158A  	fcall	stringtab
  7248  1FF4  00B0               	movwf	??_LCD_string
  7249  1FF5  0830               	movf	??_LCD_string,w
  7250  1FF6  00B1               	movwf	LCD_string@symbol
  7251  1FF7                     l3840:
  7252                           
  7253                           ;lcd.c: 102: sendbyte(symbol,1);
  7254  1FF7  01A8               	clrf	sendbyte@mode
  7255  1FF8  0AA8               	incf	sendbyte@mode,f
  7256  1FF9  0831               	movf	LCD_string@symbol,w
  7257  1FFA  160A  118A  21FC  160A  158A  	fcall	_sendbyte
  7258  1FFF  2FB2               	goto	l3842
  7259  2000                     __end_of_LCD_string:
  7260                           
  7261                           	psect	text28
  7262  1CCB                     __ptext28:	
  7263 ;; *************** function _LCD_SetPos *****************
  7264 ;; Defined at:
  7265 ;;		line 107 in file "lcd.c"
  7266 ;; Parameters:    Size  Location     Type
  7267 ;;  x               1    wreg     unsigned char 
  7268 ;;  y               1   12[BANK0 ] unsigned char 
  7269 ;; Auto vars:     Size  Location     Type
  7270 ;;  x               1   13[BANK0 ] unsigned char 
  7271 ;; Return value:  Size  Location     Type
  7272 ;;                  1    wreg      void 
  7273 ;; Registers used:
  7274 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  7275 ;; Tracked objects:
  7276 ;;		On entry : 300/0
  7277 ;;		On exit  : 0/0
  7278 ;;		Unchanged: 0/0
  7279 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7280 ;;      Params:         0       1       0       0       0
  7281 ;;      Locals:         0       1       0       0       0
  7282 ;;      Temps:          0       0       0       0       0
  7283 ;;      Totals:         0       2       0       0       0
  7284 ;;Total ram usage:        2 bytes
  7285 ;; Hardware stack levels used: 1
  7286 ;; Hardware stack levels required when called: 5
  7287 ;; This function calls:
  7288 ;;		_sendbyte
  7289 ;; This function is called by:
  7290 ;;		_main
  7291 ;;		_LCD_string
  7292 ;;		_fMenuStrip
  7293 ;; This function uses a non-reentrant model
  7294 ;;
  7295                           
  7296                           
  7297                           ;psect for function _LCD_SetPos
  7298  1CCB                     _LCD_SetPos:
  7299                           
  7300                           ;incstack = 0
  7301                           ; Regs used in _LCD_SetPos: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  7302                           ;LCD_SetPos@x stored from wreg
  7303  1CCB  00AD               	movwf	LCD_SetPos@x
  7304                           
  7305                           ;lcd.c: 108: switch(y){
  7306  1CCC  2CDC               	goto	l3594
  7307  1CCD                     l3588:
  7308                           
  7309                           ;lcd.c: 110: sendbyte((unsigned char)(x|0x80),0);
  7310  1CCD  01A8               	clrf	sendbyte@mode
  7311  1CCE  082D               	movf	LCD_SetPos@x,w
  7312  1CCF  3880               	iorlw	128
  7313  1CD0  160A  118A  21FC   	fcall	_sendbyte
  7314                           
  7315                           ;lcd.c: 111: break;
  7316  1CD3  0008               	return
  7317  1CD4                     l3590:
  7318                           
  7319                           ;lcd.c: 113: sendbyte((unsigned char)((0x40+x)|0x80),0);
  7320  1CD4  01A8               	clrf	sendbyte@mode
  7321  1CD5  082D               	movf	LCD_SetPos@x,w
  7322  1CD6  3E40               	addlw	64
  7323  1CD7  3880               	iorlw	128
  7324  1CD8  160A  118A  21FC   	fcall	_sendbyte
  7325                           
  7326                           ;lcd.c: 114: break;
  7327  1CDB  0008               	return
  7328  1CDC                     l3594:
  7329  1CDC  082C               	movf	LCD_SetPos@y,w
  7330                           
  7331                           ; Switch size 1, requested type "simple"
  7332                           ; Number of cases is 2, Range of values is 0 to 1
  7333                           ; switch strategies available:
  7334                           ; Name         Instructions Cycles
  7335                           ; simple_byte            7     4 (average)
  7336                           ; direct_byte           14     8 (fixed)
  7337                           ; jumptable            260     6 (fixed)
  7338                           ;	Chosen strategy is simple_byte
  7339  1CDD  3A00               	xorlw	0	; case 0
  7340  1CDE  1903               	skipnz
  7341  1CDF  2CCD               	goto	l3588
  7342  1CE0  3A01               	xorlw	1	; case 1
  7343  1CE1  1903               	skipnz
  7344  1CE2  2CD4               	goto	l3590
  7345  1CE3  2CE4               	goto	l358
  7346  1CE4                     l358:
  7347  1CE4  0008               	return
  7348  1CE5                     __end_of_LCD_SetPos:
  7349                           
  7350                           	psect	text29
  7351  1CB2                     __ptext29:	
  7352 ;; *************** function _LCD_StringOnOff *****************
  7353 ;; Defined at:
  7354 ;;		line 123 in file "lcd.c"
  7355 ;; Parameters:    Size  Location     Type
  7356 ;;  st              1    wreg     const unsigned char 
  7357 ;;  numb            1    0[BANK0 ] const unsigned char 
  7358 ;; Auto vars:     Size  Location     Type
  7359 ;;  st              1    2[BANK0 ] const unsigned char 
  7360 ;; Return value:  Size  Location     Type
  7361 ;;                  2    0[BANK0 ] PTR unsigned char 
  7362 ;; Registers used:
  7363 ;;		wreg, status,2, status,0
  7364 ;; Tracked objects:
  7365 ;;		On entry : 300/100
  7366 ;;		On exit  : 300/0
  7367 ;;		Unchanged: 0/0
  7368 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7369 ;;      Params:         0       1       0       0       0
  7370 ;;      Locals:         0       1       0       0       0
  7371 ;;      Temps:          0       1       0       0       0
  7372 ;;      Totals:         0       3       0       0       0
  7373 ;;Total ram usage:        3 bytes
  7374 ;; Hardware stack levels used: 1
  7375 ;; Hardware stack levels required when called: 2
  7376 ;; This function calls:
  7377 ;;		Nothing
  7378 ;; This function is called by:
  7379 ;;		_fMenuStrip
  7380 ;; This function uses a non-reentrant model
  7381 ;;
  7382                           
  7383                           
  7384                           ;psect for function _LCD_StringOnOff
  7385  1CB2                     _LCD_StringOnOff:
  7386                           
  7387                           ;incstack = 0
  7388                           ; Regs used in _LCD_StringOnOff: [wreg+status,2+status,0]
  7389                           ;LCD_StringOnOff@st stored from wreg
  7390  1CB2  1283               	bcf	3,5	;RP0=0, select bank0
  7391  1CB3  00A2               	movwf	LCD_StringOnOff@st
  7392                           
  7393                           ;lcd.c: 124: if(st & (1u << numb)) return "Âêë";
  7394  1CB4  3001               	movlw	1
  7395  1CB5  00A1               	movwf	??_LCD_StringOnOff
  7396  1CB6  0A20               	incf	LCD_StringOnOff@numb,w
  7397  1CB7  2CBA               	goto	u4274
  7398  1CB8                     u4275:
  7399  1CB8  1003               	clrc
  7400  1CB9  0DA1               	rlf	??_LCD_StringOnOff,f
  7401  1CBA                     u4274:
  7402  1CBA  3EFF               	addlw	-1
  7403  1CBB  1D03               	skipz
  7404  1CBC  2CB8               	goto	u4275
  7405  1CBD  0821               	movf	??_LCD_StringOnOff,w
  7406  1CBE  0522               	andwf	LCD_StringOnOff@st,w
  7407  1CBF  1903               	btfsc	3,2
  7408  1CC0  2CC6               	goto	l3882
  7409  1CC1  30F0               	movlw	low (STR_2| (0+32768))
  7410  1CC2  00A0               	movwf	?_LCD_StringOnOff
  7411  1CC3  3091               	movlw	high (STR_2| (0+32768))
  7412  1CC4  00A1               	movwf	?_LCD_StringOnOff+1
  7413  1CC5  0008               	return
  7414  1CC6                     l3882:
  7415                           
  7416                           ;lcd.c: 125: else return "Âûêë";
  7417  1CC6  30E3               	movlw	low (STR_3| (0+32768))
  7418  1CC7  00A0               	movwf	?_LCD_StringOnOff
  7419  1CC8  3091               	movlw	high (STR_3| (0+32768))
  7420  1CC9  00A1               	movwf	?_LCD_StringOnOff+1
  7421  1CCA  0008               	return
  7422  1CCB                     __end_of_LCD_StringOnOff:
  7423                           
  7424                           	psect	text30
  7425  1F62                     __ptext30:	
  7426 ;; *************** function _fACP *****************
  7427 ;; Defined at:
  7428 ;;		line 62 in file "newmain.c"
  7429 ;; Parameters:    Size  Location     Type
  7430 ;;		None
  7431 ;; Auto vars:     Size  Location     Type
  7432 ;;		None
  7433 ;; Return value:  Size  Location     Type
  7434 ;;                  1    wreg      void 
  7435 ;; Registers used:
  7436 ;;		wreg
  7437 ;; Tracked objects:
  7438 ;;		On entry : 300/100
  7439 ;;		On exit  : 300/100
  7440 ;;		Unchanged: 0/0
  7441 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7442 ;;      Params:         0       0       0       0       0
  7443 ;;      Locals:         0       0       0       0       0
  7444 ;;      Temps:          0       2       0       0       0
  7445 ;;      Totals:         0       2       0       0       0
  7446 ;;Total ram usage:        2 bytes
  7447 ;; Hardware stack levels used: 1
  7448 ;; Hardware stack levels required when called: 2
  7449 ;; This function calls:
  7450 ;;		Nothing
  7451 ;; This function is called by:
  7452 ;;		_main
  7453 ;; This function uses a non-reentrant model
  7454 ;;
  7455                           
  7456                           
  7457                           ;psect for function _fACP
  7458  1F62                     _fACP:
  7459                           
  7460                           ;newmain.c: 64: ADCON0bits.CHS2 = 0;
  7461                           
  7462                           ;incstack = 0
  7463                           ; Regs used in _fACP: [wreg]
  7464  1F62  1283               	bcf	3,5	;RP0=0, select bank0
  7465  1F63  129F               	bcf	31,5	;volatile
  7466                           
  7467                           ;newmain.c: 65: ADCON0bits.CHS1 = 0;
  7468  1F64  121F               	bcf	31,4	;volatile
  7469                           
  7470                           ;newmain.c: 66: ADCON0bits.CHS0 = 0;
  7471  1F65  119F               	bcf	31,3	;volatile
  7472                           
  7473                           ;newmain.c: 67: ADCON0bits.ADON = 1;
  7474  1F66  141F               	bsf	31,0	;volatile
  7475                           
  7476                           ;newmain.c: 68: _delay((unsigned long)((1)*(8000000/4000.0)));
  7477  1F67  3003               	movlw	3
  7478  1F68  1283               	bcf	3,5	;RP0=0, select bank0
  7479  1F69  1303               	bcf	3,6	;RP1=0, select bank0
  7480  1F6A  00A1               	movwf	??_fACP+1
  7481  1F6B  3097               	movlw	151
  7482  1F6C  00A0               	movwf	??_fACP
  7483  1F6D                     u6457:
  7484  1F6D  0BA0               	decfsz	??_fACP,f
  7485  1F6E  2F6D               	goto	u6457
  7486  1F6F  0BA1               	decfsz	??_fACP+1,f
  7487  1F70  2F6D               	goto	u6457
  7488                           
  7489                           ;newmain.c: 69: ADCON0bits.GO_nDONE = 1;
  7490  1F71  1283               	bcf	3,5	;RP0=0, select bank0
  7491  1F72  1303               	bcf	3,6	;RP1=0, select bank0
  7492  1F73  151F               	bsf	31,2	;volatile
  7493  1F74                     l164:	
  7494                           ;newmain.c: 70: while(GO_DONE);
  7495                           
  7496  1F74  191F               	btfsc	31,2	;volatile
  7497  1F75  2F74               	goto	l164
  7498                           
  7499                           ;newmain.c: 71: ADCON0bits.ADON = 0;
  7500  1F76  101F               	bcf	31,0	;volatile
  7501                           
  7502                           ;newmain.c: 72: Analog.AI0 = ADRES;
  7503  1F77  081E               	movf	30,w	;volatile
  7504  1F78  00A0               	movwf	??_fACP
  7505  1F79  0820               	movf	??_fACP,w
  7506  1F7A  1683               	bsf	3,5	;RP0=1, select bank1
  7507  1F7B  00A4               	movwf	_Analog^(0+128)
  7508                           
  7509                           ;newmain.c: 74: ADCON0bits.CHS2 = 0;
  7510  1F7C  1283               	bcf	3,5	;RP0=0, select bank0
  7511  1F7D  129F               	bcf	31,5	;volatile
  7512                           
  7513                           ;newmain.c: 75: ADCON0bits.CHS1 = 0;
  7514  1F7E  121F               	bcf	31,4	;volatile
  7515                           
  7516                           ;newmain.c: 76: ADCON0bits.CHS0 = 1;
  7517  1F7F  159F               	bsf	31,3	;volatile
  7518                           
  7519                           ;newmain.c: 77: ADCON0bits.ADON = 1;
  7520  1F80  141F               	bsf	31,0	;volatile
  7521                           
  7522                           ;newmain.c: 78: _delay((unsigned long)((1)*(8000000/4000.0)));
  7523  1F81  3003               	movlw	3
  7524  1F82  1283               	bcf	3,5	;RP0=0, select bank0
  7525  1F83  1303               	bcf	3,6	;RP1=0, select bank0
  7526  1F84  00A1               	movwf	??_fACP+1
  7527  1F85  3097               	movlw	151
  7528  1F86  00A0               	movwf	??_fACP
  7529  1F87                     u6467:
  7530  1F87  0BA0               	decfsz	??_fACP,f
  7531  1F88  2F87               	goto	u6467
  7532  1F89  0BA1               	decfsz	??_fACP+1,f
  7533  1F8A  2F87               	goto	u6467
  7534                           
  7535                           ;newmain.c: 79: ADCON0bits.GO_nDONE = 1;
  7536  1F8B  1283               	bcf	3,5	;RP0=0, select bank0
  7537  1F8C  1303               	bcf	3,6	;RP1=0, select bank0
  7538  1F8D  151F               	bsf	31,2	;volatile
  7539  1F8E                     l167:	
  7540                           ;newmain.c: 80: while(GO_DONE);
  7541                           
  7542  1F8E  191F               	btfsc	31,2	;volatile
  7543  1F8F  2F8E               	goto	l167
  7544                           
  7545                           ;newmain.c: 81: ADCON0bits.ADON = 0;
  7546  1F90  101F               	bcf	31,0	;volatile
  7547                           
  7548                           ;newmain.c: 82: Analog.AI1 = ADRES;
  7549  1F91  081E               	movf	30,w	;volatile
  7550  1F92  00A0               	movwf	??_fACP
  7551  1F93  0820               	movf	??_fACP,w
  7552  1F94  1683               	bsf	3,5	;RP0=1, select bank1
  7553  1F95  00A5               	movwf	(_Analog^(0+128)+1)
  7554                           
  7555                           ;newmain.c: 84: ADCON0bits.CHS2 = 0;
  7556  1F96  1283               	bcf	3,5	;RP0=0, select bank0
  7557  1F97  129F               	bcf	31,5	;volatile
  7558                           
  7559                           ;newmain.c: 85: ADCON0bits.CHS1 = 1;
  7560  1F98  161F               	bsf	31,4	;volatile
  7561                           
  7562                           ;newmain.c: 86: ADCON0bits.CHS0 = 1;
  7563  1F99  159F               	bsf	31,3	;volatile
  7564                           
  7565                           ;newmain.c: 87: ADCON0bits.ADON = 1;
  7566  1F9A  141F               	bsf	31,0	;volatile
  7567                           
  7568                           ;newmain.c: 88: _delay((unsigned long)((1)*(8000000/4000.0)));
  7569  1F9B  3003               	movlw	3
  7570  1F9C  1283               	bcf	3,5	;RP0=0, select bank0
  7571  1F9D  1303               	bcf	3,6	;RP1=0, select bank0
  7572  1F9E  00A1               	movwf	??_fACP+1
  7573  1F9F  3097               	movlw	151
  7574  1FA0  00A0               	movwf	??_fACP
  7575  1FA1                     u6477:
  7576  1FA1  0BA0               	decfsz	??_fACP,f
  7577  1FA2  2FA1               	goto	u6477
  7578  1FA3  0BA1               	decfsz	??_fACP+1,f
  7579  1FA4  2FA1               	goto	u6477
  7580                           
  7581                           ;newmain.c: 89: ADCON0bits.GO_nDONE = 1;
  7582  1FA5  1283               	bcf	3,5	;RP0=0, select bank0
  7583  1FA6  1303               	bcf	3,6	;RP1=0, select bank0
  7584  1FA7  151F               	bsf	31,2	;volatile
  7585  1FA8                     l170:	
  7586                           ;newmain.c: 90: while(GO_DONE);
  7587                           
  7588  1FA8  191F               	btfsc	31,2	;volatile
  7589  1FA9  2FA8               	goto	l170
  7590                           
  7591                           ;newmain.c: 91: ADCON0bits.ADON = 0;
  7592  1FAA  101F               	bcf	31,0	;volatile
  7593                           
  7594                           ;newmain.c: 92: Analog.AI2 = ADRES;
  7595  1FAB  081E               	movf	30,w	;volatile
  7596  1FAC  00A0               	movwf	??_fACP
  7597  1FAD  0820               	movf	??_fACP,w
  7598  1FAE  1683               	bsf	3,5	;RP0=1, select bank1
  7599  1FAF  00A6               	movwf	(_Analog^(0+128)+2)
  7600  1FB0  0008               	return
  7601  1FB1                     __end_of_fACP:
  7602                           
  7603                           	psect	text31
  7604  1C9C                     __ptext31:	
  7605 ;; *************** function _SPI_init *****************
  7606 ;; Defined at:
  7607 ;;		line 3 in file "spi_flash.c"
  7608 ;; Parameters:    Size  Location     Type
  7609 ;;		None
  7610 ;; Auto vars:     Size  Location     Type
  7611 ;;		None
  7612 ;; Return value:  Size  Location     Type
  7613 ;;                  1    wreg      void 
  7614 ;; Registers used:
  7615 ;;		None
  7616 ;; Tracked objects:
  7617 ;;		On entry : 0/0
  7618 ;;		On exit  : 300/0
  7619 ;;		Unchanged: 0/0
  7620 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7621 ;;      Params:         0       0       0       0       0
  7622 ;;      Locals:         0       0       0       0       0
  7623 ;;      Temps:          0       0       0       0       0
  7624 ;;      Totals:         0       0       0       0       0
  7625 ;;Total ram usage:        0 bytes
  7626 ;; Hardware stack levels used: 1
  7627 ;; Hardware stack levels required when called: 2
  7628 ;; This function calls:
  7629 ;;		Nothing
  7630 ;; This function is called by:
  7631 ;;		_main
  7632 ;; This function uses a non-reentrant model
  7633 ;;
  7634                           
  7635                           
  7636                           ;psect for function _SPI_init
  7637  1C9C                     _SPI_init:
  7638                           
  7639                           ;spi_flash.c: 4: TRISCbits.TRISC4 = 1;
  7640                           
  7641                           ;incstack = 0
  7642                           ; Regs used in _SPI_init: []
  7643  1C9C  1683               	bsf	3,5	;RP0=1, select bank1
  7644  1C9D  1303               	bcf	3,6	;RP1=0, select bank1
  7645  1C9E  1607               	bsf	7,4	;volatile
  7646                           
  7647                           ;spi_flash.c: 5: TRISCbits.TRISC5 = 0;
  7648  1C9F  1287               	bcf	7,5	;volatile
  7649                           
  7650                           ;spi_flash.c: 6: TRISCbits.TRISC3 = 0;
  7651  1CA0  1187               	bcf	7,3	;volatile
  7652                           
  7653                           ;spi_flash.c: 7: TRISAbits.TRISA5 = 0;
  7654  1CA1  1285               	bcf	5,5	;volatile
  7655                           
  7656                           ;spi_flash.c: 9: PORTAbits.RA5 = 1;
  7657  1CA2  1283               	bcf	3,5	;RP0=0, select bank0
  7658  1CA3  1685               	bsf	5,5	;volatile
  7659                           
  7660                           ;spi_flash.c: 11: SSPSTATbits.SMP = 0;
  7661  1CA4  1683               	bsf	3,5	;RP0=1, select bank1
  7662  1CA5  1394               	bcf	20,7	;volatile
  7663                           
  7664                           ;spi_flash.c: 12: SSPSTATbits.CKE = 1;
  7665  1CA6  1714               	bsf	20,6	;volatile
  7666                           
  7667                           ;spi_flash.c: 13: SSPSTATbits.BF = 0;
  7668  1CA7  1014               	bcf	20,0	;volatile
  7669                           
  7670                           ;spi_flash.c: 15: SSPCONbits.WCOL = 0;
  7671  1CA8  1283               	bcf	3,5	;RP0=0, select bank0
  7672  1CA9  1394               	bcf	20,7	;volatile
  7673                           
  7674                           ;spi_flash.c: 16: SSPCONbits.SSPOV = 0;
  7675  1CAA  1314               	bcf	20,6	;volatile
  7676                           
  7677                           ;spi_flash.c: 17: SSPCONbits.SSPEN = 1;
  7678  1CAB  1694               	bsf	20,5	;volatile
  7679                           
  7680                           ;spi_flash.c: 18: SSPCONbits.CKP = 0;
  7681  1CAC  1214               	bcf	20,4	;volatile
  7682                           
  7683                           ;spi_flash.c: 19: SSPCONbits.SSPM3 = 0;
  7684  1CAD  1194               	bcf	20,3	;volatile
  7685                           
  7686                           ;spi_flash.c: 20: SSPCONbits.SSPM2 = 0;
  7687  1CAE  1114               	bcf	20,2	;volatile
  7688                           
  7689                           ;spi_flash.c: 21: SSPCONbits.SSPM1 = 0;
  7690  1CAF  1094               	bcf	20,1	;volatile
  7691                           
  7692                           ;spi_flash.c: 22: SSPCONbits.SSPM0 = 1;
  7693  1CB0  1414               	bsf	20,0	;volatile
  7694  1CB1  0008               	return
  7695  1CB2                     __end_of_SPI_init:
  7696                           
  7697                           	psect	text32
  7698  1D9A                     __ptext32:	
  7699 ;; *************** function _SPI_Read *****************
  7700 ;; Defined at:
  7701 ;;		line 46 in file "spi_flash.c"
  7702 ;; Parameters:    Size  Location     Type
  7703 ;;  address         2    6[BANK0 ] unsigned int 
  7704 ;; Auto vars:     Size  Location     Type
  7705 ;;  data            1   11[BANK0 ] unsigned char 
  7706 ;; Return value:  Size  Location     Type
  7707 ;;                  1    wreg      unsigned char 
  7708 ;; Registers used:
  7709 ;;		wreg, status,2, status,0, pclath, cstack
  7710 ;; Tracked objects:
  7711 ;;		On entry : 300/0
  7712 ;;		On exit  : 300/0
  7713 ;;		Unchanged: 0/0
  7714 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7715 ;;      Params:         0       2       0       0       0
  7716 ;;      Locals:         0       3       0       0       0
  7717 ;;      Temps:          0       1       0       0       0
  7718 ;;      Totals:         0       6       0       0       0
  7719 ;;Total ram usage:        6 bytes
  7720 ;; Hardware stack levels used: 1
  7721 ;; Hardware stack levels required when called: 6
  7722 ;; This function calls:
  7723 ;;		_SPI_ReadByte
  7724 ;;		_SPI_WriteByte
  7725 ;;		_SPI_notRDY
  7726 ;; This function is called by:
  7727 ;;		_main
  7728 ;; This function uses a non-reentrant model
  7729 ;;
  7730                           
  7731                           
  7732                           ;psect for function _SPI_Read
  7733  1D9A                     _SPI_Read:
  7734  1D9A                     l4462:	
  7735                           ;spi_flash.c: 47: while(SPI_notRDY() == 1);
  7736                           
  7737                           ;incstack = 0
  7738                           ; Regs used in _SPI_Read: [wreg+status,2+status,0+pclath+cstack]
  7739                           
  7740  1D9A  160A  158A  243C  160A  158A  	fcall	_SPI_notRDY
  7741  1D9F  3A01               	xorlw	1
  7742  1DA0  1903               	skipnz
  7743  1DA1  2D9A               	goto	l4462
  7744                           
  7745                           ;spi_flash.c: 48: PORTAbits.RA5 = 0;
  7746  1DA2  1285               	bcf	5,5	;volatile
  7747                           
  7748                           ;spi_flash.c: 49: SPI_WriteByte(address > 255 ? 0x03|0x08 : 0x03);
  7749  1DA3  3001               	movlw	1
  7750  1DA4  0227               	subwf	SPI_Read@address+1,w
  7751  1DA5  3000               	movlw	0
  7752  1DA6  1903               	skipnz
  7753  1DA7  0226               	subwf	SPI_Read@address,w
  7754  1DA8  1803               	skipnc
  7755  1DA9  2DAC               	goto	l4468
  7756  1DAA  3003               	movlw	3
  7757  1DAB  2DAD               	goto	L26
  7758  1DAC                     l4468:
  7759  1DAC  300B               	movlw	11
  7760  1DAD                     L26:
  7761  1DAD  00A9               	movwf	_SPI_Read$1311
  7762  1DAE  3000               	movlw	0
  7763  1DAF  00AA               	movwf	_SPI_Read$1311+1
  7764  1DB0  0829               	movf	_SPI_Read$1311,w
  7765  1DB1  160A  158A  241C  160A  158A  	fcall	_SPI_WriteByte
  7766                           
  7767                           ;spi_flash.c: 52: SPI_WriteByte(address);
  7768  1DB6  1283               	bcf	3,5	;RP0=0, select bank0
  7769  1DB7  0826               	movf	SPI_Read@address,w
  7770  1DB8  160A  158A  241C  160A  158A  	fcall	_SPI_WriteByte
  7771                           
  7772                           ;spi_flash.c: 53: char data = SPI_ReadByte(0);
  7773  1DBD  3000               	movlw	0
  7774  1DBE  160A  158A  2433   	fcall	_SPI_ReadByte
  7775  1DC1  00A8               	movwf	??_SPI_Read
  7776  1DC2  0828               	movf	??_SPI_Read,w
  7777  1DC3  00AB               	movwf	SPI_Read@data
  7778                           
  7779                           ;spi_flash.c: 54: PORTAbits.RA5 = 1;
  7780  1DC4  1685               	bsf	5,5	;volatile
  7781                           
  7782                           ;spi_flash.c: 55: return data;
  7783  1DC5  082B               	movf	SPI_Read@data,w
  7784  1DC6  0008               	return
  7785  1DC7                     __end_of_SPI_Read:
  7786                           
  7787                           	psect	text33
  7788  1C3C                     __ptext33:	
  7789 ;; *************** function _SPI_notRDY *****************
  7790 ;; Defined at:
  7791 ;;		line 74 in file "spi_flash.c"
  7792 ;; Parameters:    Size  Location     Type
  7793 ;;		None
  7794 ;; Auto vars:     Size  Location     Type
  7795 ;;  notRDY          1    5[BANK0 ] unsigned char 
  7796 ;; Return value:  Size  Location     Type
  7797 ;;                  1    wreg      unsigned char 
  7798 ;; Registers used:
  7799 ;;		wreg, status,2, status,0, pclath, cstack
  7800 ;; Tracked objects:
  7801 ;;		On entry : 300/0
  7802 ;;		On exit  : 300/0
  7803 ;;		Unchanged: 0/0
  7804 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7805 ;;      Params:         0       0       0       0       0
  7806 ;;      Locals:         0       1       0       0       0
  7807 ;;      Temps:          0       1       0       0       0
  7808 ;;      Totals:         0       2       0       0       0
  7809 ;;Total ram usage:        2 bytes
  7810 ;; Hardware stack levels used: 1
  7811 ;; Hardware stack levels required when called: 5
  7812 ;; This function calls:
  7813 ;;		_SPI_ReadStatus
  7814 ;; This function is called by:
  7815 ;;		_SPI_Write
  7816 ;;		_SPI_Read
  7817 ;; This function uses a non-reentrant model
  7818 ;;
  7819                           
  7820                           
  7821                           ;psect for function _SPI_notRDY
  7822  1C3C                     _SPI_notRDY:
  7823                           
  7824                           ;spi_flash.c: 75: char notRDY = SPI_ReadStatus();
  7825                           
  7826                           ;incstack = 0
  7827                           ; Regs used in _SPI_notRDY: [wreg+status,2+status,0+pclath+cstack]
  7828  1C3C  160A  158A  2453   	fcall	_SPI_ReadStatus
  7829  1C3F  00A4               	movwf	??_SPI_notRDY
  7830  1C40  0824               	movf	??_SPI_notRDY,w
  7831  1C41  00A5               	movwf	SPI_notRDY@notRDY
  7832                           
  7833                           ;spi_flash.c: 76: return (notRDY & 0x01);
  7834  1C42  0825               	movf	SPI_notRDY@notRDY,w
  7835  1C43  3901               	andlw	1
  7836  1C44  0008               	return
  7837  1C45                     __end_of_SPI_notRDY:
  7838                           
  7839                           	psect	text34
  7840  1C53                     __ptext34:	
  7841 ;; *************** function _SPI_ReadStatus *****************
  7842 ;; Defined at:
  7843 ;;		line 57 in file "spi_flash.c"
  7844 ;; Parameters:    Size  Location     Type
  7845 ;;		None
  7846 ;; Auto vars:     Size  Location     Type
  7847 ;;  status          1    3[BANK0 ] unsigned char 
  7848 ;; Return value:  Size  Location     Type
  7849 ;;                  1    wreg      unsigned char 
  7850 ;; Registers used:
  7851 ;;		wreg, status,2, status,0, pclath, cstack
  7852 ;; Tracked objects:
  7853 ;;		On entry : 300/0
  7854 ;;		On exit  : 300/0
  7855 ;;		Unchanged: 0/0
  7856 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7857 ;;      Params:         0       0       0       0       0
  7858 ;;      Locals:         0       1       0       0       0
  7859 ;;      Temps:          0       1       0       0       0
  7860 ;;      Totals:         0       2       0       0       0
  7861 ;;Total ram usage:        2 bytes
  7862 ;; Hardware stack levels used: 1
  7863 ;; Hardware stack levels required when called: 4
  7864 ;; This function calls:
  7865 ;;		_SPI_ReadByte
  7866 ;;		_SPI_WriteByte
  7867 ;; This function is called by:
  7868 ;;		_SPI_notRDY
  7869 ;; This function uses a non-reentrant model
  7870 ;;
  7871                           
  7872                           
  7873                           ;psect for function _SPI_ReadStatus
  7874  1C53                     _SPI_ReadStatus:
  7875                           
  7876                           ;spi_flash.c: 58: PORTAbits.RA5 = 0;
  7877                           
  7878                           ;incstack = 0
  7879                           ; Regs used in _SPI_ReadStatus: [wreg+status,2+status,0+pclath+cstack]
  7880  1C53  1285               	bcf	5,5	;volatile
  7881                           
  7882                           ;spi_flash.c: 59: SPI_WriteByte(0x05);
  7883  1C54  3005               	movlw	5
  7884  1C55  160A  158A  241C  160A  158A  	fcall	_SPI_WriteByte
  7885                           
  7886                           ;spi_flash.c: 60: char status = SPI_ReadByte(0);
  7887  1C5A  3000               	movlw	0
  7888  1C5B  160A  158A  2433   	fcall	_SPI_ReadByte
  7889  1C5E  00A2               	movwf	??_SPI_ReadStatus
  7890  1C5F  0822               	movf	??_SPI_ReadStatus,w
  7891  1C60  00A3               	movwf	SPI_ReadStatus@status
  7892                           
  7893                           ;spi_flash.c: 61: PORTAbits.RA5 = 1;
  7894  1C61  1685               	bsf	5,5	;volatile
  7895                           
  7896                           ;spi_flash.c: 62: return status;
  7897  1C62  0823               	movf	SPI_ReadStatus@status,w
  7898  1C63  0008               	return
  7899  1C64                     __end_of_SPI_ReadStatus:
  7900                           
  7901                           	psect	text35
  7902  1C33                     __ptext35:	
  7903 ;; *************** function _SPI_ReadByte *****************
  7904 ;; Defined at:
  7905 ;;		line 28 in file "spi_flash.c"
  7906 ;; Parameters:    Size  Location     Type
  7907 ;;  data            1    wreg     unsigned char 
  7908 ;; Auto vars:     Size  Location     Type
  7909 ;;  data            1    1[BANK0 ] unsigned char 
  7910 ;; Return value:  Size  Location     Type
  7911 ;;                  1    wreg      unsigned char 
  7912 ;; Registers used:
  7913 ;;		wreg, status,2, status,0, pclath, cstack
  7914 ;; Tracked objects:
  7915 ;;		On entry : 300/100
  7916 ;;		On exit  : 300/0
  7917 ;;		Unchanged: 0/0
  7918 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7919 ;;      Params:         0       0       0       0       0
  7920 ;;      Locals:         0       1       0       0       0
  7921 ;;      Temps:          0       0       0       0       0
  7922 ;;      Totals:         0       1       0       0       0
  7923 ;;Total ram usage:        1 bytes
  7924 ;; Hardware stack levels used: 1
  7925 ;; Hardware stack levels required when called: 3
  7926 ;; This function calls:
  7927 ;;		_SPI_WriteByte
  7928 ;; This function is called by:
  7929 ;;		_SPI_Read
  7930 ;;		_SPI_ReadStatus
  7931 ;; This function uses a non-reentrant model
  7932 ;;
  7933                           
  7934                           
  7935                           ;psect for function _SPI_ReadByte
  7936  1C33                     _SPI_ReadByte:
  7937                           
  7938                           ;incstack = 0
  7939                           ; Regs used in _SPI_ReadByte: [wreg+status,2+status,0+pclath+cstack]
  7940                           ;SPI_ReadByte@data stored from wreg
  7941  1C33  1283               	bcf	3,5	;RP0=0, select bank0
  7942  1C34  00A1               	movwf	SPI_ReadByte@data
  7943                           
  7944                           ;spi_flash.c: 29: SPI_WriteByte(data);
  7945  1C35  0821               	movf	SPI_ReadByte@data,w
  7946  1C36  160A  158A  241C   	fcall	_SPI_WriteByte
  7947                           
  7948                           ;spi_flash.c: 30: return SSPBUF;
  7949  1C39  1283               	bcf	3,5	;RP0=0, select bank0
  7950  1C3A  0813               	movf	19,w	;volatile
  7951  1C3B  0008               	return
  7952  1C3C                     __end_of_SPI_ReadByte:
  7953                           
  7954                           	psect	text36
  7955  1C1C                     __ptext36:	
  7956 ;; *************** function _SPI_WriteByte *****************
  7957 ;; Defined at:
  7958 ;;		line 24 in file "spi_flash.c"
  7959 ;; Parameters:    Size  Location     Type
  7960 ;;  data            1    wreg     unsigned char 
  7961 ;; Auto vars:     Size  Location     Type
  7962 ;;  data            1    0[BANK0 ] unsigned char 
  7963 ;; Return value:  Size  Location     Type
  7964 ;;                  1    wreg      void 
  7965 ;; Registers used:
  7966 ;;		wreg
  7967 ;; Tracked objects:
  7968 ;;		On entry : 300/0
  7969 ;;		On exit  : 300/100
  7970 ;;		Unchanged: 0/0
  7971 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7972 ;;      Params:         0       0       0       0       0
  7973 ;;      Locals:         0       1       0       0       0
  7974 ;;      Temps:          0       0       0       0       0
  7975 ;;      Totals:         0       1       0       0       0
  7976 ;;Total ram usage:        1 bytes
  7977 ;; Hardware stack levels used: 1
  7978 ;; Hardware stack levels required when called: 2
  7979 ;; This function calls:
  7980 ;;		Nothing
  7981 ;; This function is called by:
  7982 ;;		_SPI_ReadByte
  7983 ;;		_SPI_Write
  7984 ;;		_SPI_Read
  7985 ;;		_SPI_ReadStatus
  7986 ;; This function uses a non-reentrant model
  7987 ;;
  7988                           
  7989                           
  7990                           ;psect for function _SPI_WriteByte
  7991  1C1C                     _SPI_WriteByte:
  7992                           
  7993                           ;incstack = 0
  7994                           ; Regs used in _SPI_WriteByte: [wreg]
  7995                           ;SPI_WriteByte@data stored from wreg
  7996  1C1C  00A0               	movwf	SPI_WriteByte@data
  7997                           
  7998                           ;spi_flash.c: 25: SSPBUF = data;
  7999  1C1D  0820               	movf	SPI_WriteByte@data,w
  8000  1C1E  0093               	movwf	19	;volatile
  8001  1C1F                     l721:	
  8002                           ;spi_flash.c: 26: while(SSPSTATbits.BF == 0);
  8003                           
  8004  1C1F  1683               	bsf	3,5	;RP0=1, select bank1
  8005  1C20  1814               	btfsc	20,0	;volatile
  8006  1C21  0008               	return
  8007  1C22  2C1F               	goto	l721
  8008  1C23                     __end_of_SPI_WriteByte:
  8009                           
  8010                           	psect	text37
  8011  1339                     __ptext37:	
  8012 ;; *************** function _LCD_init *****************
  8013 ;; Defined at:
  8014 ;;		line 18 in file "lcd.c"
  8015 ;; Parameters:    Size  Location     Type
  8016 ;;		None
  8017 ;; Auto vars:     Size  Location     Type
  8018 ;;		None
  8019 ;; Return value:  Size  Location     Type
  8020 ;;                  1    wreg      void 
  8021 ;; Registers used:
  8022 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  8023 ;; Tracked objects:
  8024 ;;		On entry : 300/0
  8025 ;;		On exit  : 0/0
  8026 ;;		Unchanged: 0/0
  8027 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8028 ;;      Params:         0       0       0       0       0
  8029 ;;      Locals:         0       0       0       0       0
  8030 ;;      Temps:          0       2       0       0       0
  8031 ;;      Totals:         0       2       0       0       0
  8032 ;;Total ram usage:        2 bytes
  8033 ;; Hardware stack levels used: 1
  8034 ;; Hardware stack levels required when called: 6
  8035 ;; This function calls:
  8036 ;;		_LCD_clear
  8037 ;;		_sendbyte
  8038 ;;		_sendhalfbyte
  8039 ;; This function is called by:
  8040 ;;		_main
  8041 ;; This function uses a non-reentrant model
  8042 ;;
  8043                           
  8044                           
  8045                           ;psect for function _LCD_init
  8046  1339                     _LCD_init:
  8047                           
  8048                           ;lcd.c: 19: _delay((unsigned long)((50)*(8000000/4000.0)));
  8049                           
  8050                           ;incstack = 0
  8051                           ; Regs used in _LCD_init: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  8052  1339  3082               	movlw	130
  8053  133A  1283               	bcf	3,5	;RP0=0, select bank0
  8054  133B  1303               	bcf	3,6	;RP1=0, select bank0
  8055  133C  00AF               	movwf	??_LCD_init+1
  8056  133D  30DD               	movlw	221
  8057  133E  00AE               	movwf	??_LCD_init
  8058  133F                     u6487:
  8059  133F  0BAE               	decfsz	??_LCD_init,f
  8060  1340  2B3F               	goto	u6487
  8061  1341  0BAF               	decfsz	??_LCD_init+1,f
  8062  1342  2B3F               	goto	u6487
  8063                           
  8064                           ;lcd.c: 23: sendhalfbyte(0b00000011);
  8065  1343  3003               	movlw	3
  8066  1344  120A  158A  2000  160A  118A  	fcall	_sendhalfbyte
  8067                           
  8068                           ;lcd.c: 24: _delay((unsigned long)((4500)*(8000000/4000000.0)));
  8069  1349  300C               	movlw	12
  8070  134A  1283               	bcf	3,5	;RP0=0, select bank0
  8071  134B  1303               	bcf	3,6	;RP1=0, select bank0
  8072  134C  00AF               	movwf	??_LCD_init+1
  8073  134D  30AE               	movlw	174
  8074  134E  00AE               	movwf	??_LCD_init
  8075  134F                     u6497:
  8076  134F  0BAE               	decfsz	??_LCD_init,f
  8077  1350  2B4F               	goto	u6497
  8078  1351  0BAF               	decfsz	??_LCD_init+1,f
  8079  1352  2B4F               	goto	u6497
  8080  1353  0000               	nop
  8081                           
  8082                           ;lcd.c: 25: sendhalfbyte(0b00000011);
  8083  1354  3003               	movlw	3
  8084  1355  120A  158A  2000  160A  118A  	fcall	_sendhalfbyte
  8085                           
  8086                           ;lcd.c: 26: _delay((unsigned long)((200)*(8000000/4000000.0)));
  8087  135A  3084               	movlw	132
  8088  135B  1283               	bcf	3,5	;RP0=0, select bank0
  8089  135C  1303               	bcf	3,6	;RP1=0, select bank0
  8090  135D  00AE               	movwf	??_LCD_init
  8091  135E                     u6507:
  8092  135E  0BAE               	decfsz	??_LCD_init,f
  8093  135F  2B5E               	goto	u6507
  8094  1360  0000               	nop
  8095                           
  8096                           ;lcd.c: 27: sendhalfbyte(0b00000011);
  8097  1361  3003               	movlw	3
  8098  1362  120A  158A  2000  160A  118A  	fcall	_sendhalfbyte
  8099                           
  8100                           ;lcd.c: 28: _delay((unsigned long)((1)*(8000000/4000.0)));
  8101  1367  3003               	movlw	3
  8102  1368  1283               	bcf	3,5	;RP0=0, select bank0
  8103  1369  1303               	bcf	3,6	;RP1=0, select bank0
  8104  136A  00AF               	movwf	??_LCD_init+1
  8105  136B  3097               	movlw	151
  8106  136C  00AE               	movwf	??_LCD_init
  8107  136D                     u6517:
  8108  136D  0BAE               	decfsz	??_LCD_init,f
  8109  136E  2B6D               	goto	u6517
  8110  136F  0BAF               	decfsz	??_LCD_init+1,f
  8111  1370  2B6D               	goto	u6517
  8112                           
  8113                           ;lcd.c: 29: sendhalfbyte(0b00000010);
  8114  1371  3002               	movlw	2
  8115  1372  120A  158A  2000  160A  118A  	fcall	_sendhalfbyte
  8116                           
  8117                           ;lcd.c: 30: _delay((unsigned long)((1)*(8000000/4000.0)));
  8118  1377  3003               	movlw	3
  8119  1378  1283               	bcf	3,5	;RP0=0, select bank0
  8120  1379  1303               	bcf	3,6	;RP1=0, select bank0
  8121  137A  00AF               	movwf	??_LCD_init+1
  8122  137B  3097               	movlw	151
  8123  137C  00AE               	movwf	??_LCD_init
  8124  137D                     u6527:
  8125  137D  0BAE               	decfsz	??_LCD_init,f
  8126  137E  2B7D               	goto	u6527
  8127  137F  0BAF               	decfsz	??_LCD_init+1,f
  8128  1380  2B7D               	goto	u6527
  8129                           
  8130                           ;lcd.c: 33: sendbyte(0b00101000,0);
  8131  1381  1283               	bcf	3,5	;RP0=0, select bank0
  8132  1382  1303               	bcf	3,6	;RP1=0, select bank0
  8133  1383  01A8               	clrf	sendbyte@mode
  8134  1384  3028               	movlw	40
  8135  1385  160A  118A  21FC  160A  118A  	fcall	_sendbyte
  8136                           
  8137                           ;lcd.c: 34: _delay((unsigned long)((1)*(8000000/4000.0)));
  8138  138A  3003               	movlw	3
  8139  138B  1283               	bcf	3,5	;RP0=0, select bank0
  8140  138C  1303               	bcf	3,6	;RP1=0, select bank0
  8141  138D  00AF               	movwf	??_LCD_init+1
  8142  138E  3097               	movlw	151
  8143  138F  00AE               	movwf	??_LCD_init
  8144  1390                     u6537:
  8145  1390  0BAE               	decfsz	??_LCD_init,f
  8146  1391  2B90               	goto	u6537
  8147  1392  0BAF               	decfsz	??_LCD_init+1,f
  8148  1393  2B90               	goto	u6537
  8149                           
  8150                           ;lcd.c: 35: sendbyte(0b00001100,0);
  8151  1394  1283               	bcf	3,5	;RP0=0, select bank0
  8152  1395  1303               	bcf	3,6	;RP1=0, select bank0
  8153  1396  01A8               	clrf	sendbyte@mode
  8154  1397  300C               	movlw	12
  8155  1398  160A  118A  21FC  160A  118A  	fcall	_sendbyte
  8156                           
  8157                           ;lcd.c: 36: LCD_clear();
  8158  139D  160A  158A  2487  160A  118A  	fcall	_LCD_clear
  8159                           
  8160                           ;lcd.c: 37: sendbyte(0b00000110,0);
  8161  13A2  1283               	bcf	3,5	;RP0=0, select bank0
  8162  13A3  1303               	bcf	3,6	;RP1=0, select bank0
  8163  13A4  01A8               	clrf	sendbyte@mode
  8164  13A5  3006               	movlw	6
  8165  13A6  160A  118A  21FC  160A  118A  	fcall	_sendbyte
  8166                           
  8167                           ;lcd.c: 38: _delay((unsigned long)((1)*(8000000/4000.0)));
  8168  13AB  3003               	movlw	3
  8169  13AC  1283               	bcf	3,5	;RP0=0, select bank0
  8170  13AD  1303               	bcf	3,6	;RP1=0, select bank0
  8171  13AE  00AF               	movwf	??_LCD_init+1
  8172  13AF  3097               	movlw	151
  8173  13B0  00AE               	movwf	??_LCD_init
  8174  13B1                     u6547:
  8175  13B1  0BAE               	decfsz	??_LCD_init,f
  8176  13B2  2BB1               	goto	u6547
  8177  13B3  0BAF               	decfsz	??_LCD_init+1,f
  8178  13B4  2BB1               	goto	u6547
  8179  13B5  0008               	return
  8180  13B6                     __end_of_LCD_init:
  8181                           
  8182                           	psect	text38
  8183  1C87                     __ptext38:	
  8184 ;; *************** function _LCD_clear *****************
  8185 ;; Defined at:
  8186 ;;		line 118 in file "lcd.c"
  8187 ;; Parameters:    Size  Location     Type
  8188 ;;		None
  8189 ;; Auto vars:     Size  Location     Type
  8190 ;;		None
  8191 ;; Return value:  Size  Location     Type
  8192 ;;                  1    wreg      void 
  8193 ;; Registers used:
  8194 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  8195 ;; Tracked objects:
  8196 ;;		On entry : 0/100
  8197 ;;		On exit  : 0/0
  8198 ;;		Unchanged: 0/0
  8199 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8200 ;;      Params:         0       0       0       0       0
  8201 ;;      Locals:         0       0       0       0       0
  8202 ;;      Temps:          0       2       0       0       0
  8203 ;;      Totals:         0       2       0       0       0
  8204 ;;Total ram usage:        2 bytes
  8205 ;; Hardware stack levels used: 1
  8206 ;; Hardware stack levels required when called: 5
  8207 ;; This function calls:
  8208 ;;		_sendbyte
  8209 ;; This function is called by:
  8210 ;;		_LCD_init
  8211 ;;		_fMenuStrip
  8212 ;; This function uses a non-reentrant model
  8213 ;;
  8214                           
  8215                           
  8216                           ;psect for function _LCD_clear
  8217  1C87                     _LCD_clear:
  8218                           
  8219                           ;lcd.c: 119: sendbyte(0b00000001,0);
  8220                           
  8221                           ;incstack = 0
  8222                           ; Regs used in _LCD_clear: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  8223  1C87  1283               	bcf	3,5	;RP0=0, select bank0
  8224  1C88  1303               	bcf	3,6	;RP1=0, select bank0
  8225  1C89  01A8               	clrf	sendbyte@mode
  8226  1C8A  3001               	movlw	1
  8227  1C8B  160A  118A  21FC  160A  158A  	fcall	_sendbyte
  8228                           
  8229                           ;lcd.c: 120: _delay((unsigned long)((1600)*(8000000/4000000.0)));
  8230  1C90  3005               	movlw	5
  8231  1C91  1283               	bcf	3,5	;RP0=0, select bank0
  8232  1C92  1303               	bcf	3,6	;RP1=0, select bank0
  8233  1C93  00AD               	movwf	??_LCD_clear+1
  8234  1C94  3025               	movlw	37
  8235  1C95  00AC               	movwf	??_LCD_clear
  8236  1C96                     u6557:
  8237  1C96  0BAC               	decfsz	??_LCD_clear,f
  8238  1C97  2C96               	goto	u6557
  8239  1C98  0BAD               	decfsz	??_LCD_clear+1,f
  8240  1C99  2C96               	goto	u6557
  8241  1C9A  2C9B               	nop2
  8242  1C9B  0008               	return
  8243  1C9C                     __end_of_LCD_clear:
  8244                           
  8245                           	psect	text39
  8246  11FC                     __ptext39:	
  8247 ;; *************** function _sendbyte *****************
  8248 ;; Defined at:
  8249 ;;		line 69 in file "lcd.c"
  8250 ;; Parameters:    Size  Location     Type
  8251 ;;  c               1    wreg     unsigned char 
  8252 ;;  mode            1    8[BANK0 ] unsigned char 
  8253 ;; Auto vars:     Size  Location     Type
  8254 ;;  c               1   11[BANK0 ] unsigned char 
  8255 ;;  hb              1   10[BANK0 ] unsigned char 
  8256 ;; Return value:  Size  Location     Type
  8257 ;;                  1    wreg      void 
  8258 ;; Registers used:
  8259 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  8260 ;; Tracked objects:
  8261 ;;		On entry : 300/0
  8262 ;;		On exit  : 0/0
  8263 ;;		Unchanged: 0/0
  8264 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8265 ;;      Params:         0       1       0       0       0
  8266 ;;      Locals:         0       2       0       0       0
  8267 ;;      Temps:          0       1       0       0       0
  8268 ;;      Totals:         0       4       0       0       0
  8269 ;;Total ram usage:        4 bytes
  8270 ;; Hardware stack levels used: 1
  8271 ;; Hardware stack levels required when called: 4
  8272 ;; This function calls:
  8273 ;;		_sendhalfbyte
  8274 ;; This function is called by:
  8275 ;;		_LCD_init
  8276 ;;		_LCD_string
  8277 ;;		_LCD_SetPos
  8278 ;;		_LCD_clear
  8279 ;; This function uses a non-reentrant model
  8280 ;;
  8281                           
  8282                           
  8283                           ;psect for function _sendbyte
  8284  11FC                     _sendbyte:
  8285                           
  8286                           ;incstack = 0
  8287                           ; Regs used in _sendbyte: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  8288                           ;sendbyte@c stored from wreg
  8289  11FC  00AB               	movwf	sendbyte@c
  8290                           
  8291                           ;lcd.c: 71: hb = c;
  8292  11FD  082B               	movf	sendbyte@c,w
  8293  11FE  00A9               	movwf	??_sendbyte
  8294  11FF  0829               	movf	??_sendbyte,w
  8295  1200  00AA               	movwf	sendbyte@hb
  8296                           
  8297                           ;lcd.c: 72: hb &= ~0x0F;
  8298  1201  30F0               	movlw	240
  8299  1202  00A9               	movwf	??_sendbyte
  8300  1203  0829               	movf	??_sendbyte,w
  8301  1204  05AA               	andwf	sendbyte@hb,f
  8302                           
  8303                           ;lcd.c: 73: c <<= 4;
  8304  1205  0EAB               	swapf	sendbyte@c,f
  8305  1206  30F0               	movlw	240
  8306  1207  05AB               	andwf	sendbyte@c,f
  8307                           
  8308                           ;lcd.c: 75: if(mode != 0)
  8309  1208  0828               	movf	sendbyte@mode,w
  8310  1209  1903               	btfsc	3,2
  8311  120A  2A0D               	goto	l3434
  8312                           
  8313                           ;lcd.c: 81: {;lcd.c: 82: c |= 0x04;
  8314  120B  152B               	bsf	sendbyte@c,2
  8315                           
  8316                           ;lcd.c: 83: hb |= 0x04;
  8317  120C  152A               	bsf	sendbyte@hb,2
  8318  120D                     l3434:
  8319                           
  8320                           ;lcd.c: 84: };lcd.c: 85: sendhalfbyte(hb);
  8321  120D  082A               	movf	sendbyte@hb,w
  8322  120E  120A  158A  2000  160A  118A  	fcall	_sendhalfbyte
  8323                           
  8324                           ;lcd.c: 86: sendhalfbyte(c);
  8325  1213  1283               	bcf	3,5	;RP0=0, select bank0
  8326  1214  1303               	bcf	3,6	;RP1=0, select bank0
  8327  1215  082B               	movf	sendbyte@c,w
  8328  1216  120A  158A  2000   	fcall	_sendhalfbyte
  8329  1219  0008               	return
  8330  121A                     __end_of_sendbyte:
  8331                           
  8332                           	psect	text40
  8333  0800                     __ptext40:	
  8334 ;; *************** function _sendhalfbyte *****************
  8335 ;; Defined at:
  8336 ;;		line 45 in file "lcd.c"
  8337 ;; Parameters:    Size  Location     Type
  8338 ;;  c               1    wreg     unsigned char 
  8339 ;; Auto vars:     Size  Location     Type
  8340 ;;  c               1    7[BANK0 ] unsigned char 
  8341 ;; Return value:  Size  Location     Type
  8342 ;;                  1    wreg      void 
  8343 ;; Registers used:
  8344 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  8345 ;; Tracked objects:
  8346 ;;		On entry : 0/0
  8347 ;;		On exit  : 0/0
  8348 ;;		Unchanged: 0/0
  8349 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8350 ;;      Params:         0       0       0       0       0
  8351 ;;      Locals:         0       1       0       0       0
  8352 ;;      Temps:          0       1       0       0       0
  8353 ;;      Totals:         0       2       0       0       0
  8354 ;;Total ram usage:        2 bytes
  8355 ;; Hardware stack levels used: 1
  8356 ;; Hardware stack levels required when called: 3
  8357 ;; This function calls:
  8358 ;;		_fShiftData
  8359 ;; This function is called by:
  8360 ;;		_LCD_init
  8361 ;;		_sendbyte
  8362 ;; This function uses a non-reentrant model
  8363 ;;
  8364                           
  8365                           
  8366                           ;psect for function _sendhalfbyte
  8367  0800                     _sendhalfbyte:
  8368                           
  8369                           ;incstack = 0
  8370                           ; Regs used in _sendhalfbyte: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  8371                           ;sendhalfbyte@c stored from wreg
  8372  0800  1283               	bcf	3,5	;RP0=0, select bank0
  8373  0801  1303               	bcf	3,6	;RP1=0, select bank0
  8374  0802  00A7               	movwf	sendhalfbyte@c
  8375                           
  8376                           ;lcd.c: 50: fShiftData(0x00);
  8377  0803  3000               	movlw	0
  8378  0804  160A  158A  26D4  120A  158A  	fcall	_fShiftData
  8379                           
  8380                           ;lcd.c: 51: _delay((unsigned long)((1)*(8000000/4000000.0)));
  8381  0809  280A               	nop2	;2 cycle nop
  8382                           
  8383                           ;lcd.c: 52: if(c & 0x01 || c & 0x02 || c & 0x03)
  8384  080A  1283               	bcf	3,5	;RP0=0, select bank0
  8385  080B  1303               	bcf	3,6	;RP1=0, select bank0
  8386  080C  1C27               	btfss	sendhalfbyte@c,0
  8387  080D  18A7               	btfsc	sendhalfbyte@c,1
  8388  080E  2813               	goto	l3368
  8389  080F  0827               	movf	sendhalfbyte@c,w
  8390  0810  3903               	andlw	3
  8391  0811  1903               	btfsc	3,2
  8392  0812  281A               	goto	l3370
  8393  0813                     l3368:
  8394                           
  8395                           ;lcd.c: 53: c <<= 3;
  8396  0813  1003               	clrc
  8397  0814  0DA7               	rlf	sendhalfbyte@c,f
  8398  0815  1003               	clrc
  8399  0816  0DA7               	rlf	sendhalfbyte@c,f
  8400  0817  1003               	clrc
  8401  0818  0DA7               	rlf	sendhalfbyte@c,f
  8402  0819  281C               	goto	l3372
  8403  081A                     l3370:
  8404                           
  8405                           ;lcd.c: 54: else;lcd.c: 55: c >>= 1;
  8406  081A  1003               	clrc
  8407  081B  0CA7               	rrf	sendhalfbyte@c,f
  8408  081C                     l3372:
  8409                           
  8410                           ;lcd.c: 59: c |= 0x04;
  8411  081C  1527               	bsf	sendhalfbyte@c,2
  8412                           
  8413                           ;lcd.c: 60: fShiftData(c);
  8414  081D  0827               	movf	sendhalfbyte@c,w
  8415  081E  160A  158A  26D4  120A  158A  	fcall	_fShiftData
  8416                           
  8417                           ;lcd.c: 62: _delay((unsigned long)((1)*(8000000/4000000.0)));
  8418  0823  2824               	nop2	;2 cycle nop
  8419                           
  8420                           ;lcd.c: 63: c &= ~0x04;
  8421  0824  30FB               	movlw	251
  8422  0825  1283               	bcf	3,5	;RP0=0, select bank0
  8423  0826  1303               	bcf	3,6	;RP1=0, select bank0
  8424  0827  00A6               	movwf	??_sendhalfbyte
  8425  0828  0826               	movf	??_sendhalfbyte,w
  8426  0829  05A7               	andwf	sendhalfbyte@c,f
  8427                           
  8428                           ;lcd.c: 64: fShiftData(c);
  8429  082A  0827               	movf	sendhalfbyte@c,w
  8430  082B  160A  158A  26D4  120A  158A  	fcall	_fShiftData
  8431                           
  8432                           ;lcd.c: 66: _delay((unsigned long)((50)*(8000000/4000000.0)));
  8433  0830  3020               	movlw	32
  8434  0831  1283               	bcf	3,5	;RP0=0, select bank0
  8435  0832  1303               	bcf	3,6	;RP1=0, select bank0
  8436  0833  00A6               	movwf	??_sendhalfbyte
  8437  0834                     u6567:
  8438  0834  0BA6               	decfsz	??_sendhalfbyte,f
  8439  0835  2834               	goto	u6567
  8440  0836  0000               	nop
  8441  0837  0008               	return
  8442  0838                     __end_of_sendhalfbyte:
  8443                           
  8444                           	psect	text41
  8445  1ED4                     __ptext41:	
  8446 ;; *************** function _fShiftData *****************
  8447 ;; Defined at:
  8448 ;;		line 3 in file "shift_registr.c"
  8449 ;; Parameters:    Size  Location     Type
  8450 ;;  shiftVar        1    wreg     unsigned char 
  8451 ;; Auto vars:     Size  Location     Type
  8452 ;;  shiftVar        1    2[BANK0 ] unsigned char 
  8453 ;;  i               1    5[BANK0 ] unsigned char 
  8454 ;;  shiftVariabl    2    3[BANK0 ] short 
  8455 ;; Return value:  Size  Location     Type
  8456 ;;                  1    wreg      void 
  8457 ;; Registers used:
  8458 ;;		wreg, status,2, status,0, btemp+1
  8459 ;; Tracked objects:
  8460 ;;		On entry : 0/0
  8461 ;;		On exit  : 300/0
  8462 ;;		Unchanged: 0/0
  8463 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8464 ;;      Params:         0       0       0       0       0
  8465 ;;      Locals:         0       4       0       0       0
  8466 ;;      Temps:          0       2       0       0       0
  8467 ;;      Totals:         0       6       0       0       0
  8468 ;;Total ram usage:        6 bytes
  8469 ;; Hardware stack levels used: 1
  8470 ;; Hardware stack levels required when called: 2
  8471 ;; This function calls:
  8472 ;;		Nothing
  8473 ;; This function is called by:
  8474 ;;		_main
  8475 ;;		_sendhalfbyte
  8476 ;; This function uses a non-reentrant model
  8477 ;;
  8478                           
  8479                           
  8480                           ;psect for function _fShiftData
  8481  1ED4                     _fShiftData:
  8482                           
  8483                           ;incstack = 0
  8484                           ; Regs used in _fShiftData: [wreg+status,2+status,0+btemp+1]
  8485                           ;fShiftData@shiftVar stored from wreg
  8486  1ED4  1283               	bcf	3,5	;RP0=0, select bank0
  8487  1ED5  1303               	bcf	3,6	;RP1=0, select bank0
  8488  1ED6  00A2               	movwf	fShiftData@shiftVar
  8489                           
  8490                           ;shift_registr.c: 5: shiftVariable = _tempPinDO;
  8491  1ED7  1683               	bsf	3,5	;RP0=1, select bank1
  8492  1ED8  0843               	movf	__tempPinDO^(0+128),w
  8493  1ED9  1283               	bcf	3,5	;RP0=0, select bank0
  8494  1EDA  00A0               	movwf	??_fShiftData
  8495  1EDB  01A1               	clrf	??_fShiftData+1
  8496  1EDC  0820               	movf	??_fShiftData,w
  8497  1EDD  00A3               	movwf	fShiftData@shiftVariable
  8498  1EDE  0821               	movf	??_fShiftData+1,w
  8499  1EDF  00A4               	movwf	fShiftData@shiftVariable+1
  8500                           
  8501                           ;shift_registr.c: 6: shiftVariable <<= 8;
  8502  1EE0  3008               	movlw	8
  8503  1EE1                     u3225:
  8504  1EE1  1003               	clrc
  8505  1EE2  0DA3               	rlf	fShiftData@shiftVariable,f
  8506  1EE3  0DA4               	rlf	fShiftData@shiftVariable+1,f
  8507  1EE4  3EFF               	addlw	-1
  8508  1EE5  1D03               	skipz
  8509  1EE6  2EE1               	goto	u3225
  8510                           
  8511                           ;shift_registr.c: 7: shiftVariable |= shiftVar;
  8512  1EE7  0822               	movf	fShiftData@shiftVar,w
  8513  1EE8  00A0               	movwf	??_fShiftData
  8514  1EE9  01A1               	clrf	??_fShiftData+1
  8515  1EEA  0820               	movf	??_fShiftData,w
  8516  1EEB  04A3               	iorwf	fShiftData@shiftVariable,f
  8517  1EEC  0821               	movf	??_fShiftData+1,w
  8518  1EED  04A4               	iorwf	fShiftData@shiftVariable+1,f
  8519                           
  8520                           ;shift_registr.c: 8: for(char i = 0; i < 16; i++)
  8521  1EEE  01A5               	clrf	fShiftData@i
  8522  1EEF                     l684:
  8523                           
  8524                           ;shift_registr.c: 9: {;shift_registr.c: 10: if(shiftVariable & 0x0001)
  8525  1EEF  1C23               	btfss	fShiftData@shiftVariable,0
  8526  1EF0  2EF3               	goto	l686
  8527                           
  8528                           ;shift_registr.c: 11: PORTBbits.RB1 = 1;
  8529  1EF1  1486               	bsf	6,1	;volatile
  8530  1EF2  2EF4               	goto	l687
  8531  1EF3                     l686:
  8532                           
  8533                           ;shift_registr.c: 12: else;shift_registr.c: 13: PORTBbits.RB1 = 0;
  8534  1EF3  1086               	bcf	6,1	;volatile
  8535  1EF4                     l687:
  8536                           
  8537                           ;shift_registr.c: 14: _delay((unsigned long)((3)*(8000000/4000000.0)));
  8538  1EF4  2EF5               	nop2	;2 cycle nop
  8539  1EF5  2EF6               	nop2	;2 cycle nop
  8540  1EF6  2EF7               	nop2	;2 cycle nop
  8541                           
  8542                           ;shift_registr.c: 16: shiftVariable >>= 1;
  8543  1EF7  3001               	movlw	1
  8544  1EF8  00FF               	movwf	127
  8545  1EF9                     u3245:
  8546  1EF9  1283               	bcf	3,5	;RP0=0, select bank0
  8547  1EFA  1303               	bcf	3,6	;RP1=0, select bank0
  8548  1EFB  0D24               	rlf	fShiftData@shiftVariable+1,w
  8549  1EFC  0CA4               	rrf	fShiftData@shiftVariable+1,f
  8550  1EFD  0CA3               	rrf	fShiftData@shiftVariable,f
  8551  1EFE  0BFF               	decfsz	127,f
  8552  1EFF  2EF9               	goto	u3245
  8553                           
  8554                           ;shift_registr.c: 17: PORTBbits.RB2 = 1;
  8555  1F00  1506               	bsf	6,2	;volatile
  8556                           
  8557                           ;shift_registr.c: 18: _delay((unsigned long)((3)*(8000000/4000000.0)));
  8558  1F01  2F02               	nop2	;2 cycle nop
  8559  1F02  2F03               	nop2	;2 cycle nop
  8560  1F03  2F04               	nop2	;2 cycle nop
  8561                           
  8562                           ;shift_registr.c: 20: PORTBbits.RB2 = 0;
  8563  1F04  1283               	bcf	3,5	;RP0=0, select bank0
  8564  1F05  1303               	bcf	3,6	;RP1=0, select bank0
  8565  1F06  1106               	bcf	6,2	;volatile
  8566  1F07  3001               	movlw	1
  8567  1F08  00A0               	movwf	??_fShiftData
  8568  1F09  0820               	movf	??_fShiftData,w
  8569  1F0A  07A5               	addwf	fShiftData@i,f
  8570  1F0B  3010               	movlw	16
  8571  1F0C  0225               	subwf	fShiftData@i,w
  8572  1F0D  1C03               	skipc
  8573  1F0E  2EEF               	goto	l684
  8574                           
  8575                           ;shift_registr.c: 21: };shift_registr.c: 22: PORTBbits.RB0 = 1;
  8576  1F0F  1406               	bsf	6,0	;volatile
  8577                           
  8578                           ;shift_registr.c: 23: _delay((unsigned long)((3)*(8000000/4000000.0)));
  8579  1F10  2F11               	nop2	;2 cycle nop
  8580  1F11  2F12               	nop2	;2 cycle nop
  8581  1F12  2F13               	nop2	;2 cycle nop
  8582                           
  8583                           ;shift_registr.c: 25: PORTBbits.RB0 = 0;
  8584  1F13  1283               	bcf	3,5	;RP0=0, select bank0
  8585  1F14  1303               	bcf	3,6	;RP1=0, select bank0
  8586  1F15  1006               	bcf	6,0	;volatile
  8587  1F16  0008               	return
  8588  1F17                     __end_of_fShiftData:
  8589                           
  8590                           	psect	text42
  8591  169F                     __ptext42:	
  8592 ;; *************** function _linkup *****************
  8593 ;; Defined at:
  8594 ;;		line 10 in file "newmain.c"
  8595 ;; Parameters:    Size  Location     Type
  8596 ;;		None
  8597 ;; Auto vars:     Size  Location     Type
  8598 ;;		None
  8599 ;; Return value:  Size  Location     Type
  8600 ;;                  1    wreg      void 
  8601 ;; Registers used:
  8602 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  8603 ;; Tracked objects:
  8604 ;;		On entry : 0/0
  8605 ;;		On exit  : 200/0
  8606 ;;		Unchanged: 0/0
  8607 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8608 ;;      Params:         0       0       0       0       0
  8609 ;;      Locals:         0       0       0       0       0
  8610 ;;      Temps:          4       0       0       0       0
  8611 ;;      Totals:         4       0       0       0       0
  8612 ;;Total ram usage:        4 bytes
  8613 ;; Hardware stack levels used: 1
  8614 ;; Hardware stack levels required when called: 1
  8615 ;; This function calls:
  8616 ;;		_fInterruptRecieveDevice
  8617 ;;		i1___lwmod
  8618 ;; This function is called by:
  8619 ;;		Interrupt level 1
  8620 ;; This function uses a non-reentrant model
  8621 ;;
  8622                           
  8623                           
  8624                           ;psect for function _linkup
  8625  169F                     _linkup:
  8626                           
  8627                           ;newmain.c: 11: if(INTCONbits.RBIE && INTCONbits.RBIF){
  8628  169F  198B               	btfsc	11,3	;volatile
  8629  16A0  1C0B               	btfss	11,0	;volatile
  8630  16A1  2EA8               	goto	i1l4916
  8631                           
  8632                           ;newmain.c: 12: fInterruptRecieveDevice();
  8633  16A2  160A  118A  25F3  160A  118A  	fcall	_fInterruptRecieveDevice
  8634                           
  8635                           ;newmain.c: 13: INTCONbits.RBIF = 0;
  8636  16A7  100B               	bcf	11,0	;volatile
  8637  16A8                     i1l4916:
  8638                           
  8639                           ;newmain.c: 14: };newmain.c: 15: if(INTCONbits.T0IE && INTCONbits.T0IF){
  8640  16A8  1A8B               	btfsc	11,5	;volatile
  8641  16A9  1D0B               	btfss	11,2	;volatile
  8642  16AA  2EC3               	goto	i1l4940
  8643                           
  8644                           ;newmain.c: 16: TMR0 = TMR0_Value;
  8645  16AB  1683               	bsf	3,5	;RP0=1, select bank1
  8646  16AC  1303               	bcf	3,6	;RP1=0, select bank1
  8647  16AD  0842               	movf	_TMR0_Value^(0+128),w
  8648  16AE  1283               	bcf	3,5	;RP0=0, select bank0
  8649  16AF  0081               	movwf	1	;volatile
  8650                           
  8651                           ;newmain.c: 17: if(cTMR0 == 3){
  8652  16B0  3003               	movlw	3
  8653  16B1  1683               	bsf	3,5	;RP0=1, select bank1
  8654  16B2  0641               	xorwf	_cTMR0^(0+128),w
  8655  16B3  1D03               	btfss	3,2
  8656  16B4  2EBD               	goto	i1l4936
  8657                           
  8658                           ;newmain.c: 19: cTMR0 = 0;
  8659  16B5  01C1               	clrf	_cTMR0^(0+128)
  8660                           
  8661                           ;newmain.c: 20: flModeStep = 0;
  8662  16B6  01FD               	clrf	_flModeStep
  8663                           
  8664                           ;newmain.c: 21: flStartBitRecieve = 0;
  8665  16B7  127A               	bcf	_flStartBitRecieve/(0+8),_flStartBitRecieve& (0+7)
  8666                           
  8667                           ;newmain.c: 22: flStopBitRecieve = 0;
  8668  16B8  11FA               	bcf	_flStopBitRecieve/(0+8),_flStopBitRecieve& (0+7)
  8669                           
  8670                           ;newmain.c: 23: flDO1 = 0;
  8671  16B9  12FA               	bcf	_flDO1/(0+8),_flDO1& (0+7)
  8672                           
  8673                           ;newmain.c: 24: T1CONbits.TMR1ON = 0;
  8674  16BA  1283               	bcf	3,5	;RP0=0, select bank0
  8675  16BB  1010               	bcf	16,0	;volatile
  8676                           
  8677                           ;newmain.c: 25: INTCONbits.T0IE = 0;
  8678  16BC  128B               	bcf	11,5	;volatile
  8679  16BD                     i1l4936:
  8680                           
  8681                           ;newmain.c: 26: };newmain.c: 27: INTCONbits.T0IF = 0;
  8682  16BD  110B               	bcf	11,2	;volatile
  8683                           
  8684                           ;newmain.c: 28: cTMR0++;
  8685  16BE  3001               	movlw	1
  8686  16BF  00F6               	movwf	??_linkup
  8687  16C0  0876               	movf	??_linkup,w
  8688  16C1  1683               	bsf	3,5	;RP0=1, select bank1
  8689  16C2  07C1               	addwf	_cTMR0^(0+128),f
  8690  16C3                     i1l4940:
  8691                           
  8692                           ;newmain.c: 29: };newmain.c: 30: if(PIE1bits.TMR1IE && PIR1bits.TMR1IF){
  8693  16C3  1683               	bsf	3,5	;RP0=1, select bank1
  8694  16C4  1303               	bcf	3,6	;RP1=0, select bank1
  8695  16C5  1C0C               	btfss	12,0	;volatile
  8696  16C6  2ECC               	goto	i1l146
  8697  16C7  1283               	bcf	3,5	;RP0=0, select bank0
  8698  16C8  1C0C               	btfss	12,0	;volatile
  8699  16C9  2ECC               	goto	i1l146
  8700                           
  8701                           ;newmain.c: 31: T1CONbits.TMR1ON = 0;
  8702  16CA  1010               	bcf	16,0	;volatile
  8703                           
  8704                           ;newmain.c: 32: PIR1bits.TMR1IF = 0;
  8705  16CB  100C               	bcf	12,0	;volatile
  8706  16CC                     i1l146:
  8707                           
  8708                           ;newmain.c: 33: };newmain.c: 34: if(PIE1bits.TMR2IE && PIR1bits.TMR2IF){
  8709  16CC  1683               	bsf	3,5	;RP0=1, select bank1
  8710  16CD  1C8C               	btfss	12,1	;volatile
  8711  16CE  2F0A               	goto	i1l4970
  8712  16CF  1283               	bcf	3,5	;RP0=0, select bank0
  8713  16D0  1C8C               	btfss	12,1	;volatile
  8714  16D1  2F0A               	goto	i1l4970
  8715                           
  8716                           ;newmain.c: 35: _countTMR2trigger++;
  8717  16D2  3001               	movlw	1
  8718  16D3  00F6               	movwf	??_linkup
  8719  16D4  0876               	movf	??_linkup,w
  8720  16D5  1683               	bsf	3,5	;RP0=1, select bank1
  8721  16D6  07C5               	addwf	__countTMR2trigger^(0+128),f
  8722                           
  8723                           ;newmain.c: 38: if(_countTMR2trigger >= 28) {
  8724  16D7  301C               	movlw	28
  8725  16D8  0245               	subwf	__countTMR2trigger^(0+128),w
  8726  16D9  1C03               	skipc
  8727  16DA  2F08               	goto	i1l4968
  8728                           
  8729                           ;newmain.c: 39: _countSecond++;
  8730  16DB  3001               	movlw	1
  8731  16DC  07B6               	addwf	__countSecond^(0+128),f
  8732  16DD  1803               	skipnc
  8733  16DE  0AB7               	incf	(__countSecond+1)^(0+128),f
  8734  16DF  3000               	movlw	0
  8735  16E0  07B7               	addwf	(__countSecond+1)^(0+128),f
  8736                           
  8737                           ;newmain.c: 40: _countTMR2trigger = 0;
  8738  16E1  01C5               	clrf	__countTMR2trigger^(0+128)
  8739                           
  8740                           ;newmain.c: 42: _second = 1;
  8741  16E2  17FA               	bsf	__second/(0+8),__second& (0+7)
  8742                           
  8743                           ;newmain.c: 43: if((_countSecond % 60) == 0)
  8744  16E3  303C               	movlw	60
  8745  16E4  00F0               	movwf	i1___lwmod@divisor
  8746  16E5  3000               	movlw	0
  8747  16E6  00F1               	movwf	i1___lwmod@divisor+1
  8748  16E7  0837               	movf	(__countSecond+1)^(0+128),w
  8749  16E8  00F3               	movwf	i1___lwmod@dividend+1
  8750  16E9  0836               	movf	__countSecond^(0+128),w
  8751  16EA  00F2               	movwf	i1___lwmod@dividend
  8752  16EB  160A  158A  25F4  160A  118A  	fcall	i1___lwmod
  8753  16F0  0870               	movf	?i1___lwmod,w
  8754  16F1  0471               	iorwf	?i1___lwmod+1,w
  8755  16F2  1903               	btfsc	3,2
  8756                           
  8757                           ;newmain.c: 44: _minute = 1;
  8758  16F3  177A               	bsf	__minute/(0+8),__minute& (0+7)
  8759                           
  8760                           ;newmain.c: 45: if((_countSecond % 3600) == 0){
  8761  16F4  3010               	movlw	16
  8762  16F5  00F0               	movwf	i1___lwmod@divisor
  8763  16F6  300E               	movlw	14
  8764  16F7  00F1               	movwf	i1___lwmod@divisor+1
  8765  16F8  0837               	movf	(__countSecond+1)^(0+128),w
  8766  16F9  00F3               	movwf	i1___lwmod@dividend+1
  8767  16FA  0836               	movf	__countSecond^(0+128),w
  8768  16FB  00F2               	movwf	i1___lwmod@dividend
  8769  16FC  160A  158A  25F4  160A  118A  	fcall	i1___lwmod
  8770  1701  0870               	movf	?i1___lwmod,w
  8771  1702  0471               	iorwf	?i1___lwmod+1,w
  8772  1703  1D03               	btfss	3,2
  8773  1704  2F08               	goto	i1l4968
  8774                           
  8775                           ;newmain.c: 46: _hour = 1;
  8776  1705  146A               	bsf	(__hour/(0+8))^(0+128),__hour& (0+7)
  8777                           
  8778                           ;newmain.c: 47: _countSecond = 0;
  8779  1706  01B6               	clrf	__countSecond^(0+128)
  8780  1707  01B7               	clrf	(__countSecond+1)^(0+128)
  8781  1708                     i1l4968:
  8782                           
  8783                           ;newmain.c: 48: };newmain.c: 49: };newmain.c: 51: PIR1bits.TMR2IF = 0;
  8784  1708  1283               	bcf	3,5	;RP0=0, select bank0
  8785  1709  108C               	bcf	12,1	;volatile
  8786  170A                     i1l4970:
  8787                           
  8788                           ;newmain.c: 52: };newmain.c: 53: if(PIE1bits.ADIE && PIR1bits.ADIF){
  8789  170A  1683               	bsf	3,5	;RP0=1, select bank1
  8790  170B  1F0C               	btfss	12,6	;volatile
  8791  170C  2F45               	goto	i1l161
  8792  170D  1283               	bcf	3,5	;RP0=0, select bank0
  8793  170E  1F0C               	btfss	12,6	;volatile
  8794  170F  2F45               	goto	i1l161
  8795                           
  8796                           ;newmain.c: 54: if(Analog.AI0 >= 35 && Analog.AI0 <= 45) flMenuStrip = 0x01;
  8797  1710  3023               	movlw	35
  8798  1711  1683               	bsf	3,5	;RP0=1, select bank1
  8799  1712  0224               	subwf	_Analog^(0+128),w
  8800  1713  1C03               	skipc
  8801  1714  2F1C               	goto	i1l4980
  8802  1715  302E               	movlw	46
  8803  1716  0224               	subwf	_Analog^(0+128),w
  8804  1717  1803               	skipnc
  8805  1718  2F1C               	goto	i1l4980
  8806  1719  01BE               	clrf	_flMenuStrip^(0+128)
  8807  171A  0ABE               	incf	_flMenuStrip^(0+128),f
  8808  171B  2F43               	goto	i1l5004
  8809  171C                     i1l4980:
  8810                           
  8811                           ;newmain.c: 55: else if(Analog.AI0 >= 85 && Analog.AI0 <= 105) flMenuStrip = 0x02;
  8812  171C  3055               	movlw	85
  8813  171D  0224               	subwf	_Analog^(0+128),w
  8814  171E  1C03               	skipc
  8815  171F  2F26               	goto	i1l4986
  8816  1720  306A               	movlw	106
  8817  1721  0224               	subwf	_Analog^(0+128),w
  8818  1722  1803               	skipnc
  8819  1723  2F26               	goto	i1l4986
  8820  1724  3002               	movlw	2
  8821  1725  2F39               	goto	L28
  8822  1726                     i1l4986:
  8823                           
  8824                           ;newmain.c: 56: else if(Analog.AI0 >= 130 && Analog.AI0 <= 155) flMenuStrip = 0x04;
  8825  1726  3082               	movlw	130
  8826  1727  0224               	subwf	_Analog^(0+128),w
  8827  1728  1C03               	skipc
  8828  1729  2F30               	goto	i1l4992
  8829  172A  309C               	movlw	156
  8830  172B  0224               	subwf	_Analog^(0+128),w
  8831  172C  1803               	skipnc
  8832  172D  2F30               	goto	i1l4992
  8833  172E  3004               	movlw	4
  8834  172F  2F39               	goto	L28
  8835  1730                     i1l4992:
  8836                           
  8837                           ;newmain.c: 57: else if(Analog.AI0 >= 190 && Analog.AI0 <= 210) flMenuStrip = 0x08;
  8838  1730  30BE               	movlw	190
  8839  1731  0224               	subwf	_Analog^(0+128),w
  8840  1732  1C03               	skipc
  8841  1733  2F3D               	goto	i1l4998
  8842  1734  30D3               	movlw	211
  8843  1735  0224               	subwf	_Analog^(0+128),w
  8844  1736  1803               	skipnc
  8845  1737  2F3D               	goto	i1l4998
  8846  1738  3008               	movlw	8
  8847  1739                     L28:
  8848  1739  00F6               	movwf	??_linkup
  8849  173A  0876               	movf	??_linkup,w
  8850  173B  00BE               	movwf	_flMenuStrip^(0+128)
  8851  173C  2F43               	goto	i1l5004
  8852  173D                     i1l4998:
  8853                           
  8854                           ;newmain.c: 58: else if (Analog.AI0 >= 230) { flMenuStrip = 0; flSwitchButton = 0; }
  8855  173D  30E6               	movlw	230
  8856  173E  0224               	subwf	_Analog^(0+128),w
  8857  173F  1C03               	skipc
  8858  1740  2F43               	goto	i1l5004
  8859  1741  01BE               	clrf	_flMenuStrip^(0+128)
  8860  1742  107A               	bcf	_flSwitchButton/(0+8),_flSwitchButton& (0+7)
  8861  1743                     i1l5004:
  8862                           
  8863                           ;newmain.c: 59: PIR1bits.ADIF = 0;
  8864  1743  1283               	bcf	3,5	;RP0=0, select bank0
  8865  1744  130C               	bcf	12,6	;volatile
  8866  1745                     i1l161:
  8867  1745  0879               	movf	??_linkup+3,w
  8868  1746  008A               	movwf	10
  8869  1747  0878               	movf	??_linkup+2,w
  8870  1748  0084               	movwf	4
  8871  1749  0E77               	swapf	??_linkup+1,w
  8872  174A  0083               	movwf	3
  8873  174B  0EFE               	swapf	126,f
  8874  174C  0E7E               	swapf	126,w
  8875  174D  0009               	retfie
  8876  174E                     __end_of_linkup:
  8877                           
  8878                           	psect	intentry
  8879  0004                     __pintentry:	
  8880                           ;incstack = 0
  8881                           ; Regs used in _linkup: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  8882                           
  8883  0004                     interrupt_function:
  8884  007E                     saved_w	set	btemp
  8885  0004  00FE               	movwf	btemp
  8886  0005  0E03               	swapf	3,w
  8887  0006  00F7               	movwf	??_linkup+1
  8888  0007  0804               	movf	4,w
  8889  0008  00F8               	movwf	??_linkup+2
  8890  0009  080A               	movf	10,w
  8891  000A  00F9               	movwf	??_linkup+3
  8892  000B  160A  118A  2E9F   	ljmp	_linkup
  8893                           
  8894                           	psect	text43
  8895  1DF4                     __ptext43:	
  8896 ;; *************** function i1___lwmod *****************
  8897 ;; Defined at:
  8898 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\lwmod.c"
  8899 ;; Parameters:    Size  Location     Type
  8900 ;;  divisor         2    0[COMMON] unsigned int 
  8901 ;;  dividend        2    2[COMMON] unsigned int 
  8902 ;; Auto vars:     Size  Location     Type
  8903 ;;  counter         1    5[COMMON] unsigned char 
  8904 ;; Return value:  Size  Location     Type
  8905 ;;                  2    0[COMMON] unsigned int 
  8906 ;; Registers used:
  8907 ;;		wreg, status,2, status,0
  8908 ;; Tracked objects:
  8909 ;;		On entry : 300/100
  8910 ;;		On exit  : 300/100
  8911 ;;		Unchanged: 300/0
  8912 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8913 ;;      Params:         4       0       0       0       0
  8914 ;;      Locals:         1       0       0       0       0
  8915 ;;      Temps:          1       0       0       0       0
  8916 ;;      Totals:         6       0       0       0       0
  8917 ;;Total ram usage:        6 bytes
  8918 ;; Hardware stack levels used: 1
  8919 ;; This function calls:
  8920 ;;		Nothing
  8921 ;; This function is called by:
  8922 ;;		_linkup
  8923 ;; This function uses a non-reentrant model
  8924 ;;
  8925                           
  8926                           
  8927                           ;psect for function i1___lwmod
  8928  1DF4                     i1___lwmod:
  8929                           
  8930                           ;incstack = 0
  8931                           ; Regs used in i1___lwmod: [wreg+status,2+status,0]
  8932  1DF4  0870               	movf	i1___lwmod@divisor,w
  8933  1DF5  0471               	iorwf	i1___lwmod@divisor+1,w
  8934  1DF6  1903               	btfsc	3,2
  8935  1DF7  2E21               	goto	i1l4904
  8936  1DF8  01F5               	clrf	i1___lwmod@counter
  8937  1DF9  0AF5               	incf	i1___lwmod@counter,f
  8938  1DFA                     i1l4894:
  8939  1DFA  1BF1               	btfsc	i1___lwmod@divisor+1,7
  8940  1DFB  2E08               	goto	i1l4896
  8941  1DFC  3001               	movlw	1
  8942  1DFD                     u574_25:
  8943  1DFD  1003               	clrc
  8944  1DFE  0DF0               	rlf	i1___lwmod@divisor,f
  8945  1DFF  0DF1               	rlf	i1___lwmod@divisor+1,f
  8946  1E00  3EFF               	addlw	-1
  8947  1E01  1D03               	skipz
  8948  1E02  2DFD               	goto	u574_25
  8949  1E03  3001               	movlw	1
  8950  1E04  00F4               	movwf	??i1___lwmod
  8951  1E05  0874               	movf	??i1___lwmod,w
  8952  1E06  07F5               	addwf	i1___lwmod@counter,f
  8953  1E07  2DFA               	goto	i1l4894
  8954  1E08                     i1l4896:
  8955  1E08  0871               	movf	i1___lwmod@divisor+1,w
  8956  1E09  0273               	subwf	i1___lwmod@dividend+1,w
  8957  1E0A  1D03               	skipz
  8958  1E0B  2E0E               	goto	u576_25
  8959  1E0C  0870               	movf	i1___lwmod@divisor,w
  8960  1E0D  0272               	subwf	i1___lwmod@dividend,w
  8961  1E0E                     u576_25:
  8962  1E0E  1C03               	skipc
  8963  1E0F  2E16               	goto	i1l4900
  8964  1E10  0870               	movf	i1___lwmod@divisor,w
  8965  1E11  02F2               	subwf	i1___lwmod@dividend,f
  8966  1E12  0871               	movf	i1___lwmod@divisor+1,w
  8967  1E13  1C03               	skipc
  8968  1E14  03F3               	decf	i1___lwmod@dividend+1,f
  8969  1E15  02F3               	subwf	i1___lwmod@dividend+1,f
  8970  1E16                     i1l4900:
  8971  1E16  3001               	movlw	1
  8972  1E17                     u577_25:
  8973  1E17  1003               	clrc
  8974  1E18  0CF1               	rrf	i1___lwmod@divisor+1,f
  8975  1E19  0CF0               	rrf	i1___lwmod@divisor,f
  8976  1E1A  3EFF               	addlw	-1
  8977  1E1B  1D03               	skipz
  8978  1E1C  2E17               	goto	u577_25
  8979  1E1D  3001               	movlw	1
  8980  1E1E  02F5               	subwf	i1___lwmod@counter,f
  8981  1E1F  1D03               	btfss	3,2
  8982  1E20  2E08               	goto	i1l4896
  8983  1E21                     i1l4904:
  8984  1E21  0873               	movf	i1___lwmod@dividend+1,w
  8985  1E22  00F1               	movwf	?i1___lwmod+1
  8986  1E23  0872               	movf	i1___lwmod@dividend,w
  8987  1E24  00F0               	movwf	?i1___lwmod
  8988  1E25  0008               	return
  8989  1E26                     __end_ofi1___lwmod:
  8990                           
  8991                           	psect	text44
  8992  15F3                     __ptext44:	
  8993 ;; *************** function _fInterruptRecieveDevice *****************
  8994 ;; Defined at:
  8995 ;;		line 95 in file "Bb_device.c"
  8996 ;; Parameters:    Size  Location     Type
  8997 ;;		None
  8998 ;; Auto vars:     Size  Location     Type
  8999 ;;		None
  9000 ;; Return value:  Size  Location     Type
  9001 ;;                  1    wreg      void 
  9002 ;; Registers used:
  9003 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  9004 ;; Tracked objects:
  9005 ;;		On entry : 0/0
  9006 ;;		On exit  : 0/0
  9007 ;;		Unchanged: 0/0
  9008 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  9009 ;;      Params:         0       0       0       0       0
  9010 ;;      Locals:         0       0       0       0       0
  9011 ;;      Temps:          2       0       0       0       0
  9012 ;;      Totals:         2       0       0       0       0
  9013 ;;Total ram usage:        2 bytes
  9014 ;; Hardware stack levels used: 1
  9015 ;; This function calls:
  9016 ;;		Nothing
  9017 ;; This function is called by:
  9018 ;;		_linkup
  9019 ;; This function uses a non-reentrant model
  9020 ;;
  9021                           
  9022                           
  9023                           ;psect for function _fInterruptRecieveDevice
  9024  15F3                     _fInterruptRecieveDevice:
  9025                           
  9026                           ;Bb_device.c: 99: if(PORTBbits.RB7 == 1 && flModeStep == 0 && flStartBitRecieve == 0){
  9027                           
  9028                           ;incstack = 0
  9029                           ; Regs used in _fInterruptRecieveDevice: [wreg-fsr0h+status,2+status,0]
  9030  15F3  1283               	bcf	3,5	;RP0=0, select bank0
  9031  15F4  1303               	bcf	3,6	;RP1=0, select bank0
  9032  15F5  1F86               	btfss	6,7	;volatile
  9033  15F6  2E08               	goto	i1l439
  9034  15F7  087D               	movf	_flModeStep,w
  9035  15F8  1903               	btfsc	3,2
  9036  15F9  1A7A               	btfsc	_flStartBitRecieve/(0+8),_flStartBitRecieve& (0+7)
  9037  15FA  2E08               	goto	i1l439
  9038                           
  9039                           ;Bb_device.c: 100: TMR0 = TMR0_Value;
  9040  15FB  1683               	bsf	3,5	;RP0=1, select bank1
  9041  15FC  0842               	movf	_TMR0_Value^(0+128),w
  9042  15FD  1283               	bcf	3,5	;RP0=0, select bank0
  9043  15FE  0081               	movwf	1	;volatile
  9044                           
  9045                           ;Bb_device.c: 101: INTCONbits.T0IF = 0;
  9046  15FF  110B               	bcf	11,2	;volatile
  9047                           
  9048                           ;Bb_device.c: 102: INTCONbits.T0IE = 1;
  9049  1600  168B               	bsf	11,5	;volatile
  9050                           
  9051                           ;Bb_device.c: 103: TMR1H = 0x00;
  9052  1601  018F               	clrf	15	;volatile
  9053                           
  9054                           ;Bb_device.c: 104: TMR1L = 0x00;
  9055  1602  018E               	clrf	14	;volatile
  9056                           
  9057                           ;Bb_device.c: 105: flStartBitRecieve = 1;
  9058  1603  167A               	bsf	_flStartBitRecieve/(0+8),_flStartBitRecieve& (0+7)
  9059                           
  9060                           ;Bb_device.c: 106: flModeStep = 1;
  9061  1604  01FD               	clrf	_flModeStep
  9062  1605  0AFD               	incf	_flModeStep,f
  9063                           
  9064                           ;Bb_device.c: 107: T1CONbits.TMR1ON = 1;
  9065  1606  1410               	bsf	16,0	;volatile
  9066                           
  9067                           ;Bb_device.c: 110: }
  9068  1607  0008               	return
  9069  1608                     i1l439:
  9070                           
  9071                           ;Bb_device.c: 111: else if(PORTBbits.RB7 == 0 && flModeStep == 1 && flStartBitRecieve ==
      +                           1){
  9072  1608  1B86               	btfsc	6,7	;volatile
  9073  1609  2E22               	goto	i1l441
  9074  160A  037D               	decf	_flModeStep,w
  9075  160B  1903               	btfsc	3,2
  9076  160C  1E7A               	btfss	_flStartBitRecieve/(0+8),_flStartBitRecieve& (0+7)
  9077  160D  2E22               	goto	i1l441
  9078                           
  9079                           ;Bb_device.c: 112: T1CONbits.TMR1ON = 0;
  9080  160E  1010               	bcf	16,0	;volatile
  9081                           
  9082                           ;Bb_device.c: 118: if(TMR1H >= 0x0A && TMR1H <= 0x0C){
  9083  160F  300A               	movlw	10
  9084  1610  020F               	subwf	15,w	;volatile
  9085  1611  1C03               	skipc
  9086  1612  2E1F               	goto	i1l442
  9087  1613  300D               	movlw	13
  9088  1614  020F               	subwf	15,w	;volatile
  9089  1615  1803               	skipnc
  9090  1616  2E1F               	goto	i1l442
  9091                           
  9092                           ;Bb_device.c: 121: flModeStep = 2;
  9093  1617  3002               	movlw	2
  9094  1618  00F0               	movwf	??_fInterruptRecieveDevice
  9095  1619  0870               	movf	??_fInterruptRecieveDevice,w
  9096  161A  00FD               	movwf	_flModeStep
  9097  161B                     i1l4166:
  9098                           
  9099                           ;Bb_device.c: 124: TMR1H = 0x00;
  9100  161B  1283               	bcf	3,5	;RP0=0, select bank0
  9101  161C  018F               	clrf	15	;volatile
  9102                           
  9103                           ;Bb_device.c: 125: TMR1L = 0x00;
  9104  161D  018E               	clrf	14	;volatile
  9105                           
  9106                           ;Bb_device.c: 126: }
  9107  161E  0008               	return
  9108  161F                     i1l442:
  9109                           
  9110                           ;Bb_device.c: 127: else{;Bb_device.c: 128: flStartBitRecieve = 0;
  9111  161F  127A               	bcf	_flStartBitRecieve/(0+8),_flStartBitRecieve& (0+7)
  9112                           
  9113                           ;Bb_device.c: 129: flModeStep = 0;
  9114  1620  01FD               	clrf	_flModeStep
  9115                           
  9116                           ;Bb_device.c: 131: };Bb_device.c: 134: }
  9117  1621  0008               	return
  9118  1622                     i1l441:
  9119                           
  9120                           ;Bb_device.c: 135: else if(PORTBbits.RB7 == 1 && flModeStep == 2 && flStartBitRecieve ==
      +                           1){
  9121  1622  1F86               	btfss	6,7	;volatile
  9122  1623  2E2F               	goto	i1l445
  9123  1624  3002               	movlw	2
  9124  1625  067D               	xorwf	_flModeStep,w
  9125  1626  1903               	btfsc	3,2
  9126  1627  1E7A               	btfss	_flStartBitRecieve/(0+8),_flStartBitRecieve& (0+7)
  9127  1628  2E2F               	goto	i1l445
  9128                           
  9129                           ;Bb_device.c: 136: T1CONbits.TMR1ON = 1;
  9130  1629  1410               	bsf	16,0	;volatile
  9131                           
  9132                           ;Bb_device.c: 137: flModeStep = 3;
  9133  162A  3003               	movlw	3
  9134  162B  00F0               	movwf	??_fInterruptRecieveDevice
  9135  162C  0870               	movf	??_fInterruptRecieveDevice,w
  9136  162D  00FD               	movwf	_flModeStep
  9137                           
  9138                           ;Bb_device.c: 139: }
  9139  162E  0008               	return
  9140  162F                     i1l445:
  9141                           
  9142                           ;Bb_device.c: 140: else if(PORTBbits.RB7 == 0 && flModeStep == 3 && flStartBitRecieve ==
      +                           1){
  9143  162F  1B86               	btfsc	6,7	;volatile
  9144  1630  2E70               	goto	i1l447
  9145  1631  3003               	movlw	3
  9146  1632  067D               	xorwf	_flModeStep,w
  9147  1633  1903               	btfsc	3,2
  9148  1634  1E7A               	btfss	_flStartBitRecieve/(0+8),_flStartBitRecieve& (0+7)
  9149  1635  2E70               	goto	i1l447
  9150                           
  9151                           ;Bb_device.c: 143: T1CONbits.TMR1ON = 0;
  9152  1636  1010               	bcf	16,0	;volatile
  9153                           
  9154                           ;Bb_device.c: 144: flModeStep = 2;
  9155  1637  3002               	movlw	2
  9156  1638  00F0               	movwf	??_fInterruptRecieveDevice
  9157  1639  0870               	movf	??_fInterruptRecieveDevice,w
  9158  163A  00FD               	movwf	_flModeStep
  9159                           
  9160                           ;Bb_device.c: 145: if(cQuantity < 32){
  9161  163B  3020               	movlw	32
  9162  163C  1683               	bsf	3,5	;RP0=1, select bank1
  9163  163D  0240               	subwf	_cQuantity^(0+128),w
  9164  163E  1803               	skipnc
  9165  163F  2E61               	goto	i1l448
  9166                           
  9167                           ;Bb_device.c: 146: arrCmd[carrCmd] <<= 1;
  9168  1640  083F               	movf	_carrCmd^(0+128),w
  9169  1641  3EA0               	addlw	(low (_arrCmd| 0))& (0+255)
  9170  1642  0084               	movwf	4
  9171  1643  1003               	clrc
  9172  1644  1383               	bcf	3,7	;select IRP bank1
  9173  1645  0D80               	rlf	0,f
  9174                           
  9175                           ;Bb_device.c: 147: if( TMR1H >= 0x02) arrCmd[carrCmd] |= 0b00000001;
  9176  1646  3002               	movlw	2
  9177  1647  1283               	bcf	3,5	;RP0=0, select bank0
  9178  1648  020F               	subwf	15,w	;volatile
  9179  1649  1C03               	skipc
  9180  164A  2E50               	goto	i1l4194
  9181  164B  1683               	bsf	3,5	;RP0=1, select bank1
  9182  164C  083F               	movf	_carrCmd^(0+128),w
  9183  164D  3EA0               	addlw	(low (_arrCmd| 0))& (0+255)
  9184  164E  0084               	movwf	4
  9185  164F  1400               	bsf	0,0
  9186  1650                     i1l4194:
  9187                           
  9188                           ;Bb_device.c: 148: if(cQuantity == 7 || cQuantity == 15 || cQuantity == 23) {carrCmd++;}
  9189  1650  3007               	movlw	7
  9190  1651  1683               	bsf	3,5	;RP0=1, select bank1
  9191  1652  0640               	xorwf	_cQuantity^(0+128),w
  9192  1653  1903               	btfsc	3,2
  9193  1654  2E5D               	goto	i1l4200
  9194  1655  300F               	movlw	15
  9195  1656  0640               	xorwf	_cQuantity^(0+128),w
  9196  1657  1903               	btfsc	3,2
  9197  1658  2E5D               	goto	i1l4200
  9198  1659  3017               	movlw	23
  9199  165A  0640               	xorwf	_cQuantity^(0+128),w
  9200  165B  1D03               	btfss	3,2
  9201  165C  2E61               	goto	i1l448
  9202  165D                     i1l4200:
  9203  165D  3001               	movlw	1
  9204  165E  00F0               	movwf	??_fInterruptRecieveDevice
  9205  165F  0870               	movf	??_fInterruptRecieveDevice,w
  9206  1660  07BF               	addwf	_carrCmd^(0+128),f
  9207  1661                     i1l448:
  9208                           
  9209                           ;Bb_device.c: 149: };Bb_device.c: 150: cQuantity++;
  9210  1661  3001               	movlw	1
  9211  1662  00F0               	movwf	??_fInterruptRecieveDevice
  9212  1663  0870               	movf	??_fInterruptRecieveDevice,w
  9213  1664  07C0               	addwf	_cQuantity^(0+128),f
  9214                           
  9215                           ;Bb_device.c: 151: if(cQuantity == 32){
  9216  1665  3020               	movlw	32
  9217  1666  0640               	xorwf	_cQuantity^(0+128),w
  9218  1667  1D03               	btfss	3,2
  9219  1668  2E1B               	goto	i1l4166
  9220                           
  9221                           ;Bb_device.c: 159: flModeStep = 4;
  9222  1669  3004               	movlw	4
  9223  166A  00F0               	movwf	??_fInterruptRecieveDevice
  9224  166B  0870               	movf	??_fInterruptRecieveDevice,w
  9225  166C  00FD               	movwf	_flModeStep
  9226                           
  9227                           ;Bb_device.c: 162: cQuantity = 0;
  9228  166D  01C0               	clrf	_cQuantity^(0+128)
  9229                           
  9230                           ;Bb_device.c: 163: carrCmd = 0;
  9231  166E  01BF               	clrf	_carrCmd^(0+128)
  9232  166F  2E1B               	goto	i1l4166
  9233  1670                     i1l447:
  9234                           
  9235                           ;Bb_device.c: 171: else if(PORTBbits.RB7 == 1 && flModeStep == 4 && flStartBitRecieve ==
      +                           1){
  9236  1670  1F86               	btfss	6,7	;volatile
  9237  1671  2E7D               	goto	i1l455
  9238  1672  3004               	movlw	4
  9239  1673  067D               	xorwf	_flModeStep,w
  9240  1674  1903               	btfsc	3,2
  9241  1675  1E7A               	btfss	_flStartBitRecieve/(0+8),_flStartBitRecieve& (0+7)
  9242  1676  2E7D               	goto	i1l455
  9243                           
  9244                           ;Bb_device.c: 175: T1CONbits.TMR1ON = 1;
  9245  1677  1410               	bsf	16,0	;volatile
  9246                           
  9247                           ;Bb_device.c: 176: flModeStep = 5;
  9248  1678  3005               	movlw	5
  9249  1679  00F0               	movwf	??_fInterruptRecieveDevice
  9250  167A  0870               	movf	??_fInterruptRecieveDevice,w
  9251  167B  00FD               	movwf	_flModeStep
  9252                           
  9253                           ;Bb_device.c: 177: }
  9254  167C  0008               	return
  9255  167D                     i1l455:
  9256                           
  9257                           ;Bb_device.c: 178: else if(PORTBbits.RB7 == 0 && flModeStep == 5 && flStartBitRecieve ==
      +                           1){
  9258  167D  1B86               	btfsc	6,7	;volatile
  9259  167E  0008               	return
  9260  167F  3005               	movlw	5
  9261  1680  067D               	xorwf	_flModeStep,w
  9262  1681  1D03               	btfss	3,2
  9263  1682  0008               	return
  9264  1683  1E7A               	btfss	_flStartBitRecieve/(0+8),_flStartBitRecieve& (0+7)
  9265  1684  0008               	return
  9266                           
  9267                           ;Bb_device.c: 180: T1CONbits.TMR1ON = 0;
  9268  1685  1010               	bcf	16,0	;volatile
  9269                           
  9270                           ;Bb_device.c: 185: if(TMR1H >= 0x02 && TMR1H <= 0x04){
  9271  1686  3002               	movlw	2
  9272  1687  020F               	subwf	15,w	;volatile
  9273  1688  1C03               	skipc
  9274  1689  2E95               	goto	i1l4240
  9275  168A  3005               	movlw	5
  9276  168B  020F               	subwf	15,w	;volatile
  9277  168C  1803               	skipnc
  9278  168D  2E95               	goto	i1l4240
  9279                           
  9280                           ;Bb_device.c: 197: flModeStep = 0;
  9281  168E  01FD               	clrf	_flModeStep
  9282                           
  9283                           ;Bb_device.c: 198: flStartBitRecieve = 0;
  9284  168F  127A               	bcf	_flStartBitRecieve/(0+8),_flStartBitRecieve& (0+7)
  9285                           
  9286                           ;Bb_device.c: 199: flStopBitRecieve = 1;
  9287  1690  15FA               	bsf	_flStopBitRecieve/(0+8),_flStopBitRecieve& (0+7)
  9288                           
  9289                           ;Bb_device.c: 201: cTMR0 = 0;
  9290  1691  1683               	bsf	3,5	;RP0=1, select bank1
  9291  1692  01C1               	clrf	_cTMR0^(0+128)
  9292                           
  9293                           ;Bb_device.c: 202: INTCONbits.T0IF = 0;
  9294  1693  110B               	bcf	11,2	;volatile
  9295                           
  9296                           ;Bb_device.c: 203: INTCONbits.T0IE = 0;
  9297  1694  128B               	bcf	11,5	;volatile
  9298  1695                     i1l4240:
  9299                           
  9300                           ;Bb_device.c: 207: };Bb_device.c: 208: _delay((unsigned long)((1)*(8000000/4000.0)));
  9301  1695  3003               	movlw	3
  9302  1696  00F1               	movwf	??_fInterruptRecieveDevice+1
  9303  1697  3097               	movlw	151
  9304  1698  00F0               	movwf	??_fInterruptRecieveDevice
  9305  1699                     u657_27:
  9306  1699  0BF0               	decfsz	??_fInterruptRecieveDevice,f
  9307  169A  2E99               	goto	u657_27
  9308  169B  0BF1               	decfsz	??_fInterruptRecieveDevice+1,f
  9309  169C  2E99               	goto	u657_27
  9310  169D  2E9E               	nop2
  9311  169E  0008               	return
  9312  169F                     __end_of_fInterruptRecieveDevice:
  9313  007E                     btemp	set	126	;btemp
  9314  007E                     wtemp0	set	126
  9315                           
  9316                           	psect	config
  9317                           
  9318                           ;Config register CONFIG @ 0x2007
  9319                           ;	Oscillator Selection bits
  9320                           ;	FOSC = HS, HS oscillator
  9321                           ;	Watchdog Timer Enable bit
  9322                           ;	WDTE = OFF, WDT disabled
  9323                           ;	Power-up Timer Enable bit
  9324                           ;	PWRTE = OFF, PWRT disabled
  9325                           ;	FLASH Program Memory Code Protection bit
  9326                           ;	CP = OFF, Code protection off
  9327                           ;	Brown-out Reset Enable bit
  9328                           ;	BOREN = OFF, BOR disabled
  9329  2007                     	org	8199
  9330  2007  3FBA               	dw	16314
  9331                           
  9332                           	psect	text15_split_1
  9333  0838                     l4548:
  9334                           
  9335                           ;menu.c: 19: else;menu.c: 20: _MenuNav--;
  9336  0838  30FF               	movlw	255
  9337  0839  07FB               	addwf	__MenuNav,f
  9338  083A  1803               	skipnc
  9339  083B  0AFC               	incf	__MenuNav+1,f
  9340  083C  30FF               	movlw	255
  9341  083D  2936               	goto	L7
  9342  083E                     l4550:
  9343                           
  9344                           ;menu.c: 22: else if(_MenuNav >= 100 && _MenuNav < 1000) {
  9345  083E  087C               	movf	__MenuNav+1,w
  9346  083F  3A80               	xorlw	128
  9347  0840  00FF               	movwf	127
  9348  0841  3080               	movlw	128
  9349  0842  027F               	subwf	127,w
  9350  0843  1D03               	skipz
  9351  0844  2847               	goto	u5225
  9352  0845  3064               	movlw	100
  9353  0846  027B               	subwf	__MenuNav,w
  9354  0847                     u5225:
  9355  0847  1C03               	skipc
  9356  0848  28C2               	goto	l4578
  9357  0849  087C               	movf	__MenuNav+1,w
  9358  084A  3A80               	xorlw	128
  9359  084B  00FF               	movwf	127
  9360  084C  3083               	movlw	131
  9361  084D  027F               	subwf	127,w
  9362  084E  1D03               	skipz
  9363  084F  2852               	goto	u5235
  9364  0850  30E8               	movlw	232
  9365  0851  027B               	subwf	__MenuNav,w
  9366  0852                     u5235:
  9367  0852  1803               	skipnc
  9368  0853  28C2               	goto	l4578
  9369                           
  9370                           ;menu.c: 23: if(_MenuNav == 210 && _settingTimeImpDO1 != 0) _settingTimeImpDO1--;
  9371  0854  30D2               	movlw	210
  9372  0855  067B               	xorwf	__MenuNav,w
  9373  0856  047C               	iorwf	__MenuNav+1,w
  9374  0857  1D03               	btfss	3,2
  9375  0858  2866               	goto	l4560
  9376  0859  1683               	bsf	3,5	;RP0=1, select bank1
  9377  085A  1303               	bcf	3,6	;RP1=0, select bank1
  9378  085B  0834               	movf	__settingTimeImpDO1^(0+128),w
  9379  085C  0435               	iorwf	(__settingTimeImpDO1+1)^(0+128),w
  9380  085D  1903               	btfsc	3,2
  9381  085E  2866               	goto	l4560
  9382  085F  3001               	movlw	1
  9383  0860  02B4               	subwf	__settingTimeImpDO1^(0+128),f
  9384  0861  3000               	movlw	0
  9385  0862  1C03               	skipc
  9386  0863  03B5               	decf	(__settingTimeImpDO1+1)^(0+128),f
  9387  0864  02B5               	subwf	(__settingTimeImpDO1+1)^(0+128),f
  9388  0865  29EC               	goto	l4584
  9389  0866                     l4560:
  9390                           
  9391                           ;menu.c: 24: else if(_MenuNav == 230 && _settingTimerOnDO2 != 0) _settingTimerOnDO2--;
  9392  0866  30E6               	movlw	230
  9393  0867  067B               	xorwf	__MenuNav,w
  9394  0868  047C               	iorwf	__MenuNav+1,w
  9395  0869  1D03               	btfss	3,2
  9396  086A  2878               	goto	l4566
  9397  086B  1683               	bsf	3,5	;RP0=1, select bank1
  9398  086C  1303               	bcf	3,6	;RP1=0, select bank1
  9399  086D  0832               	movf	__settingTimerOnDO2^(0+128),w
  9400  086E  0433               	iorwf	(__settingTimerOnDO2+1)^(0+128),w
  9401  086F  1903               	btfsc	3,2
  9402  0870  2878               	goto	l4566
  9403  0871  3001               	movlw	1
  9404  0872  02B2               	subwf	__settingTimerOnDO2^(0+128),f
  9405  0873  3000               	movlw	0
  9406  0874  1C03               	skipc
  9407  0875  03B3               	decf	(__settingTimerOnDO2+1)^(0+128),f
  9408  0876  02B3               	subwf	(__settingTimerOnDO2+1)^(0+128),f
  9409  0877  29EC               	goto	l4584
  9410  0878                     l4566:
  9411                           
  9412                           ;menu.c: 25: else if(_MenuNav == 240 && _settingTimerOffDO2 != 0) _settingTimerOffDO2--;
  9413  0878  30F0               	movlw	240
  9414  0879  067B               	xorwf	__MenuNav,w
  9415  087A  047C               	iorwf	__MenuNav+1,w
  9416  087B  1D03               	btfss	3,2
  9417  087C  288A               	goto	l4572
  9418  087D  1683               	bsf	3,5	;RP0=1, select bank1
  9419  087E  1303               	bcf	3,6	;RP1=0, select bank1
  9420  087F  0830               	movf	__settingTimerOffDO2^(0+128),w
  9421  0880  0431               	iorwf	(__settingTimerOffDO2+1)^(0+128),w
  9422  0881  1903               	btfsc	3,2
  9423  0882  288A               	goto	l4572
  9424  0883  3001               	movlw	1
  9425  0884  02B0               	subwf	__settingTimerOffDO2^(0+128),f
  9426  0885  3000               	movlw	0
  9427  0886  1C03               	skipc
  9428  0887  03B1               	decf	(__settingTimerOffDO2+1)^(0+128),f
  9429  0888  02B1               	subwf	(__settingTimerOffDO2+1)^(0+128),f
  9430  0889  29EC               	goto	l4584
  9431  088A                     l4572:
  9432                           
  9433                           ;menu.c: 26: else if(_MenuNav <= (short int)_tempDigit)
  9434  088A  1683               	bsf	3,5	;RP0=1, select bank1
  9435  088B  1303               	bcf	3,6	;RP1=0, select bank1
  9436  088C  082B               	movf	(__tempDigit+1)^(0+128),w
  9437  088D  3A80               	xorlw	128
  9438  088E  1283               	bcf	3,5	;RP0=0, select bank0
  9439  088F  00D0               	movwf	??_fMenuStrip
  9440  0890  087C               	movf	__MenuNav+1,w
  9441  0891  3A80               	xorlw	128
  9442  0892  0250               	subwf	??_fMenuStrip,w
  9443  0893  1D03               	skipz
  9444  0894  2898               	goto	u5305
  9445  0895  087B               	movf	__MenuNav,w
  9446  0896  1683               	bsf	3,5	;RP0=1, select bank1
  9447  0897  022A               	subwf	__tempDigit^(0+128),w
  9448  0898                     u5305:
  9449  0898  1C03               	skipc
  9450  0899  2838               	goto	l4548
  9451                           
  9452                           ;menu.c: 27: _MenuNav = (short int)((_tempDigit + _SubMenuArr[_firstCell][_secondCell]) 
      +                          - 1);
  9453  089A  3006               	movlw	6
  9454  089B  1283               	bcf	3,5	;RP0=0, select bank0
  9455  089C  1303               	bcf	3,6	;RP1=0, select bank0
  9456  089D  00D0               	movwf	??_fMenuStrip
  9457  089E  0850               	movf	??_fMenuStrip,w
  9458  089F  00A9               	movwf	___bmul@multiplicand
  9459  08A0  1683               	bsf	3,5	;RP0=1, select bank1
  9460  08A1  083D               	movf	__firstCell^(0+128),w
  9461  08A2  160A  158A  2475  120A  158A  	fcall	___bmul
  9462  08A7  3E90               	addlw	(low (__SubMenuArr| (0+256)))& (0+255)
  9463  08A8  1683               	bsf	3,5	;RP0=1, select bank1
  9464  08A9  073C               	addwf	__secondCell^(0+128),w
  9465  08AA  1283               	bcf	3,5	;RP0=0, select bank0
  9466  08AB  00D1               	movwf	??_fMenuStrip+1
  9467  08AC  0851               	movf	??_fMenuStrip+1,w
  9468  08AD  0084               	movwf	4
  9469  08AE  1783               	bsf	3,7	;select IRP bank3
  9470  08AF  0800               	movf	0,w
  9471  08B0  1683               	bsf	3,5	;RP0=1, select bank1
  9472  08B1  072A               	addwf	__tempDigit^(0+128),w
  9473  08B2  1283               	bcf	3,5	;RP0=0, select bank0
  9474  08B3  00D2               	movwf	??_fMenuStrip+2
  9475  08B4  1683               	bsf	3,5	;RP0=1, select bank1
  9476  08B5  082B               	movf	(__tempDigit+1)^(0+128),w
  9477  08B6  1803               	skipnc
  9478  08B7  0A2B               	incf	(__tempDigit+1)^(0+128),w
  9479  08B8  1283               	bcf	3,5	;RP0=0, select bank0
  9480  08B9  00D3               	movwf	??_fMenuStrip+3
  9481  08BA  0852               	movf	??_fMenuStrip+2,w
  9482  08BB  3EFF               	addlw	255
  9483  08BC  00FB               	movwf	__MenuNav
  9484  08BD  0853               	movf	??_fMenuStrip+3,w
  9485  08BE                     L24:
  9486  08BE  1803               	skipnc
  9487  08BF  3E01               	addlw	1
  9488  08C0  3EFF               	addlw	255
  9489  08C1  292F               	goto	L9
  9490  08C2                     l4578:
  9491                           
  9492                           ;menu.c: 30: else if(_MenuNav >= 1000) _MenuNav = _MenuNav;
  9493  08C2  087C               	movf	__MenuNav+1,w
  9494  08C3  3A80               	xorlw	128
  9495  08C4  00FF               	movwf	127
  9496  08C5  3083               	movlw	131
  9497  08C6  027F               	subwf	127,w
  9498  08C7  1D03               	skipz
  9499  08C8  28CB               	goto	u5315
  9500  08C9  30E8               	movlw	232
  9501  08CA  027B               	subwf	__MenuNav,w
  9502  08CB                     u5315:
  9503  08CB  1803               	btfsc	3,0
  9504  08CC  29EC               	goto	l4584
  9505  08CD  2838               	goto	l4548
  9506  08CE                     l4588:	
  9507                           ;menu.c: 34: }
  9508                           
  9509                           
  9510                           ;menu.c: 35: else if(flMenuStrip == 0x04 && flSwitchButton == 0){
  9511  08CE  3004               	movlw	4
  9512  08CF  063E               	xorwf	_flMenuStrip^(0+128),w
  9513  08D0  1903               	btfsc	3,2
  9514  08D1  187A               	btfsc	_flSwitchButton/(0+8),_flSwitchButton& (0+7)
  9515  08D2  29BE               	goto	l4640
  9516                           
  9517                           ;menu.c: 36: if(_MenuNav >= _MenuArr[0] && _MenuNav < 10) _MenuNav = 1;
  9518  08D3  087C               	movf	__MenuNav+1,w
  9519  08D4  3A80               	xorlw	128
  9520  08D5  1283               	bcf	3,5	;RP0=0, select bank0
  9521  08D6  00D0               	movwf	??_fMenuStrip
  9522  08D7  3080               	movlw	128
  9523  08D8  0250               	subwf	??_fMenuStrip,w
  9524  08D9  1D03               	skipz
  9525  08DA  28DF               	goto	u5345
  9526  08DB  1683               	bsf	3,5	;RP0=1, select bank3
  9527  08DC  1703               	bsf	3,6	;RP1=1, select bank3
  9528  08DD  0828               	movf	__MenuArr^(0+384),w
  9529  08DE  027B               	subwf	__MenuNav,w
  9530  08DF                     u5345:
  9531  08DF  1C03               	skipc
  9532  08E0  28F0               	goto	l4598
  9533  08E1  087C               	movf	__MenuNav+1,w
  9534  08E2  3A80               	xorlw	128
  9535  08E3  00FF               	movwf	127
  9536  08E4  3080               	movlw	128
  9537  08E5  027F               	subwf	127,w
  9538  08E6  1D03               	skipz
  9539  08E7  28EA               	goto	u5355
  9540  08E8  300A               	movlw	10
  9541  08E9  027B               	subwf	__MenuNav,w
  9542  08EA                     u5355:
  9543  08EA  1803               	skipnc
  9544  08EB  28F0               	goto	l4598
  9545  08EC  3001               	movlw	1
  9546  08ED  00FB               	movwf	__MenuNav
  9547  08EE  3000               	movlw	0
  9548  08EF  292F               	goto	L9
  9549  08F0                     l4598:
  9550                           
  9551                           ;menu.c: 37: else if(_MenuNav >= 10 && _MenuNav < 100){
  9552  08F0  087C               	movf	__MenuNav+1,w
  9553  08F1  3A80               	xorlw	128
  9554  08F2  00FF               	movwf	127
  9555  08F3  3080               	movlw	128
  9556  08F4  027F               	subwf	127,w
  9557  08F5  1D03               	skipz
  9558  08F6  28F9               	goto	u5365
  9559  08F7  300A               	movlw	10
  9560  08F8  027B               	subwf	__MenuNav,w
  9561  08F9                     u5365:
  9562  08F9  1C03               	skipc
  9563  08FA  2938               	goto	l4608
  9564  08FB  087C               	movf	__MenuNav+1,w
  9565  08FC  3A80               	xorlw	128
  9566  08FD  00FF               	movwf	127
  9567  08FE  3080               	movlw	128
  9568  08FF  027F               	subwf	127,w
  9569  0900  1D03               	skipz
  9570  0901  2904               	goto	u5375
  9571  0902  3064               	movlw	100
  9572  0903  027B               	subwf	__MenuNav,w
  9573  0904                     u5375:
  9574  0904  1803               	skipnc
  9575  0905  2938               	goto	l4608
  9576                           
  9577                           ;menu.c: 38: if(_MenuNav >= _tempTwoDigit + _MenuArr[_cellTwoDigit] - 1)
  9578  0906  1683               	bsf	3,5	;RP0=1, select bank1
  9579  0907  1303               	bcf	3,6	;RP1=0, select bank1
  9580  0908  083B               	movf	__cellTwoDigit^(0+128),w
  9581  0909  3EA8               	addlw	(low (__MenuArr| (0+256)))& (0+255)
  9582  090A  0084               	movwf	4
  9583  090B  083A               	movf	__tempTwoDigit^(0+128),w
  9584  090C  1783               	bsf	3,7	;select IRP bank3
  9585  090D  0700               	addwf	0,w
  9586  090E  1283               	bcf	3,5	;RP0=0, select bank0
  9587  090F  00D0               	movwf	??_fMenuStrip
  9588  0910  01D1               	clrf	??_fMenuStrip+1
  9589  0911  0DD1               	rlf	??_fMenuStrip+1,f
  9590  0912  0850               	movf	??_fMenuStrip,w
  9591  0913  3EFF               	addlw	255
  9592  0914  00D2               	movwf	??_fMenuStrip+2
  9593  0915  0851               	movf	??_fMenuStrip+1,w
  9594  0916  1803               	skipnc
  9595  0917  3E01               	addlw	1
  9596  0918  3EFF               	addlw	255
  9597  0919  00D3               	movwf	??_fMenuStrip+3
  9598  091A  087C               	movf	__MenuNav+1,w
  9599  091B  3A80               	xorlw	128
  9600  091C  00D4               	movwf	??_fMenuStrip+4
  9601  091D  0853               	movf	??_fMenuStrip+3,w
  9602  091E  3A80               	xorlw	128
  9603  091F  0254               	subwf	??_fMenuStrip+4,w
  9604  0920  1D03               	skipz
  9605  0921  2924               	goto	u5385
  9606  0922  0852               	movf	??_fMenuStrip+2,w
  9607  0923  027B               	subwf	__MenuNav,w
  9608  0924                     u5385:
  9609  0924  1C03               	skipc
  9610  0925  2931               	goto	l4606
  9611                           
  9612                           ;menu.c: 39: _MenuNav = _tempTwoDigit;
  9613  0926  1683               	bsf	3,5	;RP0=1, select bank1
  9614  0927  1303               	bcf	3,6	;RP1=0, select bank1
  9615  0928  083A               	movf	__tempTwoDigit^(0+128),w
  9616  0929  1283               	bcf	3,5	;RP0=0, select bank0
  9617  092A                     L23:
  9618  092A  00D0               	movwf	??_fMenuStrip
  9619  092B  01D1               	clrf	??_fMenuStrip+1
  9620  092C  0850               	movf	??_fMenuStrip,w
  9621  092D  00FB               	movwf	__MenuNav
  9622  092E  0851               	movf	??_fMenuStrip+1,w
  9623  092F                     L9:
  9624  092F  00FC               	movwf	__MenuNav+1
  9625  0930  29EC               	goto	l4584
  9626  0931                     l4606:
  9627                           
  9628                           ;menu.c: 40: else;menu.c: 41: _MenuNav++;
  9629  0931  3001               	movlw	1
  9630  0932  07FB               	addwf	__MenuNav,f
  9631  0933  1803               	skipnc
  9632  0934  0AFC               	incf	__MenuNav+1,f
  9633  0935  3000               	movlw	0
  9634  0936                     L7:
  9635  0936  07FC               	addwf	__MenuNav+1,f
  9636  0937  29EC               	goto	l4584
  9637  0938                     l4608:
  9638                           
  9639                           ;menu.c: 43: else if(_MenuNav >= 100 && _MenuNav < 1000) {
  9640  0938  087C               	movf	__MenuNav+1,w
  9641  0939  3A80               	xorlw	128
  9642  093A  00FF               	movwf	127
  9643  093B  3080               	movlw	128
  9644  093C  027F               	subwf	127,w
  9645  093D  1D03               	skipz
  9646  093E  2941               	goto	u5395
  9647  093F  3064               	movlw	100
  9648  0940  027B               	subwf	__MenuNav,w
  9649  0941                     u5395:
  9650  0941  1C03               	skipc
  9651  0942  29B2               	goto	l4630
  9652  0943  087C               	movf	__MenuNav+1,w
  9653  0944  3A80               	xorlw	128
  9654  0945  00FF               	movwf	127
  9655  0946  3083               	movlw	131
  9656  0947  027F               	subwf	127,w
  9657  0948  1D03               	skipz
  9658  0949  294C               	goto	u5405
  9659  094A  30E8               	movlw	232
  9660  094B  027B               	subwf	__MenuNav,w
  9661  094C                     u5405:
  9662  094C  1803               	skipnc
  9663  094D  29B2               	goto	l4630
  9664                           
  9665                           ;menu.c: 44: if(_MenuNav == 210) _settingTimeImpDO1++;
  9666  094E  30D2               	movlw	210
  9667  094F  067B               	xorwf	__MenuNav,w
  9668  0950  047C               	iorwf	__MenuNav+1,w
  9669  0951  1D03               	btfss	3,2
  9670  0952  295C               	goto	l4616
  9671  0953  3001               	movlw	1
  9672  0954  1683               	bsf	3,5	;RP0=1, select bank1
  9673  0955  1303               	bcf	3,6	;RP1=0, select bank1
  9674  0956  07B4               	addwf	__settingTimeImpDO1^(0+128),f
  9675  0957  1803               	skipnc
  9676  0958  0AB5               	incf	(__settingTimeImpDO1+1)^(0+128),f
  9677  0959  3000               	movlw	0
  9678  095A  07B5               	addwf	(__settingTimeImpDO1+1)^(0+128),f
  9679  095B  29EC               	goto	l4584
  9680  095C                     l4616:
  9681                           
  9682                           ;menu.c: 45: else if(_MenuNav == 230) _settingTimerOnDO2++;
  9683  095C  30E6               	movlw	230
  9684  095D  067B               	xorwf	__MenuNav,w
  9685  095E  047C               	iorwf	__MenuNav+1,w
  9686  095F  1D03               	btfss	3,2
  9687  0960  296A               	goto	l4620
  9688  0961  3001               	movlw	1
  9689  0962  1683               	bsf	3,5	;RP0=1, select bank1
  9690  0963  1303               	bcf	3,6	;RP1=0, select bank1
  9691  0964  07B2               	addwf	__settingTimerOnDO2^(0+128),f
  9692  0965  1803               	skipnc
  9693  0966  0AB3               	incf	(__settingTimerOnDO2+1)^(0+128),f
  9694  0967  3000               	movlw	0
  9695  0968  07B3               	addwf	(__settingTimerOnDO2+1)^(0+128),f
  9696  0969  29EC               	goto	l4584
  9697  096A                     l4620:
  9698                           
  9699                           ;menu.c: 46: else if(_MenuNav == 240) _settingTimerOffDO2++;
  9700  096A  30F0               	movlw	240
  9701  096B  067B               	xorwf	__MenuNav,w
  9702  096C  047C               	iorwf	__MenuNav+1,w
  9703  096D  1D03               	btfss	3,2
  9704  096E  2978               	goto	l4624
  9705  096F  3001               	movlw	1
  9706  0970  1683               	bsf	3,5	;RP0=1, select bank1
  9707  0971  1303               	bcf	3,6	;RP1=0, select bank1
  9708  0972  07B0               	addwf	__settingTimerOffDO2^(0+128),f
  9709  0973  1803               	skipnc
  9710  0974  0AB1               	incf	(__settingTimerOffDO2+1)^(0+128),f
  9711  0975  3000               	movlw	0
  9712  0976  07B1               	addwf	(__settingTimerOffDO2+1)^(0+128),f
  9713  0977  29EC               	goto	l4584
  9714  0978                     l4624:
  9715                           
  9716                           ;menu.c: 47: else if(_MenuNav >= (short int)((_tempDigit + _SubMenuArr[_firstCell][_seco
      +                          ndCell]) - 1))
  9717  0978  3006               	movlw	6
  9718  0979  1283               	bcf	3,5	;RP0=0, select bank0
  9719  097A  1303               	bcf	3,6	;RP1=0, select bank0
  9720  097B  00D0               	movwf	??_fMenuStrip
  9721  097C  0850               	movf	??_fMenuStrip,w
  9722  097D  00A9               	movwf	___bmul@multiplicand
  9723  097E  1683               	bsf	3,5	;RP0=1, select bank1
  9724  097F  083D               	movf	__firstCell^(0+128),w
  9725  0980  160A  158A  2475  120A  158A  	fcall	___bmul
  9726  0985  3E90               	addlw	(low (__SubMenuArr| (0+256)))& (0+255)
  9727  0986  1683               	bsf	3,5	;RP0=1, select bank1
  9728  0987  073C               	addwf	__secondCell^(0+128),w
  9729  0988  1283               	bcf	3,5	;RP0=0, select bank0
  9730  0989  00D1               	movwf	??_fMenuStrip+1
  9731  098A  0851               	movf	??_fMenuStrip+1,w
  9732  098B  0084               	movwf	4
  9733  098C  1783               	bsf	3,7	;select IRP bank3
  9734  098D  0800               	movf	0,w
  9735  098E  1683               	bsf	3,5	;RP0=1, select bank1
  9736  098F  072A               	addwf	__tempDigit^(0+128),w
  9737  0990  1283               	bcf	3,5	;RP0=0, select bank0
  9738  0991  00D2               	movwf	??_fMenuStrip+2
  9739  0992  1683               	bsf	3,5	;RP0=1, select bank1
  9740  0993  082B               	movf	(__tempDigit+1)^(0+128),w
  9741  0994  1803               	skipnc
  9742  0995  0A2B               	incf	(__tempDigit+1)^(0+128),w
  9743  0996  1283               	bcf	3,5	;RP0=0, select bank0
  9744  0997  00D3               	movwf	??_fMenuStrip+3
  9745  0998  0852               	movf	??_fMenuStrip+2,w
  9746  0999  3EFF               	addlw	255
  9747  099A  00D4               	movwf	??_fMenuStrip+4
  9748  099B  0853               	movf	??_fMenuStrip+3,w
  9749  099C  1803               	skipnc
  9750  099D  3E01               	addlw	1
  9751  099E  3EFF               	addlw	255
  9752  099F  00D5               	movwf	??_fMenuStrip+5
  9753  09A0  087C               	movf	__MenuNav+1,w
  9754  09A1  3A80               	xorlw	128
  9755  09A2  00D6               	movwf	??_fMenuStrip+6
  9756  09A3  0855               	movf	??_fMenuStrip+5,w
  9757  09A4  3A80               	xorlw	128
  9758  09A5  0256               	subwf	??_fMenuStrip+6,w
  9759  09A6  1D03               	skipz
  9760  09A7  29AA               	goto	u5445
  9761  09A8  0854               	movf	??_fMenuStrip+4,w
  9762  09A9  027B               	subwf	__MenuNav,w
  9763  09AA                     u5445:
  9764  09AA  1C03               	skipc
  9765  09AB  2931               	goto	l4606
  9766                           
  9767                           ;menu.c: 48: _MenuNav = _tempDigit;
  9768  09AC  1683               	bsf	3,5	;RP0=1, select bank1
  9769  09AD  1303               	bcf	3,6	;RP1=0, select bank1
  9770  09AE  082B               	movf	(__tempDigit+1)^(0+128),w
  9771  09AF  00FC               	movwf	__MenuNav+1
  9772  09B0  082A               	movf	__tempDigit^(0+128),w
  9773  09B1  29EB               	goto	L10
  9774  09B2                     l4630:
  9775                           
  9776                           ;menu.c: 51: else if(_MenuNav >= 1000) _MenuNav = _MenuNav;
  9777  09B2  087C               	movf	__MenuNav+1,w
  9778  09B3  3A80               	xorlw	128
  9779  09B4  00FF               	movwf	127
  9780  09B5  3083               	movlw	131
  9781  09B6  027F               	subwf	127,w
  9782  09B7  1D03               	skipz
  9783  09B8  29BB               	goto	u5455
  9784  09B9  30E8               	movlw	232
  9785  09BA  027B               	subwf	__MenuNav,w
  9786  09BB                     u5455:
  9787  09BB  1803               	btfsc	3,0
  9788  09BC  29EC               	goto	l4584
  9789  09BD  2931               	goto	l4606
  9790  09BE                     l4640:
  9791                           
  9792                           ;menu.c: 56: else if(flMenuStrip == 0x08 && flSwitchButton == 0){
  9793  09BE  3008               	movlw	8
  9794  09BF  063E               	xorwf	_flMenuStrip^(0+128),w
  9795  09C0  1903               	btfsc	3,2
  9796  09C1  187A               	btfsc	_flSwitchButton/(0+8),_flSwitchButton& (0+7)
  9797  09C2  29EE               	goto	l4654
  9798                           
  9799                           ;menu.c: 57: if(_MenuNav > 1 && _MenuNav <= 1000) {
  9800  09C3  087C               	movf	__MenuNav+1,w
  9801  09C4  3A80               	xorlw	128
  9802  09C5  00FF               	movwf	127
  9803  09C6  3080               	movlw	128
  9804  09C7  027F               	subwf	127,w
  9805  09C8  1D03               	skipz
  9806  09C9  29CC               	goto	u5485
  9807  09CA  3002               	movlw	2
  9808  09CB  027B               	subwf	__MenuNav,w
  9809  09CC                     u5485:
  9810  09CC  1C03               	skipc
  9811  09CD  29EC               	goto	l4584
  9812  09CE  087C               	movf	__MenuNav+1,w
  9813  09CF  3A80               	xorlw	128
  9814  09D0  00FF               	movwf	127
  9815  09D1  3083               	movlw	131
  9816  09D2  027F               	subwf	127,w
  9817  09D3  1D03               	skipz
  9818  09D4  29D7               	goto	u5495
  9819  09D5  30E9               	movlw	233
  9820  09D6  027B               	subwf	__MenuNav,w
  9821  09D7                     u5495:
  9822  09D7  1803               	skipnc
  9823  09D8  29EC               	goto	l4584
  9824                           
  9825                           ;menu.c: 58: _MenuNav *= 10;
  9826  09D9  300A               	movlw	10
  9827  09DA  1283               	bcf	3,5	;RP0=0, select bank0
  9828  09DB  1303               	bcf	3,6	;RP1=0, select bank0
  9829  09DC  00A0               	movwf	___wmul@multiplier
  9830  09DD  3000               	movlw	0
  9831  09DE  00A1               	movwf	___wmul@multiplier+1
  9832  09DF  087C               	movf	__MenuNav+1,w
  9833  09E0  00A3               	movwf	___wmul@multiplicand+1
  9834  09E1  087B               	movf	__MenuNav,w
  9835  09E2  00A2               	movwf	___wmul@multiplicand
  9836  09E3  160A  158A  2500  120A  158A  	fcall	___wmul
  9837  09E8  0821               	movf	?___wmul+1,w
  9838  09E9  00FC               	movwf	__MenuNav+1
  9839  09EA  0820               	movf	?___wmul,w
  9840  09EB                     L10:
  9841  09EB  00FB               	movwf	__MenuNav
  9842  09EC                     l4584:
  9843                           
  9844                           ;menu.c: 32: flSwitchButton = 1;
  9845  09EC  147A               	bsf	_flSwitchButton/(0+8),_flSwitchButton& (0+7)
  9846                           
  9847                           ;menu.c: 33: flClearLCD = 0;
  9848  09ED  10FA               	bcf	_flClearLCD/(0+8),_flClearLCD& (0+7)
  9849  09EE                     l4654:
  9850                           
  9851                           ;menu.c: 63: };menu.c: 65: if(_MenuNav >= 100){
  9852  09EE  087C               	movf	__MenuNav+1,w
  9853  09EF  3A80               	xorlw	128
  9854  09F0  00FF               	movwf	127
  9855  09F1  3080               	movlw	128
  9856  09F2  027F               	subwf	127,w
  9857  09F3  1D03               	skipz
  9858  09F4  29F7               	goto	u5505
  9859  09F5  3064               	movlw	100
  9860  09F6  027B               	subwf	__MenuNav,w
  9861  09F7                     u5505:
  9862  09F7  1C03               	skipc
  9863  09F8  2A69               	goto	l4658
  9864                           
  9865                           ;menu.c: 66: _firstCell = (unsigned char)(_MenuNav / 100 - 2);
  9866  09F9  3064               	movlw	100
  9867  09FA  1283               	bcf	3,5	;RP0=0, select bank0
  9868  09FB  1303               	bcf	3,6	;RP1=0, select bank0
  9869  09FC  00A0               	movwf	___awdiv@divisor
  9870  09FD  3000               	movlw	0
  9871  09FE  00A1               	movwf	___awdiv@divisor+1
  9872  09FF  087C               	movf	__MenuNav+1,w
  9873  0A00  00A3               	movwf	___awdiv@dividend+1
  9874  0A01  087B               	movf	__MenuNav,w
  9875  0A02  00A2               	movwf	___awdiv@dividend
  9876  0A03  160A  118A  221A  120A  158A  	fcall	___awdiv
  9877  0A08  0820               	movf	?___awdiv,w
  9878  0A09  3EFE               	addlw	254
  9879  0A0A  00D0               	movwf	??_fMenuStrip
  9880  0A0B  0850               	movf	??_fMenuStrip,w
  9881  0A0C  1683               	bsf	3,5	;RP0=1, select bank1
  9882  0A0D  00BD               	movwf	__firstCell^(0+128)
  9883                           
  9884                           ;menu.c: 67: _secondCell = (unsigned char)(_MenuNav / 10 % 10);
  9885  0A0E  300A               	movlw	10
  9886  0A0F  1283               	bcf	3,5	;RP0=0, select bank0
  9887  0A10  00A9               	movwf	___awmod@divisor
  9888  0A11  3000               	movlw	0
  9889  0A12  00AA               	movwf	___awmod@divisor+1
  9890  0A13  300A               	movlw	10
  9891  0A14  00A0               	movwf	___awdiv@divisor
  9892  0A15  3000               	movlw	0
  9893  0A16  00A1               	movwf	___awdiv@divisor+1
  9894  0A17  087C               	movf	__MenuNav+1,w
  9895  0A18  00A3               	movwf	___awdiv@dividend+1
  9896  0A19  087B               	movf	__MenuNav,w
  9897  0A1A  00A2               	movwf	___awdiv@dividend
  9898  0A1B  160A  118A  221A  120A  158A  	fcall	___awdiv
  9899  0A20  0821               	movf	?___awdiv+1,w
  9900  0A21  00AC               	movwf	___awmod@dividend+1
  9901  0A22  0820               	movf	?___awdiv,w
  9902  0A23  00AB               	movwf	___awmod@dividend
  9903  0A24  160A  158A  2717  120A  158A  	fcall	___awmod
  9904  0A29  0829               	movf	?___awmod,w
  9905  0A2A  00D0               	movwf	??_fMenuStrip
  9906  0A2B  0850               	movf	??_fMenuStrip,w
  9907  0A2C  1683               	bsf	3,5	;RP0=1, select bank1
  9908  0A2D  00BC               	movwf	__secondCell^(0+128)
  9909                           
  9910                           ;menu.c: 68: _tempDigit = (unsigned short int)(((_firstCell + 2) * 100) + (_secondCell *
      +                           10));
  9911  0A2E  083D               	movf	__firstCell^(0+128),w
  9912  0A2F  1283               	bcf	3,5	;RP0=0, select bank0
  9913  0A30  00D0               	movwf	??_fMenuStrip
  9914  0A31  01D1               	clrf	??_fMenuStrip+1
  9915  0A32  0850               	movf	??_fMenuStrip,w
  9916  0A33  00A0               	movwf	___wmul@multiplier
  9917  0A34  0851               	movf	??_fMenuStrip+1,w
  9918  0A35  00A1               	movwf	___wmul@multiplier+1
  9919  0A36  3064               	movlw	100
  9920  0A37  00A2               	movwf	___wmul@multiplicand
  9921  0A38  3000               	movlw	0
  9922  0A39  00A3               	movwf	___wmul@multiplicand+1
  9923  0A3A  160A  158A  2500  120A  158A  	fcall	___wmul
  9924  0A3F  0820               	movf	?___wmul,w
  9925  0A40  00D2               	movwf	??_fMenuStrip+2
  9926  0A41  0821               	movf	?___wmul+1,w
  9927  0A42  00D3               	movwf	??_fMenuStrip+3
  9928  0A43  1683               	bsf	3,5	;RP0=1, select bank1
  9929  0A44  083C               	movf	__secondCell^(0+128),w
  9930  0A45  1283               	bcf	3,5	;RP0=0, select bank0
  9931  0A46  00D4               	movwf	??_fMenuStrip+4
  9932  0A47  01D5               	clrf	??_fMenuStrip+5
  9933  0A48  0854               	movf	??_fMenuStrip+4,w
  9934  0A49  00A0               	movwf	___wmul@multiplier
  9935  0A4A  0855               	movf	??_fMenuStrip+5,w
  9936  0A4B  00A1               	movwf	___wmul@multiplier+1
  9937  0A4C  300A               	movlw	10
  9938  0A4D  00A2               	movwf	___wmul@multiplicand
  9939  0A4E  3000               	movlw	0
  9940  0A4F  00A3               	movwf	___wmul@multiplicand+1
  9941  0A50  160A  158A  2500  120A  158A  	fcall	___wmul
  9942  0A55  0820               	movf	?___wmul,w
  9943  0A56  0752               	addwf	??_fMenuStrip+2,w
  9944  0A57  00D6               	movwf	??_fMenuStrip+6
  9945  0A58  0821               	movf	?___wmul+1,w
  9946  0A59  1803               	skipnc
  9947  0A5A  0A21               	incf	?___wmul+1,w
  9948  0A5B  0753               	addwf	??_fMenuStrip+3,w
  9949  0A5C  00D7               	movwf	??_fMenuStrip+7
  9950  0A5D  0856               	movf	??_fMenuStrip+6,w
  9951  0A5E  3EC8               	addlw	200
  9952  0A5F  1683               	bsf	3,5	;RP0=1, select bank1
  9953  0A60  00AA               	movwf	__tempDigit^(0+128)
  9954  0A61  1283               	bcf	3,5	;RP0=0, select bank0
  9955  0A62  0857               	movf	??_fMenuStrip+7,w
  9956  0A63  1803               	skipnc
  9957  0A64  3E01               	addlw	1
  9958  0A65  3E00               	addlw	0
  9959  0A66  1683               	bsf	3,5	;RP0=1, select bank1
  9960  0A67  00AB               	movwf	(__tempDigit+1)^(0+128)
  9961                           
  9962                           ;menu.c: 69: }
  9963  0A68  2AA5               	goto	l4662
  9964  0A69                     l4658:
  9965                           
  9966                           ;menu.c: 70: else if(_MenuNav >= 10){
  9967  0A69  087C               	movf	__MenuNav+1,w
  9968  0A6A  3A80               	xorlw	128
  9969  0A6B  00FF               	movwf	127
  9970  0A6C  3080               	movlw	128
  9971  0A6D  027F               	subwf	127,w
  9972  0A6E  1D03               	skipz
  9973  0A6F  2A72               	goto	u5515
  9974  0A70  300A               	movlw	10
  9975  0A71  027B               	subwf	__MenuNav,w
  9976  0A72                     u5515:
  9977  0A72  1C03               	skipc
  9978  0A73  2AA5               	goto	l4662
  9979                           
  9980                           ;menu.c: 71: _cellTwoDigit = (unsigned char)(_MenuNav / 10 - 1);
  9981  0A74  300A               	movlw	10
  9982  0A75  1283               	bcf	3,5	;RP0=0, select bank0
  9983  0A76  1303               	bcf	3,6	;RP1=0, select bank0
  9984  0A77  00A0               	movwf	___awdiv@divisor
  9985  0A78  3000               	movlw	0
  9986  0A79  00A1               	movwf	___awdiv@divisor+1
  9987  0A7A  087C               	movf	__MenuNav+1,w
  9988  0A7B  00A3               	movwf	___awdiv@dividend+1
  9989  0A7C  087B               	movf	__MenuNav,w
  9990  0A7D  00A2               	movwf	___awdiv@dividend
  9991  0A7E  160A  118A  221A  120A  158A  	fcall	___awdiv
  9992  0A83  0820               	movf	?___awdiv,w
  9993  0A84  3EFF               	addlw	255
  9994  0A85  00D0               	movwf	??_fMenuStrip
  9995  0A86  0850               	movf	??_fMenuStrip,w
  9996  0A87  1683               	bsf	3,5	;RP0=1, select bank1
  9997  0A88  00BB               	movwf	__cellTwoDigit^(0+128)
  9998                           
  9999                           ;menu.c: 72: _tempTwoDigit = (unsigned char)(_MenuNav / 10 * 10);
 10000  0A89  300A               	movlw	10
 10001  0A8A  1283               	bcf	3,5	;RP0=0, select bank0
 10002  0A8B  00D0               	movwf	??_fMenuStrip
 10003  0A8C  0850               	movf	??_fMenuStrip,w
 10004  0A8D  00A9               	movwf	___bmul@multiplicand
 10005  0A8E  087C               	movf	__MenuNav+1,w
 10006  0A8F  00A3               	movwf	___awdiv@dividend+1
 10007  0A90  087B               	movf	__MenuNav,w
 10008  0A91  00A2               	movwf	___awdiv@dividend
 10009  0A92  300A               	movlw	10
 10010  0A93  00A0               	movwf	___awdiv@divisor
 10011  0A94  3000               	movlw	0
 10012  0A95  00A1               	movwf	___awdiv@divisor+1
 10013  0A96  160A  118A  221A  120A  158A  	fcall	___awdiv
 10014  0A9B  0820               	movf	?___awdiv,w
 10015  0A9C  160A  158A  2475  120A  158A  	fcall	___bmul
 10016  0AA1  00D1               	movwf	??_fMenuStrip+1
 10017  0AA2  0851               	movf	??_fMenuStrip+1,w
 10018  0AA3  1683               	bsf	3,5	;RP0=1, select bank1
 10019  0AA4  00BA               	movwf	__tempTwoDigit^(0+128)
 10020  0AA5                     l4662:
 10021                           
 10022                           ;menu.c: 73: };menu.c: 75: if(flClearLCD == 0) LCD_clear();
 10023  0AA5  18FA               	btfsc	_flClearLCD/(0+8),_flClearLCD& (0+7)
 10024  0AA6  2F12               	goto	l4816
 10025  0AA7  160A  158A  2487  120A  158A  	fcall	_LCD_clear
 10026  0AAC  2F12               	goto	l4816
 10027  0AAD                     l4666:
 10028                           
 10029                           ;menu.c: 91: sprintf(str, "%16s", "Íàñòðîéêè");
 10030  0AAD  30DE               	movlw	low (STR_4| (0+32768))
 10031  0AAE  1283               	bcf	3,5	;RP0=0, select bank0
 10032  0AAF  1303               	bcf	3,6	;RP1=0, select bank0
 10033  0AB0  00AE               	movwf	sprintf@f
 10034  0AB1  3091               	movlw	high (STR_4| (0+32768))
 10035  0AB2  00AF               	movwf	sprintf@f+1
 10036  0AB3  3074               	movlw	low (STR_5| (0+32768))
 10037  0AB4  00B0               	movwf	low ((?_sprintf| 0+2))
 10038  0AB5  3091               	movlw	high (STR_5| (0+32768))
 10039  0AB6  00B1               	movwf	(low ((?_sprintf| 0+2))+1)
 10040  0AB7  30C2               	movlw	(low (_str| (0+256)))& (0+255)
 10041  0AB8  120A  118A  2042  120A  158A  	fcall	_sprintf
 10042                           
 10043                           ;menu.c: 92: break;
 10044  0ABD  2FC8               	goto	l4818
 10045  0ABE                     l4668:
 10046                           
 10047                           ;menu.c: 94: sprintf(str, "%16s", "ÄÎ1-Èìï/ïîñò");
 10048  0ABE  30DE               	movlw	low (STR_4| (0+32768))
 10049  0ABF  1283               	bcf	3,5	;RP0=0, select bank0
 10050  0AC0  1303               	bcf	3,6	;RP1=0, select bank0
 10051  0AC1  00AE               	movwf	sprintf@f
 10052  0AC2  3091               	movlw	high (STR_4| (0+32768))
 10053  0AC3  00AF               	movwf	sprintf@f+1
 10054  0AC4  302B               	movlw	low (STR_7| (0+32768))
 10055  0AC5  00B0               	movwf	low ((?_sprintf| 0+2))
 10056  0AC6  3091               	movlw	high (STR_7| (0+32768))
 10057  0AC7  00B1               	movwf	(low ((?_sprintf| 0+2))+1)
 10058  0AC8  30C2               	movlw	(low (_str| (0+256)))& (0+255)
 10059  0AC9  120A  118A  2042  120A  158A  	fcall	_sprintf
 10060                           
 10061                           ;menu.c: 95: break;
 10062  0ACE  2FC8               	goto	l4818
 10063  0ACF                     l4670:
 10064                           
 10065                           ;menu.c: 97: sprintf(str2, "%s", "Èìïóëüñ");
 10066  0ACF  30F7               	movlw	low (STR_8| (0+32768))
 10067  0AD0  1283               	bcf	3,5	;RP0=0, select bank0
 10068  0AD1  1303               	bcf	3,6	;RP1=0, select bank0
 10069  0AD2  00AE               	movwf	sprintf@f
 10070  0AD3  3091               	movlw	high (STR_8| (0+32768))
 10071  0AD4  00AF               	movwf	sprintf@f+1
 10072  0AD5  30AD               	movlw	low (STR_9| (0+32768))
 10073  0AD6  00B0               	movwf	low ((?_sprintf| 0+2))
 10074  0AD7  3091               	movlw	high (STR_9| (0+32768))
 10075  0AD8  00B1               	movwf	(low ((?_sprintf| 0+2))+1)
 10076  0AD9  30B2               	movlw	(low (_str2| (0+256)))& (0+255)
 10077  0ADA  120A  118A  2042  120A  158A  	fcall	_sprintf
 10078                           
 10079                           ;menu.c: 98: if(_settingsBit & (1 << 1))
 10080  0ADF  1683               	bsf	3,5	;RP0=1, select bank1
 10081  0AE0  1CC4               	btfss	__settingsBit^(0+128),1
 10082  0AE1  2FC8               	goto	l4818
 10083                           
 10084                           ;menu.c: 99: strcat(str2, (unsigned char)"*");
 10085  0AE2  30FA               	movlw	low (STR_10| (0+32768))
 10086  0AE3  1283               	bcf	3,5	;RP0=0, select bank0
 10087  0AE4  00A0               	movwf	strcat@from
 10088  0AE5  3091               	movlw	high (STR_10| (0+32768))
 10089  0AE6  00A1               	movwf	strcat@from+1
 10090  0AE7  30B2               	movlw	(low (_str2| (0+256)))& (0+255)
 10091  0AE8  160A  158A  256E  120A  158A  	fcall	_strcat
 10092  0AED  2FC8               	goto	l4818
 10093  0AEE                     l4676:
 10094                           
 10095                           ;menu.c: 102: _settingTimeImpDO1 = 5u;
 10096  0AEE  3005               	movlw	5
 10097  0AEF  1683               	bsf	3,5	;RP0=1, select bank1
 10098  0AF0  1303               	bcf	3,6	;RP1=0, select bank1
 10099  0AF1  00B4               	movwf	__settingTimeImpDO1^(0+128)
 10100  0AF2  3000               	movlw	0
 10101  0AF3  00B5               	movwf	(__settingTimeImpDO1^(0+128)+1)
 10102                           
 10103                           ;menu.c: 103: ((_settingsBit) |= 1UL << (1));
 10104  0AF4  14C4               	bsf	__settingsBit^(0+128),1
 10105                           
 10106                           ;menu.c: 104: _MenuNav = 200u;
 10107  0AF5  30C8               	movlw	200
 10108  0AF6  2C60               	goto	L18
 10109  0AF7                     l4680:	
 10110                           ;menu.c: 105: break;
 10111                           
 10112                           
 10113                           ;menu.c: 108: sprintf(str2, "%s", "Ïîñòîÿííûé");
 10114  0AF7  30F7               	movlw	low (STR_8| (0+32768))
 10115  0AF8  1283               	bcf	3,5	;RP0=0, select bank0
 10116  0AF9  1303               	bcf	3,6	;RP1=0, select bank0
 10117  0AFA  00AE               	movwf	sprintf@f
 10118  0AFB  3091               	movlw	high (STR_8| (0+32768))
 10119  0AFC  00AF               	movwf	sprintf@f+1
 10120  0AFD  3069               	movlw	low (STR_12| (0+32768))
 10121  0AFE  00B0               	movwf	low ((?_sprintf| 0+2))
 10122  0AFF  3091               	movlw	high (STR_12| (0+32768))
 10123  0B00  00B1               	movwf	(low ((?_sprintf| 0+2))+1)
 10124  0B01  30B2               	movlw	(low (_str2| (0+256)))& (0+255)
 10125  0B02  120A  118A  2042  120A  158A  	fcall	_sprintf
 10126                           
 10127                           ;menu.c: 109: if(!(_settingsBit & (1 << 1)))
 10128  0B07  1683               	bsf	3,5	;RP0=1, select bank1
 10129  0B08  18C4               	btfsc	__settingsBit^(0+128),1
 10130  0B09  2FC8               	goto	l4818
 10131                           
 10132                           ;menu.c: 110: strcat(str2, (unsigned char)"*");
 10133  0B0A  30FA               	movlw	low (STR_10| (0+32768))
 10134  0B0B  1283               	bcf	3,5	;RP0=0, select bank0
 10135  0B0C  00A0               	movwf	strcat@from
 10136  0B0D  3091               	movlw	high (STR_10| (0+32768))
 10137  0B0E  00A1               	movwf	strcat@from+1
 10138  0B0F  30B2               	movlw	(low (_str2| (0+256)))& (0+255)
 10139  0B10  160A  158A  256E  120A  158A  	fcall	_strcat
 10140  0B15  2FC8               	goto	l4818
 10141  0B16                     l4686:
 10142                           
 10143                           ;menu.c: 113: ((_settingsBit) &= ~(1UL << (1)));
 10144  0B16  30FD               	movlw	253
 10145  0B17  1283               	bcf	3,5	;RP0=0, select bank0
 10146  0B18  1303               	bcf	3,6	;RP1=0, select bank0
 10147  0B19  00D0               	movwf	??_fMenuStrip
 10148  0B1A  0850               	movf	??_fMenuStrip,w
 10149  0B1B  1683               	bsf	3,5	;RP0=1, select bank1
 10150  0B1C  05C4               	andwf	__settingsBit^(0+128),f
 10151                           
 10152                           ;menu.c: 114: _MenuNav = 201u;
 10153  0B1D  30C9               	movlw	201
 10154  0B1E  2C60               	goto	L18
 10155  0B1F                     l4690:	
 10156                           ;menu.c: 115: break;
 10157                           
 10158                           
 10159                           ;menu.c: 117: sprintf(str, "%16s", "ÄÎ1-Âðåìÿ èìï");
 10160  0B1F  30DE               	movlw	low (STR_4| (0+32768))
 10161  0B20  1283               	bcf	3,5	;RP0=0, select bank0
 10162  0B21  1303               	bcf	3,6	;RP1=0, select bank0
 10163  0B22  00AE               	movwf	sprintf@f
 10164  0B23  3091               	movlw	high (STR_4| (0+32768))
 10165  0B24  00AF               	movwf	sprintf@f+1
 10166  0B25  3010               	movlw	low (STR_15| (0+32768))
 10167  0B26  00B0               	movwf	low ((?_sprintf| 0+2))
 10168  0B27  3091               	movlw	high (STR_15| (0+32768))
 10169  0B28  00B1               	movwf	(low ((?_sprintf| 0+2))+1)
 10170  0B29  30C2               	movlw	(low (_str| (0+256)))& (0+255)
 10171  0B2A  120A  118A  2042  120A  158A  	fcall	_sprintf
 10172                           
 10173                           ;menu.c: 118: break;
 10174  0B2F  2FC8               	goto	l4818
 10175  0B30                     l4692:
 10176                           
 10177                           ;menu.c: 120: sprintf(str2, "%4d ñåê.", _settingTimeImpDO1);
 10178  0B30  3092               	movlw	low (STR_16| (0+32768))
 10179  0B31  1283               	bcf	3,5	;RP0=0, select bank0
 10180  0B32  1303               	bcf	3,6	;RP1=0, select bank0
 10181  0B33  00AE               	movwf	sprintf@f
 10182  0B34  3091               	movlw	high (STR_16| (0+32768))
 10183  0B35  00AF               	movwf	sprintf@f+1
 10184  0B36  1683               	bsf	3,5	;RP0=1, select bank1
 10185  0B37  0835               	movf	(__settingTimeImpDO1+1)^(0+128),w
 10186  0B38  1283               	bcf	3,5	;RP0=0, select bank0
 10187  0B39  00B1               	movwf	?_sprintf+3
 10188  0B3A  1683               	bsf	3,5	;RP0=1, select bank1
 10189  0B3B  0834               	movf	__settingTimeImpDO1^(0+128),w
 10190  0B3C  1283               	bcf	3,5	;RP0=0, select bank0
 10191  0B3D  00B0               	movwf	?_sprintf+2
 10192  0B3E  30B2               	movlw	(low (_str2| (0+256)))& (0+255)
 10193  0B3F  120A  118A  2042  120A  158A  	fcall	_sprintf
 10194                           
 10195                           ;menu.c: 121: break;
 10196  0B44  2FC8               	goto	l4818
 10197  0B45                     l4694:
 10198                           
 10199                           ;menu.c: 124: _MenuNav = 210;
 10200  0B45  30D2               	movlw	210
 10201  0B46  2C60               	goto	L18
 10202  0B47                     l4696:	
 10203                           ;menu.c: 125: break;
 10204                           
 10205                           
 10206                           ;menu.c: 127: sprintf(str, "%16s", "ÄÎ2-Âêë òàéìåð");
 10207  0B47  30DE               	movlw	low (STR_4| (0+32768))
 10208  0B48  1283               	bcf	3,5	;RP0=0, select bank0
 10209  0B49  1303               	bcf	3,6	;RP1=0, select bank0
 10210  0B4A  00AE               	movwf	sprintf@f
 10211  0B4B  3091               	movlw	high (STR_4| (0+32768))
 10212  0B4C  00AF               	movwf	sprintf@f+1
 10213  0B4D  30F2               	movlw	low (STR_18| (0+32768))
 10214  0B4E  00B0               	movwf	low ((?_sprintf| 0+2))
 10215  0B4F  3090               	movlw	high (STR_18| (0+32768))
 10216  0B50  00B1               	movwf	(low ((?_sprintf| 0+2))+1)
 10217  0B51  30C2               	movlw	(low (_str| (0+256)))& (0+255)
 10218  0B52  120A  118A  2042  120A  158A  	fcall	_sprintf
 10219                           
 10220                           ;menu.c: 128: break;
 10221  0B57  2FC8               	goto	l4818
 10222  0B58                     l4698:
 10223                           
 10224                           ;menu.c: 130: sprintf(str2, "%s", "Äà");
 10225  0B58  30F7               	movlw	low (STR_8| (0+32768))
 10226  0B59  1283               	bcf	3,5	;RP0=0, select bank0
 10227  0B5A  1303               	bcf	3,6	;RP1=0, select bank0
 10228  0B5B  00AE               	movwf	sprintf@f
 10229  0B5C  3091               	movlw	high (STR_8| (0+32768))
 10230  0B5D  00AF               	movwf	sprintf@f+1
 10231  0B5E  30F4               	movlw	low (STR_20| (0+32768))
 10232  0B5F  00B0               	movwf	low ((?_sprintf| 0+2))
 10233  0B60  3091               	movlw	high (STR_20| (0+32768))
 10234  0B61  00B1               	movwf	(low ((?_sprintf| 0+2))+1)
 10235  0B62  30B2               	movlw	(low (_str2| (0+256)))& (0+255)
 10236  0B63  120A  118A  2042  120A  158A  	fcall	_sprintf
 10237                           
 10238                           ;menu.c: 131: if(_settingsBit & (1 << 3))
 10239  0B68  1683               	bsf	3,5	;RP0=1, select bank1
 10240  0B69  1DC4               	btfss	__settingsBit^(0+128),3
 10241  0B6A  2FC8               	goto	l4818
 10242                           
 10243                           ;menu.c: 132: strcat(str2, (unsigned char)"*");
 10244  0B6B  30FA               	movlw	low (STR_10| (0+32768))
 10245  0B6C  1283               	bcf	3,5	;RP0=0, select bank0
 10246  0B6D  00A0               	movwf	strcat@from
 10247  0B6E  3091               	movlw	high (STR_10| (0+32768))
 10248  0B6F  00A1               	movwf	strcat@from+1
 10249  0B70  30B2               	movlw	(low (_str2| (0+256)))& (0+255)
 10250  0B71  160A  158A  256E  120A  158A  	fcall	_strcat
 10251  0B76  2FC8               	goto	l4818
 10252  0B77                     l4704:
 10253                           
 10254                           ;menu.c: 135: if(_settingTimerOnDO2 == 0 || _settingTimerOffDO2 == 0)
 10255  0B77  1683               	bsf	3,5	;RP0=1, select bank1
 10256  0B78  1303               	bcf	3,6	;RP1=0, select bank1
 10257  0B79  0832               	movf	__settingTimerOnDO2^(0+128),w
 10258  0B7A  0433               	iorwf	(__settingTimerOnDO2+1)^(0+128),w
 10259  0B7B  1903               	btfsc	3,2
 10260  0B7C  2B81               	goto	l4708
 10261  0B7D  0830               	movf	__settingTimerOffDO2^(0+128),w
 10262  0B7E  0431               	iorwf	(__settingTimerOffDO2+1)^(0+128),w
 10263  0B7F  1D03               	btfss	3,2
 10264  0B80  2B89               	goto	l4710
 10265  0B81                     l4708:
 10266                           
 10267                           ;menu.c: 136: {;menu.c: 137: _settingTimerOnDO2 = 5;
 10268  0B81  3005               	movlw	5
 10269  0B82  00B2               	movwf	__settingTimerOnDO2^(0+128)
 10270  0B83  3000               	movlw	0
 10271  0B84  00B3               	movwf	(__settingTimerOnDO2^(0+128)+1)
 10272                           
 10273                           ;menu.c: 138: _settingTimerOffDO2 = 5;
 10274  0B85  3005               	movlw	5
 10275  0B86  00B0               	movwf	__settingTimerOffDO2^(0+128)
 10276  0B87  3000               	movlw	0
 10277  0B88  00B1               	movwf	(__settingTimerOffDO2^(0+128)+1)
 10278  0B89                     l4710:
 10279                           
 10280                           ;menu.c: 139: };menu.c: 140: ((_settingsBit) |= 1UL << (3));
 10281  0B89  15C4               	bsf	__settingsBit^(0+128),3
 10282                           
 10283                           ;menu.c: 141: _MenuNav = 220;
 10284  0B8A  30DC               	movlw	220
 10285  0B8B  2C60               	goto	L18
 10286  0B8C                     l4712:	
 10287                           ;menu.c: 142: break;
 10288                           
 10289                           
 10290                           ;menu.c: 144: sprintf(str2, "%s", "Íåò");
 10291  0B8C  30F7               	movlw	low (STR_8| (0+32768))
 10292  0B8D  1283               	bcf	3,5	;RP0=0, select bank0
 10293  0B8E  1303               	bcf	3,6	;RP1=0, select bank0
 10294  0B8F  00AE               	movwf	sprintf@f
 10295  0B90  3091               	movlw	high (STR_8| (0+32768))
 10296  0B91  00AF               	movwf	sprintf@f+1
 10297  0B92  30E8               	movlw	low (STR_23| (0+32768))
 10298  0B93  00B0               	movwf	low ((?_sprintf| 0+2))
 10299  0B94  3091               	movlw	high (STR_23| (0+32768))
 10300  0B95  00B1               	movwf	(low ((?_sprintf| 0+2))+1)
 10301  0B96  30B2               	movlw	(low (_str2| (0+256)))& (0+255)
 10302  0B97  120A  118A  2042  120A  158A  	fcall	_sprintf
 10303                           
 10304                           ;menu.c: 145: if(!(_settingsBit & (1 << 3)))
 10305  0B9C  1683               	bsf	3,5	;RP0=1, select bank1
 10306  0B9D  19C4               	btfsc	__settingsBit^(0+128),3
 10307  0B9E  2FC8               	goto	l4818
 10308                           
 10309                           ;menu.c: 146: strcat(str2, (unsigned char)"*");
 10310  0B9F  30FA               	movlw	low (STR_10| (0+32768))
 10311  0BA0  1283               	bcf	3,5	;RP0=0, select bank0
 10312  0BA1  00A0               	movwf	strcat@from
 10313  0BA2  3091               	movlw	high (STR_10| (0+32768))
 10314  0BA3  00A1               	movwf	strcat@from+1
 10315  0BA4  30B2               	movlw	(low (_str2| (0+256)))& (0+255)
 10316  0BA5  160A  158A  256E  120A  158A  	fcall	_strcat
 10317  0BAA  2FC8               	goto	l4818
 10318  0BAB                     l4718:
 10319                           
 10320                           ;menu.c: 149: ((_settingsBit) &= ~(1UL << (3)));
 10321  0BAB  30F7               	movlw	247
 10322  0BAC  1283               	bcf	3,5	;RP0=0, select bank0
 10323  0BAD  1303               	bcf	3,6	;RP1=0, select bank0
 10324  0BAE  00D0               	movwf	??_fMenuStrip
 10325  0BAF  0850               	movf	??_fMenuStrip,w
 10326  0BB0  1683               	bsf	3,5	;RP0=1, select bank1
 10327  0BB1  05C4               	andwf	__settingsBit^(0+128),f
 10328                           
 10329                           ;menu.c: 150: _MenuNav = 221;
 10330  0BB2  30DD               	movlw	221
 10331  0BB3  2C60               	goto	L18
 10332  0BB4                     l4722:	
 10333                           ;menu.c: 151: break;
 10334                           
 10335                           
 10336                           ;menu.c: 153: sprintf(str, "%16s", "ÄÎ2-Òàéìåð âêë");
 10337  0BB4  30DE               	movlw	low (STR_4| (0+32768))
 10338  0BB5  1283               	bcf	3,5	;RP0=0, select bank0
 10339  0BB6  1303               	bcf	3,6	;RP1=0, select bank0
 10340  0BB7  00AE               	movwf	sprintf@f
 10341  0BB8  3091               	movlw	high (STR_4| (0+32768))
 10342  0BB9  00AF               	movwf	sprintf@f+1
 10343  0BBA  30E3               	movlw	low (STR_26| (0+32768))
 10344  0BBB  00B0               	movwf	low ((?_sprintf| 0+2))
 10345  0BBC  3090               	movlw	high (STR_26| (0+32768))
 10346  0BBD  00B1               	movwf	(low ((?_sprintf| 0+2))+1)
 10347  0BBE  30C2               	movlw	(low (_str| (0+256)))& (0+255)
 10348  0BBF  120A  118A  2042  120A  158A  	fcall	_sprintf
 10349                           
 10350                           ;menu.c: 154: break;
 10351  0BC4  2FC8               	goto	l4818
 10352  0BC5                     l4724:
 10353                           
 10354                           ;menu.c: 156: sprintf(str2, "%4d ìèí.", _settingTimerOnDO2);
 10355  0BC5  309B               	movlw	low (STR_27| (0+32768))
 10356  0BC6  1283               	bcf	3,5	;RP0=0, select bank0
 10357  0BC7  1303               	bcf	3,6	;RP1=0, select bank0
 10358  0BC8  00AE               	movwf	sprintf@f
 10359  0BC9  3091               	movlw	high (STR_27| (0+32768))
 10360  0BCA  00AF               	movwf	sprintf@f+1
 10361  0BCB  1683               	bsf	3,5	;RP0=1, select bank1
 10362  0BCC  0833               	movf	(__settingTimerOnDO2+1)^(0+128),w
 10363  0BCD  1283               	bcf	3,5	;RP0=0, select bank0
 10364  0BCE  00B1               	movwf	?_sprintf+3
 10365  0BCF  1683               	bsf	3,5	;RP0=1, select bank1
 10366  0BD0  0832               	movf	__settingTimerOnDO2^(0+128),w
 10367  0BD1  1283               	bcf	3,5	;RP0=0, select bank0
 10368  0BD2  00B0               	movwf	?_sprintf+2
 10369  0BD3  30B2               	movlw	(low (_str2| (0+256)))& (0+255)
 10370  0BD4  120A  118A  2042  120A  158A  	fcall	_sprintf
 10371                           
 10372                           ;menu.c: 157: break;
 10373  0BD9  2FC8               	goto	l4818
 10374  0BDA                     l4726:
 10375                           
 10376                           ;menu.c: 160: _MenuNav = 230;
 10377  0BDA  30E6               	movlw	230
 10378  0BDB  2C60               	goto	L18
 10379  0BDC                     l4728:	
 10380                           ;menu.c: 161: break;
 10381                           
 10382                           
 10383                           ;menu.c: 163: sprintf(str, "%16s", "ÄÎ2-Òàéìåð âûêë");
 10384  0BDC  30DE               	movlw	low (STR_4| (0+32768))
 10385  0BDD  1283               	bcf	3,5	;RP0=0, select bank0
 10386  0BDE  1303               	bcf	3,6	;RP1=0, select bank0
 10387  0BDF  00AE               	movwf	sprintf@f
 10388  0BE0  3091               	movlw	high (STR_4| (0+32768))
 10389  0BE1  00AF               	movwf	sprintf@f+1
 10390  0BE2  30B3               	movlw	low (STR_29| (0+32768))
 10391  0BE3  00B0               	movwf	low ((?_sprintf| 0+2))
 10392  0BE4  3090               	movlw	high (STR_29| (0+32768))
 10393  0BE5  00B1               	movwf	(low ((?_sprintf| 0+2))+1)
 10394  0BE6  30C2               	movlw	(low (_str| (0+256)))& (0+255)
 10395  0BE7  120A  118A  2042  120A  158A  	fcall	_sprintf
 10396                           
 10397                           ;menu.c: 164: break;
 10398  0BEC  2FC8               	goto	l4818
 10399  0BED                     l4730:
 10400                           
 10401                           ;menu.c: 166: sprintf(str2, "%4d ìèí.", _settingTimerOffDO2);
 10402  0BED  309B               	movlw	low (STR_27| (0+32768))
 10403  0BEE  1283               	bcf	3,5	;RP0=0, select bank0
 10404  0BEF  1303               	bcf	3,6	;RP1=0, select bank0
 10405  0BF0  00AE               	movwf	sprintf@f
 10406  0BF1  3091               	movlw	high (STR_27| (0+32768))
 10407  0BF2  00AF               	movwf	sprintf@f+1
 10408  0BF3  1683               	bsf	3,5	;RP0=1, select bank1
 10409  0BF4  0831               	movf	(__settingTimerOffDO2+1)^(0+128),w
 10410  0BF5  1283               	bcf	3,5	;RP0=0, select bank0
 10411  0BF6  00B1               	movwf	?_sprintf+3
 10412  0BF7  1683               	bsf	3,5	;RP0=1, select bank1
 10413  0BF8  0830               	movf	__settingTimerOffDO2^(0+128),w
 10414  0BF9  1283               	bcf	3,5	;RP0=0, select bank0
 10415  0BFA  00B0               	movwf	?_sprintf+2
 10416  0BFB  30B2               	movlw	(low (_str2| (0+256)))& (0+255)
 10417  0BFC  120A  118A  2042  120A  158A  	fcall	_sprintf
 10418                           
 10419                           ;menu.c: 167: break;
 10420  0C01  2FC8               	goto	l4818
 10421  0C02                     l4732:
 10422                           
 10423                           ;menu.c: 170: _MenuNav = 240;
 10424  0C02  30F0               	movlw	240
 10425  0C03  2C60               	goto	L18
 10426  0C04                     l4734:	
 10427                           ;menu.c: 171: break;
 10428                           
 10429                           
 10430                           ;menu.c: 173: sprintf(str, "%16s", "ÄÎ2-Âêë ïî òåìï");
 10431  0C04  30DE               	movlw	low (STR_4| (0+32768))
 10432  0C05  1283               	bcf	3,5	;RP0=0, select bank0
 10433  0C06  1303               	bcf	3,6	;RP1=0, select bank0
 10434  0C07  00AE               	movwf	sprintf@f
 10435  0C08  3091               	movlw	high (STR_4| (0+32768))
 10436  0C09  00AF               	movwf	sprintf@f+1
 10437  0C0A  30C3               	movlw	low (STR_32| (0+32768))
 10438  0C0B  00B0               	movwf	low ((?_sprintf| 0+2))
 10439  0C0C  3090               	movlw	high (STR_32| (0+32768))
 10440  0C0D  00B1               	movwf	(low ((?_sprintf| 0+2))+1)
 10441  0C0E  30C2               	movlw	(low (_str| (0+256)))& (0+255)
 10442  0C0F  120A  118A  2042  120A  158A  	fcall	_sprintf
 10443                           
 10444                           ;menu.c: 174: break;
 10445  0C14  2FC8               	goto	l4818
 10446  0C15                     l4736:
 10447                           
 10448                           ;menu.c: 176: sprintf(str2, "%s", "Äà");
 10449  0C15  30F7               	movlw	low (STR_8| (0+32768))
 10450  0C16  1283               	bcf	3,5	;RP0=0, select bank0
 10451  0C17  1303               	bcf	3,6	;RP1=0, select bank0
 10452  0C18  00AE               	movwf	sprintf@f
 10453  0C19  3091               	movlw	high (STR_8| (0+32768))
 10454  0C1A  00AF               	movwf	sprintf@f+1
 10455  0C1B  30F4               	movlw	low (STR_20| (0+32768))
 10456  0C1C  00B0               	movwf	low ((?_sprintf| 0+2))
 10457  0C1D  3091               	movlw	high (STR_20| (0+32768))
 10458  0C1E  00B1               	movwf	(low ((?_sprintf| 0+2))+1)
 10459  0C1F  30B2               	movlw	(low (_str2| (0+256)))& (0+255)
 10460  0C20  120A  118A  2042  120A  158A  	fcall	_sprintf
 10461                           
 10462                           ;menu.c: 177: if(_settingsBit & (1 << 4))
 10463  0C25  1683               	bsf	3,5	;RP0=1, select bank1
 10464  0C26  1E44               	btfss	__settingsBit^(0+128),4
 10465  0C27  2FC8               	goto	l4818
 10466                           
 10467                           ;menu.c: 178: strcat(str2, (unsigned char)"*");
 10468  0C28  30FA               	movlw	low (STR_10| (0+32768))
 10469  0C29  1283               	bcf	3,5	;RP0=0, select bank0
 10470  0C2A  00A0               	movwf	strcat@from
 10471  0C2B  3091               	movlw	high (STR_10| (0+32768))
 10472  0C2C  00A1               	movwf	strcat@from+1
 10473  0C2D  30B2               	movlw	(low (_str2| (0+256)))& (0+255)
 10474  0C2E  160A  158A  256E  120A  158A  	fcall	_strcat
 10475  0C33  2FC8               	goto	l4818
 10476  0C34                     l646:	
 10477                           ;menu.c: 180: case 2500:
 10478                           
 10479                           
 10480                           ;menu.c: 181: ((_settingsBit) |= 1UL << (4));
 10481  0C34  1683               	bsf	3,5	;RP0=1, select bank1
 10482  0C35  1303               	bcf	3,6	;RP1=0, select bank1
 10483  0C36  1644               	bsf	__settingsBit^(0+128),4
 10484                           
 10485                           ;menu.c: 182: _MenuNav = 250;
 10486  0C37  30FA               	movlw	250
 10487  0C38  2C60               	goto	L18
 10488  0C39                     l4744:	
 10489                           ;menu.c: 183: break;
 10490                           
 10491                           
 10492                           ;menu.c: 185: sprintf(str2, "%s", "Íåò");
 10493  0C39  30F7               	movlw	low (STR_8| (0+32768))
 10494  0C3A  1283               	bcf	3,5	;RP0=0, select bank0
 10495  0C3B  1303               	bcf	3,6	;RP1=0, select bank0
 10496  0C3C  00AE               	movwf	sprintf@f
 10497  0C3D  3091               	movlw	high (STR_8| (0+32768))
 10498  0C3E  00AF               	movwf	sprintf@f+1
 10499  0C3F  30E8               	movlw	low (STR_23| (0+32768))
 10500  0C40  00B0               	movwf	low ((?_sprintf| 0+2))
 10501  0C41  3091               	movlw	high (STR_23| (0+32768))
 10502  0C42  00B1               	movwf	(low ((?_sprintf| 0+2))+1)
 10503  0C43  30B2               	movlw	(low (_str2| (0+256)))& (0+255)
 10504  0C44  120A  118A  2042  120A  158A  	fcall	_sprintf
 10505                           
 10506                           ;menu.c: 186: if(!(_settingsBit & (1 << 4)))
 10507  0C49  1683               	bsf	3,5	;RP0=1, select bank1
 10508  0C4A  1A44               	btfsc	__settingsBit^(0+128),4
 10509  0C4B  2FC8               	goto	l4818
 10510                           
 10511                           ;menu.c: 187: strcat(str2, (unsigned char)"*");
 10512  0C4C  30FA               	movlw	low (STR_10| (0+32768))
 10513  0C4D  1283               	bcf	3,5	;RP0=0, select bank0
 10514  0C4E  00A0               	movwf	strcat@from
 10515  0C4F  3091               	movlw	high (STR_10| (0+32768))
 10516  0C50  00A1               	movwf	strcat@from+1
 10517  0C51  30B2               	movlw	(low (_str2| (0+256)))& (0+255)
 10518  0C52  160A  158A  256E  120A  158A  	fcall	_strcat
 10519  0C57  2FC8               	goto	l4818
 10520  0C58                     l4750:
 10521                           
 10522                           ;menu.c: 190: ((_settingsBit) &= ~(1UL << (4)));
 10523  0C58  30EF               	movlw	239
 10524  0C59  1283               	bcf	3,5	;RP0=0, select bank0
 10525  0C5A  1303               	bcf	3,6	;RP1=0, select bank0
 10526  0C5B  00D0               	movwf	??_fMenuStrip
 10527  0C5C  0850               	movf	??_fMenuStrip,w
 10528  0C5D  1683               	bsf	3,5	;RP0=1, select bank1
 10529  0C5E  05C4               	andwf	__settingsBit^(0+128),f
 10530                           
 10531                           ;menu.c: 191: _MenuNav = 251;
 10532  0C5F  30FB               	movlw	251
 10533  0C60                     L18:
 10534  0C60  00FB               	movwf	__MenuNav
 10535  0C61  3000               	movlw	0
 10536  0C62  2EC7               	goto	L21
 10537  0C63                     l4754:	
 10538                           ;menu.c: 192: break;
 10539                           
 10540                           
 10541                           ;menu.c: 194: sprintf(str, "%16s", "Ïîêàçàíèÿ");
 10542  0C63  30DE               	movlw	low (STR_4| (0+32768))
 10543  0C64  1283               	bcf	3,5	;RP0=0, select bank0
 10544  0C65  1303               	bcf	3,6	;RP1=0, select bank0
 10545  0C66  00AE               	movwf	sprintf@f
 10546  0C67  3091               	movlw	high (STR_4| (0+32768))
 10547  0C68  00AF               	movwf	sprintf@f+1
 10548  0C69  307E               	movlw	low (STR_40| (0+32768))
 10549  0C6A  00B0               	movwf	low ((?_sprintf| 0+2))
 10550  0C6B  3091               	movlw	high (STR_40| (0+32768))
 10551  0C6C  00B1               	movwf	(low ((?_sprintf| 0+2))+1)
 10552  0C6D  30C2               	movlw	(low (_str| (0+256)))& (0+255)
 10553  0C6E  120A  118A  2042  120A  158A  	fcall	_sprintf
 10554                           
 10555                           ;menu.c: 195: break;
 10556  0C73  2FC8               	goto	l4818
 10557  0C74                     l4756:
 10558                           
 10559                           ;menu.c: 197: sprintf(str, "%16s", "Àíàëîã. ââîä");
 10560  0C74  30DE               	movlw	low (STR_4| (0+32768))
 10561  0C75  1283               	bcf	3,5	;RP0=0, select bank0
 10562  0C76  1303               	bcf	3,6	;RP1=0, select bank0
 10563  0C77  00AE               	movwf	sprintf@f
 10564  0C78  3091               	movlw	high (STR_4| (0+32768))
 10565  0C79  00AF               	movwf	sprintf@f+1
 10566  0C7A  301E               	movlw	low (STR_42| (0+32768))
 10567  0C7B  00B0               	movwf	low ((?_sprintf| 0+2))
 10568  0C7C  3091               	movlw	high (STR_42| (0+32768))
 10569  0C7D  00B1               	movwf	(low ((?_sprintf| 0+2))+1)
 10570  0C7E  30C2               	movlw	(low (_str| (0+256)))& (0+255)
 10571  0C7F  120A  118A  2042  120A  158A  	fcall	_sprintf
 10572                           
 10573                           ;menu.c: 198: break;
 10574  0C84  2FC8               	goto	l4818
 10575  0C85                     l4758:
 10576                           
 10577                           ;menu.c: 200: sprintf(str2, "%3s%3u  %3s%3u", "Àí1:", Analog.AI1, "Aí2:", Analog.AI2);
 10578  0C85  3001               	movlw	low (STR_43| (0+32768))
 10579  0C86  1283               	bcf	3,5	;RP0=0, select bank0
 10580  0C87  1303               	bcf	3,6	;RP1=0, select bank0
 10581  0C88  00AE               	movwf	sprintf@f
 10582  0C89  3091               	movlw	high (STR_43| (0+32768))
 10583  0C8A  00AF               	movwf	sprintf@f+1
 10584  0C8B  30D4               	movlw	low (STR_44| (0+32768))
 10585  0C8C  00B0               	movwf	low ((?_sprintf| 0+2))
 10586  0C8D  3091               	movlw	high (STR_44| (0+32768))
 10587  0C8E  00B1               	movwf	(low ((?_sprintf| 0+2))+1)
 10588  0C8F  1683               	bsf	3,5	;RP0=1, select bank1
 10589  0C90  0825               	movf	(_Analog^(0+128)+1),w
 10590  0C91  1283               	bcf	3,5	;RP0=0, select bank0
 10591  0C92  00D0               	movwf	??_fMenuStrip
 10592  0C93  01D1               	clrf	??_fMenuStrip+1
 10593  0C94  0850               	movf	??_fMenuStrip,w
 10594  0C95  00B2               	movwf	?_sprintf+4
 10595  0C96  0851               	movf	??_fMenuStrip+1,w
 10596  0C97  00B3               	movwf	?_sprintf+5
 10597  0C98  30D9               	movlw	low (STR_45| (0+32768))
 10598  0C99  00B4               	movwf	low ((?_sprintf| 0+6))
 10599  0C9A  3091               	movlw	high (STR_45| (0+32768))
 10600  0C9B  00B5               	movwf	(low ((?_sprintf| 0+6))+1)
 10601  0C9C  1683               	bsf	3,5	;RP0=1, select bank1
 10602  0C9D  0826               	movf	(_Analog^(0+128)+2),w
 10603  0C9E  1283               	bcf	3,5	;RP0=0, select bank0
 10604  0C9F  00D2               	movwf	??_fMenuStrip+2
 10605  0CA0  01D3               	clrf	??_fMenuStrip+3
 10606  0CA1  0852               	movf	??_fMenuStrip+2,w
 10607  0CA2  00B6               	movwf	?_sprintf+8
 10608  0CA3  0853               	movf	??_fMenuStrip+3,w
 10609  0CA4  00B7               	movwf	?_sprintf+9
 10610  0CA5  30B2               	movlw	(low (_str2| (0+256)))& (0+255)
 10611  0CA6  120A  118A  2042  120A  158A  	fcall	_sprintf
 10612                           
 10613                           ;menu.c: 201: break;
 10614  0CAB  2FC8               	goto	l4818
 10615  0CAC                     l4760:
 10616                           
 10617                           ;menu.c: 203: _MenuNav /= 10;
 10618  0CAC  300A               	movlw	10
 10619  0CAD  1283               	bcf	3,5	;RP0=0, select bank0
 10620  0CAE  1303               	bcf	3,6	;RP1=0, select bank0
 10621  0CAF  00A0               	movwf	___awdiv@divisor
 10622  0CB0  3000               	movlw	0
 10623  0CB1  00A1               	movwf	___awdiv@divisor+1
 10624  0CB2  087C               	movf	__MenuNav+1,w
 10625  0CB3  00A3               	movwf	___awdiv@dividend+1
 10626  0CB4  087B               	movf	__MenuNav,w
 10627  0CB5  00A2               	movwf	___awdiv@dividend
 10628  0CB6  160A  118A  221A  120A  158A  	fcall	___awdiv
 10629  0CBB  0821               	movf	?___awdiv+1,w
 10630  0CBC  00FC               	movwf	__MenuNav+1
 10631  0CBD  0820               	movf	?___awdiv,w
 10632  0CBE  00FB               	movwf	__MenuNav
 10633                           
 10634                           ;menu.c: 204: break;
 10635  0CBF  2FC8               	goto	l4818
 10636  0CC0                     l4762:
 10637                           
 10638                           ;menu.c: 206: sprintf(str, "%16s", "Öèôð. ââîä");
 10639  0CC0  30DE               	movlw	low (STR_4| (0+32768))
 10640  0CC1  1283               	bcf	3,5	;RP0=0, select bank0
 10641  0CC2  1303               	bcf	3,6	;RP1=0, select bank0
 10642  0CC3  00AE               	movwf	sprintf@f
 10643  0CC4  3091               	movlw	high (STR_4| (0+32768))
 10644  0CC5  00AF               	movwf	sprintf@f+1
 10645  0CC6  305E               	movlw	low (STR_47| (0+32768))
 10646  0CC7  00B0               	movwf	low ((?_sprintf| 0+2))
 10647  0CC8  3091               	movlw	high (STR_47| (0+32768))
 10648  0CC9  00B1               	movwf	(low ((?_sprintf| 0+2))+1)
 10649  0CCA  30C2               	movlw	(low (_str| (0+256)))& (0+255)
 10650  0CCB  120A  118A  2042  120A  158A  	fcall	_sprintf
 10651                           
 10652                           ;menu.c: 207: break;
 10653  0CD0  2FC8               	goto	l4818
 10654  0CD1                     l4764:
 10655                           
 10656                           ;menu.c: 209: sprintf(str2, "%12s%d%d%d%d", "Ä.âõîäû:",RB3,RB4,RB5,RB6);
 10657  0CD1  3038               	movlw	low (STR_48| (0+32768))
 10658  0CD2  1283               	bcf	3,5	;RP0=0, select bank0
 10659  0CD3  1303               	bcf	3,6	;RP1=0, select bank0
 10660  0CD4  00AE               	movwf	sprintf@f
 10661  0CD5  3091               	movlw	high (STR_48| (0+32768))
 10662  0CD6  00AF               	movwf	sprintf@f+1
 10663  0CD7  30A4               	movlw	low (STR_49| (0+32768))
 10664  0CD8  00B0               	movwf	low ((?_sprintf| 0+2))
 10665  0CD9  3091               	movlw	high (STR_49| (0+32768))
 10666  0CDA  00B1               	movwf	(low ((?_sprintf| 0+2))+1)
 10667  0CDB  1003               	clrc
 10668  0CDC  1986               	btfsc	6,3	;volatile
 10669  0CDD  1403               	setc
 10670  0CDE  3000               	movlw	0
 10671  0CDF  1803               	skipnc
 10672  0CE0  3001               	movlw	1
 10673  0CE1  00D0               	movwf	??_fMenuStrip
 10674  0CE2  01D1               	clrf	??_fMenuStrip+1
 10675  0CE3  0850               	movf	??_fMenuStrip,w
 10676  0CE4  00B2               	movwf	?_sprintf+4
 10677  0CE5  0851               	movf	??_fMenuStrip+1,w
 10678  0CE6  00B3               	movwf	?_sprintf+5
 10679  0CE7  1003               	clrc
 10680  0CE8  1A06               	btfsc	6,4	;volatile
 10681  0CE9  1403               	setc
 10682  0CEA  3000               	movlw	0
 10683  0CEB  1803               	skipnc
 10684  0CEC  3001               	movlw	1
 10685  0CED  00D2               	movwf	??_fMenuStrip+2
 10686  0CEE  01D3               	clrf	??_fMenuStrip+3
 10687  0CEF  0852               	movf	??_fMenuStrip+2,w
 10688  0CF0  00B4               	movwf	?_sprintf+6
 10689  0CF1  0853               	movf	??_fMenuStrip+3,w
 10690  0CF2  00B5               	movwf	?_sprintf+7
 10691  0CF3  1003               	clrc
 10692  0CF4  1A86               	btfsc	6,5	;volatile
 10693  0CF5  1403               	setc
 10694  0CF6  3000               	movlw	0
 10695  0CF7  1803               	skipnc
 10696  0CF8  3001               	movlw	1
 10697  0CF9  00D4               	movwf	??_fMenuStrip+4
 10698  0CFA  01D5               	clrf	??_fMenuStrip+5
 10699  0CFB  0854               	movf	??_fMenuStrip+4,w
 10700  0CFC  00B6               	movwf	?_sprintf+8
 10701  0CFD  0855               	movf	??_fMenuStrip+5,w
 10702  0CFE  00B7               	movwf	?_sprintf+9
 10703  0CFF  1003               	clrc
 10704  0D00  1B06               	btfsc	6,6	;volatile
 10705  0D01  1403               	setc
 10706  0D02  3000               	movlw	0
 10707  0D03  1803               	skipnc
 10708  0D04  3001               	movlw	1
 10709  0D05  00D6               	movwf	??_fMenuStrip+6
 10710  0D06  01D7               	clrf	??_fMenuStrip+7
 10711  0D07  0856               	movf	??_fMenuStrip+6,w
 10712  0D08  00B8               	movwf	?_sprintf+10
 10713  0D09  0857               	movf	??_fMenuStrip+7,w
 10714  0D0A  00B9               	movwf	?_sprintf+11
 10715  0D0B  30B2               	movlw	(low (_str2| (0+256)))& (0+255)
 10716  0D0C  120A  118A  2042  120A  158A  	fcall	_sprintf
 10717                           
 10718                           ;menu.c: 210: break;
 10719  0D11  2FC8               	goto	l4818
 10720  0D12                     l4768:
 10721                           
 10722                           ;menu.c: 215: sprintf(str, "%16s", "Öèôð. âûâîä");
 10723  0D12  30DE               	movlw	low (STR_4| (0+32768))
 10724  0D13  1283               	bcf	3,5	;RP0=0, select bank0
 10725  0D14  1303               	bcf	3,6	;RP1=0, select bank0
 10726  0D15  00AE               	movwf	sprintf@f
 10727  0D16  3091               	movlw	high (STR_4| (0+32768))
 10728  0D17  00AF               	movwf	sprintf@f+1
 10729  0D18  3052               	movlw	low (STR_51| (0+32768))
 10730  0D19  00B0               	movwf	low ((?_sprintf| 0+2))
 10731  0D1A  3091               	movlw	high (STR_51| (0+32768))
 10732  0D1B  00B1               	movwf	(low ((?_sprintf| 0+2))+1)
 10733  0D1C  30C2               	movlw	(low (_str| (0+256)))& (0+255)
 10734  0D1D  120A  118A  2042  120A  158A  	fcall	_sprintf
 10735                           
 10736                           ;menu.c: 216: break;
 10737  0D22  2FC8               	goto	l4818
 10738  0D23                     l4770:
 10739                           
 10740                           ;menu.c: 218: sprintf(str2, "%12s%d%d%d%d", "Ä.âûõîäû:",_tempPinDO&0x08?1:0,_tempPinDO&0
      +                          x04?1:0,_tempPinDO&0x02?1:0,_tempPinDO&0x01?1:0);
 10741  0D23  3038               	movlw	low (STR_48| (0+32768))
 10742  0D24  1283               	bcf	3,5	;RP0=0, select bank0
 10743  0D25  1303               	bcf	3,6	;RP1=0, select bank0
 10744  0D26  00AE               	movwf	sprintf@f
 10745  0D27  3091               	movlw	high (STR_48| (0+32768))
 10746  0D28  00AF               	movwf	sprintf@f+1
 10747  0D29  3088               	movlw	low (STR_53| (0+32768))
 10748  0D2A  00B0               	movwf	low ((?_sprintf| 0+2))
 10749  0D2B  3091               	movlw	high (STR_53| (0+32768))
 10750  0D2C  00B1               	movwf	(low ((?_sprintf| 0+2))+1)
 10751  0D2D  1683               	bsf	3,5	;RP0=1, select bank1
 10752  0D2E  1DC3               	btfss	__tempPinDO^(0+128),3
 10753  0D2F  2D32               	goto	u5610
 10754  0D30  3001               	movlw	1
 10755  0D31  2D33               	goto	u5620
 10756  0D32                     u5610:
 10757  0D32  3000               	movlw	0
 10758  0D33                     u5620:
 10759  0D33  1283               	bcf	3,5	;RP0=0, select bank0
 10760  0D34  00D0               	movwf	??_fMenuStrip
 10761  0D35  01D1               	clrf	??_fMenuStrip+1
 10762  0D36  0850               	movf	??_fMenuStrip,w
 10763  0D37  00B2               	movwf	?_sprintf+4
 10764  0D38  0851               	movf	??_fMenuStrip+1,w
 10765  0D39  00B3               	movwf	?_sprintf+5
 10766  0D3A  1683               	bsf	3,5	;RP0=1, select bank1
 10767  0D3B  1D43               	btfss	__tempPinDO^(0+128),2
 10768  0D3C  2D3F               	goto	u5630
 10769  0D3D  3001               	movlw	1
 10770  0D3E  2D40               	goto	u5640
 10771  0D3F                     u5630:
 10772  0D3F  3000               	movlw	0
 10773  0D40                     u5640:
 10774  0D40  1283               	bcf	3,5	;RP0=0, select bank0
 10775  0D41  00D2               	movwf	??_fMenuStrip+2
 10776  0D42  01D3               	clrf	??_fMenuStrip+3
 10777  0D43  0852               	movf	??_fMenuStrip+2,w
 10778  0D44  00B4               	movwf	?_sprintf+6
 10779  0D45  0853               	movf	??_fMenuStrip+3,w
 10780  0D46  00B5               	movwf	?_sprintf+7
 10781  0D47  1683               	bsf	3,5	;RP0=1, select bank1
 10782  0D48  1CC3               	btfss	__tempPinDO^(0+128),1
 10783  0D49  2D4C               	goto	u5650
 10784  0D4A  3001               	movlw	1
 10785  0D4B  2D4D               	goto	u5660
 10786  0D4C                     u5650:
 10787  0D4C  3000               	movlw	0
 10788  0D4D                     u5660:
 10789  0D4D  1283               	bcf	3,5	;RP0=0, select bank0
 10790  0D4E  00D4               	movwf	??_fMenuStrip+4
 10791  0D4F  01D5               	clrf	??_fMenuStrip+5
 10792  0D50  0854               	movf	??_fMenuStrip+4,w
 10793  0D51  00B6               	movwf	?_sprintf+8
 10794  0D52  0855               	movf	??_fMenuStrip+5,w
 10795  0D53  00B7               	movwf	?_sprintf+9
 10796  0D54  1683               	bsf	3,5	;RP0=1, select bank1
 10797  0D55  1C43               	btfss	__tempPinDO^(0+128),0
 10798  0D56  2D59               	goto	u5670
 10799  0D57  3001               	movlw	1
 10800  0D58  2D5A               	goto	u5680
 10801  0D59                     u5670:
 10802  0D59  3000               	movlw	0
 10803  0D5A                     u5680:
 10804  0D5A  1283               	bcf	3,5	;RP0=0, select bank0
 10805  0D5B  00D6               	movwf	??_fMenuStrip+6
 10806  0D5C  01D7               	clrf	??_fMenuStrip+7
 10807  0D5D  0856               	movf	??_fMenuStrip+6,w
 10808  0D5E  00B8               	movwf	?_sprintf+10
 10809  0D5F  0857               	movf	??_fMenuStrip+7,w
 10810  0D60  00B9               	movwf	?_sprintf+11
 10811  0D61  30B2               	movlw	(low (_str2| (0+256)))& (0+255)
 10812  0D62  120A  118A  2042  120A  158A  	fcall	_sprintf
 10813                           
 10814                           ;menu.c: 219: break;
 10815  0D67  2FC8               	goto	l4818
 10816  0D68                     l4774:
 10817                           
 10818                           ;menu.c: 224: sprintf(str, "%16s", "Ïàìÿòü");
 10819  0D68  30DE               	movlw	low (STR_4| (0+32768))
 10820  0D69  1283               	bcf	3,5	;RP0=0, select bank0
 10821  0D6A  1303               	bcf	3,6	;RP1=0, select bank0
 10822  0D6B  00AE               	movwf	sprintf@f
 10823  0D6C  3091               	movlw	high (STR_4| (0+32768))
 10824  0D6D  00AF               	movwf	sprintf@f+1
 10825  0D6E  30BC               	movlw	low (STR_55| (0+32768))
 10826  0D6F  00B0               	movwf	low ((?_sprintf| 0+2))
 10827  0D70  3091               	movlw	high (STR_55| (0+32768))
 10828  0D71  00B1               	movwf	(low ((?_sprintf| 0+2))+1)
 10829  0D72  30C2               	movlw	(low (_str| (0+256)))& (0+255)
 10830  0D73  120A  118A  2042  120A  158A  	fcall	_sprintf
 10831                           
 10832                           ;menu.c: 225: break;
 10833  0D78  2FC8               	goto	l4818
 10834  0D79                     l4776:
 10835                           
 10836                           ;menu.c: 227: sprintf(str, "%16s", "Ñîõð.òåê.íàñòð.");
 10837  0D79  30DE               	movlw	low (STR_4| (0+32768))
 10838  0D7A  1283               	bcf	3,5	;RP0=0, select bank0
 10839  0D7B  1303               	bcf	3,6	;RP1=0, select bank0
 10840  0D7C  00AE               	movwf	sprintf@f
 10841  0D7D  3091               	movlw	high (STR_4| (0+32768))
 10842  0D7E  00AF               	movwf	sprintf@f+1
 10843  0D7F  30D3               	movlw	low (STR_57| (0+32768))
 10844  0D80  00B0               	movwf	low ((?_sprintf| 0+2))
 10845  0D81  3090               	movlw	high (STR_57| (0+32768))
 10846  0D82  00B1               	movwf	(low ((?_sprintf| 0+2))+1)
 10847  0D83  30C2               	movlw	(low (_str| (0+256)))& (0+255)
 10848  0D84  120A  118A  2042  120A  158A  	fcall	_sprintf
 10849                           
 10850                           ;menu.c: 228: break;
 10851  0D89  2FC8               	goto	l4818
 10852  0D8A                     l4778:
 10853                           
 10854                           ;menu.c: 230: sprintf(str2, "%s", "Äà");
 10855  0D8A  30F7               	movlw	low (STR_8| (0+32768))
 10856  0D8B  1283               	bcf	3,5	;RP0=0, select bank0
 10857  0D8C  1303               	bcf	3,6	;RP1=0, select bank0
 10858  0D8D  00AE               	movwf	sprintf@f
 10859  0D8E  3091               	movlw	high (STR_8| (0+32768))
 10860  0D8F  00AF               	movwf	sprintf@f+1
 10861  0D90  30F4               	movlw	low (STR_20| (0+32768))
 10862  0D91  00B0               	movwf	low ((?_sprintf| 0+2))
 10863  0D92  3091               	movlw	high (STR_20| (0+32768))
 10864  0D93  00B1               	movwf	(low ((?_sprintf| 0+2))+1)
 10865  0D94  30B2               	movlw	(low (_str2| (0+256)))& (0+255)
 10866  0D95  120A  118A  2042  120A  158A  	fcall	_sprintf
 10867                           
 10868                           ;menu.c: 231: if(flUpdate)
 10869  0D9A  1D7A               	btfss	_flUpdate/(0+8),_flUpdate& (0+7)
 10870  0D9B  2FC8               	goto	l4818
 10871                           
 10872                           ;menu.c: 232: strcat(str2, (unsigned char)"*");
 10873  0D9C  30FA               	movlw	low (STR_10| (0+32768))
 10874  0D9D  00A0               	movwf	strcat@from
 10875  0D9E  3091               	movlw	high (STR_10| (0+32768))
 10876  0D9F  00A1               	movwf	strcat@from+1
 10877  0DA0  30B2               	movlw	(low (_str2| (0+256)))& (0+255)
 10878  0DA1  160A  158A  256E  120A  158A  	fcall	_strcat
 10879  0DA6  2FC8               	goto	l4818
 10880  0DA7                     l664:	
 10881                           ;menu.c: 234: case 4000:
 10882                           
 10883                           
 10884                           ;menu.c: 235: flUpdate = 1;
 10885  0DA7  157A               	bsf	_flUpdate/(0+8),_flUpdate& (0+7)
 10886                           
 10887                           ;menu.c: 236: SPI_Write(0,_settingsBit);
 10888  0DA8  3000               	movlw	0
 10889  0DA9  1283               	bcf	3,5	;RP0=0, select bank0
 10890  0DAA  1303               	bcf	3,6	;RP1=0, select bank0
 10891  0DAB  00A6               	movwf	SPI_Write@address
 10892  0DAC  00A7               	movwf	SPI_Write@address+1
 10893  0DAD  1683               	bsf	3,5	;RP0=1, select bank1
 10894  0DAE  0844               	movf	__settingsBit^(0+128),w
 10895  0DAF  1283               	bcf	3,5	;RP0=0, select bank0
 10896  0DB0  00D0               	movwf	??_fMenuStrip
 10897  0DB1  0850               	movf	??_fMenuStrip,w
 10898  0DB2  00A8               	movwf	SPI_Write@data
 10899  0DB3  120A  118A  27CB  120A  158A  	fcall	_SPI_Write
 10900                           
 10901                           ;menu.c: 237: SPI_Write(1,_settingTimeImpDO1>>8);
 10902  0DB8  3001               	movlw	1
 10903  0DB9  00A6               	movwf	SPI_Write@address
 10904  0DBA  3000               	movlw	0
 10905  0DBB  00A7               	movwf	SPI_Write@address+1
 10906  0DBC  1683               	bsf	3,5	;RP0=1, select bank1
 10907  0DBD  0835               	movf	(__settingTimeImpDO1^(0+128)+1),w
 10908  0DBE  1283               	bcf	3,5	;RP0=0, select bank0
 10909  0DBF  00D0               	movwf	??_fMenuStrip
 10910  0DC0  0850               	movf	??_fMenuStrip,w
 10911  0DC1  00A8               	movwf	SPI_Write@data
 10912  0DC2  120A  118A  27CB  120A  158A  	fcall	_SPI_Write
 10913                           
 10914                           ;menu.c: 238: SPI_Write(2,_settingTimeImpDO1);
 10915  0DC7  3002               	movlw	2
 10916  0DC8  00A6               	movwf	SPI_Write@address
 10917  0DC9  3000               	movlw	0
 10918  0DCA  00A7               	movwf	SPI_Write@address+1
 10919  0DCB  1683               	bsf	3,5	;RP0=1, select bank1
 10920  0DCC  0834               	movf	__settingTimeImpDO1^(0+128),w
 10921  0DCD  1283               	bcf	3,5	;RP0=0, select bank0
 10922  0DCE  00D0               	movwf	??_fMenuStrip
 10923  0DCF  0850               	movf	??_fMenuStrip,w
 10924  0DD0  00A8               	movwf	SPI_Write@data
 10925  0DD1  120A  118A  27CB  120A  158A  	fcall	_SPI_Write
 10926                           
 10927                           ;menu.c: 239: SPI_Write(3,_settingTimerOnDO2>>8);
 10928  0DD6  3003               	movlw	3
 10929  0DD7  00A6               	movwf	SPI_Write@address
 10930  0DD8  3000               	movlw	0
 10931  0DD9  00A7               	movwf	SPI_Write@address+1
 10932  0DDA  1683               	bsf	3,5	;RP0=1, select bank1
 10933  0DDB  0833               	movf	(__settingTimerOnDO2^(0+128)+1),w
 10934  0DDC  1283               	bcf	3,5	;RP0=0, select bank0
 10935  0DDD  00D0               	movwf	??_fMenuStrip
 10936  0DDE  0850               	movf	??_fMenuStrip,w
 10937  0DDF  00A8               	movwf	SPI_Write@data
 10938  0DE0  120A  118A  27CB  120A  158A  	fcall	_SPI_Write
 10939                           
 10940                           ;menu.c: 240: SPI_Write(4,_settingTimerOnDO2);
 10941  0DE5  3004               	movlw	4
 10942  0DE6  00A6               	movwf	SPI_Write@address
 10943  0DE7  3000               	movlw	0
 10944  0DE8  00A7               	movwf	SPI_Write@address+1
 10945  0DE9  1683               	bsf	3,5	;RP0=1, select bank1
 10946  0DEA  0832               	movf	__settingTimerOnDO2^(0+128),w
 10947  0DEB  1283               	bcf	3,5	;RP0=0, select bank0
 10948  0DEC  00D0               	movwf	??_fMenuStrip
 10949  0DED  0850               	movf	??_fMenuStrip,w
 10950  0DEE  00A8               	movwf	SPI_Write@data
 10951  0DEF  120A  118A  27CB  120A  158A  	fcall	_SPI_Write
 10952                           
 10953                           ;menu.c: 241: SPI_Write(5,_settingTimerOffDO2>>8);
 10954  0DF4  3005               	movlw	5
 10955  0DF5  00A6               	movwf	SPI_Write@address
 10956  0DF6  3000               	movlw	0
 10957  0DF7  00A7               	movwf	SPI_Write@address+1
 10958  0DF8  1683               	bsf	3,5	;RP0=1, select bank1
 10959  0DF9  0831               	movf	(__settingTimerOffDO2^(0+128)+1),w
 10960  0DFA  1283               	bcf	3,5	;RP0=0, select bank0
 10961  0DFB  00D0               	movwf	??_fMenuStrip
 10962  0DFC  0850               	movf	??_fMenuStrip,w
 10963  0DFD  00A8               	movwf	SPI_Write@data
 10964  0DFE  120A  118A  27CB  120A  158A  	fcall	_SPI_Write
 10965                           
 10966                           ;menu.c: 242: SPI_Write(6,_settingTimerOffDO2);
 10967  0E03  3006               	movlw	6
 10968  0E04  00A6               	movwf	SPI_Write@address
 10969  0E05  3000               	movlw	0
 10970  0E06  00A7               	movwf	SPI_Write@address+1
 10971  0E07  1683               	bsf	3,5	;RP0=1, select bank1
 10972  0E08  0830               	movf	__settingTimerOffDO2^(0+128),w
 10973  0E09  1283               	bcf	3,5	;RP0=0, select bank0
 10974  0E0A  00D0               	movwf	??_fMenuStrip
 10975  0E0B  0850               	movf	??_fMenuStrip,w
 10976  0E0C  00A8               	movwf	SPI_Write@data
 10977  0E0D  120A  118A  27CB  120A  158A  	fcall	_SPI_Write
 10978                           
 10979                           ;menu.c: 243: _MenuNav = 400;
 10980  0E12  3090               	movlw	144
 10981  0E13  2EC5               	goto	L22
 10982  0E14                     l4788:	
 10983                           ;menu.c: 244: break;
 10984                           
 10985                           
 10986                           ;menu.c: 246: sprintf(str, "%16s", "Ñáðîñ íàñòð. ÎÇÓ");
 10987  0E14  30DE               	movlw	low (STR_4| (0+32768))
 10988  0E15  1283               	bcf	3,5	;RP0=0, select bank0
 10989  0E16  1303               	bcf	3,6	;RP1=0, select bank0
 10990  0E17  00AE               	movwf	sprintf@f
 10991  0E18  3091               	movlw	high (STR_4| (0+32768))
 10992  0E19  00AF               	movwf	sprintf@f+1
 10993  0E1A  3091               	movlw	low (STR_62| (0+32768))
 10994  0E1B  00B0               	movwf	low ((?_sprintf| 0+2))
 10995  0E1C  3090               	movlw	high (STR_62| (0+32768))
 10996  0E1D  00B1               	movwf	(low ((?_sprintf| 0+2))+1)
 10997  0E1E  30C2               	movlw	(low (_str| (0+256)))& (0+255)
 10998  0E1F  120A  118A  2042  120A  158A  	fcall	_sprintf
 10999                           
 11000                           ;menu.c: 247: break;
 11001  0E24  2FC8               	goto	l4818
 11002  0E25                     l4790:
 11003                           
 11004                           ;menu.c: 249: sprintf(str, "%16s", "Äà");
 11005  0E25  30DE               	movlw	low (STR_4| (0+32768))
 11006  0E26  1283               	bcf	3,5	;RP0=0, select bank0
 11007  0E27  1303               	bcf	3,6	;RP1=0, select bank0
 11008  0E28  00AE               	movwf	sprintf@f
 11009  0E29  3091               	movlw	high (STR_4| (0+32768))
 11010  0E2A  00AF               	movwf	sprintf@f+1
 11011  0E2B  30F4               	movlw	low (STR_20| (0+32768))
 11012  0E2C  00B0               	movwf	low ((?_sprintf| 0+2))
 11013  0E2D  3091               	movlw	high (STR_20| (0+32768))
 11014  0E2E  00B1               	movwf	(low ((?_sprintf| 0+2))+1)
 11015  0E2F  30C2               	movlw	(low (_str| (0+256)))& (0+255)
 11016  0E30  120A  118A  2042  120A  158A  	fcall	_sprintf
 11017                           
 11018                           ;menu.c: 250: if(flUpdate)
 11019  0E35  1D7A               	btfss	_flUpdate/(0+8),_flUpdate& (0+7)
 11020  0E36  2FC8               	goto	l4818
 11021                           
 11022                           ;menu.c: 251: strcat(str2, (unsigned char)"*");
 11023  0E37  30FA               	movlw	low (STR_10| (0+32768))
 11024  0E38  00A0               	movwf	strcat@from
 11025  0E39  3091               	movlw	high (STR_10| (0+32768))
 11026  0E3A  00A1               	movwf	strcat@from+1
 11027  0E3B  30B2               	movlw	(low (_str2| (0+256)))& (0+255)
 11028  0E3C  160A  158A  256E  120A  158A  	fcall	_strcat
 11029  0E41  2FC8               	goto	l4818
 11030  0E42                     l668:	
 11031                           ;menu.c: 253: case 4100:
 11032                           
 11033                           
 11034                           ;menu.c: 254: flUpdate = 1;
 11035  0E42  157A               	bsf	_flUpdate/(0+8),_flUpdate& (0+7)
 11036                           
 11037                           ;menu.c: 255: _settingsBit = 0;
 11038  0E43  1683               	bsf	3,5	;RP0=1, select bank1
 11039  0E44  1303               	bcf	3,6	;RP1=0, select bank1
 11040  0E45  01C4               	clrf	__settingsBit^(0+128)
 11041                           
 11042                           ;menu.c: 256: _settingTimeImpDO1 = 0;
 11043  0E46  01B4               	clrf	__settingTimeImpDO1^(0+128)
 11044  0E47  01B5               	clrf	(__settingTimeImpDO1+1)^(0+128)
 11045                           
 11046                           ;menu.c: 257: _settingTimerOnDO2 = 0;
 11047  0E48  01B2               	clrf	__settingTimerOnDO2^(0+128)
 11048  0E49  01B3               	clrf	(__settingTimerOnDO2+1)^(0+128)
 11049                           
 11050                           ;menu.c: 258: _settingTimerOffDO2 = 0;
 11051  0E4A  01B0               	clrf	__settingTimerOffDO2^(0+128)
 11052  0E4B  01B1               	clrf	(__settingTimerOffDO2+1)^(0+128)
 11053                           
 11054                           ;menu.c: 259: _MenuNav = 410;
 11055  0E4C  309A               	movlw	154
 11056  0E4D  2EC5               	goto	L22
 11057  0E4E                     l4800:	
 11058                           ;menu.c: 260: break;
 11059                           
 11060                           
 11061                           ;menu.c: 262: sprintf(str, "%16s", "Ñáðîñ íàñòð. ÏÇÓ");
 11062  0E4E  30DE               	movlw	low (STR_4| (0+32768))
 11063  0E4F  1283               	bcf	3,5	;RP0=0, select bank0
 11064  0E50  1303               	bcf	3,6	;RP1=0, select bank0
 11065  0E51  00AE               	movwf	sprintf@f
 11066  0E52  3091               	movlw	high (STR_4| (0+32768))
 11067  0E53  00AF               	movwf	sprintf@f+1
 11068  0E54  30A2               	movlw	low (STR_67| (0+32768))
 11069  0E55  00B0               	movwf	low ((?_sprintf| 0+2))
 11070  0E56  3090               	movlw	high (STR_67| (0+32768))
 11071  0E57  00B1               	movwf	(low ((?_sprintf| 0+2))+1)
 11072  0E58  30C2               	movlw	(low (_str| (0+256)))& (0+255)
 11073  0E59  120A  118A  2042  120A  158A  	fcall	_sprintf
 11074                           
 11075                           ;menu.c: 263: break;
 11076  0E5E  2FC8               	goto	l4818
 11077  0E5F                     l4802:
 11078                           
 11079                           ;menu.c: 265: sprintf(str, "%16s", "Äà");
 11080  0E5F  30DE               	movlw	low (STR_4| (0+32768))
 11081  0E60  1283               	bcf	3,5	;RP0=0, select bank0
 11082  0E61  1303               	bcf	3,6	;RP1=0, select bank0
 11083  0E62  00AE               	movwf	sprintf@f
 11084  0E63  3091               	movlw	high (STR_4| (0+32768))
 11085  0E64  00AF               	movwf	sprintf@f+1
 11086  0E65  30F4               	movlw	low (STR_20| (0+32768))
 11087  0E66  00B0               	movwf	low ((?_sprintf| 0+2))
 11088  0E67  3091               	movlw	high (STR_20| (0+32768))
 11089  0E68  00B1               	movwf	(low ((?_sprintf| 0+2))+1)
 11090  0E69  30C2               	movlw	(low (_str| (0+256)))& (0+255)
 11091  0E6A  120A  118A  2042  120A  158A  	fcall	_sprintf
 11092                           
 11093                           ;menu.c: 266: if(flUpdate)
 11094  0E6F  1D7A               	btfss	_flUpdate/(0+8),_flUpdate& (0+7)
 11095  0E70  2FC8               	goto	l4818
 11096                           
 11097                           ;menu.c: 267: strcat(str2, (unsigned char)"*");
 11098  0E71  30FA               	movlw	low (STR_10| (0+32768))
 11099  0E72  00A0               	movwf	strcat@from
 11100  0E73  3091               	movlw	high (STR_10| (0+32768))
 11101  0E74  00A1               	movwf	strcat@from+1
 11102  0E75  30B2               	movlw	(low (_str2| (0+256)))& (0+255)
 11103  0E76  160A  158A  256E  120A  158A  	fcall	_strcat
 11104  0E7B  2FC8               	goto	l4818
 11105  0E7C                     l672:	
 11106                           ;menu.c: 269: case 4200:
 11107                           
 11108                           
 11109                           ;menu.c: 270: flUpdate = 1;
 11110  0E7C  157A               	bsf	_flUpdate/(0+8),_flUpdate& (0+7)
 11111                           
 11112                           ;menu.c: 272: SPI_Write(0,0);
 11113  0E7D  3000               	movlw	0
 11114  0E7E  1283               	bcf	3,5	;RP0=0, select bank0
 11115  0E7F  1303               	bcf	3,6	;RP1=0, select bank0
 11116  0E80  00A6               	movwf	SPI_Write@address
 11117  0E81  00A7               	movwf	SPI_Write@address+1
 11118  0E82  01A8               	clrf	SPI_Write@data
 11119  0E83  120A  118A  27CB  120A  158A  	fcall	_SPI_Write
 11120                           
 11121                           ;menu.c: 273: SPI_Write(1,0);
 11122  0E88  3001               	movlw	1
 11123  0E89  00A6               	movwf	SPI_Write@address
 11124  0E8A  3000               	movlw	0
 11125  0E8B  00A7               	movwf	SPI_Write@address+1
 11126  0E8C  01A8               	clrf	SPI_Write@data
 11127  0E8D  120A  118A  27CB  120A  158A  	fcall	_SPI_Write
 11128                           
 11129                           ;menu.c: 274: SPI_Write(2,0);
 11130  0E92  3002               	movlw	2
 11131  0E93  00A6               	movwf	SPI_Write@address
 11132  0E94  3000               	movlw	0
 11133  0E95  00A7               	movwf	SPI_Write@address+1
 11134  0E96  01A8               	clrf	SPI_Write@data
 11135  0E97  120A  118A  27CB  120A  158A  	fcall	_SPI_Write
 11136                           
 11137                           ;menu.c: 275: SPI_Write(3,0);
 11138  0E9C  3003               	movlw	3
 11139  0E9D  00A6               	movwf	SPI_Write@address
 11140  0E9E  3000               	movlw	0
 11141  0E9F  00A7               	movwf	SPI_Write@address+1
 11142  0EA0  01A8               	clrf	SPI_Write@data
 11143  0EA1  120A  118A  27CB  120A  158A  	fcall	_SPI_Write
 11144                           
 11145                           ;menu.c: 276: SPI_Write(4,0);
 11146  0EA6  3004               	movlw	4
 11147  0EA7  00A6               	movwf	SPI_Write@address
 11148  0EA8  3000               	movlw	0
 11149  0EA9  00A7               	movwf	SPI_Write@address+1
 11150  0EAA  01A8               	clrf	SPI_Write@data
 11151  0EAB  120A  118A  27CB  120A  158A  	fcall	_SPI_Write
 11152                           
 11153                           ;menu.c: 277: SPI_Write(5,0);
 11154  0EB0  3005               	movlw	5
 11155  0EB1  00A6               	movwf	SPI_Write@address
 11156  0EB2  3000               	movlw	0
 11157  0EB3  00A7               	movwf	SPI_Write@address+1
 11158  0EB4  01A8               	clrf	SPI_Write@data
 11159  0EB5  120A  118A  27CB  120A  158A  	fcall	_SPI_Write
 11160                           
 11161                           ;menu.c: 278: SPI_Write(6,0);
 11162  0EBA  3006               	movlw	6
 11163  0EBB  00A6               	movwf	SPI_Write@address
 11164  0EBC  3000               	movlw	0
 11165  0EBD  00A7               	movwf	SPI_Write@address+1
 11166  0EBE  01A8               	clrf	SPI_Write@data
 11167  0EBF  120A  118A  27CB  120A  158A  	fcall	_SPI_Write
 11168                           
 11169                           ;menu.c: 280: _MenuNav = 420;
 11170  0EC4  30A4               	movlw	164
 11171  0EC5                     L22:
 11172  0EC5  00FB               	movwf	__MenuNav
 11173  0EC6  3001               	movlw	1
 11174  0EC7                     L21:
 11175  0EC7  00FC               	movwf	__MenuNav+1
 11176                           
 11177                           ;menu.c: 281: break;
 11178  0EC8  2FC8               	goto	l4818
 11179  0EC9                     l4812:
 11180                           
 11181                           ;menu.c: 283: sprintf(str, "%4s%3d %5s%3d%3s%4s%5s%4s",;menu.c: 284: "Òâí:",;menu.c: 285
      +                          : temperatureAI1,;menu.c: 286: "Òíàð:",;menu.c: 287: temperatureAI2,;menu.c: 288: "ÄÓ:",
      +                          ;menu.c: 290: LCD_StringOnOff((const unsigned char)_tempPinDO,3u),;menu.c: 291: "ÍÀÃÐ:",
      +                          ;menu.c: 292: LCD_StringOnOff((const unsigned char)_tempPinDO,4u));
 11182  0EC9  3077               	movlw	low (STR_71| (0+32768))
 11183  0ECA  1283               	bcf	3,5	;RP0=0, select bank0
 11184  0ECB  1303               	bcf	3,6	;RP1=0, select bank0
 11185  0ECC  00AE               	movwf	sprintf@f
 11186  0ECD  3090               	movlw	high (STR_71| (0+32768))
 11187  0ECE  00AF               	movwf	sprintf@f+1
 11188  0ECF  30CF               	movlw	low (STR_72| (0+32768))
 11189  0ED0  00B0               	movwf	low ((?_sprintf| 0+2))
 11190  0ED1  3091               	movlw	high (STR_72| (0+32768))
 11191  0ED2  00B1               	movwf	(low ((?_sprintf| 0+2))+1)
 11192  0ED3  1683               	bsf	3,5	;RP0=1, select bank1
 11193  0ED4  0839               	movf	_temperatureAI1^(0+128),w
 11194  0ED5  1283               	bcf	3,5	;RP0=0, select bank0
 11195  0ED6  00B2               	movwf	?_sprintf+4
 11196  0ED7  01B3               	clrf	?_sprintf+5
 11197  0ED8  1BB2               	btfsc	?_sprintf+4,7
 11198  0ED9  03B3               	decf	?_sprintf+5,f
 11199  0EDA  30C9               	movlw	low (STR_73| (0+32768))
 11200  0EDB  00B4               	movwf	low ((?_sprintf| 0+6))
 11201  0EDC  3091               	movlw	high (STR_73| (0+32768))
 11202  0EDD  00B5               	movwf	(low ((?_sprintf| 0+6))+1)
 11203  0EDE  1683               	bsf	3,5	;RP0=1, select bank1
 11204  0EDF  0838               	movf	_temperatureAI2^(0+128),w
 11205  0EE0  1283               	bcf	3,5	;RP0=0, select bank0
 11206  0EE1  00B6               	movwf	?_sprintf+8
 11207  0EE2  01B7               	clrf	?_sprintf+9
 11208  0EE3  1BB6               	btfsc	?_sprintf+8,7
 11209  0EE4  03B7               	decf	?_sprintf+9,f
 11210  0EE5  30EC               	movlw	low (STR_74| (0+32768))
 11211  0EE6  00B8               	movwf	low ((?_sprintf| 0+10))
 11212  0EE7  3091               	movlw	high (STR_74| (0+32768))
 11213  0EE8  00B9               	movwf	(low ((?_sprintf| 0+10))+1)
 11214  0EE9  3003               	movlw	3
 11215  0EEA  00D0               	movwf	??_fMenuStrip
 11216  0EEB  0850               	movf	??_fMenuStrip,w
 11217  0EEC  00A0               	movwf	LCD_StringOnOff@numb
 11218  0EED  1683               	bsf	3,5	;RP0=1, select bank1
 11219  0EEE  0843               	movf	__tempPinDO^(0+128),w
 11220  0EEF  160A  158A  24B2  120A  158A  	fcall	_LCD_StringOnOff
 11221  0EF4  0820               	movf	?_LCD_StringOnOff,w
 11222  0EF5  00BA               	movwf	low ((?_sprintf| 0+12))
 11223  0EF6  0821               	movf	?_LCD_StringOnOff+1,w
 11224  0EF7  00BB               	movwf	(low ((?_sprintf| 0+12))+1)
 11225  0EF8  30C3               	movlw	low (STR_75| (0+32768))
 11226  0EF9  00BC               	movwf	low ((?_sprintf| 0+14))
 11227  0EFA  3091               	movlw	high (STR_75| (0+32768))
 11228  0EFB  00BD               	movwf	(low ((?_sprintf| 0+14))+1)
 11229  0EFC  3004               	movlw	4
 11230  0EFD  00D1               	movwf	??_fMenuStrip+1
 11231  0EFE  0851               	movf	??_fMenuStrip+1,w
 11232  0EFF  00A0               	movwf	LCD_StringOnOff@numb
 11233  0F00  1683               	bsf	3,5	;RP0=1, select bank1
 11234  0F01  0843               	movf	__tempPinDO^(0+128),w
 11235  0F02  160A  158A  24B2  120A  158A  	fcall	_LCD_StringOnOff
 11236  0F07  0820               	movf	?_LCD_StringOnOff,w
 11237  0F08  00BE               	movwf	low ((?_sprintf| 0+16))
 11238  0F09  0821               	movf	?_LCD_StringOnOff+1,w
 11239  0F0A  00BF               	movwf	(low ((?_sprintf| 0+16))+1)
 11240  0F0B  30C2               	movlw	(low (_str| (0+256)))& (0+255)
 11241  0F0C  120A  118A  2042  120A  158A  	fcall	_sprintf
 11242                           
 11243                           ;menu.c: 293: break;
 11244  0F11  2FC8               	goto	l4818
 11245  0F12                     l4816:
 11246                           
 11247                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 9 sub-sw
      +                          itches
 11248                           ; Switch size 1, requested type "simple"
 11249                           ; Number of cases is 9, Range of values is 0 to 16
 11250                           ; switch strategies available:
 11251                           ; Name         Instructions Cycles
 11252                           ; simple_byte           28    15 (average)
 11253                           ; direct_byte           59     8 (fixed)
 11254                           ; jumptable            260     6 (fixed)
 11255                           ;	Chosen strategy is simple_byte
 11256  0F12  087C               	movf	__MenuNav+1,w
 11257  0F13  3A00               	xorlw	0	; case 0
 11258  0F14  1903               	skipnz
 11259  0F15  2F2F               	goto	l5434
 11260  0F16  3A01               	xorlw	1	; case 1
 11261  0F17  1903               	skipnz
 11262  0F18  2F79               	goto	l5436
 11263  0F19  3A06               	xorlw	6	; case 7
 11264  0F1A  1903               	skipnz
 11265  0F1B  2F8D               	goto	l5438
 11266  0F1C  3A0F               	xorlw	15	; case 8
 11267  0F1D  1903               	skipnz
 11268  0F1E  2F95               	goto	l5440
 11269  0F1F  3A01               	xorlw	1	; case 9
 11270  0F20  1903               	skipnz
 11271  0F21  2FA3               	goto	l5442
 11272  0F22  3A02               	xorlw	2	; case 11
 11273  0F23  1903               	skipnz
 11274  0F24  2FAE               	goto	l5444
 11275  0F25  3A07               	xorlw	7	; case 12
 11276  0F26  1903               	skipnz
 11277  0F27  2FB3               	goto	l5446
 11278  0F28  3A03               	xorlw	3	; case 15
 11279  0F29  1903               	skipnz
 11280  0F2A  2FBB               	goto	l5448
 11281  0F2B  3A1F               	xorlw	31	; case 16
 11282  0F2C  1903               	skipnz
 11283  0F2D  2FC0               	goto	l5450
 11284  0F2E  2EC9               	goto	l4812
 11285  0F2F                     l5434:
 11286                           
 11287                           ; Switch size 1, requested type "simple"
 11288                           ; Number of cases is 24, Range of values is 2 to 251
 11289                           ; switch strategies available:
 11290                           ; Name         Instructions Cycles
 11291                           ; simple_byte           73    37 (average)
 11292                           ; jumptable            263     9 (fixed)
 11293                           ;	Chosen strategy is simple_byte
 11294  0F2F  087B               	movf	__MenuNav,w
 11295  0F30  3A02               	xorlw	2	; case 2
 11296  0F31  1903               	skipnz
 11297  0F32  2AAD               	goto	l4666
 11298  0F33  3A01               	xorlw	1	; case 3
 11299  0F34  1903               	skipnz
 11300  0F35  2C63               	goto	l4754
 11301  0F36  3A07               	xorlw	7	; case 4
 11302  0F37  1903               	skipnz
 11303  0F38  2D68               	goto	l4774
 11304  0F39  3A10               	xorlw	16	; case 20
 11305  0F3A  1903               	skipnz
 11306  0F3B  2ABE               	goto	l4668
 11307  0F3C  3A01               	xorlw	1	; case 21
 11308  0F3D  1903               	skipnz
 11309  0F3E  2B1F               	goto	l4690
 11310  0F3F  3A03               	xorlw	3	; case 22
 11311  0F40  1903               	skipnz
 11312  0F41  2B47               	goto	l4696
 11313  0F42  3A01               	xorlw	1	; case 23
 11314  0F43  1903               	skipnz
 11315  0F44  2BB4               	goto	l4722
 11316  0F45  3A0F               	xorlw	15	; case 24
 11317  0F46  1903               	skipnz
 11318  0F47  2BDC               	goto	l4728
 11319  0F48  3A01               	xorlw	1	; case 25
 11320  0F49  1903               	skipnz
 11321  0F4A  2C04               	goto	l4734
 11322  0F4B  3A07               	xorlw	7	; case 30
 11323  0F4C  1903               	skipnz
 11324  0F4D  2C74               	goto	l4756
 11325  0F4E  3A01               	xorlw	1	; case 31
 11326  0F4F  1903               	skipnz
 11327  0F50  2CC0               	goto	l4762
 11328  0F51  3A3F               	xorlw	63	; case 32
 11329  0F52  1903               	skipnz
 11330  0F53  2D12               	goto	l4768
 11331  0F54  3A08               	xorlw	8	; case 40
 11332  0F55  1903               	skipnz
 11333  0F56  2D79               	goto	l4776
 11334  0F57  3A01               	xorlw	1	; case 41
 11335  0F58  1903               	skipnz
 11336  0F59  2E14               	goto	l4788
 11337  0F5A  3A03               	xorlw	3	; case 42
 11338  0F5B  1903               	skipnz
 11339  0F5C  2E4E               	goto	l4800
 11340  0F5D  3AE2               	xorlw	226	; case 200
 11341  0F5E  1903               	skipnz
 11342  0F5F  2ACF               	goto	l4670
 11343  0F60  3A01               	xorlw	1	; case 201
 11344  0F61  1903               	skipnz
 11345  0F62  2AF7               	goto	l4680
 11346  0F63  3A1B               	xorlw	27	; case 210
 11347  0F64  1903               	skipnz
 11348  0F65  2B30               	goto	l4692
 11349  0F66  3A0E               	xorlw	14	; case 220
 11350  0F67  1903               	skipnz
 11351  0F68  2B58               	goto	l4698
 11352  0F69  3A01               	xorlw	1	; case 221
 11353  0F6A  1903               	skipnz
 11354  0F6B  2B8C               	goto	l4712
 11355  0F6C  3A3B               	xorlw	59	; case 230
 11356  0F6D  1903               	skipnz
 11357  0F6E  2BC5               	goto	l4724
 11358  0F6F  3A16               	xorlw	22	; case 240
 11359  0F70  1903               	skipnz
 11360  0F71  2BED               	goto	l4730
 11361  0F72  3A0A               	xorlw	10	; case 250
 11362  0F73  1903               	skipnz
 11363  0F74  2C15               	goto	l4736
 11364  0F75  3A01               	xorlw	1	; case 251
 11365  0F76  1903               	skipnz
 11366  0F77  2C39               	goto	l4744
 11367  0F78  2EC9               	goto	l4812
 11368  0F79                     l5436:
 11369                           
 11370                           ; Switch size 1, requested type "simple"
 11371                           ; Number of cases is 6, Range of values is 44 to 164
 11372                           ; switch strategies available:
 11373                           ; Name         Instructions Cycles
 11374                           ; simple_byte           19    10 (average)
 11375                           ; jumptable            263     9 (fixed)
 11376                           ;	Chosen strategy is simple_byte
 11377  0F79  087B               	movf	__MenuNav,w
 11378  0F7A  3A2C               	xorlw	44	; case 44
 11379  0F7B  1903               	skipnz
 11380  0F7C  2C85               	goto	l4758
 11381  0F7D  3A1A               	xorlw	26	; case 54
 11382  0F7E  1903               	skipnz
 11383  0F7F  2CD1               	goto	l4764
 11384  0F80  3A76               	xorlw	118	; case 64
 11385  0F81  1903               	skipnz
 11386  0F82  2D23               	goto	l4770
 11387  0F83  3AD0               	xorlw	208	; case 144
 11388  0F84  1903               	skipnz
 11389  0F85  2D8A               	goto	l4778
 11390  0F86  3A0A               	xorlw	10	; case 154
 11391  0F87  1903               	skipnz
 11392  0F88  2E25               	goto	l4790
 11393  0F89  3A3E               	xorlw	62	; case 164
 11394  0F8A  1903               	skipnz
 11395  0F8B  2E5F               	goto	l4802
 11396  0F8C  2EC9               	goto	l4812
 11397  0F8D                     l5438:
 11398                           
 11399                           ; Switch size 1, requested type "simple"
 11400                           ; Number of cases is 2, Range of values is 208 to 218
 11401                           ; switch strategies available:
 11402                           ; Name         Instructions Cycles
 11403                           ; simple_byte            7     4 (average)
 11404                           ; direct_byte           44    11 (fixed)
 11405                           ; jumptable            263     9 (fixed)
 11406                           ;	Chosen strategy is simple_byte
 11407  0F8D  087B               	movf	__MenuNav,w
 11408  0F8E  3AD0               	xorlw	208	; case 208
 11409  0F8F  1903               	skipnz
 11410  0F90  2AEE               	goto	l4676
 11411  0F91  3A0A               	xorlw	10	; case 218
 11412  0F92  1903               	skipnz
 11413  0F93  2B16               	goto	l4686
 11414  0F94  2EC9               	goto	l4812
 11415  0F95                     l5440:
 11416                           
 11417                           ; Switch size 1, requested type "simple"
 11418                           ; Number of cases is 4, Range of values is 52 to 252
 11419                           ; switch strategies available:
 11420                           ; Name         Instructions Cycles
 11421                           ; simple_byte           13     7 (average)
 11422                           ; jumptable            263     9 (fixed)
 11423                           ;	Chosen strategy is simple_byte
 11424  0F95  087B               	movf	__MenuNav,w
 11425  0F96  3A34               	xorlw	52	; case 52
 11426  0F97  1903               	skipnz
 11427  0F98  2B45               	goto	l4694
 11428  0F99  3AAC               	xorlw	172	; case 152
 11429  0F9A  1903               	skipnz
 11430  0F9B  2B77               	goto	l4704
 11431  0F9C  3A3A               	xorlw	58	; case 162
 11432  0F9D  1903               	skipnz
 11433  0F9E  2BAB               	goto	l4718
 11434  0F9F  3A5E               	xorlw	94	; case 252
 11435  0FA0  1903               	skipnz
 11436  0FA1  2BDA               	goto	l4726
 11437  0FA2  2EC9               	goto	l4812
 11438  0FA3                     l5442:
 11439                           
 11440                           ; Switch size 1, requested type "simple"
 11441                           ; Number of cases is 3, Range of values is 96 to 206
 11442                           ; switch strategies available:
 11443                           ; Name         Instructions Cycles
 11444                           ; simple_byte           10     6 (average)
 11445                           ; jumptable            263     9 (fixed)
 11446                           ;	Chosen strategy is simple_byte
 11447  0FA3  087B               	movf	__MenuNav,w
 11448  0FA4  3A60               	xorlw	96	; case 96
 11449  0FA5  1903               	skipnz
 11450  0FA6  2C02               	goto	l4732
 11451  0FA7  3AA4               	xorlw	164	; case 196
 11452  0FA8  1903               	skipnz
 11453  0FA9  2C34               	goto	l646
 11454  0FAA  3A0A               	xorlw	10	; case 206
 11455  0FAB  1903               	skipnz
 11456  0FAC  2C58               	goto	l4750
 11457  0FAD  2EC9               	goto	l4812
 11458  0FAE                     l5444:
 11459                           
 11460                           ; Switch size 1, requested type "simple"
 11461                           ; Number of cases is 1, Range of values is 184 to 184
 11462                           ; switch strategies available:
 11463                           ; Name         Instructions Cycles
 11464                           ; simple_byte            4     3 (average)
 11465                           ; direct_byte           14    11 (fixed)
 11466                           ; jumptable            263     9 (fixed)
 11467                           ;	Chosen strategy is simple_byte
 11468  0FAE  087B               	movf	__MenuNav,w
 11469  0FAF  3AB8               	xorlw	184	; case 184
 11470  0FB0  1903               	skipnz
 11471  0FB1  2CAC               	goto	l4760
 11472  0FB2  2EC9               	goto	l4812
 11473  0FB3                     l5446:
 11474                           
 11475                           ; Switch size 1, requested type "simple"
 11476                           ; Number of cases is 2, Range of values is 28 to 128
 11477                           ; switch strategies available:
 11478                           ; Name         Instructions Cycles
 11479                           ; simple_byte            7     4 (average)
 11480                           ; jumptable            263     9 (fixed)
 11481                           ;	Chosen strategy is simple_byte
 11482  0FB3  087B               	movf	__MenuNav,w
 11483  0FB4  3A1C               	xorlw	28	; case 28
 11484  0FB5  1903               	skipnz
 11485  0FB6  2CAC               	goto	l4760
 11486  0FB7  3A9C               	xorlw	156	; case 128
 11487  0FB8  1903               	skipnz
 11488  0FB9  2CAC               	goto	l4760
 11489  0FBA  2EC9               	goto	l4812
 11490  0FBB                     l5448:
 11491                           
 11492                           ; Switch size 1, requested type "simple"
 11493                           ; Number of cases is 1, Range of values is 160 to 160
 11494                           ; switch strategies available:
 11495                           ; Name         Instructions Cycles
 11496                           ; simple_byte            4     3 (average)
 11497                           ; direct_byte           14    11 (fixed)
 11498                           ; jumptable            263     9 (fixed)
 11499                           ;	Chosen strategy is simple_byte
 11500  0FBB  087B               	movf	__MenuNav,w
 11501  0FBC  3AA0               	xorlw	160	; case 160
 11502  0FBD  1903               	skipnz
 11503  0FBE  2DA7               	goto	l664
 11504  0FBF  2EC9               	goto	l4812
 11505  0FC0                     l5450:
 11506                           
 11507                           ; Switch size 1, requested type "simple"
 11508                           ; Number of cases is 2, Range of values is 4 to 104
 11509                           ; switch strategies available:
 11510                           ; Name         Instructions Cycles
 11511                           ; simple_byte            7     4 (average)
 11512                           ; jumptable            263     9 (fixed)
 11513                           ;	Chosen strategy is simple_byte
 11514  0FC0  087B               	movf	__MenuNav,w
 11515  0FC1  3A04               	xorlw	4	; case 4
 11516  0FC2  1903               	skipnz
 11517  0FC3  2E42               	goto	l668
 11518  0FC4  3A6C               	xorlw	108	; case 104
 11519  0FC5  1903               	skipnz
 11520  0FC6  2E7C               	goto	l672
 11521  0FC7  2EC9               	goto	l4812
 11522  0FC8                     l4818:
 11523                           
 11524                           ;menu.c: 296: if(_MenuNav < 100)
 11525  0FC8  087C               	movf	__MenuNav+1,w
 11526  0FC9  3A80               	xorlw	128
 11527  0FCA  00FF               	movwf	127
 11528  0FCB  3080               	movlw	128
 11529  0FCC  027F               	subwf	127,w
 11530  0FCD  1D03               	skipz
 11531  0FCE  2FD1               	goto	u5725
 11532  0FCF  3064               	movlw	100
 11533  0FD0  027B               	subwf	__MenuNav,w
 11534  0FD1                     u5725:
 11535  0FD1  1803               	skipnc
 11536  0FD2  2FD9               	goto	l4822
 11537                           
 11538                           ;menu.c: 297: fEraseString(str2);
 11539  0FD3  30B2               	movlw	(low (_str2| (0+256)))& (0+255)
 11540  0FD4  160A  158A  2423  120A  158A  	fcall	_fEraseString
 11541  0FD9                     l4822:
 11542                           
 11543                           ;menu.c: 299: LCD_SetPos(0,0);
 11544  0FD9  1283               	bcf	3,5	;RP0=0, select bank0
 11545  0FDA  1303               	bcf	3,6	;RP1=0, select bank0
 11546  0FDB  01AC               	clrf	LCD_SetPos@y
 11547  0FDC  3000               	movlw	0
 11548  0FDD  160A  158A  24CB  120A  158A  	fcall	_LCD_SetPos
 11549                           
 11550                           ;menu.c: 300: LCD_string((char*)str);
 11551  0FE2  30C2               	movlw	(low (_str| (0+256)))& (0+255)
 11552  0FE3  1283               	bcf	3,5	;RP0=0, select bank0
 11553  0FE4  1303               	bcf	3,6	;RP1=0, select bank0
 11554  0FE5  00AE               	movwf	LCD_string@st
 11555  0FE6  3001               	movlw	1
 11556  0FE7  00AF               	movwf	LCD_string@st+1
 11557  0FE8  160A  158A  27B1  120A  158A  	fcall	_LCD_string
 11558                           
 11559                           ;menu.c: 301: LCD_SetPos(0,1);
 11560  0FED  01AC               	clrf	LCD_SetPos@y
 11561  0FEE  0AAC               	incf	LCD_SetPos@y,f
 11562  0FEF  3000               	movlw	0
 11563  0FF0  160A  158A  24CB  120A  158A  	fcall	_LCD_SetPos
 11564                           
 11565                           ;menu.c: 302: LCD_string((char*)str2);
 11566  0FF5  30B2               	movlw	(low (_str2| (0+256)))& (0+255)
 11567  0FF6  1283               	bcf	3,5	;RP0=0, select bank0
 11568  0FF7  1303               	bcf	3,6	;RP1=0, select bank0
 11569  0FF8  00AE               	movwf	LCD_string@st
 11570  0FF9  3001               	movlw	1
 11571  0FFA  00AF               	movwf	LCD_string@st+1
 11572  0FFB  160A  158A  27B1   	fcall	_LCD_string
 11573                           
 11574                           ;menu.c: 303: flClearLCD = 1;
 11575  0FFE  14FA               	bsf	_flClearLCD/(0+8),_flClearLCD& (0+7)
 11576  0FFF  0008               	return
 11577  1000                     __end_of_fMenuStrip:

Data Sizes:
    Strings     389
    Constant    101
    Data        36
    BSS         73
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     10      14
    BANK0            80     80      80
    BANK1            80     34      75
    BANK3            96      0      66
    BANK2            96      0       0

Pointer List with Targets:

    strcat@from	PTR const unsigned char  size(2) Largest target is 8192
		 -> ROM(CODE[8192]), 

    strcat@to	PTR unsigned char  size(1) Largest target is 16
		 -> str2(BANK3[16]), 

    strcat@cp	PTR unsigned char  size(1) Largest target is 16
		 -> str2(BANK3[16]), 

    frexp@eptr	PTR int  size(1) Largest target is 2
		 -> log@exponent(BANK1[2]), 

    eval_poly@d	PTR const  size(2) Largest target is 27
		 -> log@coeff(CODE[27]), 

    sprintf@cp	PTR const unsigned char  size(2) Largest target is 17
		 -> STR_76(CODE[7]), ?_sprintf(BANK0[2]), STR_75(CODE[6]), STR_74(CODE[4]), 
		 -> STR_73(CODE[6]), STR_72(CODE[5]), STR_69(CODE[3]), STR_67(CODE[17]), 
		 -> STR_64(CODE[3]), STR_62(CODE[17]), STR_59(CODE[3]), STR_57(CODE[16]), 
		 -> STR_55(CODE[7]), STR_53(CODE[10]), STR_51(CODE[12]), STR_49(CODE[9]), 
		 -> STR_47(CODE[11]), STR_45(CODE[5]), STR_44(CODE[5]), STR_42(CODE[13]), 
		 -> STR_40(CODE[10]), STR_37(CODE[4]), STR_34(CODE[3]), STR_32(CODE[16]), 
		 -> STR_29(CODE[16]), STR_26(CODE[15]), STR_23(CODE[4]), STR_20(CODE[3]), 
		 -> STR_18(CODE[15]), STR_15(CODE[14]), STR_12(CODE[11]), STR_9(CODE[8]), 
		 -> STR_7(CODE[13]), STR_5(CODE[10]), STR_3(CODE[5]), STR_2(CODE[4]), 

    sprintf@f	PTR const unsigned char  size(2) Largest target is 26
		 -> STR_71(CODE[26]), STR_68(CODE[5]), STR_66(CODE[5]), STR_63(CODE[5]), 
		 -> STR_61(CODE[5]), STR_58(CODE[3]), STR_56(CODE[5]), STR_54(CODE[5]), 
		 -> STR_52(CODE[13]), STR_50(CODE[5]), STR_48(CODE[13]), STR_46(CODE[5]), 
		 -> STR_43(CODE[15]), STR_41(CODE[5]), STR_39(CODE[5]), STR_36(CODE[3]), 
		 -> STR_33(CODE[3]), STR_31(CODE[5]), STR_30(CODE[9]), STR_28(CODE[5]), 
		 -> STR_27(CODE[9]), STR_25(CODE[5]), STR_22(CODE[3]), STR_19(CODE[3]), 
		 -> STR_17(CODE[5]), STR_16(CODE[9]), STR_14(CODE[5]), STR_11(CODE[3]), 
		 -> STR_8(CODE[3]), STR_6(CODE[5]), STR_4(CODE[5]), 

    sprintf@sp	PTR unsigned char  size(1) Largest target is 16
		 -> str2(BANK3[16]), str(BANK3[16]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    sp__strcat	PTR unsigned char  size(1) Largest target is 16
		 -> str2(BANK3[16]), 

    sp__LCD_StringOnOff	PTR unsigned char  size(2) Largest target is 5
		 -> STR_3(CODE[5]), STR_2(CODE[4]), 

    LCD_string@st	PTR unsigned char  size(2) Largest target is 16
		 -> str2(BANK3[16]), str(BANK3[16]), STR_1(CODE[13]), 

    fEraseString@string	PTR unsigned char  size(1) Largest target is 16
		 -> str2(BANK3[16]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _linkup in COMMON

    _linkup->i1___lwmod

Critical Paths under _main in BANK0

    _rTemperature->___awtoft
    _rThermistor->___fttol
    ___lbtoft->___ftpack
    ___fttol->___ftdiv
    ___ftdiv->_eval_poly
    _log->___awtoft
    _eval_poly->___ftadd
    ___ftmul->___ftpack
    ___ftmul->___ftpack
    ___ftadd->___ftmul
    ___awtoft->_rThermistor
    _fMenuStrip->_sprintf
    _sprintf->___lwmod
    ___lwmod->___lwdiv
    ___bmul->___awdiv
    ___awmod->___awdiv
    _SPI_Write->_SPI_notRDY
    _LCD_string->_LCD_SetPos
    _LCD_SetPos->_sendbyte
    _SPI_Read->_SPI_notRDY
    _SPI_notRDY->_SPI_ReadStatus
    _SPI_ReadStatus->_SPI_ReadByte
    _SPI_ReadByte->_SPI_WriteByte
    _LCD_init->_LCD_clear
    _LCD_clear->_sendbyte
    _sendbyte->_sendhalfbyte
    _sendhalfbyte->_fShiftData

Critical Paths under _linkup in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_rTemperature
    _rTemperature->_log
    _rThermistor->___fttol
    _log->___awtoft
    ___awtoft->_rThermistor

Critical Paths under _linkup in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _linkup in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _linkup in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 4     4      0   58952
                                             30 BANK1      4     4      0
                         _LCD_SetPos
                           _LCD_init
                         _LCD_string
                           _SPI_Read
                          _SPI_Write
                           _SPI_init
                               _fACP
                         _fMenuStrip
                         _fShiftData
                               _init
                       _rTemperature
 ---------------------------------------------------------------------------------
 (1) _rTemperature                                        10    10      0   36750
                                             20 BANK1     10    10      0
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                            ___fttol
                                _log
                        _rThermistor
 ---------------------------------------------------------------------------------
 (2) _rThermistor                                          6     4      2   11463
                                             76 BANK0      2     0      2
                                              6 BANK1      4     4      0
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___fttol
                           ___lbtoft
 ---------------------------------------------------------------------------------
 (3) ___lbtoft                                             8     5      3    2008
                                              8 BANK0      8     5      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) ___fttol                                             14    10      4     358
                                             68 BANK0      8     4      4
                                              0 BANK1      6     6      0
                             ___bmul (ARG)
                            ___ftadd (ARG)
                            ___ftdiv (ARG)
                             ___ftge (ARG)
                            ___ftmul (ARG)
                           ___ftpack (ARG)
                          _eval_poly (ARG)
                              _frexp (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftdiv                                             16    10      6    2692
                                             52 BANK0     16    10      6
                             ___bmul (ARG)
                            ___ftadd (ARG)
                             ___ftge (ARG)
                            ___ftmul (ARG)
                           ___ftpack
                           ___ftpack (ARG)
                           ___lbtoft (ARG)
                          _eval_poly (ARG)
                              _frexp (ARG)
 ---------------------------------------------------------------------------------
 (2) _log                                                  6     3      3   16399
                                             14 BANK1      6     3      3
                           ___awtoft
                            ___ftadd
                            ___ftdiv (ARG)
                             ___ftge
                            ___ftmul
                            ___fttol (ARG)
                          _eval_poly
                              _frexp
                        _rThermistor (ARG)
 ---------------------------------------------------------------------------------
 (3) _frexp                                                6     2      4     330
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (3) _eval_poly                                           15     8      7    6946
                                             37 BANK0     15     8      7
                             ___bmul
                            ___ftadd
                            ___ftmul
 ---------------------------------------------------------------------------------
 (3) ___ftmul                                             16    10      6    2818
                                              8 BANK0     16    10      6
                           ___ftpack
                           ___ftpack (ARG)
                              _frexp (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftadd                                             13     7      6    3542
                                             24 BANK0     13     7      6
                             ___bmul (ARG)
                            ___ftmul (ARG)
                           ___ftpack
                           ___ftpack (ARG)
                           ___lbtoft (ARG)
                              _frexp (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftge                                               6     0      6     322
                                              0 BANK0      6     0      6
 ---------------------------------------------------------------------------------
 (3) ___awtoft                                             6     3      3    2183
                                             78 BANK0      2     2      0
                                             10 BANK1      4     1      3
                            ___ftadd (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                           ___ftpack
                            ___fttol (ARG)
                        _rThermistor (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftpack                                             8     3      5    1986
                                              0 BANK0      8     3      5
 ---------------------------------------------------------------------------------
 (1) _init                                                 2     2      0       0
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _fMenuStrip                                           8     8      0   14899
                                             48 BANK0      8     8      0
                         _LCD_SetPos
                    _LCD_StringOnOff
                          _LCD_clear
                         _LCD_string
                          _SPI_Write
                            ___awdiv
                            ___awmod
                             ___bmul
                             ___wmul
                       _fEraseString
                            _sprintf
                             _strcat
 ---------------------------------------------------------------------------------
 (2) _strcat                                               5     3      2     818
                                              0 BANK0      5     3      2
 ---------------------------------------------------------------------------------
 (2) _sprintf                                             38    20     18    5310
                                             14 BANK0     34    16     18
                    _LCD_StringOnOff (ARG)
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
 ---------------------------------------------------------------------------------
 (3) _isdigit                                              2     2      0      68
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4    1050
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (3) ___lwmod                                              6     2      4     373
                                              8 BANK0      6     2      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              8     4      4     268
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (2) _fEraseString                                         1     1      0      49
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (4) ___bmul                                               4     3      1     249
                                              9 BANK0      4     3      1
                            ___awdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___awmod                                              7     3      4     402
                                              9 BANK0      7     3      4
                            ___awdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              9     5      4    1360
                                              0 BANK0      9     5      4
 ---------------------------------------------------------------------------------
 (2) _SPI_Write                                            5     2      3    1920
                                              6 BANK0      5     2      3
                      _SPI_WriteByte
                         _SPI_notRDY
 ---------------------------------------------------------------------------------
 (2) _LCD_string                                           5     3      2    1965
                                             14 BANK0      5     3      2
                         _LCD_SetPos
                           _sendbyte
 ---------------------------------------------------------------------------------
 (3) _LCD_SetPos                                           2     1      1     952
                                             12 BANK0      2     1      1
                           _sendbyte
 ---------------------------------------------------------------------------------
 (2) _LCD_StringOnOff                                      3     2      1     150
                                              0 BANK0      3     2      1
 ---------------------------------------------------------------------------------
 (1) _fACP                                                 2     2      0       0
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _SPI_init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _SPI_Read                                             6     4      2     746
                                              6 BANK0      6     4      2
                       _SPI_ReadByte
                      _SPI_WriteByte
                         _SPI_notRDY
 ---------------------------------------------------------------------------------
 (3) _SPI_notRDY                                           2     2      0     112
                                              4 BANK0      2     2      0
                     _SPI_ReadStatus
 ---------------------------------------------------------------------------------
 (4) _SPI_ReadStatus                                       2     2      0      89
                                              2 BANK0      2     2      0
                       _SPI_ReadByte
                      _SPI_WriteByte
 ---------------------------------------------------------------------------------
 (5) _SPI_ReadByte                                         1     1      0      44
                                              1 BANK0      1     1      0
                      _SPI_WriteByte
 ---------------------------------------------------------------------------------
 (5) _SPI_WriteByte                                        1     1      0      22
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _LCD_init                                             2     2      0    1557
                                             14 BANK0      2     2      0
                          _LCD_clear
                           _sendbyte
                       _sendhalfbyte
 ---------------------------------------------------------------------------------
 (2) _LCD_clear                                            2     2      0     674
                                             12 BANK0      2     2      0
                           _sendbyte
 ---------------------------------------------------------------------------------
 (3) _sendbyte                                             4     3      1     674
                                              8 BANK0      4     3      1
                       _sendhalfbyte
 ---------------------------------------------------------------------------------
 (4) _sendhalfbyte                                         2     2      0     209
                                              6 BANK0      2     2      0
                         _fShiftData
 ---------------------------------------------------------------------------------
 (1) _fShiftData                                           6     6      0      95
                                              0 BANK0      6     6      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _linkup                                               4     4      0     263
                                              6 COMMON     4     4      0
            _fInterruptRecieveDevice
                          i1___lwmod
 ---------------------------------------------------------------------------------
 (8) i1___lwmod                                            6     2      4     263
                                              0 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (8) _fInterruptRecieveDevice                              2     2      0       0
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _LCD_SetPos
     _sendbyte
       _sendhalfbyte
         _fShiftData
   _LCD_init
     _LCD_clear
       _sendbyte
     _sendbyte
     _sendhalfbyte
   _LCD_string
     _LCD_SetPos
     _sendbyte
   _SPI_Read
     _SPI_ReadByte
       _SPI_WriteByte
     _SPI_WriteByte
     _SPI_notRDY
       _SPI_ReadStatus
         _SPI_ReadByte
         _SPI_WriteByte
   _SPI_Write
     _SPI_WriteByte
     _SPI_notRDY
   _SPI_init
   _fACP
   _fMenuStrip
     _LCD_SetPos
     _LCD_StringOnOff
     _LCD_clear
     _LCD_string
     _SPI_Write
     ___awdiv
     ___awmod
       ___awdiv (ARG)
     ___bmul
       ___awdiv (ARG)
     ___wmul
     _fEraseString
     _sprintf
       _LCD_StringOnOff (ARG)
       ___lwdiv (ARG)
       ___lwmod (ARG)
         ___lwdiv (ARG)
       ___wmul (ARG)
       _isdigit (ARG)
     _strcat
   _fShiftData
   _init
   _rTemperature
     ___awtoft
       ___ftadd (ARG)
         ___bmul (ARG)
         ___ftmul (ARG)
           ___ftpack
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___lbtoft (ARG)
           ___ftpack
         _frexp (ARG)
       ___ftdiv (ARG)
         ___bmul (ARG)
         ___ftadd (ARG)
         ___ftge (ARG)
         ___ftmul (ARG)
         ___ftpack (ARG)
         ___ftpack (ARG)
         ___lbtoft (ARG)
         _eval_poly (ARG)
           ___bmul
           ___ftadd
           ___ftmul
         _frexp (ARG)
       ___ftmul (ARG)
       ___ftpack (ARG)
       ___fttol (ARG)
         ___bmul (ARG)
         ___ftadd (ARG)
         ___ftdiv (ARG)
         ___ftge (ARG)
         ___ftmul (ARG)
         ___ftpack (ARG)
         _eval_poly (ARG)
         _frexp (ARG)
       _rThermistor (ARG)
         ___ftadd
         ___ftdiv
         ___ftmul
         ___fttol
         ___lbtoft
     ___ftadd
     ___ftdiv
     ___fttol
     _log
       ___awtoft
       ___ftadd
       ___ftdiv (ARG)
       ___ftge (ARG)
       ___ftmul (ARG)
       ___fttol (ARG)
       _eval_poly (ARG)
       _frexp (ARG)
       _rThermistor (ARG)
     _rThermistor

 _linkup (ROOT)
   _fInterruptRecieveDevice
   i1___lwmod

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK3               60      0      42      10       68.8%
BITBANK3            60      0       0       9        0.0%
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               60      0       0      12        0.0%
BITBANK2            60      0       0      11        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50     22      4B       8       93.8%
BITBANK1            50      0       1       7        1.2%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50     50      50       5      100.0%
BITBANK0            50      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      A       E       1      100.0%
BITCOMMON            E      0       1       0        7.1%
CODE                 0      0       0       0        0.0%
DATA                 0      0      EB       6        0.0%
ABS                  0      0      EB       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%


Microchip Technology PIC Macro Assembler V2.32 build 20210201212658 
Symbol Table                                                                                   Thu Dec 09 22:15:26 2021

               ??_LCD_StringOnOff 0021                                 pc 0002                    ___bmul@product 002B  
                     ?_LCD_SetPos 002C                       _SSPSTATbits 0094                      ___awdiv@sign 0026  
                    ?_rThermistor 006C                                fsr 0004               ___wmul@multiplicand 0022  
                      _SPI_notRDY 1C3C                      ___ftadd@exp1 0044                      ___ftadd@exp2 0043  
                    ___ftadd@sign 0042                     ?_rTemperature 0070                               l200 03D9  
                 SPI_Read@address 0026                               l210 040F                               l212 040A  
                             l205 03F9                               l209 03FE                               l170 1FA8  
                             l164 1F74                               l181 0333                               l190 038F  
                             l167 1F8E                               l194 03AA                               l189 03A4  
                             l358 1CE4                               l800 01B8                               l721 1C1F  
                             l646 0C34                               l815 1D0A                               l672 0E7C  
                             l664 0DA7                               l684 1EEF                               l668 0E42  
                             l686 1EF3                               l687 1EF4                               l793 013A  
                             l778 015D                               _RB3 0033                               _RB4 0034  
                             _RB5 0035                               _RB6 0036                               _log 0635  
                             fsr0 0004                               _str 01C2                               indf 0000  
                    ___awmod@sign 002F                       ?_LCD_string 002E                      ___ftdiv@cntr 005E  
                    ___ftdiv@sign 0063                              l1034 1318                              l1035 1320  
                            l1027 1303                              l1118 152A                              l1058 05D6  
                            l4004 01FD                              l4102 1F21                              l4006 0047  
                            l4022 1D87                              l4120 1F4A                              l4008 0240  
                            l4016 1D73                              l3400 12E8                              l4040 066A  
                            l4114 1F2E                              l4106 1F28                              l4018 1D7D  
                            l3410 1316                              l3402 12ED                              l4034 0659  
                            l4116 1F3C                              l4124 1F55                              l3412 1308  
                            l3500 05B1                              l5102 03B0                              l4064 122F  
                            l4128 1F5D                              l3512 05E8                              l3370 081A  
                            l3434 120D                              l4090 126E                              l4082 125B  
                            l4074 1237                              l4058 1224                              l3610 1C51  
                            l4410 141D                              l3506 05C6                              l5050 0341  
                            l5026 027A                              l5034 02A0                              l3372 081C  
                            l4076 1245                              l3452 1C7E                              l3516 05FA  
                            l3508 05D2                              l5124 03ED                              l5108 03BC  
                            l5132 03EF                              l4086 1266                              l4510 0458  
                            l3526 061D                              l3470 055E                              l3542 0744  
                            l5118 03C7                              l3368 0813                              l3448 1C78  
                            l3616 1D02                              l4512 046C                              l3560 0767  
                            l3536 072E                              l3704 14D9                              l5144 0405  
                            l5080 037B                              l4506 0425                              l3394 12D5  
                            l3466 0557                              l3900 0082                              l4620 096A  
                            l4540 04F4                              l4524 04D2                              l4532 04DC  
                            l3636 1D4D                              l3476 056D                              l3572 078F  
                            l3564 0777                              l3804 1EA6                              l3652 1587  
                            l3740 154B                              l3708 14E3                              l5084 0383  
                            l4462 1D9A                              l3590 1CD4                              l4710 0B89  
                            l4630 09B2                              l4606 0931                              l4550 083E  
                            l4518 049F                              l4526 04D6                              l3398 12DC  
                            l3494 059C                              l3822 14C2                              l3646 1571  
                            l3726 1514                              l3840 1FF7                              l3832 1FCF  
                            l3760 1E6E                              l3920 00D6                              l5440 0F95  
                            l4800 0E4E                              l4712 0B8C                              l4704 0B77  
                            l4624 0978                              l4616 095C                              l4608 0938  
                            l4640 09BE                              l4560 0866                              l3496 05A8  
                            l3488 0587                              l3576 079F                              l3736 153D  
                            l3728 1526                              l3594 1CDC                              l3842 1FB2  
                            l3770 1E8F                              l3922 00EC                              l5450 0FC0  
                            l5442 0FA3                              l5434 0F2F                              l4802 0E5F  
                            l4730 0BED                              l4722 0BB4                              l3690 1DE5  
                            l3498 05AD                              l3674 15CF                              l4468 1DAC  
                            l3588 1CCD                              l3940 012D                              l3932 00FD  
                            l3916 00D4                              l3908 00BF                              l5444 0FAE  
                            l5436 0F79                              l4812 0EC9                              l4732 0C02  
                            l4724 0BC5                              l4708 0B81                              l4572 088A  
                            l4548 0838                              l3668 15B0                              l3846 07CB  
                            l3766 1E84                              l3758 1E60                              l3782 1E2C  
                            l3934 0114                              l3926 00FB                              l4822 0FD9  
                            l5446 0FB3                              l5438 0F8D                              l4750 0C58  
                            l4734 0C04                              l4726 0BDA                              l4718 0BAB  
                            l4670 0ACF                              l4662 0AA5                              l4566 0878  
                            l4654 09EE                              l3686 1DD6                              l3784 1E3A  
                            l3792 1E53                              l3960 0183                              l3944 013C  
                            l5448 0FBB                              l4760 0CAC                              l4744 0C39  
                            l4736 0C15                              l4728 0BDC                              l4680 0AF7  
                            l4816 0F12                              l4584 09EC                              l4488 1754  
                            l3882 1CC6                              l3858 07E6                              l4770 0D23  
                            l4762 0CC0                              l4754 0C63                              l4690 0B1F  
                            l4818 0FC8                              l4666 0AAD                              l4658 0A69  
                            l4578 08C2                              l3788 1E48                              l3980 01CD  
                            l3972 01AA                              l3956 0177                              l4764 0CD1  
                            l4756 0C74                              l4692 0B30                              l4676 0AEE  
                            l4668 0ABE                              l4588 08CE                              ?_log 00D6  
                            l3990 01EA                              l3982 01D1                              l3966 0185  
                            l3894 006D                              l4790 0E25                              l4774 0D68  
                            l4758 0C85                              l4694 0B45                              l4686 0B16  
                            l4598 08F0                              l3984 01D5                              l4776 0D79  
                            l4768 0D12                              l4696 0B47                              l4778 0D8A  
                            l4698 0B58                              l3996 01F9                              l4788 0E14  
                            STR_1 1145                              STR_2 11F0                              STR_3 11E3  
                            STR_4 11DE                              STR_5 1174                              STR_6 11DE  
                            STR_7 112B                              STR_8 11F7                              STR_9 11AD  
                            u4015 1515                              u3225 1EE1                              u4105 1E6F  
                            u4115 1E7B                              u3245 1EF9                              u4125 1E85  
                            u3405 1327                              u3325 12E1                              u4045 1530  
                            u5105 042E                              u3345 12FC                              u4155 1E2F  
                            u5115 0456                              u4085 1E63                              u5205 0508  
                            u5125 0475                              u3365 130F                              u3605 05B2  
                            u4175 1E40                              u5215 0513                              u5135 049D  
                            u4185 1E49                              u4345 00F2                              u5305 0898  
                            u5225 0847                              u5145 04A8                              u3545 0588  
                            u4274 1CBA                              u4275 1CB8                              u4435 01BF  
                            u5315 08CB                              u5235 0852                              u5155 04D0  
                            u3635 05C7                              u4605 125C                              u5405 094C  
                            u3575 059D                              u3735 0778                              u6055 02CA  
                            u5505 09F7                              u5345 08DF                              u5185 04EA  
                            u3745 0780                              u3905 15B1                              u6305 03E5  
                            u6065 02F3                              u5610 0D32                              u4395 01A0  
                            u5515 0A72                              u5355 08EA                              u5195 04FD  
                            u3915 15C2                              u6075 031C                              u5620 0D33  
                            u4565 123A                              u3845 1D0B                              u5445 09AA  
                            u5365 08F9                              u3925 15D0                              u5630 0D3F  
                            u3855 1D12                              u5455 09BB                              u5375 0904  
                            u5640 0D40                              u4585 1246                              u4665 1F31  
                            u5385 0924                              u3785 07A0                              u6185 0399  
                            u5650 0D4C                              u6507 135E                              u4595 1252  
                            u5395 0941                              u3795 07A8                              u5660 0D4D  
                            u6517 136D                              u4685 1F42                              u5725 0FD1  
                            u5485 09CC                              u6285 03D3                              u6437 033B  
                            u5670 0D59                              u6527 137D                              u4695 1F4B  
                            u5495 09D7                              u6447 1438                              u5680 0D5A  
                            u6537 1390                              u6457 1F6D                              u3985 14EB  
                            u6547 13B1                              u6467 1F87                              u6557 1C96  
                            u6477 1FA1                              u6567 0834                              u6487 133F  
                            u6497 134F                              _TMR0 0001                              _TMR2 0011  
                            _cACP 00C7                              _fACP 1F62                              _main 0245  
                    ___ftpack@arg 0020                              _init 13B6                      ___ftpack@exp 0023  
                            _str2 01B2                              btemp 007E                              log@x 00D6  
                            start 000E            __end_of_SPI_ReadStatus 1C64                __size_of_LCD_clear 0015  
                   _SPI_WriteByte 1C1C                 ___bmul@multiplier 002C                      ___ftmul@cntr 0036  
                    ___ftmul@sign 0037                      ___fttol@exp1 00CD                             ??_log 00D9  
                    ___fttol@lval 00C9                       LCD_SetPos@x 002D                       LCD_SetPos@y 002C  
                           ?_fACP 0070                  __end_of_LCD_init 13B6                    ??_rTemperature 0070  
                           ?_main 0070                             ?_init 0070                   __end_of___awdiv 1273  
                           _ADRES 001E                   __end_of___ftadd 0635                             STR_10 11FA  
                           STR_11 11F7                             STR_20 11F4                             STR_12 1169  
                           STR_21 11FA                             STR_13 11FA                             STR_30 119B  
                           STR_22 11F7                             STR_14 11DE                             STR_31 11DE  
                           STR_23 11E8                             STR_15 1110                             STR_24 11FA  
                           STR_16 1192                             STR_40 117E                             STR_32 10C3  
                           STR_33 11F7                             STR_41 11DE                             STR_25 11DE  
                           STR_17 11DE                             STR_34 11F4                             STR_50 11DE  
                           STR_42 111E                             STR_18 10F2                             STR_26 10E3  
                           STR_35 11FA                             STR_19 11F7                             STR_27 119B  
                           STR_51 1152                             STR_43 1101                             STR_60 11FA  
                           STR_52 1138                             STR_36 11F7                             STR_28 11DE  
                           STR_44 11D4                   __end_of___awmod 1F62                             STR_37 11E8  
                           STR_61 11DE                             STR_45 11D9                             STR_53 1188  
                           STR_29 10B3                             STR_70 11FA                             STR_38 11FA  
                           STR_54 11DE                             STR_46 11DE                             STR_62 1091  
                           STR_63 11DE                             STR_39 11DE                             STR_55 11BC  
                           STR_47 115E                             STR_71 1077                             STR_64 11F4  
                           STR_56 11DE                             STR_72 11CF                             STR_48 1138  
                           STR_65 11FA                             STR_73 11C9                             STR_49 11A4  
                           STR_57 10D3                             STR_58 11F7                             STR_66 11DE  
                           STR_74 11EC                             STR_59 11F4                             STR_75 11C3  
                           STR_67 10A2                             STR_68 11DE                             STR_76 11B5  
                           STR_69 11F4                   __end_of___ftdiv 15F3                   __end_of___ftmul 07CB  
                 ___awdiv@divisor 0020                   __end_of___fttol 155B                   __end_of___lwdiv 1E94  
                           i1l161 1745                             i1l146 16CC                             i1l441 1622  
                 __end_of___lwmod 1E58                             i1l442 161F                             i1l445 162F  
                           i1l455 167D                             i1l447 1670                             i1l439 1608  
                           i1l448 1661                   ___awdiv@counter 0025                             _TMR1H 000F  
                           _TMR1L 000E                             _SPBRG 0099                             _PORTA 0005  
                           _PORTB 0006                             _PORTC 0007                             _cTMR0 00C1  
                           _flDO1 03D5                i1___lwmod@dividend 0072                __settingTimeImpDO1 00B4  
                   ___awtoft@sign 00D5                             __hour 0750                   __end_of_dpowers 105C  
                SPI_ReadByte@data 0021                             _frexp 1E94                             _errno 00A8  
                  _SPI_Write$1308 0029                   __end_of_isdigit 1C53                     ___ftpack@sign 0024  
                __end_of_SPI_Read 1DC7                    __pbitbssCOMMON 03D0                             pclath 000A  
                __end_of_SPI_init 1CB2               __size_of_LCD_SetPos 001A                __settingTimerOnDO2 00B2  
                           status 0003                             wtemp0 007E                   __end_of_sprintf 0245  
                    rThermistor@A 00CE                __size_of_SPI_Write 0034                __size_ofi1___lwmod 0032  
                 ?_SPI_ReadStatus 0070                      SPI_Read@data 002B                    ?_SPI_WriteByte 0070  
                    __end_of_fACP 1FB1                   __initialization 0011                       log@exponent 00DA  
             __size_of_LCD_string 004F                      __end_of_main 041B                     __cellTwoDigit 00BB  
                    __end_of_init 143E                fShiftData@shiftVar 0022                            ??_fACP 0020  
                     ?_SPI_notRDY 0070                      __flashSecond 0751                            ??_main 00E6  
                   ___fttol@sign1 00C8                            ??_init 0020                 __end_of_LCD_clear 1C9C  
                     LCD_string@i 0032                            ?_frexp 0020                  SPI_Write@address 0026  
                ___awdiv@dividend 0022                  __end_of___awtoft 1D6E                  __end_of___ftpack 1339  
                __end_of___lbtoft 1D00                            i1l4200 165D                            i1l5004 1743  
                          i1l4240 1695                            i1l4166 161B                            i1l4194 1650  
                          i1l4900 1E16                            i1l4904 1E21                            i1l4940 16C3  
                          i1l4916 16A8                            __100ms 0754                            i1l4936 16BD  
                          i1l4970 170A                            i1l4980 171C                            i1l4894 1DFA  
                          i1l4896 1E08                            i1l4992 1730                            i1l4968 1708  
                          i1l4986 1726                            i1l4998 173D                            __250ms 0753  
                          __500ms 0752                            u574_25 1DFD                            u576_25 1E0E  
                          u577_25 1E17                            u657_27 1699                            _SHRIFT 1012  
             LCD_StringOnOff@numb 0020                            _SSPBUF 0013                            _Analog 00A4  
                          ___bmul 1C75                            ___ftge 1DC7                            ___wmul 1D00  
                       ??___awdiv 0024                         ??___ftadd 003E                         ??___awmod 002D  
                       ??___ftdiv 005A                            _arrCmd 00A0                         ??___ftmul 002E  
                       ??___fttol 0068                         ??___lwdiv 0024                         ??___lwmod 002C  
                    __countSecond 00B6                            _linkup 169F                  ___awdiv@quotient 0027  
                 ___awmod@divisor 0029                   ___awmod@counter 002E                            _strcat 1D6E  
            __size_of_rThermistor 005A             ___ftmul@f3_as_product 0033                 __end_of_SPI_Write 07FF  
                __end_of_sendbyte 121A                      __pdataCOMMON 007B                 __end_ofi1___lwmod 1E26  
                       ??_isdigit 0020                            saved_w 007E               __settingTimerOffDO2 00B0  
                       ??_sprintf 0040                        _fMenuStrip 041B                   _LCD_StringOnOff 1CB2  
                __end_oflog@coeff 1077           __end_of__initialization 003E                        ___ftadd@f1 0038  
                      ___ftadd@f2 003B                   ??_SPI_WriteByte 0020              __end_of_rTemperature 1800  
                      ___ftge@ff1 0020                        ___ftge@ff2 0023               __size_of_SPI_notRDY 0009  
                       ?_LCD_init 0070                      eval_poly@res 0051                        ___ftdiv@f1 0057  
                      ___ftdiv@f2 0054                        ___ftdiv@f3 005F                        _fShiftData 1ED4  
                      ___awtoft@c 00D2                        ___lbtoft@c 002F               ___bmul@multiplicand 0029  
                      ___ftmul@f1 0028                        ___ftmul@f2 002B                        ___fttol@f1 0064  
                  __pcstackCOMMON 0070                      __pidataBANK3 1D21                      ??_LCD_SetPos 002D  
                   __end_of_frexp 1ED4                         ?_SPI_Read 0026          ?_fInterruptRecieveDevice 0070  
                       ?_SPI_init 0070                        _flClearLCD 03D1              rTemperature@analogAI 00E5  
                  _OPTION_REGbits 0081                 LCD_StringOnOff@st 0022                      ??_LCD_string 0030  
                      __firstCell 00BD                           ??_frexp 0024                      sprintf@width 004C  
                      __pbssBANK1 00A0                        __pbssBANK3 01B2                        _flModeStep 007D  
              __size_of_eval_poly 008B                  LCD_string@symbol 0031                __end_of_LCD_SetPos 1CE5  
                      ??_LCD_init 002E                      LCD_string@st 002E                        __pmaintext 0245  
                         ?___bmul 0029                           ?___ftge 0020                        __tempDigit 00AA  
                      __tempPinDO 00C3                           ?___wmul 0020                __end_of_LCD_string 2000  
                      __pintentry 0004                           ?_linkup 0070                         ?___awtoft 00D2  
                       ?___ftpack 0020                         ?___lbtoft 0028                        ??_SPI_Read 0028  
                         ?_strcat 0020                        ??_SPI_init 0020                     ?_sendhalfbyte 0070  
                         _GO_DONE 00FA           __end_of_LCD_StringOnOff 1CCB                       ?_fMenuStrip 0070  
                      __stringtab 1000                  ??_SPI_ReadStatus 0022                       ?_fShiftData 0070  
                   SPI_Write@data 0028                         ?_sendbyte 0028   __end_of_fInterruptRecieveDevice 169F  
                 __size_of___bmul 0012                   __size_of___ftge 002D                           ___awdiv 121A  
                         ___ftadd 0530                           ___awmod 1F17                           ___ftdiv 155B  
                 __size_of___wmul 0021                           ___ftmul 0718                           ___fttol 14C9  
               SPI_WriteByte@data 0020                      __settingsBit 00C4                           ___lwdiv 1E58  
                         ___lwmod 1E26                  SPI_notRDY@notRDY 0025                           _carrCmd 00BF  
                   ?_fEraseString 0070                        ??___awtoft 006E                        ??___ftpack 0025  
                      ??___lbtoft 002B                 __end_of_eval_poly 14C9                           __minute 03D6  
                    ??_SPI_notRDY 0024                           __second 03D7                   __size_of_linkup 00AF  
                         __ptext1 174E                           __ptext2 1273                           __ptext3 1CE5  
                         __ptext4 14C9                           __ptext5 155B                           __ptext6 0635  
                  ??_sendhalfbyte 0026                           __ptext7 1E94                           __ptext8 143E  
                         __ptext9 0718                       __SubMenuArr 0190                   __size_of_strcat 002C  
                       _T1CONbits 0010                           _counter 00C6                           _dpowers 1052  
                       _T2CONbits 0012                      __size_of_log 00E3                           _isdigit 1C45  
                ___awmod@dividend 002B                 __countTMR2trigger 00C5                           _sprintf 0042  
           __size_of_rTemperature 00B2                           clrloop0 1C2C                         _LCD_clear 1C87  
            end_of_initialization 003E                __end_of_SPI_notRDY 1C45                        ??_sendbyte 0029  
                       _RCSTAbits 0018                           psplit$0 210041  
                  _flSwitchButton 03D0                      __pstringtext 1000                    ??_fEraseString 0020  
             __size_of_fMenuStrip 0BE5           fShiftData@shiftVariable 0023                         _PORTAbits 0005  
                       _PORTBbits 0006                      _rTemperature 174E               __size_of_fShiftData 0043  
                       _TRISAbits 0085                         _TRISBbits 0086                  ?_LCD_StringOnOff 0020  
                       _TRISCbits 0087                         _SPI_Write 07CB                         i1___lwmod 1DF4  
                      ?_LCD_clear 0070                       ___ftdiv@exp 0062                         _TXSTAbits 0098  
                  __end_of_SHRIFT 1052                     ?_SPI_ReadByte 0070                 __size_of_LCD_init 007D  
                     ___ftmul@exp 0032                    __end_of___bmul 1C87                    __end_of___ftge 1DF4  
                   ??_rThermistor 006E                    __end_of___wmul 1D21               rThermistor@analogAI 00D1  
                   __pidataCOMMON 1C1A                 i1___lwmod@divisor 0070                     __pbitbssBANK1 0750  
               i1___lwmod@counter 0075                    __end_of_linkup 174E                 __size_of_SPI_Read 002D  
                  __end_of_strcat 1D9A               start_initialization 0011                 __size_of_SPI_init 0016  
                      eval_poly@d 0048                        eval_poly@n 004A                        eval_poly@x 0045  
                   sendhalfbyte@c 0027                       __end_of_log 0718                        ?_SPI_Write 0026  
                      ?i1___lwmod 0070  __size_of_fInterruptRecieveDevice 00AC                        frexp@value 0020  
            __end_of_sendhalfbyte 0838                    ??_SPI_ReadByte 0021             __end_of_SPI_WriteByte 1C23  
                        ??___bmul 002A                          ??___ftge 0026                          ??___wmul 0024  
                      init_fetch0 1C64                       fShiftData@i 0025                       __pdataBANK3 0190  
                _flStopBitRecieve 03D3                          ??_linkup 0076                          ??_strcat 0022  
               __size_of___awtoft 002B                 __size_of___ftpack 006C                fEraseString@string 0020  
               __size_of___lbtoft 001B                       _flMenuStrip 00BE                         _cQuantity 00C0  
                     __pbssCOMMON 007D               __end_of_rThermistor 12CD                         ___latbits 0002  
                   __pcstackBANK0 0020                     __pcstackBANK1 00C8                      _isdigit$1566 0020  
                    ??_fMenuStrip 0050                       ??_LCD_clear 002C                    _temperatureAI1 00B9  
                  _temperatureAI2 00B8              __end_of_fEraseString 1C2B                 _rTemperature$1775 00DC  
               _rTemperature$1776 00DF                 _rTemperature$1777 00E2                       sprintf@flag 0046  
                     sprintf@prec 0043                       __secondCell 00BC                      ??_fShiftData 0020  
                ___lwdiv@dividend 0022                         __timerDO1 00AE                         __timerDO2 00AC  
                        ?___awdiv 0020                          ?___ftadd 0038                          ?___awmod 0029  
               __size_of_sendbyte 001E                          ?___ftdiv 0054                          ?___ftmul 0028  
                        ?___fttol 0064                          ?___lwdiv 0020                          ?___lwmod 0028  
              __end_of_fMenuStrip 1000                          ?_isdigit 0070                         _eval_poly 143E  
            SPI_ReadStatus@status 0023                        sendbyte@hb 002A                __end_of_fShiftData 1F17  
                     ??_SPI_Write 0029                  ___lwdiv@quotient 0025                       ??i1___lwmod 0074  
                      pnum$text15 0021                          ?_sprintf 002E                    __size_of_frexp 0040  
               interrupt_function 0004                    ___wmul@product 0024                          _LCD_init 1339  
                       clear_ram0 1C2B                          _PIE1bits 008C                          _PIE2bits 008D  
                        _PIR1bits 000C                     __tempTwoDigit 00BA                       _rThermistor 1273  
                       main@SPI_i 00E9                          _SPI_Read 1D9A                        _ADCON0bits 001F  
                     __stringbase 1012                        _ADCON1bits 009F                 ___wmul@multiplier 0020  
                        _SPI_init 1C9C                        ?_eval_poly 0045              __end_of_SPI_ReadByte 1C3C  
         _fInterruptRecieveDevice 15F3             __size_of_sendhalfbyte 0038                         frexp@eptr 0023  
                        __MenuArr 01A8                          __MenuNav 007B           __size_of_SPI_ReadStatus 0011  
                    sendbyte@mode 0028                  __size_of___awdiv 0059                  __size_of___ftadd 0105  
                __size_of___awmod 004B                  __size_of___ftdiv 0098                  __size_of___ftmul 00B3  
                __size_of___fttol 0092                  __size_of___lwdiv 003C                  __size_of___lwmod 0032  
                        ___awtoft 1D43                          ___ftpack 12CD                          ___lbtoft 1CE5  
              __end_of__stringtab 1012                      _sendhalfbyte 0800                        sprintf@len 0048  
                      sprintf@val 004A                        strcat@from 0020                  __size_of_isdigit 000E  
                        _flUpdate 03D2             __size_of_fEraseString 0008                   ___lwdiv@divisor 0020  
                 ___lwdiv@counter 0027                          __ptext10 0530                          __ptext11 1DC7  
                        __ptext20 1E26                          __ptext12 1D43                          __ptext21 1E58  
                        __ptext13 12CD                          __ptext30 1F62                          __ptext22 1C23  
                        __ptext14 13B6                          __ptext31 1C9C                          __ptext23 1C75  
                        __ptext15 041B                          __ptext40 0800                          __ptext32 1D9A  
                        __ptext24 1F17                          __ptext16 1D6E                          __ptext41 1ED4  
                        __ptext33 1C3C                          __ptext25 121A                          __ptext17 0042  
                        __ptext42 169F                          __ptext34 1C53                          __ptext26 07CB  
                        __ptext18 1C45                          __ptext43 1DF4                          __ptext35 1C33  
                        __ptext27 1FB1                          __ptext19 1D00                          __ptext44 15F3  
                        __ptext36 1C1C                          __ptext28 1CCB                          __ptext37 1339  
                        __ptext29 1CB2                          __ptext38 1C87                          __ptext39 11FC  
                __size_of_sprintf 0203                     __size_of_fACP 004F                         sendbyte@c 002B  
        __size_of_LCD_StringOnOff 0019                     __size_of_main 01D6                     __size_of_init 0088  
                        _sendbyte 11FC                 _flStartBitRecieve 03D4                        _LCD_SetPos 1CCB  
                    _fEraseString 1C23                pnum$text15_split_1 0041                          log@coeff 105C  
                      _INTCONbits 000B                       ??_eval_poly 004C         ??_fInterruptRecieveDevice 0070  
                      _LCD_string 1FB1                          init_ram0 1C68                          isdigit@c 0021  
                        intlevel1 0000                         sprintf@ap 0047                         sprintf@cp 0044  
                       sprintf@sp 004F                  ___lwmod@dividend 002A                         stringcode 100A  
           __size_of_SPI_ReadByte 0009                          sprintf@c 004E                          sprintf@f 002E  
                        strcat@cp 0023                          strcat@to 0024                   ___lwmod@divisor 0028  
                 ___lwmod@counter 002D                          stringtab 1000            __size_of_SPI_WriteByte 0007  
                      _TMR0_Value 00C2                     _SPI_Read$1311 0029                        _SSPCONbits 0014  
                    _SPI_ReadByte 1C33                    _SPI_ReadStatus 1C53  
